{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  true\n  >>> hasUniqueElements([1, 2, 3])\n  false\n  */\nconst hasUniqueElements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also checks order of elements.\n * >>> hasUniqueElements([1, 3, 2])\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_closed = false;\n  let current_group_content = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_open) {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = false;\n        current_group_content += char;\n      } else {\n        group_open = true;\n        current_group_open = true;\n        current_group_closed = false;\n        current_group_content += char;\n      }\n    } else if (char === ')') {\n      if (group_closed) {\n        group_open = false;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      } else {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      }\n    } else if (char ==='') {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    } else {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    }\n  }\n  if (current_group_open) {\n    groups.push(current_group_content);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup2 = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_closed = false;\n  let current_group_content = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_open) {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = false;\n        current_group_content += char;\n      } else {\n        group_open = true;\n        current_group_open = true;\n        current_group_closed = false;\n        current_group_content += char;\n      }\n    } else if (char === ')') {\n      if (group_closed) {\n        group_open = false;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      } else {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      }\n    } else if (char ==='') {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    } else {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    }\n  }\n  if (current_group_open) {\n    groups.push(current_group_content);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup3 = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_closed = false;\n  let current_group_content = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_open) {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = false;\n        current_group_content += char;\n      } else {\n        group_open = true;\n        current_group_open = true;\n        current_group_closed = false;\n        current_group_content += char;\n      }\n    } else if (char === ')') {\n      if (group_closed) {\n        group_open = false;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      } else {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      }\n    } else if (char ==='') {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    } else {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    }\n  }\n  if (current_group_open) {\n    groups.push(current_group_content);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup4 = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_closed = false;\n  let current_group_content = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      if (group_open) {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = false;\n        current_group_content += char;\n      } else {\n        group_open = true;\n        current_group_open = true;\n        current_group_closed = false;\n        current_group_content += char;\n      }\n    } else if (char === ')') {\n      if (group_closed) {\n        group_open = false;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      } else {\n        group_closed = true;\n        current_group_open = false;\n        current_group_closed = true;\n        current_group_content += char;\n      }\n    } else if (char ==='') {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    } else {\n      if (current_group_open) {\n        current_group_content += char;\n      } else if (current_group_closed) {\n        groups.push(current_group_content);\n        current_group_content = '';\n      }\n    }\n  }\n  if (current_group_open) {\n    groups.push(current_group_content);\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const reversedPrefixString = longestPalindrome.slice(0, longestPalindrome.length - 1);\n  const reversedSuffixString = longestPalindrome.slice(longestPalindrome.length - 1);\n  return string + reversedPrefixString + reversedSuffixString;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = string.split('');\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  for (let i = 0; i < longestPalindrome.length; i++) {\n    const currentChar = longestPalindrome[i];\n    const currentCharLength = currentChar.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromeIndex = i;\n    }\n  }\n  return longestPalindrome.slice(0, longestPalindromeIndex + 1);\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  const longestPalindrome = string.split('');\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  for (let i = 0; i < longestPalindrome.length; i++) {\n    const currentChar = longestPalindrome[i];\n    const currentCharLength = currentChar.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromeIndex = i;\n    }\n  }\n  return longestPalindrome.slice(0, longestPalindromeIndex + 1);\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  const longestPalindrome = string.split('');\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  for (let i = 0; i < longestPalindrome.length; i++) {\n    const currentChar = longestPalindrome[i];\n    const currentCharLength = currentChar.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromeIndex = i;\n    }\n  }\n  return longestPalindrome.slice(0, longestPalindromeIndex + 1);\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  const longestPalindrome = string.split('');\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  for (let i = 0; i < longestPalindrome.length; i++) {\n    const currentChar = longestPalindrome[i];\n    const currentCharLength = currentChar.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromeIndex = i;\n    }\n  }\n  return longestPalindrome.slice(0, longestPalindromeIndex + 1);\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst findShortestPalindrome = (string) => {\n  const longestPalindrome = string.split('');\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  for (let i = 0; i < longestPalindrome.length; i++) {\n    const currentChar = longestPalindrome[i];\n    const currentCharLength = currentChar.length;\n    if (currentCharLength > longestPalindromeLength) {\n      longestPalindromeLength = currentCharLength;\n      longestPalindromeIndex = i;\n    }\n  }\n  return longestPalindrome.slice(0, longestPalindromeIndex + 1);\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findShortestPalindrome('')\n  ''\n  >>> findShortestPalindrome('cat')\n  'cat'\n  >>> findShortestPalindrome('cata')\n  'cat'\n  */\nconst ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let stones = 1;\n  if (n % 2 === 0) {\n    stones = n;\n  } else {\n    stones = n + 1;\n  }\n  let levels = [];\n  for (let i = 1; i <= stones; i++) {\n    levels.push(stones);\n    stones *= 2;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  return s.split(',').map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  wordString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWordString = (s) => {\n  return s.split(',').map(w => w.trim()).reverse();\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that start with a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  startLetter(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  startLetter(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst startLetter = (s, letter) => {\n  return s.split(',').filter(w => w.startsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that end with a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  endLetter(\"Hi, my name is John\", \"n\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  endLetter(\"One, two, three, four, five, six\", \"o\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst endLetter = (s, letter) => {\n  return s.split(',').filter(w => w.endsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that contain a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  letterContains(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  letterContains(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst letterContains = (s, letter) => {\n  return s.split(',').filter(w => w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that contain a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  letterContains(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  letterContains(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst letterContains = (s, letter) => {\n  return s.split(',').filter(w => w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that contain a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  letterContains(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  letterContains(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst letterContains = (s, letter) => {\n  return s.split(',').filter(w => w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that contain a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  letterContains(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  letterContains(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst letterContains = (s, letter) => {\n  return s.split(',').filter(w => w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that contain a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  letterContains(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  letterContains(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst letterContains = (s, letter) => {\n  return s.split(',').filter(w => w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of all the words that contain a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(10, Math.ceil(Math.log10(sum)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          result.push(digit);\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            result.push(digit);\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            result.push(digit);\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              result.push(digit);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    } else {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              if (digit % 2!== 0) {\n                result.push(digit);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOdd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .padStart(reversed[i].toString().length, '0')\n       .replace(/^0*/, () => byLength.One)\n       .replace(/^1*/, () => byLength.Two)\n       .replace(/^2*/, () => byLength.Three)\n       .replace(/^3*/, () => byLength.Four)\n       .replace(/^4*/, () => byLength.Five)\n       .replace(/^5*/, () => byLength.Six)\n       .replace(/^6*/, () => byLength.Seven)\n       .replace(/^7*/, () => byLength.Eight)\n       .replace(/^8*/, () => byLength.Nine)\n    );\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n  [[1, 5, 8, 2, 3], \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorial.push(i);\n    } else {\n      factorial.push(factorial[i - 1] * i);\n    }\n  }\n  return factorial;\n};\n\n// TESTS\nconsole.log(`f(5) == ${f(5)}`);\nconsole.log(`f(10) == ${f(10)}`);\nconsole.log(`f(20) == ${f(20)}`);\nconsole.log(`f(30) == ${f(30)}`);\nconsole.log(`f(40) == ${f(40)}`);\nconsole.log(`f(50) == ${f(50)}`);\nconsole.log(`f(60) == ${f(60)}`);\nconsole.log(`f(70) == ${f(70).join(', ')}`);\nconsole.log(`f(80) == ${f(80).join(', ')}`);\nconsole.log(`f(90) == ${f(90).join(', ')}`);\nconsole.log(`f(100) == ${f(100).join(', ')}`);\nconsole.log(`f(1000) == ${f(1000).join(', ')}`);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a tags=javascript,factorial |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a tags=javascript,factorial |>\n<| a tags=javascript,factorial |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a tags=javascript,factorial |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a tags=javascript,factorial |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));\nconsole.log(factorial(10));\nconsole.log(factorial(20));\nconsole.log(factorial(30));\nconsole.log(factorial(40));\nconsole.log(factorial(50));\nconsole.log(factorial(60));\nconsole.log(factorial(70));\nconsole.log(factorial(80));\nconsole.log(factorial(90));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));</code>\n<|/ a tags=javascript,factorial |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums2 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums2([]) == 0\n  >>> countNums2([-1, 11, -11]) == 1\n  >>> countNums2([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums3 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums3([]) == 0\n  >>> countNums3([-1, 11, -11]) == 1\n  >>> countNums3([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums4 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums4([]) == 0\n  >>> countNums4([-1, 11, -11]) == 1\n  >>> countNums4([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums5 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums5([]) == 0\n  >>> countNums5([-1, 11, -11]) == 1\n  >>> countNums5([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums6 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums6([]) == 0\n  >>> countNums6([-1, 11, -11]) == 1\n  >>> countNums6([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums7 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums7([]) == 0\n  >>> countNums7([-1, 11, -11]) == 1\n  >>> countNums7([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums8 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums8([]) == 0\n  >>> countNums8([-1, 11, -11]) == 1\n  >>> countNums8([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums9 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums9([]) == 0\n  >>> countNums9([-1, 11, -11]) == 1\n  >>> countNums9([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums10 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums10([]) == 0\n  >>> countNums10([-1, 11, -11]) == 1\n  >>> countNums10([1, 1, 2]) == 3\n  */\nconst countNums10 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums11 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums11([]) == 0\n  >>> countNums11([-1, 11, -11]) == 1\n  >>> countNums11([1, 1, 2]) == 3\n  */\nconst countNums11 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums12 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums12([]) == 0\n  >>> countNums12([-1, 11, -11]) == 1\n  >>> countNums12([1, 1, 2]) == 3\n  */\nconst countNums12 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums13 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let sortedArray = arr.sort((a, b) => a - b);\n  let sortedArrayLength = sortedArray.length;\n  let sortedArrayLastIndex = sortedArrayLength - 1;\n  let sortedArrayFirstIndex = 0;\n  let sortedArrayLastElement = sortedArray[sortedArrayLastIndex];\n  let sortedArrayFirstElement = sortedArray[sortedArrayFirstIndex];\n  let sortedArrayLastElementIndex = sortedArray.length - 1;\n  let sortedArrayFirstElementIndex = 0;\n  let sortedArrayLastElementIndex = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLast = sortedArray.length - 1;\n  let sortedArrayFirstElementIndexFirst = 0;\n  let sortedArrayLastElementIndexFirst = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirst = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexLastFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndexFirstLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLastLast = sortedArray.length - 1;\n  let sortedArrayLastElementIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/**\n * Returns true if two strings are equal, false otherwise.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result will be true.\n * If two strings are equal the result ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  let even = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2 === 0) {\n      even = false;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesOdd = (lst1, lst2) => {\n  let odd = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      odd = false;\n      break;\n    }\n  }\n  if (odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesEven = (lst1, lst2) => {\n  let even = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2 === 0) {\n      even = true;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesOddEven = (lst1, lst2) => {\n  let odd = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      odd = false;\n      break;\n    }\n  }\n  if (odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesEvenOdd = (lst1, lst2) => {\n  let even = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2 === 0) {\n      even = true;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesOddEvenOdd = (lst1, lst2) => {\n  let odd = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      odd = false;\n      break;\n    }\n  }\n  if (odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesEvenOddEven = (lst1, lst2) => {\n  let even = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      even = true;\n      break;\n    }\n  }\n  if (even) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangesOddEvenOddEven = (lst1, lst2) => {\n  let odd = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {}\n  test.split(' ').forEach(letter => {\n    histogram[letter] = histogram[letter]? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i)\n      s = s.substr(1)\n    } else {\n      result += s.charAt(i)\n    }\n  }\n  return [result, s === result]\n}\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst palindrome = (s, c) => {\n  let result = ''\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i)\n      s = s.substr(1)\n    } else {\n      result += s.charAt(i)\n    }\n  }\n  return [result, s === result]\n}\n\n/*Task\n  You are given a string s and an integer k. You have to find the longest palindromic substring in s whose length is less than or equal to k.\n  You should return the substring as a string and true/false for the check.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"bbbbb\", k = 3, the result should be \"bb\".\n  For s = \"pwwkew\", k = 1  the result should be \"wke\".\n  For s = \"abcabcbb\", k = 3, the result should be \"abcbb\".\n  For s = \"bbbbb\", k = 3, the result should be \"bb\".\n  For s = \"pwwkew\", k = 1  the result should be \"wke\".\n  */\nconst longestPalindrome = (s, k) => {\n  let result = ''\n  let index = 0\n  let isPalindrome = true\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(s.length - 1 - i)) {\n      result += s.charAt(i)\n      index = i\n      isPalindrome = true\n    } else {\n      result += s.charAt(i)\n      isPalindrome = false\n    }\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, false]\n  }\n  if (isPalindrome && s.length <= k) {\n    return [result, true]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        oddCount++;\n      }\n    }\n    oddCountArr.push(oddCount);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n    }\n    evenCountArr.push(evenCount);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenOddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenOddCount++;\n      } else if (lst[i][j] % 2!== 0) {\n        evenOddCount++;\n      }\n    }\n    evenOddCountArr.push(evenOddCount);\n  }\n  return evenOddCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the sum of the digits in the i'th string of the input.\"\n\n  >>> sumOfDigits(['1234567'])\n  [\"the sum of the digits in the str4ng 4 of the 4nput.\"]\n  >>> sumOfDigits(['3',\"11111111\"])\n  [\"the sum of the digits in the str1ng 1 of the 1nput.\",\n   \"the sum of the digits in the str8ng 8 of the 8nput.\"]\n  */\nconst sumOfDigits = (lst) => {\n  let sumOfDigitsArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sumOfDigits += parseInt(lst[i][j]);\n    }\n    sumOfDigitsArr.push(sumOfDigits);\n  }\n  return sumOfDigitsArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string of the input.\"\n\n  >>> productOfDigits(['1234567'])\n  [\"the product of the digits in the str4ng 4 of the 4nput.\"]\n  >>> productOfDigits(['3',\"11111111\"])\n  [\"the product of the digits in the str1ng 1 of the 1nput.\",\n   \"the product of the digits in the str8ng 8 of the 8nput.\"]\n  */\nconst productOfDigits = (lst) => {\n  let productOfDigitsArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let productOfDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      productOfDigits *= parseInt(lst[i][j]);\n    }\n    productOfDigitsArr.push(productOfDigits);\n  }\n  return productOfDigitsArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string of the input.\"\n\n  >>> productOfDigits(['1234567'])\n  [\"the product of the digits in the str4ng 4 of the 4nput.\"]\n  >>> productOfDigits(['3',\"11111111\"])\n  [\"the product of the digits in the str1ng 1 of the 1nput.\",\n   \"the product of the digits in the str8ng 8 of the 8nput.\"]\n  */\nconst productOfDigits = (lst) => {\n  let productOfDigitsArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let productOfDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      productOfDigits *= parseInt(lst[i][j]);\n    }\n    productOfDigitsArr.push(productOfDigits);\n  }\n  return productOfDigitsArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the sum of the digits in the i'th string of the input.\"\n\n  >>> sumOfDigits(['1234567'])\n  [\"the sum of the digits in the str4ng 4 of the 4nput.\"]\n  >>> sumOfDigits(['3',\"11111111\"])\n  [\"the sum of the digits in the str1ng 1 of the 1nput.\",\n   \"the sum of the digits in the str8ng 8 of the 8nput.\"]\n  */\nconst sumOfDigits = (lst) => {\n  let sumOfDigitsArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sumOfDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sumOfDigits += parseInt(lst[i][j]);\n    }\n    sumOfDigitsArr.push(sumOfDigits);\n  }\n  return sumOfDigitsArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th string of the input.\"\n\n  >>> productOfDigits(['1234567'])\n  [\"the product of the digits in the str4ng 4 of the 4nput.\"]\n  >>> productOfDigits(['3',\"11111111\"])\n  [\"the product of the digits in the str1ng 1 of the 1nput.\",\n   \"the product of the digits in the str8ng 8 of the 8nput.\"]\n  */\nconst productOfDigits = (lst) => {\n  let productOfDig", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const minSum = Number.MAX_SAFE_INTEGER;\n  const minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums[i] + nums[minSumIndex];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n      minSumIndex = i;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 6\n  maxSubsArraySums([-1, -2, -3]) == -3\n  */\nconst maxSubsArraySums = (nums) => {\n  const maxSum = Number.MIN_SAFE_INTEGER;\n  const maxSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums[i] + nums[maxSumIndex];\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxSumIndex = i;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array\n  of nums.\n  Example\n  subsArraySums([2, 3, 4, 1, 2, 4]) == 10\n  subsArraySums([-1, -2, -3]) == -3\n  */\nconst subsArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array\n  of nums.\n  Example\n  subsArrayProducts([2, 3, 4, 1, 2, 4]) == 24\n  subsArrayProducts([-1, -2, -3]) == -3\n  */\nconst subsArrayProducts = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the largest product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArrayProducts([2, 3, 4, 1, 2, 4]) == 24\n  maxSubsArrayProducts([-1, -2, -3]) == -3\n  */\nconst maxSubsArrayProducts = (nums) => {\n  let maxProduct = 1;\n  for (let i = 0; i < nums.length; i++) {\n    maxProduct *= nums[i];\n  }\n  return maxProduct;\n};\n\n/*\n  Given an array of integers nums, find the smallest product of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArrayProducts([2, 3, 4, 1, 2, 4]) == 24\n  minSubsArrayProducts([-1, -2, -3]) == -3\n  */\nconst minSubsArrayProducts = (nums) => {\n  let minProduct = 1;\n  for (let i = 0; i < nums.length; i++) {\n    minProduct *= nums[i];\n  }\n  return minProduct;\n};\n\n/*\n  Given an array of integers nums, find the sum of all even numbers in nums.\n  Example\n  evenSums([2, 3, 4, 1, 2, 4]) == 6\n  evenSums([-1, -2, -3]) == -3\n  */\nconst evenSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all odd numbers in nums.\n  Example\n  oddSums([2, 3, 4, 1, 2, 4]) == 10\n  oddSums([-1, -2, -3]) == -3\n  */\nconst oddSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 3.\n  Example\n  divisibleByThreeSums([2, 3, 4, 1, 2, 4]) == 6\n  divisibleByThreeSums([-1, -2, -3]) == -3\n  */\nconst divisibleByThreeSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 5.\n  Example\n  divisibleByFiveSums([2, 3, 4, 1, 2, 4]) == 10\n  divisibleByFiveSums([-1, -2, -3]) == -3\n  */\nconst divisibleByFiveSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 7.\n  Example\n  divisibleBySevenSums([2, 3, 4, 1, 2, 4]) == 18\n  divisibleBySevenSums([-1, -2, -3]) == -3\n  */\nconst divisibleBySevenSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 11.\n  Example\n  divisibleByElevenSums([2, 3, 4, 1, 2, 4]) == 26\n  divisibleByElevenSums([-1, -2, -3]) == -3\n  */\nconst divisibleByElevenSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 15.\n  Example\n  divisibleByFifteenSums([2, 3, 4, 1, 2, 4]) == 30\n  divisibleByFifteenSums([-1, -2, -3]) == -3\n  */\nconst divisibleByFifteenSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 15 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 17.\n  Example\n  divisibleBySeventeenSums([2, 3, 4, 1, 2, 4]) == 34\n  divisibleBySeventeenSums([-1, -2, -3]) == -3\n  */\nconst divisibleBySeventeenSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 17 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 21.\n  Example\n  divisibleByTwentyOneSums([2, 3, 4, 1, 2, 4]) == 42\n  divisibleByTwentyOneSums([-1, -2, -3]) == -3\n  */\nconst divisibleByTwentyOneSums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 21 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers that are divisible by 23.\n  Example\n  divisibleByTwentyThreeSums([2, 3, 4, 1, 2, 4]) == 46", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, rowIndex) => {\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < row.length; i++) {\n      bucket[row[i]]++;\n    }\n    return bucket;\n  });\n  \n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    for (let j = 0; j < buckets[i].length; j++) {\n      if (buckets[i][j] > 0) {\n        count += buckets[i][j];\n      }\n    }\n  }\n  return count;\n};\n\nconst test1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\nconst test2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\nconst test3 = [[0,0], [0,0]];\nconst test4 = [[0,0], [0,0], [0,0], [0,0], [0,0]];\nconst testpassed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => a - b);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      result.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWordVowels = (s, n) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      result.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWordConsonants = (s, n) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      result.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWordVowelsConsonants = (s, n) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      result.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toLowerCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWordConsonantsVowels = (s, n) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      result.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toLowerCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === s.charAt(i).toLowerCase()) {\n        result.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelsCountFromRight = 0;\n  let vowelsCountFromLeft = 0;\n  let vowelsCountFromRightFromLeft = 0;\n  let vowelsCountFromLeftFromRight = 0;\n  let vowelsCountFromRightFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFrom", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by deleting some characters. Return Yes if and only if T can be\n  constructed from S. Otherwise, return No.\n  Examples:\n  canConstruct('ab', 'a') == 'Yes'\n  canConstruct('ab', 'ab') == 'Yes'\n  canConstruct('ab', 'abz') == 'No'\n  canConstruct('ab', 'abx') == 'No'\n  canConstruct('ab', 'abxab') == 'No'\n  canConstruct('ab', 'abxabz') == 'No'\n  canConstruct('ab', 'abxabx') == 'Yes'\n  canConstruct('ab', 'abxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabx') == 'No'\n  canConstruct('ab', 'abxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabx') == 'No'\n  canConstruct('ab', 'abxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabx') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabx') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabx') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabx') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabz') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'Yes'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxab') == 'No'\n  canConstruct('ab', 'abxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabxabx", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longer = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longer.length) {\n      longer = strings[i]\n    }\n  }\n  return longer\n}\n\n/**\n * Return the shortest string in an array of strings.\n * Return null in case the input list is empty.\n * >>> shortest([])\n * null\n * >>> shortest(['a', 'b', 'c'])\n * 'a'\n * >>> shortest(['a', 'bb', 'ccc'])\n * 'a'\n */\nconst shortest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const shortest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i]\n    }\n  }\n  return shortest\n}\n\n/**\n * Return the longest string in an array of strings.\n * Return null in case the input list is empty.\n * >>> longest([])\n * null\n * >>> longest(['a', 'b', 'c'])\n * 'c'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the first string in an array of strings.\n * Return null in case the input list is empty.\n * >>> first([])\n * null\n * >>> first(['a', 'b', 'c'])\n * 'a'\n * >>> first(['a', 'bb', 'ccc'])\n * 'a'\n */\nconst first = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings[0]\n}\n\n/**\n * Return the last string in an array of strings.\n * Return null in case the input list is empty.\n * >>> last([])\n * null\n * >>> last(['a', 'b', 'c'])\n * 'c'\n * >>> last(['a', 'bb', 'ccc'])\n * 'c'\n */\nconst last = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings[strings.length - 1]\n}\n\n/**\n * Return the string with the first letter capitalized.\n * Return null in case the input list is empty.\n * >>> capitalize([])\n * null\n * >>> capitalize(['a', 'b', 'c'])\n * 'A'\n * >>> capitalize(['a', 'bb', 'ccc'])\n * 'A'\n */\nconst capitalize = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter uncapitalized.\n * Return null in case the input list is empty.\n * >>> uncapitalize([])\n * null\n * >>> uncapitalize(['a', 'b', 'c'])\n * 'ABC'\n * >>> uncapitalize(['a', 'bb', 'ccc'])\n * 'ABC'\n */\nconst uncapitalize = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter capitalized and all others lowercased.\n * Return null in case the input list is empty.\n * >>> capitalizeAndLower([])\n * null\n * >>> capitalizeAndLower(['a', 'b', 'c'])\n * 'aBc'\n * >>> capitalizeAndLower(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\nconst capitalizeAndLower = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter uncapitalized and all others lowercased.\n * Return null in case the input list is empty.\n * >>> uncapitalizeAndLower([])\n * null\n * >>> uncapitalizeAndLower(['a', 'b', 'c'])\n * 'aBc'\n * >>> uncapitalizeAndLower(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\nconst uncapitalizeAndLower = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter capitalized and all others lowercased and all others uppercased.\n * Return null in case the input list is empty.\n * >>> capitalizeAndLowerAndUpper([])\n * null\n * >>> capitalizeAndLowerAndUpper(['a', 'b', 'c'])\n * 'aBc'\n * >>> capitalizeAndLowerAndUpper(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\nconst capitalizeAndLowerAndUpper = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter uncapitalized and all others lowercased and all others uppercased.\n * Return null in case the input list is empty.\n * >>> uncapitalizeAndLowerAndUpper([])\n * null\n * >>> uncapitalizeAndLowerAndUpper(['a', 'b', 'c'])\n * 'aBc'\n * >>> uncapitalizeAndLowerAndUpper(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\nconst uncapitalizeAndLowerAndUpper = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter capitalized and all others lowercased and all others uppercased.\n * Return null in case the input list is empty.\n * >>> capitalizeAndLowerAndUpper([])\n * null\n * >>> capitalizeAndLowerAndUpper(['a', 'b', 'c'])\n * 'aBc'\n * >>> capitalizeAndLowerAndUpper(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\nconst capitalizeAndLowerAndUpper = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter uncapitalized and all others lowercased and all others uppercased.\n * Return null in case the input list is empty.\n * >>> uncapitalizeAndLowerAndUpper([])\n * null\n * >>> uncapitalizeAndLowerAndUpper(['a', 'b', 'c'])\n * 'aBc'\n * >>> uncapitalizeAndLowerAndUpper(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\nconst uncapitalizeAndLowerAndUpper = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.map((s) => s.charAt(0).toLowerCase() + s.substring(1)).join('')\n}\n\n/**\n * Return the string with the first letter capitalized and all others lowercased and all others uppercased.\n * Return null in case the input list is empty.\n * >>> capitalizeAndLowerAndUpper([])\n * null\n * >>> capitalizeAndLowerAndUpper(['a', 'b', 'c'])\n * 'aBc'\n * >>> capitalizeAndLowerAndUpper(['a', 'bb', 'ccc'])\n * 'aBcC'\n */\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  let result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximums };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimums = (arr, k) => {\n  let result = [];\n  for (let i = 0; i < k; i++) {\n    let min = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < min) {\n        min = arr[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\nexport { minimums };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the averages k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, 2.5, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4.0, -4.0]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-0.5, -1.5, -0.5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst averages = (arr, k) => {\n  let result = [];\n  for (let i = 0; i < k; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n    }\n    result.push(sum / arr.length);\n  }\n  return result;\n};\n\nexport { averages };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the sum of the elements before it.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,3,6]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-5,0,10]\n*/\nconst cumulativeSum = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < i; j++) {\n      sum += arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nexport { cumulativeSum };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the product of the elements before it.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,6,24]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-15,0,15]\n*/\nconst product = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let product = 1;\n    for (let j = 0; j < i; j++) {\n      product *= arr[j];\n    }\n    result.push(product);\n  }\n  return result;\n};\n\nexport { product };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the largest element in the array.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,2,3]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-3,0,5]\n*/\nconst largest = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let largest = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > largest) {\n        largest = arr[j];\n      }\n    }\n    result.push(largest);\n  }\n  return result;\n};\n\nexport { largest };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the smallest element in the array.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,2,3]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-3,0,5]\n*/\nconst smallest = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let smallest = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < smallest) {\n        smallest = arr[j];\n      }\n    }\n    result.push(smallest);\n  }\n  return result;\n};\n\nexport { smallest };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the product of the corresponding elements in the given array.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,6,24]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-15,0,15]\n*/\nconst productOfArray = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let product = 1;\n    for (let j = 0; j < arr.length; j++) {\n      product *= arr[j];\n    }\n    result.push(product);\n  }\n  return result;\n};\n\nexport { productOfArray };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the sum of all elements in the given array.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,3,6]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-5,0,10]\n*/\nconst sumOfArray = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nexport { sumOfArray };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the sum of all elements in the given array.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,3,6]\n\n  Example 2:\n\n      Input: [-10,-3,0,5]\n      Output: [-10,-5,0,10]\n*/\nconst sumOfArray = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j];\n    }\n    result.push(sum);\n  }\n  return result;\n};\n\nexport { sumOfArray };\n\n/*\n  Given an array arr of integers, return a new array where each element \n  is the product of the corresponding elements in the given array.\n\n  Example 1:\n\n      Input: [1,2,3]\n      Output: [1,6,24]\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string representation of its index.\n\n  Examples\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  strArrayToStr([ 'a', 'b', 'c' ]) ==> '0a', '1b', '2c'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sums of each adjacent pair of elements in arr.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5]\n      Output: [1, 3, 6, 10, 15]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n*/\nconst sumAdjacentPairs = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length - 1; i++) {\n    newArr.push(arr[i] + arr[i + 1]);\n  }\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest element in the array and the\n  sum of the elements to its right in some given order.\n\n  Example:\n\n      Input: arr = [5,4,3,2,1]\n      Output: [5, 7, 7]\n\n  Constraints:\n      1. 0 <= arr.length <= 1000\n      2. 1 <= arr[i] <= 1000\n      3. 1 <= k <= len(arr)\n*/\nconst largestAndSum = (arr, k) => {\n  let maxSum = 0;\n  let maxSumIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxSum) {\n      maxSum = arr[i];\n      maxSumIndex = i;\n    }\n  }\n  let newArr = [];\n  for (let i = 0; i < k; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(maxSum);\n  newArr.push(arr[maxSumIndex]);\n  return newArr;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let odder = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n      odder.push(currentNumber);\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n      odder.push(currentNumber);\n    }\n  }\n  return odder;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatz = (n) => {\n  let even = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n      even.push(currentNumber);\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n      even.push(currentNumber);\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatzReverse(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatzReverse = (n) => {\n  let even = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n      even.push(currentNumber);\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n      even.push(currentNumber);\n    }\n  }\n  return even.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatzReverse(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatzReverse = (n) => {\n  let odder = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n      odder.push(currentNumber);\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n      odder.push(currentNumber);\n    }\n  }\n  return odder.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatzReverse(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatzReverse = (n) => {\n  let even = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n      even.push(currentNumber);\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n      even.push(currentNumber);\n    }\n  }\n  return even.reverse();\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in reverse order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatzReverse(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatzReverse = (n) => {\n  let odder = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const validDateArray = [\n   !dateArray[0] || dateArray[0].length < 1 || dateArray[0].length > 31,\n   !dateArray[1] || dateArray[1].length < 1 || dateArray[1].length > 31,\n   !dateArray[2] || dateArray[2].length < 1 || dateArray[2].length > 31,\n   !dateArray[3] || dateArray[3].length < 1 || dateArray[3].length > 31,\n   !dateArray[4] || dateArray[4].length < 1 || dateArray[4].length > 31,\n   !dateArray[5] || dateArray[5].length < 1 || dateArray[5].length > 31,\n   !dateArray[6] || dateArray[6].length < 1 || dateArray[6].length > 31,\n   !dateArray[7] || dateArray[7].length < 1 || dateArray[7].length > 31,\n   !dateArray[8] || dateArray[8].length < 1 || dateArray[8].length > 31,\n   !dateArray[9] || dateArray[9].length < 1 || dateArray[9].length > 31,\n   !dateArray[10] || dateArray[10].length < 1 || dateArray[10].length > 31,\n   !dateArray[11] || dateArray[11].length < 1 || dateArray[11].length > 31,\n   !dateArray[12] || dateArray[12].length < 1 || dateArray[12].length > 31,\n   !dateArray[13] || dateArray[13].length < 1 || dateArray[13].length > 31,\n   !dateArray[14] || dateArray[14].length < 1 || dateArray[14].length > 31,\n   !dateArray[15] || dateArray[15].length < 1 || dateArray[15].length > 31,\n   !dateArray[16] || dateArray[16].length < 1 || dateArray[16].length > 31,\n   !dateArray[17] || dateArray[17].length < 1 || dateArray[17].length > 31,\n   !dateArray[18] || dateArray[18].length < 1 || dateArray[18].length > 31,\n   !dateArray[19] || dateArray[19].length < 1 || dateArray[19].length > 31,\n   !dateArray[20] || dateArray[20].length < 1 || dateArray[20].length > 31,\n   !dateArray[21] || dateArray[21].length < 1 || dateArray[21].length > 31,\n   !dateArray[22] || dateArray[22].length < 1 || dateArray[22].length > 31,\n   !dateArray[23] || dateArray[23].length < 1 || dateArray[23].length > 31,\n   !dateArray[24] || dateArray[24].length < 1 || dateArray[24].length > 31,\n   !dateArray[25] || dateArray[25].length < 1 || dateArray[25].length > 31,\n   !dateArray[26] || dateArray[26].length < 1 || dateArray[26].length > 31,\n   !dateArray[27] || dateArray[27].length < 1 || dateArray[27].length > 31,\n   !dateArray[28] || dateArray[28].length < 1 || dateArray[28].length > 31,\n   !dateArray[29] || dateArray[29].length < 1 || dateArray[29].length > 31,\n   !dateArray[30] || dateArray[30].length < 1 || dateArray[30].length > 31,\n   !dateArray[31] || dateArray[31].length < 1 || dateArray[31].length > 31,\n   !dateArray[32] || dateArray[32].length < 1 || dateArray[32].length > 31,\n   !dateArray[33] || dateArray[33].length < 1 || dateArray[33].length > 31,\n   !dateArray[34] || dateArray[34].length < 1 || dateArray[34].length > 31,\n   !dateArray[35] || dateArray[35].length < 1 || dateArray[35].length > 31,\n   !dateArray[36] || dateArray[36].length < 1 || dateArray[36].length > 31,\n   !dateArray[37] || dateArray[37].length < 1 || dateArray[37].length > 31,\n   !dateArray[38] || dateArray[38].length < 1 || dateArray[38].length > 31,\n   !dateArray[39] || dateArray[39].length < 1 || dateArray[39].length > 31,\n   !dateArray[40] || dateArray[40].length < 1 || dateArray[40].length > 31,\n   !dateArray[41] || dateArray[41].length < 1 || dateArray[41].length > 31,\n   !dateArray[42] || dateArray[42].length < 1 || dateArray[42].length > 31,\n   !dateArray[43] || dateArray[43].length < 1 || dateArray[43].length > 31,\n   !dateArray[44] || dateArray[44].length < 1 || dateArray[44].length > 31,\n   !dateArray[45] || dateArray[45].length < 1 || dateArray[45].length > 31,\n   !dateArray[46] || dateArray[46].length < 1 || dateArray[46].length > 31,\n   !dateArray[47] || dateArray[47].length < 1 || dateArray[47].length > 31,\n   !dateArray[48] || dateArray[48].length < 1 || dateArray[48].length > 31,\n   !dateArray[49] || dateArray[49].length < 1 || dateArray[49].length > 31,\n   !dateArray[50] || dateArray[50].length < 1 || dateArray[50].length > 31,\n   !dateArray[51] || dateArray[51].length < 1 || dateArray[51].length > 31,\n   !dateArray[52] || dateArray[52].length < 1 || dateArray[52].length > 31,\n   !dateArray[53] || dateArray[53].length < 1 || dateArray[53].length > 31,\n   !dateArray[54] || dateArray[54].length < 1 || dateArray[54].length > 31,\n   !dateArray[55] || dateArray[55].length < 1 || dateArray[55].length > 31,\n   !dateArray[56] || dateArray[56].length < 1 || dateArray[56].length > 31,\n   !dateArray[57] || dateArray[57].length < 1 || dateArray[57].length > 31,\n   !dateArray[58] || dateArray[58].length < 1 || dateArray[58].length > 31,\n   !dateArray[59] || dateArray[59].length < 1 || date", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length).map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespace, if no whitespaces exists in the text you\n  should split on whitespace\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    const temp = start2;\n    start2 = start1;\n    start1 = temp;\n  }\n  if (start2 > end1) {\n    const temp = end2;\n    end2 = end1;\n    end1 = temp;\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1!== end2) {\n    return \"NO\";\n  }\n  if (start2 === start1 && end2 === end1) {\n    return \"NO\";\n  }\n  if (start2 === start1 && end1!== end1) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end2 === end1) {\n    return \"YES\";\n  }\n  if (start1!== start2 && end1!== end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"YES\";\n  }\n  if (start1!== start2 && end1!== end2) {\n    return \"YES\";\n  }\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 3, which not a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    const temp = start2;\n    start2 = start1;\n    start1 = temp;\n  }\n  if (start2 > end1) {\n    const temp = end2;\n    end2 = end1;\n    end1 = temp;\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1!== end2) {\n    return \"NO\";\n  }\n  if (start2 === start1 && end2 === end1) {\n    return \"NO\";\n  }\n  if (start2 === start1 && end1!== end1) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end2 === end1) {\n    return \"YES\";\n  }\n  if (start1!== start2 && end1!== end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"YES\";\n  }\n  if (start1!== start2 && end1!== end2) {\n    return \"YES\";\n  }\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (1, 3)\n  which its length is 1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    const temp = start2;\n    start2 = start1;\n    start1 = temp;\n  }\n  if (start2 > end1) {\n    const temp = end2;\n    end2 = end1;\n    end1 = temp;\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1!== end2) {\n    return \"NO\";\n  }\n  if (start2 === start1 && end2 === end1) {\n    return \"NO\";\n  }\n  if (start2 === start1 && end1!== end1) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end2 === end1) {\n    return \"YES\";\n  }\n  if (start1!== start2 && end1!== end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"YES\";\n  }\n  if (start1!== start2 && end1!== end2) {\n    return \"YES\";\n  }\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of symmetric difference of these two \n  intervals is a prime number.\n  Example, the symmetric difference of the intervals (1, 3), (2, 4) is (2, 4)\n  which its length is 2, which not a prime number.\n  If the length of the symmetric difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  symmetricDifference((1, 2), (2, 3)) ==> \"NO\"\n  symmetricDifference((-1, 1), ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign2 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign3 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign4 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign5 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign6 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign7 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign8 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign9 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign10 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign11 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill().map(() => new Array(N).fill(0));\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i;\n    M[i] = grid[i].reduce((acc, val) => acc + val, 0);\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift();\n    if (visited[y]) {\n      continue;\n    }\n    visited[y] = true;\n\n    for (let i = -1; i <= 1; i++) {\n      const newX = x + i;\n      if (newX < 0 || newX >= N) {\n        continue;\n      }\n      const newY = y + i;\n      if (newY < 0 || newY >= N) {\n        continue;\n      }\n      if (grid[newX][newY] === grid[x][y]) {\n        continue;\n      }\n      if (grid[newX][newY] === grid[x][y] + 1) {\n        M[newY] += 1;\n        queue[newY][newX] = newX;\n      }\n    }\n  }\n\n  return M.map((val, y) => grid[y].filter((val, i) => val === val && i === y).sort((a, b) => a - b));\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the smallest submatrix\n  containing all 1's and return its size.\n\n  Example:\n\n      Input: matrix = [\n      [1,1,1],\n      [1,1,1],\n      [1,1,1]\n      ]\n      Output: 3\n*/\nconst minSubmatrix = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill().map(() => new Array(N).fill(0));\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i;\n    M[i] = matrix[i].reduce((acc, val) => acc + val, 0);\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift();\n    if (visited[y]) {\n      continue;\n    }\n    visited[y] = true;\n\n    for (let i = -1; i <= 1; i++) {\n      const newX = x + i;\n      if (newX < 0 || newX >= N) {\n        continue;\n      }\n      const newY = y + i;\n      if (newY < 0 || newY >= N) {\n        continue;\n      }\n      if (matrix[newX][newY] === matrix[x][y]) {\n        continue;\n      }\n      if (matrix[newX][newY] === matrix[x][y] + 1) {\n        M[newY] += 1;\n        queue[newY][newX] = newX;\n      }\n    }\n  }\n\n  return M.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest submatrix\n  containing all 1's and return its size.\n\n  Example:\n\n      Input: matrix = [\n      [1,1,1],\n      [1,1,1],\n      [1,1,1]\n      ]\n      Output: 3\n*/\nconst maxSubmatrix = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill().map(() => new Array(N).fill(0));\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i;\n    M[i] = matrix[i].reduce((acc, val) => acc + val, 0);\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift();\n    if (visited[y]) {\n      continue;\n    }\n    visited[y] = true;\n\n    for (let i = -1; i <= 1; i++) {\n      const newX = x + i;\n      if (newX < 0 || newX >= N) {\n        continue;\n      }\n      const newY = y + i;\n      if (newY < 0 || newY >= N) {\n        continue;\n      }\n      if (matrix[newX][newY] === matrix[x][y]) {\n        continue;\n      }\n      if (matrix[newX][newY] === matrix[x][y] + 1) {\n        M[newY] += 1;\n        queue[newY][newX] = newX;\n      }\n    }\n  }\n\n  return M.reduce((acc, val) => Math.max(acc, val), 0);\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest submatrix\n  containing all 1's and return its size.\n\n  Example:\n\n      Input: matrix = [\n      [1,1,1],\n      [1,1,1],\n      [1,1,1]\n      ]\n      Output: 3\n*/\nconst maxSubmatrix2 = (matrix) => {\n  const N = matrix.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const queue = new Array(N).fill().map(() => new Array(N).fill(0));\n\n  for (let i = 0; i < N; i++) {\n    queue[i][0] = i;\n    M[i] = matrix[i].reduce((acc, val) => acc + val, 0);\n  }\n\n  while (queue.length > 0) {\n    const [x, y] = queue.shift();\n    if (visited[y]) {\n      continue;\n    }\n    visited[y] = true;\n\n    for (let i = -1; i <= 1; i++) {\n      const newX = x + i;\n      if (newX < 0 || newX >= N) {\n        continue;\n      }\n      const newY = y + i;\n      if (newY < 0 || newY >= N) {\n        continue;\n      }\n      if (matrix[newX][newY] === matrix[x][y]) {\n        continue;\n      }\n      if (matrix[newX][newY] === matrix[x][y] + 1) {\n        M[newY] += 1;\n        queue[newY][newX] = newX;\n      }\n    }\n  }\n\n  return M.reduce((acc, val) => Math.max(acc, val), 0);\n};\n\n/*\n  Given a 2D binary matrix filled with 0's and 1's, find the largest submatrix\n  containing all 1's and return its size.\n\n  Example:\n\n      Input: matrix = [\n      [1,1,1],\n      [1,1,1],\n      [1,1,1]\n      ]\n      Output: ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a < b) return gcd(b, a); // a > b\n  if (b < a) return gcd(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisor(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a) return leastCommonDivisor(a, b); // b > a\n  return a; // a == b\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisor = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * >>> leastCommonDivisors(7, 5)\n * 21\n */\nconst leastCommonDivisors = (a, b) => {\n  if (a < b) return leastCommonDivisor(b, a); // a > b\n  if (b < a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else {\n    arr.push(1);\n    arr.push(2);\n    arr.push(3);\n  }\n  for (let i = 4; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n};\n\n/*\n  You are given two non-negative integers n and k. \n  You are required to return a list of all numbers in the range [1..n] \n  that divide exactly k evenly. \n  Examples:\n  evenlyDivide(6, 3) = [1, 3, 5]\n  evenlyDivide(6, 4) = [1, 4, 6]\n  evenlyDivide(6, 5) = [1, 5]\n  evenlyDivide(6, 6) = [1, 6]\n  evenlyDivide(6, 7) = [1, 7]\n  evenlyDivide(6, 8) = [1, 8]\n  evenlyDivide(6, 9) = [1, 9]\n  evenlyDivide(6, 10) = [1, 10]\n  evenlyDivide(6, 11) = [1, 11]\n  evenlyDivide(6, 12) = [1, 12]\n  evenlyDivide(6, 13) = [1, 13]\n  evenlyDivide(6, 14) = [1, 14]\n  evenlyDivide(6, 15) = [1, 15]\n  evenlyDivide(6, 16) = [1, 16]\n  evenlyDivide(6, 17) = [1, 17]\n  evenlyDivide(6, 18) = [1, 18]\n  evenlyDivide(6, 19) = [1, 19]\n  evenlyDivide(6, 20) = [1, 20]\n  evenlyDivide(6, 21) = [1, 21]\n  evenlyDivide(6, 22) = [1, 22]\n  evenlyDivide(6, 23) = [1, 23]\n  evenlyDivide(6, 24) = [1, 24]\n  evenlyDivide(6, 25) = [1, 25]\n  evenlyDivide(6, 26) = [1, 26]\n  evenlyDivide(6, 27) = [1, 27]\n  evenlyDivide(6, 28) = [1, 28]\n  evenlyDivide(6, 29) = [1, 29]\n  evenlyDivide(6, 30) = [1, 30]\n  evenlyDivide(6, 31) = [1, 31]\n  evenlyDivide(6, 32) = [1, 32]\n  evenlyDivide(6, 33) = [1, 33]\n  evenlyDivide(6, 34) = [1, 34]\n  evenlyDivide(6, 35) = [1, 35]\n  evenlyDivide(6, 36) = [1, 36]\n  evenlyDivide(6, 37) = [1, 37]\n  evenlyDivide(6, 38) = [1, 38]\n  evenlyDivide(6, 39) = [1, 39]\n  evenlyDivide(6, 40) = [1, 40]\n  evenlyDivide(6, 41) = [1, 41]\n  evenlyDivide(6, 42) = [1, 42]\n  evenlyDivide(6, 43) = [1, 43]\n  evenlyDivide(6, 44) = [1, 44]\n  evenlyDivide(6, 45) = [1, 45]\n  evenlyDivide(6, 46) = [1, 46]\n  evenlyDivide(6, 47) = [1, 47]\n  evenlyDivide(6, 48) = [1, 48]\n  evenlyDivide(6, 49) = [1, 49]\n  evenlyDivide(6, 50) = [1, 50]\n  evenlyDivide(6, 51) = [1, 51]\n  evenlyDivide(6, 52) = [1, 52]\n  evenlyDivide(6, 53) = [1, 53]\n  evenlyDivide(6, 54) = [1, 54]\n  evenlyDivide(6, 55) = [1, 55]\n  evenlyDivide(6, 56) = [1, 56]\n  evenlyDivide(6, 57) = [1, 57]\n  evenlyDivide(6, 58) = [1, 58]\n  evenlyDivide(6, 59) = [1, 59]\n  evenlyDivide(6, 60) = [1, 60]\n  evenlyDivide(6, 61) = [1, 61]\n  evenlyDivide(6, 62) = [1, 62]\n  evenlyDivide(6, 63) = [1, 63]\n  evenlyDivide(6, 64) = [1, 64]\n  evenlyDivide(6, 65) = [1, 65]\n  evenlyDivide(6, 66) = [1, 66]\n  evenlyDivide(6, 67) = [1, 67]\n  evenlyDivide(6, 68) = [1, 68]\n  evenlyDivide(6, 69) = [1, 69]\n  evenlyDivide(6, 70) = [1, 70]\n  evenlyDivide(6, 71) = [1, 71]\n  evenlyDivide(6, 72) = [1, 72]\n  evenlyDivide(6, 73) = [1, 73]\n  evenlyDivide(6, 74) = [1, 74]\n  evenlyDivide(6, 75) = [1, 75]\n  evenlyDivide(6, 76) = [1, 76]\n  evenlyDivide(6, 77) = [1, 77]\n  evenlyDivide(6, 78) = [1, 78]\n  evenlyDivide(6, 79) = [1, 79]\n  evenlyDivide(6, 80) = [1, 80]\n  evenlyDivide(6, 81) = [1, 81]\n  evenlyDivide(6, 82) = [1, 82]\n  evenlyDivide(6, 83) = [1, 83]\n  evenlyDivide(6, 84) = [1, 84]\n  evenlyDivide(6, 85) = [1, 85]\n  evenlyDivide(6, 86) = [1, 86]\n  evenlyDivide(6, 87) = [1, 87]\n  evenlyDivide(6, 88) = [1, 88]\n  evenlyDivide(6, 89) = [1, 89]\n  evenlyDivide(6, 90) = [1, 90]\n  evenlyDivide(6, 91) = [1, 91]\n  evenlyDivide(6, 92) = [1, 92]\n  evenlyDivide(6, 93) = [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst evenDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst oddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst evenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 6\n  */\nconst oddEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst evenEvenDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst oddOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst evenOddEvenDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst oddEvenOddEvenDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst evenEvenOddOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst oddOddEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst evenEvenOddEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst oddEvenEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst evenOddEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst oddEvenEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 6\n  */\nconst evenEvenEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 235\n  */\nconst oddOddEvenEvenOddDigit = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (i % 2!== 0) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the remaining digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastChar = '';\n  let lastCharIsNesting = false;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (openingBrackets === closingBrackets) {\n        if (lastCharIsNesting) {\n          return false;\n        }\n        openingBrackets = 0;\n        closingBrackets = 0;\n        lastCharIsNesting = true;\n      } else {\n        openingBrackets--;\n      }\n    } else if (char === lastChar) {\n      lastCharIsNesting = false;\n    }\n    lastChar = char;\n  }\n  return openingBrackets === closingBrackets;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastChar = '';\n  let lastCharIsNesting = false;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (openingBrackets === closingBrackets) {\n        if (lastCharIsNesting) {\n          return false;\n        }\n        openingBrackets = 0;\n        closingBrackets = 0;\n        lastCharIsNesting = true;\n      } else {\n        openingBrackets--;\n      }\n    } else if (char === lastChar) {\n      lastCharIsNesting = false;\n    }\n    lastChar = char;\n  }\n  return openingBrackets === closingBrackets;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastChar = '';\n  let lastCharIsNesting = false;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (openingBrackets === closingBrackets) {\n        if (lastCharIsNesting) {\n          return false;\n        }\n        openingBrackets = 0;\n        closingBrackets = 0;\n        lastCharIsNesting = true;\n      } else {\n        openingBrackets--;\n      }\n    } else if (char === lastChar) {\n      lastCharIsNesting = false;\n    }\n    lastChar = char;\n  }\n  return openingBrackets === closingBrackets;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastChar = '';\n  let lastCharIsNesting = false;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (openingBrackets === closingBrackets) {\n        if (lastCharIsNesting) {\n          return false;\n        }\n        openingBrackets = 0;\n        closingBrackets = 0;\n        lastCharIsNesting = true;\n      } else {\n        openingBrackets--;\n      }\n    } else if (char === lastChar) {\n      lastCharIsNesting = false;\n    }\n    lastChar = char;\n  }\n  return openingBrackets === closingBrackets;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastChar = '';\n  let lastCharIsNesting = false;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      openingBrackets++;\n    } else if (char === ']') {\n      closingBrackets++;\n      if (openingBrackets === closingBrackets) {\n        if (lastCharIsNesting) {\n          return false;\n        }\n        openingBrackets = 0;\n        closingBrackets = 0;\n        lastCharIsNesting = true;\n      } else {\n        openingBrackets--;\n      }\n    } else if (char === lastChar) {\n      lastCharIsNesting = false;\n    }\n    lastChar = char;\n  }\n  return opening", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sums = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRound = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundDown = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundDownCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundUpCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundDownCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundUpCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundDownCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumsRoundUpCeil = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 0\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique values in a given\n  array. The given array will not contain duplicate values.\n\n  Examples:\n  unique([1,2,4,3,5]) = [1,2,3,4,5]\n  unique([1,2,3]) = [1,2,3]\n  */\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*Create a function which returns an array of all unique ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (1, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsRealNumber = aIsNumber || aIsString;\n  const bIsRealNumber = bIsNumber || bIsString;\n  if (aIsRealNumber && bIsRealNumber) {\n    return a > b? a : b;\n  }\n  if (aIsRealNumber &&!bIsRealNumber) {\n    return a;\n  }\n  if (!aIsRealNumber && bIsRealNumber) {\n    return b;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingTwo = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsRealNumber = aIsNumber || aIsString;\n  const bIsRealNumber = bIsNumber || bIsString;\n  if (aIsRealNumber && bIsRealNumber) {\n    return a < b? a : b;\n  }\n  if (aIsRealNumber &&!bIsRealNumber) {\n    return a;\n  }\n  if (!aIsRealNumber && bIsRealNumber) {\n    return b;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingThree = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsRealNumber = aIsNumber || aIsString;\n  const bIsRealNumber = bIsNumber || bIsString;\n  if (aIsRealNumber && bIsRealNumber) {\n    return a < b? a : b;\n  }\n  if (aIsRealNumber &&!bIsRealNumber) {\n    return a;\n  }\n  if (!aIsRealNumber && bIsRealNumber) {\n    return b;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingFour = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsRealNumber = aIsNumber || aIsString;\n  const bIsRealNumber = bIsNumber || bIsString;\n  if (aIsRealNumber && bIsRealNumber) {\n    return a < b? a : b;\n  }\n  if (aIsRealNumber &&!bIsRealNumber) {\n    return a;\n  }\n  if (!aIsRealNumber && bIsRealNumber) {\n    return b;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingFive = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsRealNumber = aIsNumber || aIsString;\n  const bIsRealNumber = bIsNumber || bIsString;\n  if (aIsRealNumber && bIsRealNumber) {\n    return a < b? a : b;\n  }\n  if (aIsRealNumber &&!bIsRealNumber) {\n    return a;\n  }\n  if (!aIsRealNumber && bIsRealNumber) {\n    return b;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"5\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingSix = (a, b) => {\n  const aIsNumber = typeof a === \"number\";\n  const bIsNumber = typeof b === \"number\";\n  const aIsString = typeof a === \"string\";\n  const bIsString = typeof b === \"string\";\n  const aIsRealNumber = aIsNumber || aIsString;\n  const bIsRealNumber = bIsNumber || bIsString;\n  if (aIsRealNumber && bIsRealNumber) {\n    return a < b? a : b;\n  }\n  if (aIsRealNumber &&!bIsRealNumber) {\n    return a;\n  }\n  if (!aIsRealNumber && bIsRealNumber) {\n    return b;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == true\n  isEqualToSummingOdd(8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSummingNegative(4) == false\n  isEqualToSummingNegative(6) == false\n  isEqualToSummingNegative(8) == true\n  */\nconst isEqualToSummingNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == false\n  isEqualToSummingEven(-6) == false\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOdd(-4) == false\n  isEqualToSummingOdd(-6) == true\n  isEqualToSummingOdd(-8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSummingPositive(4) == false\n  isEqualToSummingPositive(6) == false\n  isEqualToSummingPositive(8) == true\n  */\nconst isEqualToSummingPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == true\n  isEqualToSummingOdd(8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSummingNegative(4) == false\n  isEqualToSummingNegative(6) == false\n  isEqualToSummingNegative(8) == true\n  */\nconst isEqualToSummingNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == false\n  isEqualToSummingEven(-6) == false\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOdd(-4) == false\n  isEqualToSummingOdd(-6) == true\n  isEqualToSummingOdd(-8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  isEqualToSummingPositive(4) == false\n  isEqualToSummingPositive(6) == false\n  isEqualToSummingPositive(8) == true\n  */\nconst isEqualToSummingPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == true\n  isEqualToSummingOdd(8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  isEqualToSummingNegative(4) == false\n  isEqualToSummingNegative(6) == false\n  isEqualToSummingNegative(8) == true\n  */\nconst isEqualToSummingNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the given number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  return factorial_helper(n);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial_helper(n - 1);\n};\n\n/*\n  A function which returns the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial_helper = (n) => {\n  if (n === 0 || n === ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentPrefix) {\n      prefixes.push(currentPrefix);\n    } else {\n      currentPrefix = char;\n      prefixes.push(currentPrefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = char;\n      suffixes.push(currentSuffix);\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      substrings.push(currentSubstring);\n    } else {\n      currentSubstring += char;\n      substrings.push(currentSubstring);\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Given a string text, remove all punctuation from it\n  \n  fixesPunctuation(\"Example\") == \"Example\"\n  fixesPunctuation(\"Example 1\") == \"Example1\"\n  fixesPunctuation(\"Example!\") == \"Example!\"\n  fixesPunctuation(\"Example?!\") == \"Example?!\"\n  fixesPunctuation(\"Example,,\") == \"Example,\"\n  fixesPunctuation(\"Example :)\") == \"Example:\"\n  fixesPunctuation(\"Example ;)\") == \"Example;\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"Example ;)\") == \"Example;)\"\n  fixesPunctuation(\"Example :(\") == \"Example:(\" \n  fixesPunctuation(\"Example ;(\") == \"Example;(\" \n  fixesPunctuation(\"Example :)\") == \"Example:)\"\n  fixesPunctuation(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/^\\./, '');\n  const file_name = file_name.replace(/[^a-z0-9\\.]/g, '');\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.toUpperCase();\n  if (file_name === 'EXE' || file_name === 'DLL' || file_name === 'TXT') {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's extension, and returns\n  'Yes' if the the file's extension is valid, and returns 'No' otherwise.\n  A file's extension is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's extension starts with '.'\n  - The file's extension contains exactly one dot '.'\n  - The substring after the dot should be one of these: ['exe', 'dll', 'txt']\n  Examples:\n  filesExtensionsCheck(\"example.exe\") # => 'Yes'\n  filesExtensionsCheck(\"1example.dll\") # => 'No' (the extension should start with a latin alphapet letter)\n  */\nconst filesExtensionsCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/^\\./, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/^\\./, '');\n  const file_name = file_name.replace(/[^a-z0-9\\.]/g, '');\n  const file_name = file_name.substring(0, 3);\n  const file_name = file_name.substring(0, 1);\n  const file_name = file_name.toUpperCase();\n  if (file_name === 'EXE' || file_name === 'DLL' || file_name === 'TXT') {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's size, in bytes, and returns\n  'Yes' if the the file's size is valid, and returns 'No' otherwise.\n  A file's size is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's size should be greater than or equal to 1024 bytes\n  - The file's size should be less than or equal to 2 gigabytes\n  - The file's size should be less than or equal to 2 terabytes\n  Examples:\n  filesSizeCheck(\"1024\") # => 'Yes'\n  filesSizeCheck(\"2g\") # => 'No' (the size should be greater than or equal to 1024 bytes)\n  filesSizeCheck(\"2T\") # => 'No' (the size should be less than or equal to 2 gigabytes)\n  filesSizeCheck(\"2Tb\") # => 'No' (the size should be less than or equal to 2 terabytes)\n  */\nconst filesSizeCheck = (size) => {\n  const size = size.toLowerCase();\n  const size = size.replace(/^\\./, '');\n  const size = size.replace(/\\./g, '');\n  const size = size.replace(/^\\./, '');\n  const size = size.replace(/[^0-9]/g, '');\n  const size = size.replace('b', '');\n  const size = size.replace('g', '');\n  const size = size.replace('t', '');\n  const size = size.replace('k', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('K', '');\n  const size = size.replace('M', '');\n  const size = size.replace('G', '');\n  const size = size.replace('T', '');\n  const size = size.replace('P', '');\n  const size = size.replace('E', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('Y', '');\n  const size = size.replace('Z', '');\n  const size = size.replace('B', '');", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 3. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 4. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDivisibleBy4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 5. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 5\n  */\nconst countDivisibleBy5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 6. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 6\n  */\nconst countDivisibleBy6 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 6 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 7. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 7\n  */\nconst countDivisibleBy7 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 8. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 8\n  */\nconst countDivisibleBy8 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 8 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 9. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 9\n  */\nconst countDivisibleBy9 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 10\n  */\nconst countDivisibleBy10 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 11. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 11\n  */\nconst countDivisibleBy11 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 12. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 12\n  */\nconst countDivisibleBy12 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 12 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 13. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 13\n  */\nconst countDivisibleBy13 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is divisible by 14. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 0\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 14\n  */\nconst countDivisibleBy14 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 14 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences2 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences3 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences3 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences4 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences5 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences5 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences6 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences7 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += sentence[i];\n    }\n  }\n  words.push(word);\n  return words.join(' ');\n};\n\nexport { wordInSentences7 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences8 = (sentence) => {\n  let words = [];\n  let word = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i] ==='') {\n      words.push(word);\n      word = '';\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split(\"/\").map(Number);\n  if (numerator === 0 && denominator === 0) return true;\n  if (numerator === 0 && denominator === 1) return false;\n  if (numerator === 1 && denominator === 0) return false;\n  if (numerator === 1 && denominator === 1) return true;\n  return false;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum in digitSums) {\n    result.push(...digitSums[digitSum]);\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum in digitSums) {\n    result.push(...digitSums[digitSum].sort((a, b) => b - a));\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum in digitSums) {\n    result.push(...digitSums[digitSum].sort((a, b) => a - b));\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDescAsc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum in digitSums) {\n    result.push(...digitSums[digitSum].sort((a, b) => b - a));\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAscDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum in digitSums) {\n    result.push(...digitSums[digitSum].sort((a, b) => a - b));\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDescAscDesc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum in digitSums) {\n    result.push(...digitSums[digitSum].sort((a, b) => b - a));\n  }\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDescAscAsc = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digitSums = {};\n  for (let i = 0; i < len; i++) {\n    const digitSum = nums.reduce((sum, num) => {\n      const digit = num.toString().split('').reduce((sum, digit) => sum + +digit, 0);\n      return sum + digit;\n    }, 0);\n    digitSums[digitSum] = digitSums[digitSum] || [];\n    digitSums[digitSum].push(i);\n  }\n  const result = [];\n  for (const digitSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 1\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 tags=arrays,algorithm,javascript |>\n<| a |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a dscore=0 tags=arrays,algorithm,javascript |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitToSun = planet1Orbit.map(\n    orbit => orbit.map(orb => orb.orbitalOrbital)\n  );\n  const planet2OrbitToSun = planet2Orbit.map(\n    orbit => orbit.map(orb => orb.orbitalOrbital)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(\"Sun\")\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(\"Sun\")\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet1)\n  );\n  const planet1OrbitToSun = planet1OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet2OrbitToSun = planet2OrbitToSun.filter(\n    orb => orb.orbitalOrbital.includes(planet2)\n  );\n  const planet1OrbitTo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  const sorted = [];\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.length < word.length) {\n      sortedList.push(word);\n    } else {\n      for (let j = 0; j < sortedList.length; j++) {\n        if (sortedList[j].length < word.length) {\n          sortedList.splice(j, 0, word);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < sortedList.length; i++) {\n    sorted.push(sortedList[i]);\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabetically = (lst) => {\n  const sorted = [];\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.length < word.length) {\n      sortedList.push(word);\n    } else {\n      for (let j = 0; j < sortedList.length; j++) {\n        if (sortedList[j].length < word.length) {\n          sortedList.splice(j, 0, word);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < sortedList.length; i++) {\n    sorted.push(sortedList[i]);\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSum = (lst) => {\n  const sorted = [];\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.length < word.length) {\n      sortedList.push(word);\n    } else {\n      for (let j = 0; j < sortedList.length; j++) {\n        if (sortedList[j].length < word.length) {\n          sortedList.splice(j, 0, word);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < sortedList.length; i++) {\n    sorted.push(sortedList[i]);\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSumAndCount = (lst) => {\n  const sorted = [];\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.length < word.length) {\n      sortedList.push(word);\n    } else {\n      for (let j = 0; j < sortedList.length; j++) {\n        if (sortedList[j].length < word.length) {\n          sortedList.splice(j, 0, word);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < sortedList.length; i++) {\n    sorted.push(sortedList[i]);\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSumAndCountAndMax = (lst) => {\n  const sorted = [];\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.length < word.length) {\n      sortedList.push(word);\n    } else {\n      for (let j = 0; j < sortedList.length; j++) {\n        if (sortedList[j].length < word.length) {\n          sortedList.splice(j, 0, word);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < sortedList.length; i++) {\n    sorted.push(sortedList[i]);\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSumAndCountAndMaxAndMin = (lst) => {\n  const sorted = [];\n  const sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    const word = lst[i];\n    if (sortedList.length < word.length) {\n      sortedList.push(word);\n    } else {\n      for (let j = 0; j < sortedList.length; j++) {\n        if (sortedList[j].length < word.length) {\n          sortedList.splice(j, 0, word);\n          break;\n        }\n      }\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game,...guess]\n  const guesses = [...guess,...game]\n  const results = []\n  for (let i = 0; i < guesses.length; i++) {\n    const guess = guesses[i]\n    const score = scores[i]\n    const difference = Math.abs(guess - score)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compare\n\n},{}],8:[function(require,module,exports){\nconst compare = require('./compare')\n\nconst compareGame = (game, guess) => {\n  const results = []\n  for (let i = 0; i < game.length; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    const difference = compare(score, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGame\n\n},{\"./compare\":7}],9:[function(require,module,exports){\nconst compareGame = require('./compareGame')\n\nconst compareGames = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGame(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGames\n\n},{\"./compareGame\":8}],10:[function(require,module,exports){\nconst compareGames = require('./compareGames')\n\nconst compareGamesOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGames(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLength\n\n},{\"./compareGames\":9}],11:[function(require,module,exports){\nconst compareGamesOfLength = require('./compareGamesOfLength')\n\nconst compareGamesOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLength\n\n},{\"./compareGamesOfLength\":10}],12:[function(require,module,exports){\nconst compareGamesOfLengthOfLength = require('./compareGamesOfLengthOfLength')\n\nconst compareGamesOfLengthOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLengthOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLengthOfLength\n\n},{\"./compareGamesOfLengthOfLength\":11}],13:[function(require,module,exports){\nconst compareGamesOfLengthOfLengthOfLength = require('./compareGamesOfLengthOfLengthOfLength')\n\nconst compareGamesOfLengthOfLengthOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLengthOfLengthOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLengthOfLengthOfLength\n\n},{\"./compareGamesOfLengthOfLengthOfLength\":12}],14:[function(require,module,exports){\nconst compareGamesOfLengthOfLengthOfLengthOfLength = require('./compareGamesOfLengthOfLengthOfLengthOfLength')\n\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLengthOfLengthOfLengthOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLengthOfLengthOfLengthOfLength\n\n},{\"./compareGamesOfLengthOfLengthOfLengthOfLength\":13}],15:[function(require,module,exports){\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLength = require('./compareGamesOfLengthOfLengthOfLengthOfLengthOfLength')\n\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLengthOfLengthOfLengthOfLengthOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLength\n\n},{\"./compareGamesOfLengthOfLengthOfLengthOfLengthOfLength\":14}],16:[function(require,module,exports){\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLength = require('./compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength')\n\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength\n\n},{\"./compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLength\":15}],17:[function(require,module,exports){\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength = require('./compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength')\n\nconst compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength = (games, guesses) => {\n  const results = []\n  for (let i = 0; i < games.length; i++) {\n    const game = games[i]\n    const guess = guesses[i]\n    const difference = compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength(game, guess)\n    results.push(difference)\n  }\n  return results\n}\n\nmodule.exports = compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength\n\n},{\"./compareGamesOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLength\":16}],18:[function(require,module,exports){\nconst compareGamesOfLengthOfLengthOf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = class_name.match(/[A-Z]/g).length;\n  const sm = class_name.match(/[a-z]/g).length;\n  return `${class_name.substr(0, cap)}${class_name.substr(cap - sm)}${extensions[extensions.indexOf(class_name.substr(cap - sm)) - 1]}`;\n};\n\n/*\n  Write a function that takes an array of strings and returns an array of strings.\n  Each string in the array should be the concatenation of all the strings in the\n  array except the one that you are currently on.\n  Example:\n  Given ['Hello', 'World', '!']\n  Returns: ['Hell', 'orld', '!']\n  Given ['Hello', 'World', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Returns: ['Hell', 'orld', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!']\n  Given ['Hello', 'World', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '!', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex].toUpperCase()) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex].toUpperCase() === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr || bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex].toUpperCase()) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex].toUpperCase() === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex].toUpperCase()) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex].toUpperCase() === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex].toUpperCase()) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex].toUpperCase() === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex].toUpperCase()) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex].toUpperCase() === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subString", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    charCount++;\n  }\n  return [charCount, charFrequency];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      stringCount(\"abcabc\") ==> (3, {a: 2, b: 1, c: 3})\n      stringCount(\"abca\") ==> (1, {a: 2, b: 1}\n  */\nconst stringCount = (str) => {\n  let charCount = 0;\n  let charFrequency = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charFrequency[str[i]]) {\n      charFrequency[str[i]]++;\n    } else {\n      charFrequency[str[i]] = 1;\n    }\n    char", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => romanNumber.toLowerCase()).join('');\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> miniRomanToInt( 'xix' ) == 19\n  >>> miniRomanToInt( 'clii' ) == 152\n  >>> miniRomanToInt( 'cdxxvi' ) == 426\n  */\nconst miniRomanToInt = (romanNumber) => {\n  const roman = romanNumerals(romanNumber);\n  return roman.reduce((sum, romanNumber) => sum + romanNumber.charCodeAt(0), 0);\n};\n\n/*\n  Return the number of 'M' occurrences in a string.\n  Examples:\n  >>> countpassed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ac === bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ac === bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ac === bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ac === bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n// Tests\nconsole.log(foundMax([\"name\", \"of\", \"string\"]));\nconsole.log(foundMax([\"name\", \"enam\", \"game\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\",\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter2 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter3 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter4 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter5 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter6 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter7 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter8 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter9 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter10 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter11 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter12 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter13 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter14 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter15 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter16 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n  return uniqueCharacters.size;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter17 = (string) => {\n  const characters = string.split('');\n  const uniqueCharacters = new Set(characters);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Your task is to remove all vowels from this string and return it.\n  Examples\n  removeVowels(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits in the form of a string.\n\n  For example:\n  sumDigits(12) => \"1 + 2\"\n  sumDigits(12) => \"1 + 2 + 3\"\n  sumDigits(12) => \"1 + 2 + 3 + 4\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4\"\n  sumDigits(12) => \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      continue;\n    }\n\n    const music_note_char = music_note[0];\n\n    if (music_note_char === 'o') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 4);\n    } else if (music_note_char === 'o|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 2);\n    } else if (music_note_char === '.|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 1);\n    }\n  }\n\n  return music_notes_map.values();\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last note in the music have.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      continue;\n    }\n\n    const music_note_char = music_note[0];\n\n    if (music_note_char === 'o') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 4);\n    } else if (music_note_char === 'o|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 2);\n    } else if (music_note_char === '.|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 1);\n    }\n  }\n\n  return music_notes_map.keys();\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note in the music have.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      continue;\n    }\n\n    const music_note_char = music_note[0];\n\n    if (music_note_char === 'o') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 4);\n    } else if (music_note_char === 'o|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 2);\n    } else if (music_note_char === '.|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 1);\n    }\n  }\n\n  return music_notes_map.keys();\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note in the music have.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      continue;\n    }\n\n    const music_note_char = music_note[0];\n\n    if (music_note_char === 'o') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 4);\n    } else if (music_note_char === 'o|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 2);\n    } else if (music_note_char === '.|') {\n      music_notes_map.set(music_note, music_notes_map.get(music_note) + 1);\n    }\n  }\n\n  return music_notes_map.keys();\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note in the music have.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      continue;\n    }\n\n    const music_note_char = music_note[0];\n\n    if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/**\n * Return the number of words in a string\n * >>> countWords('one two three four')\n  4\n */\nconst countWords = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string\n * >>> countChars('one two three four')\n  10\n */\nconst countChars = (string) => {\n  return string.length;\n};\n\n/**\n * Return the number of lines in a string\n * >>> countLines('one two three four')\n  4\n */\nconst countLines = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without spaces\n * >>> countCharsNoSpace('one two three four')\n  10\n */\nconst countCharsNoSpace = (string) => {\n  return string.replace(/\\s+/g, '').length;\n};\n\n/**\n * Return the number of lines in a string without spaces\n * >>> countLinesNoSpace('one two three four')\n  4\n */\nconst countLinesNoSpace = (string) => {\n  return string.split('\\n').length;\n};\n\n/**\n * Return the number of words in a string without spaces\n * >>> countWordsNoSpace('one two three four')\n  4\n */\nconst countWordsNoSpace = (string) => {\n  return string.split(' ').length;\n};\n\n/**\n * Return the number of characters in a string without ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  let smallestDifference = Number.MAX_VALUE;\n  let smallestDifferenceIndex = 0;\n  let largestDifference = Number.MIN_VALUE;\n  let largestDifferenceIndex = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    const difference = numbers[i] - numbers[smallestDifferenceIndex];\n    if (difference < smallestDifference) {\n      smallestDifference = difference;\n      smallestDifferenceIndex = i;\n    } else if (difference > largestDifference) {\n      largestDifference = difference;\n      largestDifferenceIndex = i;\n    }\n  }\n  return [numbers[smallestDifferenceIndex], numbers[largestDifferenceIndex]];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / numbers.length);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const integers = []\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      integers.push(value)\n    }\n  })\n  return integers\n}\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterFloats = (values) => {\n  const floats = []\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      floats.push(value)\n    }\n  })\n  return floats\n}\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  const strings = []\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      strings.push(value)\n    }\n  })\n  return strings\n}\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false]\n  */\nconst filterBooleans = (values) => {\n  const booleans = []\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      booleans.push(value)\n    }\n  })\n  return booleans\n}\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  const nones = []\n  values.forEach((value) => {\n    if (value === null) {\n      nones.push(value)\n    }\n  })\n  return nones\n}\n\n/**\n * Filter given list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  const dicts = []\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      dicts.push(value)\n    }\n  })\n  return dicts\n}\n\n/**\n * Filter given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterLists = (values) => {\n  const lists = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      lists.push(value)\n    }\n  })\n  return lists\n}\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [set()]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), set(), set()]\n  */\nconst filterSets = (values) => {\n  const sets = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value)\n    }\n  })\n  return sets\n}\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value)\n    }\n  })\n  return tuples\n}\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [set()]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), set(), set()]\n  */\nconst filterSets = (values) => {\n  const sets = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value)\n    }\n  })\n  return sets\n}\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value)\n    }\n  })\n  return tuples\n}\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [set()]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), set(), set()]\n  */\nconst filterSets = (values) => {\n  const sets = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value)\n    }\n  })\n  return sets\n}\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value)\n    }\n  })\n  return tuples\n}\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [set()]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), set(), set()]\n  */\nconst filterSets = (values) => {\n  const sets = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value)\n    }\n  })\n  return sets\n}\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value)\n    }\n  })\n  return tuples\n}\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [set()]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), set(), set()]\n  */\nconst filterSets = (values) => {\n  const sets = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value)\n    }\n  })\n  return sets\n}\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = []\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value)\n    }\n  })\n  return tuples\n}\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [set()]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), set(), set()]\n  */\nconst filterSets = (values) => {\n  const sets = []\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      length++\n    }\n  }\n  return length\n}\n\n/* Return string with given length\n  >>> strlen('abc', 2)\n  'ab'\n  >>> strlen('abc', 3)\n  'abc'\n  */\nconst strlenWithLength = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLength = (string, length, length2) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLength = (string, length, length2, length3) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4, length5) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4, length5, length6) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4, length5, length6, length7) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4, length5, length6, length7, length8) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length8; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4, length5, length6, length7, length8, length9) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length8; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length9; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 2, 3)\n  'ab'\n  >>> strlenWithLength('abc', 3, 3)\n  'abc'\n  */\nconst strlenWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLengthWithLength = (string, length, length2, length3, length4, length5, length6, length7, length8, length9, length10) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor < n) {\n        divisor *= 2;\n      }\n      if (divisor > maxDivisor) {\n        maxDivisor = divisor;\n        maxDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let divisor = i;\n      while (divisor > n) {\n        divisor /= 2;\n      }\n      if (divisor < minDivisor) {\n        minDivisor = divisor;\n        minDivisorFactor = i / divisor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let min", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast2 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast3 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast4 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast5 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast6 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast7 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast8 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast9 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast10 = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast11", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3])\n  [1, 2, 3]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) > -1) {\n      continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicateLessThanOnce([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicateLessThanOnce", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[a-z]/g, char => char.toUpperCase())\n   .replace(/[A-Z]/g, char => char.toLowerCase());\n};\n\n/**\n * Given a string, return a new string with each character replaced with a new random letter.\n * If no letters are present in the string, return an empty string.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is provided, return a new string with each character replaced with a new random letter.\n * If no string is ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all whitespace from a string\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  abc  ')\n  'abc'\n  */\nconst replaceWhiteSpace = (str", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst gottenNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/*Return the sum of the numbers in the list.\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum = (l) => {\n  return l.reduce((acc, n) => acc + n, 0);\n};\n\n/*Return the average of the numbers in the list.\n  >>> average([1, 2, 3, 4, 5, 6])\n  2.2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.2\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of the numbers in the list.\n  >>> median([1, 2, 3, 4, 5, 6])\n  3\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*Return the mode of the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5, 6])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const num = l[i];\n    counts[num] = counts[num]? counts[num] + 1 : 1;\n  }\n  return l.filter((num, i) => counts[num] === l.length - i).sort((a, b) => a - b)[0];\n};\n\n/*Return the standard deviation of the numbers in the list.\n  >>> stdev([1, 2, 3, 4, 5, 6])\n  1.5811388300841898\n  >>> stdev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.617996901416665\n  */\nconst stdev = (l) => {\n  const avg = average(l);\n  const variance = l.map((n) => Math.pow(n - avg, 2)).reduce((acc, n) => acc + n, 0);\n  return Math.sqrt(variance);\n};\n\n/*Return the variance of the numbers in the list.\n  >>> variance([1, 2, 3, 4, 5, 6])\n  5.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5.5\n  */\nconst variance = (l) => {\n  const avg = average(l);\n  const variance = l.map((n) => Math.pow(n - avg, 2)).reduce((acc, n) => acc + n, 0);\n  return variance / l.length;\n};\n\n/*Return the minimum of the numbers in the list.\n  >>> min([1, 2, 3, 4, 5, 6])\n  1\n  >>> min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min = (l) => {\n  return l.sort((a, b) => a - b)[0];\n};\n\n/*Return the maximum of the numbers in the list.\n  >>> max([1, 2, 3, 4, 5, 6])\n  6\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  10\n  */\nconst max = (l) => {\n  return l.sort((a, b) => b - a)[0];\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> countOccurrences([1, 2, 3, 4, 5, 6], 6)\n  3\n  >>> countOccurrences([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  2\n  */\nconst countOccurrences = (l, num) => {\n  return l.filter((n) => n === num).length;\n};\n\n/*Return the number of times the given number appears in the list.\n  >>> count", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] === 0) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of poly(xs).\n  findMax returns only only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] > xs[i - 1]) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of poly(xs).\n  findMin returns only only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < xs[i - 1]) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of poly(xs).\n  findMax returns only only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] > xs[i - 1]) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of poly(xs).\n  findMin returns only only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < xs[i - 1]) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of poly(xs).\n  findMax returns only only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] > xs[i - 1]) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of poly(xs).\n  findMin returns only only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i] < xs[i - 1]) {\n      found = true;\n      break;\n    }\n    if (found) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of poly(xs).\n  findMax returns only only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsFifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsFifth = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 5 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsSeventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsSeventh = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 7 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsNinth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsNinth = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 9 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTenth = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 10 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentieth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentieth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsTwentieth = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 20 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsThirty = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 30 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fourty, while its values at the indicies that are divisible by fourty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsFourty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsFourty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsFourty = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 40 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fifty, while its values at the indicies that are divisible by fifty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsFifty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsFifty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsFifty = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 50 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by sixty, while its values at the indicies that are divisible by sixty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsSixty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsSixty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortsSixty = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  const l3 = [];\n  for (let i = 0; i < l2.length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElements = (l) => {\n  let min = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i]\n    }\n  }\n  return min\n}\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i]\n  }\n  return product\n}\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sumGreaterElements([1, 2, 3], 3)\n  6\n  >>> sumGreaterElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst sumGreaterElements = (l, num) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sumLessElements([1, 2, 3], 3)\n  6\n  >>> sumLessElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst sumLessElements = (l, num) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/*Return product of all elements in the list that are greater than the given number.\n  >>> productGreaterElements([1, 2, 3], 3)\n  6\n  >>> productGreaterElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst productGreaterElements = (l, num) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      product *= l[i]\n    }\n  }\n  return product\n}\n\n/*Return product of all elements in the list that are less than the given number.\n  >>> productLessElements([1, 2, 3], 3)\n  6\n  >>> productLessElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst productLessElements = (l, num) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      product *= l[i]\n    }\n  }\n  return product\n}\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sumEqualElements([1, 2, 3], 3)\n  6\n  >>> sumEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst sumEqualElements = (l, num) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/*Return product of all elements in the list that are equal to the given number.\n  >>> productEqualElements([1, 2, 3], 3)\n  6\n  >>> productEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst productEqualElements = (l, num) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      product *= l[i]\n    }\n  }\n  return product\n}\n\n/*Return sum of all elements in the list that are not equal to the given number.\n  >>> sumNotEqualElements([1, 2, 3], 3)\n  6\n  >>> sumNotEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst sumNotEqualElements = (l, num) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== num) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/*Return product of all elements in the list that are not equal to the given number.\n  >>> productNotEqualElements([1, 2, 3], 3)\n  6\n  >>> productNotEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst productNotEqualElements = (l, num) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== num) {\n      product *= l[i]\n    }\n  }\n  return product\n}\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sumLessOrEqualElements([1, 2, 3], 3)\n  6\n  >>> sumLessOrEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst sumLessOrEqualElements = (l, num) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/*Return product of all elements in the list that are less than or equal to the given number.\n  >>> productLessOrEqualElements([1, 2, 3], 3)\n  6\n  >>> productLessOrEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst productLessOrEqualElements = (l, num) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      product *= l[i]\n    }\n  }\n  return product\n}\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sumGreaterOrEqualElements([1, 2, 3], 3)\n  6\n  >>> sumGreaterOrEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst sumGreaterOrEqualElements = (l, num) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i]\n    }\n  }\n  return sum\n}\n\n/*Return product of all elements in the list that are greater than or equal to the given number.\n  >>> productGreaterOrEqualElements([1, 2, 3], 3)\n  6\n  >>> productGreaterOrEqualElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  -23\n  */\nconst productGreaterOrEqualElements = (l, num) => {\n  let product = 1\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      product *= l[i]\n    }\n  }\n  return product\n}\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sumLessOrEqualElements([1, 2, 3], 3)\n  6\n  >>> sumLessOrEqualElements([5, 3, -5, 2, -3, 3, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes3(50)\n  0\n  >>> fizzBuzzes3(78)\n  2\n  >>> fizzBuzzes3(79)\n  3\n  */\nconst fizzBuzzes5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes5(50)\n  0\n  >>> fizzBuzzes5(78)\n  2\n  >>> fizzBuzzes5(79)\n  3\n  */\nconst fizzBuzzes7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes7(50)\n  0\n  >>> fizzBuzzes7(78)\n  2\n  >>> fizzBuzzes7(79)\n  3\n  */\nconst fizzBuzzes11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes11(50)\n  0\n  >>> fizzBuzzes11(78)\n  2\n  >>> fizzBuzzes11(79)\n  3\n  */\nconst fizzBuzzes13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes13(50)\n  0\n  >>> fizzBuzzes13(78)\n  2\n  >>> fizzBuzzes13(79)\n  3\n  */\nconst fizzBuzzes15 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes15(50)\n  0\n  >>> fizzBuzzes15(78)\n  2\n  >>> fizzBuzzes15(79)\n  3\n  */\nconst fizzBuzzes17 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes17(50)\n  0\n  >>> fizzBuzzes17(78)\n  2\n  >>> fizzBuzzes17(79)\n  3\n  */\nconst fizzBuzzes19 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0 || i % 19 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes19(50)\n  0\n  >>> fizzBuzzes19(78)\n  2\n  >>> fizzBuzzes19(79)\n  3\n  */\nconst fizzBuzzes23 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0 || i % 19 === 0 || i % 23 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes23(50)\n  0\n  >>> fizzBuzzes23(78)\n  2\n  >>> fizzBuzzes23(79)\n  3\n  */\nconst fizzBuzzes25 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0 || i % 19 === 0 || i % 23 === 0 || i % 25 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes25(50)\n  0\n  >>> fizzBuzzes25(78)\n  2\n  >>> fizzBuzzes25(79)\n  3\n  */\nconst fizzBuzzes27 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0 || i % 11 === 0 || i % 13 === 0 || i % 15 === 0 || i % 17 === 0 || i % 19 === 0 || i % 23 === 0 || i % 25 === 0 || i % 27 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appear", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of eight characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic8 function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of nine characters.\n  */\nconst encodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic9 function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of ten characters.\n  */\nconst ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = 1;\n  let prime = 2;\n  while (fibs < n) {\n    fibs += prime;\n    prime++;\n  }\n  return fibs;\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = modeNumber(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = modeNumber(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = modeNumber(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = modeNumber(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = Math.median(numbers);\n  return numbers.map((x) => Math.abs(x - median));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = modeNumber(numbers);\n  return numbers.map((x) => Math.abs(x - mode));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanerAbsolutesDeviation = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed([1])\n  false\n  */\nconst tripleSumToZeroed = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed2 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed2([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed2([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed2([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed2([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed2([1])\n  false\n  */\nconst tripleSumToZeroed2 = (l, sum) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed3 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed3([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed3([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed3([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed3([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed3([1])\n  false\n  */\nconst tripleSumToZeroed3 = (l, sum) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed4 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed4([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed4([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed4([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed4([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed4([1])\n  false\n  */\nconst tripleSumToZeroed4 = (l, sum) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed5 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed5([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed5([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed5([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed5([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed5([1])\n  false\n  */\nconst tripleSumToZeroed5 = (l, sum) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed6 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed6([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed6([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed6([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed6([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed6([1])\n  false\n  */\nconst tripleSumToZeroed6 = (l, sum) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed7 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed7([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed7([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed7([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed7([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed7([1])\n  false\n  */\nconst tripleSumToZeroed7 = (l, sum) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i]) && set.has(l[i - 1]) && set.has(l[i + 1])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n};\n\n/*\n  tripleSumToZeroed8 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZeroed8([1, 3, 5, 0])\n  false\n  >>> tripleSumToZeroed8([1, 3, -2, 1])\n  true\n  >>> tripleSumToZeroed8([1, 2, 3, 7])\n  false\n  >>> tripleSumToZeroed8([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZeroed8([1])\n  false\n  */\nconst tripleSumToZeroed8 = (l, sum) => {\n  const ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaces = (collisions) => {\n  let races = 0;\n  for (let i = 0; i < collisions; i++) {\n    races++;\n  }\n  return races;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRace = (collisions) => {\n  let race = 0;\n  for (let i = 0; i < collisions; i++) {\n    race++;\n  }\n  return race;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaceCollisions = (collisions) => {\n  let collisions = 0;\n  for (let i = 0; i < collisions; i++) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaceCollisions = (collisions) => {\n  let collisions = 0;\n  for (let i = 0; i < collisions; i++) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaceCollision = (collisions) => {\n  let collisions = 0;\n  for (let i = 0; i < collisions; i++) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaceCollisions = (collisions) => {\n  let collisions = 0;\n  for (let i = 0; i < collisions; i++) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaceCollisions = (collisions) => {\n  let collisions = 0;\n  for (let i = 0; i < collisions; i++) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue mov", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] + 1)\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 1, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrLists = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i] - 1)\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === sum) {\n        return true;\n      }\n    }\n  }\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString2 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString3 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString4 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString5 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString6 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString7 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString8 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString9 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString10 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString11 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString12 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString13 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString14 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString15 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString16 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString17 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBasesString18 = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = digits[x % base] + res\n    x = Math.floor(x / base)\n  }\n  return res", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return Math.sqrt(a * a + h * h) / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresAreas(5, 3)\n  7.5\n  */\nconst squaresAreas = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesAreas(5, 3)\n  7.5\n  */\nconst circlesAreas = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesCircumference(5, 3)\n  7.5\n  */\nconst trianglesCircumference = (a, h) => {\n  return Math.sqrt(a * a + h * h) / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresCircumference(5, 3)\n  7.5\n  */\nconst squaresCircumference = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesCircumference(5, 3)\n  7.5\n  */\nconst circlesCircumference = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesPerimeter(5, 3)\n  7.5\n  */\nconst circlesPerimeter = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesPerimeter(5, 3)\n  7.5\n  */\nconst circlesPerimeter = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesCircumference(5, 3)\n  7.5\n  */\nconst trianglesCircumference = (a, h) => {\n  return Math.sqrt(a * a + h * h) / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresCircumference(5, 3)\n  7.5\n  */\nconst squaresCircumference = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesCircumference(5, 3)\n  7.5\n  */\nconst circlesCircumference = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesArea(5, 3)\n  7.5\n  */\nconst trianglesArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresArea(5, 3)\n  7.5\n  */\nconst squaresArea = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circlesArea(5, 3)\n  7.5\n  */\nconst circlesArea = (a, h) => {\n  return Math.PI * Math.pow(a, 2) / 2 + Math.PI * Math.pow(h / 2, 2) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> trianglesPerimeter(5, 3)\n  7.5\n  */\nconst trianglesPerimeter = (a, h) => {\n  return a * a / 2 + h * h / 2;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squaresPerimeter(5, 3)\n  7.5\n  */\nconst squaresPerimeter = (a, h) => {\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n - 1) + fibonacci(n - 2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci seq", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.keys(counts).findIndex((key) => counts[key] === maxCount);\n  return maxCountIndex;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text[i]\n  }\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text.length <= 1) {\n    return true\n  }\n  return text === isPalindromeRecursive(text.slice(0, text.length - 1))\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isPalindromeIterative('aaaaa')\n  true\n  >>> isPalindromeIterative('zbcd')\n  false\n  */\nconst isPalindromeIterative = (text) => {\n  let index = 0\n  while (index < text.length) {\n    if (text[index]!== text.length - index - 1) {\n      return false\n    }\n    index++\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindrome using iteration\n  >>> isPalindromeIterative('')\n  true\n  >>> isPalindromeIterative('aba')\n  true\n  >>> isP", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modp() only accepts positive integers n and p');\n  }\n  return Math.pow(n, p) % p;\n};\n\n/*\n  >>> modpow(3, 5, 7)\n  3\n  >>> modpow(1101, 101, 7)\n  2\n  >>> modpow(0, 101, 7)\n  1\n  >>> modpow(3, 11, 7)\n  8\n  >>> modpow(100, 101, 7)\n  1\n  */\nconst modpow = (n, p, m) => {\n  if (n < 0 || p < 0 || n < p || n % p!== 0) {\n    throw new Error('modpow() only accepts positive integers n and p');\n  }\n  if (m!= null && m < 1) {\n    throw new Error('modpow() requires m to be a positive integer');\n  }\n  if (m == null || m > p) {\n    return Math.pow(n, p) % p;\n  }\n  return modp(modp(modp(n, p), m), p);\n};\n\n/*\n  >>> isqrt(9)\n  3\n  >>> isqrt(8)\n  2\n  >>> isqrt(27)\n  3\n  >>> isqrt(25)\n  2\n  >>> isqrt(22)\n  3\n  >>> isqrt(15)\n  4\n  >>> isqrt(17)\n  5\n  >>> isqrt(21)\n  6\n  >>> isqrt(0)\n  1\n  >>> isqrt(-1)\n  1\n  >>> isqrt(-2)\n  2\n  >>> isqrt(-3)\n  2\n  >>> isqrt(-4)\n  3\n  >>> isqrt(-5)\n  3\n  >>> isqrt(-6)\n  4\n  >>> isqrt(-7)\n  5\n  >>> isqrt(-8)\n  5\n  >>> isqrt(-9)\n  6\n  >>> isqrt(10)\n  7\n  >>> isqrt(11)\n  7\n  >>> isqrt(12)\n  7\n  >>> isqrt(13)\n  8\n  >>> isqrt(14)\n  8\n  >>> isqrt(15)\n  8\n  >>> isqrt(16)\n  8\n  >>> isqrt(17)\n  8\n  >>> isqrt(18)\n  9\n  >>> isqrt(19)\n  9\n  >>> isqrt(20)\n  9\n  >>> isqrt(21)\n  9\n  >>> isqrt(22)\n  9\n  >>> isqrt(23)\n  9\n  >>> isqrt(24)\n  9\n  >>> isqrt(25)\n  9\n  >>> isqrt(26)\n  9\n  >>> isqrt(27)\n  9\n  >>> isqrt(28)\n  9\n  >>> isqrt(29)\n  9\n  >>> isqrt(30)\n  9\n  >>> isqrt(31)\n  9\n  >>> isqrt(32)\n  10\n  >>> isqrt(33)\n  10\n  >>> isqrt(34)\n  10\n  >>> isqrt(35)\n  10\n  >>> isqrt(36)\n  10\n  >>> isqrt(37)\n  10\n  >>> isqrt(38)\n  10\n  >>> isqrt(39)\n  10\n  >>> isqrt(40)\n  10\n  >>> isqrt(41)\n  10\n  >>> isqrt(42)\n  10\n  >>> isqrt(43)\n  10\n  >>> isqrt(44)\n  10\n  >>> isqrt(45)\n  10\n  >>> isqrt(46)\n  10\n  >>> isqrt(47)\n  10\n  >>> isqrt(48)\n  10\n  >>> isqrt(49)\n  10\n  >>> isqrt(50)\n  10\n  >>> isqrt(51)\n  10\n  >>> isqrt(52)\n  10\n  >>> isqrt(53)\n  10\n  >>> isqrt(54)\n  10\n  >>> isqrt(55)\n  10\n  >>> isqrt(56)\n  10\n  >>> isqrt(57)\n  10\n  >>> isqrt(58)\n  10\n  >>> isqrt(59)\n  10\n  >>> isqrt(60)\n  10\n  >>> isqrt(61)\n  10\n  >>> isqrt(62)\n  10\n  >>> isqrt(63)\n  10\n  >>> isqrt(64)\n  10\n  >>> isqrt(65)\n  10\n  >>> isqrt(66)\n  10\n  >>> isqrt(67)\n  10\n  >>> isqrt(68)\n  10\n  >>> isqrt(69)\n  10\n  >>> isqrt(70)\n  10\n  >>> isqrt(71)\n  10\n  >>> isqrt(72)\n  10\n  >>> isqrt(73)\n  10\n  >>> isqrt(74)\n  10\n  >>> isqrt(75)\n  10\n  >>> isqrt(76)\n  10\n  >>> isqrt(77)\n  10\n  >>> isqrt(78)\n  10\n  >>> isqrt(79)\n  10\n  >>> isqrt(80)\n  10\n  >>> isqrt(81)\n  10\n  >>> isqrt(82)\n  10\n  >>> isqrt(83)\n  10\n  >>> isqrt(84)\n  10\n  >>> isqrt(85)\n  10\n  >>> isqrt(86)\n  10\n  >>> isqrt(87)\n  10\n  >>> isqrt(88)\n  10\n  >>> isqrt(89)\n  10\n  >>> isqrt(90)\n  10\n  >>> isqrt(91)\n  10\n  >>> isqrt(92)\n  10\n  >>> isqrt(93)\n  10\n  >>> isqrt(94)\n  10\n  >>> isqrt(95)\n  10\n  >>> isqrt(96)\n  10\n  >>> isqrt(97)\n  10\n  >>> isqrt(98)\n  10\n  >>> isqrt(99)\n  10\n  >>> isqrt(100)\n  10\n  >>> isqrt(101)\n  10\n  >>> isqrt(102)\n  10\n  >>> isqrt(103)\n  10\n  >>> isqrt(104)\n  10\n  >>> isqrt(105)\n  10\n  >>> isqrt(106)\n  10\n  >>> isqrt(107)\n  10\n  >>> isqrt(108)\n  10\n  >>> isqr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing the elements of `input` followed by the elements of `input` reversed.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given `input = [1, 2, 3, 4, 5]`, `output = [5, 4, 3, 2, 1]`.\n *\n * This is an alias for `input.concat(Array.from(input).reverse())`.\n *\n * Example:\n * Given ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeNonAscii is a function that takes string and returns string without non-ascii characters.\n  >>> removeNonAscii('')\n  ''\n  >>> removeNonAscii(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAscii('abcdef')\n  'bcdf'\n  >>> removeNonAscii('aaaaa')\n  ''\n  >>> removeNonAscii('aaBAA')\n  'B'\n  >>> removeNonAscii('zbcd')\n  'zbcd'\n  */\nconst removeNonAscii = (text) => {\n  return text.replace(/[^\\x00-\\x7F]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewline is a function that takes string and returns string without non-ascii characters and newlines.\n  >>> removeNonAsciiAndNewline('')\n  ''\n  >>> removeNonAsciiAndNewline(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAsciiAndNewline('abcdef')\n  'bcdf'\n  >>> removeNonAsciiAndNewline('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewline('aaBAA')\n  'B'\n  >>> removeNonAsciiAndNewline('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndNewline = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\n]/g, '');\n};\n\n/*\n  removeNonAsciiAndTab is a function that takes string and returns string without non-ascii characters and tabs.\n  >>> removeNonAsciiAndTab('')\n  ''\n  >>> removeNonAsciiAndTab(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAsciiAndTab('abcdef')\n  'bcdf'\n  >>> removeNonAsciiAndTab('aaaaa')\n  ''\n  >>> removeNonAsciiAndTab('aaBAA')\n  'B'\n  >>> removeNonAsciiAndTab('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndTab = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\t]/g, '');\n};\n\n/*\n  removeNonAsciiAndCarriageReturn is a function that takes string and returns string without non-ascii characters and carriage returns.\n  >>> removeNonAsciiAndCarriageReturn('')\n  ''\n  >>> removeNonAsciiAndCarriageReturn(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAsciiAndCarriageReturn('abcdef')\n  'bcdf'\n  >>> removeNonAsciiAndCarriageReturn('aaaaa')\n  ''\n  >>> removeNonAsciiAndCarriageReturn('aaBAA')\n  'B'\n  >>> removeNonAsciiAndCarriageReturn('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndCarriageReturn = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\r]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewlineAndCarriageReturn is a function that takes string and returns string without non-ascii characters and carriage returns and newlines.\n  >>> removeNonAsciiAndNewlineAndCarriageReturn('')\n  ''\n  >>> removeNonAsciiAndNewlineAndCarriageReturn(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAsciiAndNewlineAndCarriageReturn('abcdef')\n  'bcdf'\n  >>> removeNonAsciiAndNewlineAndCarriageReturn('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewlineAndCarriageReturn('aaBAA')\n  'B'\n  >>> removeNonAsciiAndNewlineAndCarriageReturn('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndNewlineAndCarriageReturn = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\r]/g, '');\n};\n\n/*\n  removeNonAsciiAndTabAndCarriageReturn is a function that takes string and returns string without non-ascii characters and carriage returns and tabs.\n  >>> removeNonAsciiAndTabAndCarriageReturn('')\n  ''\n  >>> removeNonAsciiAndTabAndCarriageReturn(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAsciiAndTabAndCarriageReturn('abcdef')\n  'bcdf'\n  >>> removeNonAsciiAndTabAndCarriageReturn('aaaaa')\n  ''\n  >>> removeNonAsciiAndTabAndCarriageReturn('aaBAA')\n  'B'\n  >>> removeNonAsciiAndTabAndCarriageReturn('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndTabAndCarriageReturn = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\t\\r]/g, '');\n};\n\n/*\n  removeNonAsciiAndCarriageReturnAndNewline is a function that takes string and returns string without non-ascii characters and carriage returns and newlines.\n  >>> removeNonAsciiAndCarriageReturnAndNewline('')\n  ''\n  >>> removeNonAsciiAndCarriageReturnAndNewline(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNonAsciiAndCarriageReturnAndNewline('abcdef')\n  'bcdf'\n  >>> removeNonAsciiAndCarriageReturnAndNewline('aaaaa')\n  ''\n  >>> removeNonAsciiAndCarriageReturnAndNewline('aaBAA')\n  'B'\n  >>> removeNonAsciiAndCarriageReturnAndNewline('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndCarriageReturnAndNewline = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\r]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewlineAndTab is a function that takes string and returns string without non-ascii characters and carriage returns and tabs.\n  >>> removeNonAsciiAndNewlineAndTab('')\n  ''\n  >>> removeNonAsciiAndNewlineAndTab(\"abcdef\\ngh", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThresholds([1, 2, 4, 10], 100)\n  false\n  >>> aboveThresholds([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThresholds = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equals([1, 2, 4, 10], 100)\n  true\n  >>> equals([1, 20, 4, 10], 5)\n  true\n  >>> equals([1, 20, 4, 10], 15)\n  false\n  */\nconst equals = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equals([1, 2, 4, 10], 100)\n  true\n  >>> equals([1, 20, 4, 10], 5)\n  true\n  >>> equals([1, 20, 4, 10], 15)\n  false\n  */\nconst equals = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> less([1, 2, 4, 10], 100)\n  false\n  >>> less([1, 20, 4, 10], 5)\n  true\n  >>> less([1, 20, 4, 10], 15)\n  true\n  */\nconst less = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> less([1, 2, 4, 10], 100)\n  false\n  >>> less([1, 20, 4, 10], 5)\n  true\n  >>> less([1, 20, 4, 10], 15)\n  true\n  */\nconst less = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greater([1, 2, 4, 10], 100)\n  false\n  >>> greater([1, 20, 4, 10], 5)\n  true\n  >>> greater([1, 20, 4, 10], 15)\n  true\n  */\nconst greater = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greater([1, 2, 4, 10], 100)\n  false\n  >>> greater([1, 20, 4, 10], 5)\n  true\n  >>> greater([1, 20, 4, 10], 15)\n  true\n  */\nconst greater = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between([1, 2, 4, 10], 100, 100)\n  true\n  >>> between([1, 20, 4, 10], 5, 10)\n  true\n  >>> between([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst between = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between([1, 2, 4, 10], 100, 100)\n  true\n  >>> between([1, 20, 4, 10], 5, 10)\n  true\n  >>> between([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst between = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  true\n  >>> equal([1, 20, 4, 10], 15)\n  true\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  true\n  >>> equal([1, 20, 4, 10], 15)\n  true\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> less([1, 2, 4, 10], 100)\n  false\n  >>> less([1, 20, 4, 10], 5)\n  true\n  >>> less([1, 20, 4, 10], 15)\n  true\n  */\nconst less = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> less([1, 2, 4, 10], 100)\n  false\n  >>> less([1, 20, 4, 10], 5)\n  true\n  >>> less([1, 20, 4, 10], 15)\n  true\n  */\nconst less = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greater([1, 2, 4, 10], 100)\n  false\n  >>> greater([1, 20, 4, 10], 5)\n  true\n  >>> greater([1, 20, 4, 10], 15)\n  true\n  */\nconst greater = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greater([1, 2, 4, 10], 100)\n  false\n  >>> great", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n/*Subtracts two numbers x and y\n  >>> subtracting(2, 3)\n  1\n  >>> subtracting(5, 7)\n  3\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n};\n\n/*Multiplies two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  21\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*Divides two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  3\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*Calculates the factorial of x\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x) => {\n  return x * factorial(x - 1);\n};\n\n/*Calculates the square root of x\n  >>> squareRoot(5)\n  2.8284271247461903\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Calculates the cube root of x\n  >>> cubeRoot(5)\n  1.7320508075688772\n  */\nconst cubeRoot = (x) => {\n  return Math.cbrt(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x) => {\n  return Math.cos(x);\n};\n\n/*Calculates the sine of x\n  >>> sine(5)\n  0.8414709848078965\n  */\nconst sine = (x) => {\n  return Math.sin(x);\n};\n\n/*Calculates the tangent of x\n  >>> tangent(5)\n  0.6427876096865398\n  */\nconst tangent = (x) => {\n  return Math.tan(x);\n};\n\n/*Calculates the cosine of x\n  >>> cosine(5)\n  0.5403023058681398\n  */\nconst cosine = (x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  if (openingBracketsCount === closingBracketsCount) {\n    return true\n  }\n\n  return false\n}\n\nconst getBracketsCount = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  return openingBracketsCount + closingBracketsCount\n}\n\nconst getBracketsString = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">\"\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<\"\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpace = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \"> \"\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"< \"\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndComma = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \"\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \"\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCount = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \"\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \"\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCountAndBracketsString = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \"\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \"\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCountAndBracketsStringWithSpace = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \" // add space after comma\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \" // add space after comma\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCountAndBracketsStringWithSpaceAndComma = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \" // add space after comma\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \" // add space after comma\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCountAndBracketsStringWithSpaceAndCommaAndBracketsString = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \" // add space after comma\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \" // add space after comma\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCountAndBracketsStringWithSpaceAndCommaAndBracketsStringWithSpace = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \" // add space after comma\n  }\n\n  for (let i = 0; i < closingBracketsCount; i++) {\n    bracketsString += \"<, \" // add space after comma\n  }\n\n  return bracketsString\n}\n\nconst getBracketsStringWithSpaceAndCommaAndBracketsCountAndBracketsStringWithSpaceAndCommaAndBracketsStringWithSpaceAndComma = (brackets) => {\n  const openingBrackets = brackets.split(\">\")\n  const closingBrackets = brackets.split(\"<\")\n  const openingBracketsCount = openingBrackets.length\n  const closingBracketsCount = closingBrackets.length\n\n  let bracketsString = \"\"\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    bracketsString += \">, \" // add space after comma\n  }\n\n  for (let i = 0; i < closing", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = l.length;\n  while (i < len) {\n    prev = l[i];\n    curr = l[i + 1];\n    next = l[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 1])\n  false\n  */\nconst monotonic2 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic2([4, 1, 0, -10])\n  true\n  >>> monotonic2([4, 1, 0, 10])\n  false\n  >>> monotonic2([4, 1, 0])\n  true\n  >>> monotonic2([4, 1, 1])\n  false\n  */\nconst monotonic3 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic3([4, 1, 0, -10])\n  true\n  >>> monotonic3([4, 1, 0, 10])\n  false\n  >>> monotonic3([4, 1, 0])\n  true\n  >>> monotonic3([4, 1, 1])\n  false\n  */\nconst monotonic4 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic4([4, 1, 0, -10])\n  true\n  >>> monotonic4([4, 1, 0, 10])\n  false\n  >>> monotonic4([4, 1, 0])\n  true\n  >>> monotonic4([4, 1, 1])\n  false\n  */\nconst monotonic5 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic5([4, 1, 0, -10])\n  true\n  >>> monotonic5([4, 1, 0, 10])\n  false\n  >>> monotonic5([4, 1, 0])\n  true\n  >>> monotonic5([4, 1, 1])\n  false\n  */\nconst monotonic6 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic6([4, 1, 0, -10])\n  true\n  >>> monotonic6([4, 1, 0, 10])\n  false\n  >>> monotonic6([4, 1, 0])\n  true\n  >>> monotonic6([4, 1, 1])\n  false\n  */\nconst monotonic7 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic7([4, 1, 0, -10])\n  true\n  >>> monotonic7([4, 1, 0, 10])\n  false\n  >>> monotonic7([4, 1, 0])\n  true\n  >>> monotonic7([4, 1, 1])\n  false\n  */\nconst monotonic8 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1];\n    next = arr[i + 2];\n    if (curr === prev && curr === next) {\n      i++;\n      continue;\n    }\n    if (curr < prev) {\n      return true;\n    }\n    if (curr > prev) {\n      return false;\n    }\n    if (next < prev) {\n      return true;\n    }\n    if (next > prev) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic8([4, 1, 0, -10])\n  true\n  >>> monotonic8([4, 1, 0, 10])\n  false\n  >>> monotonic8([4, 1, 0])\n  true\n  >>> monotonic8([4, 1, 1])\n  false\n  */\nconst monotonic9 = (arr) => {\n  let i = 0;\n  let j;\n  let prev;\n  let curr;\n  let next;\n  let len = arr.length;\n  while (i < len) {\n    prev = arr[i];\n    curr = arr[i + 1]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach(v => {\n    if (set2.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallerPrimeFactor(13195)\n  3\n  >>> smallerPrimeFactor(2048)\n  2\n  */\nconst smallerPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberDivisors(4, 6)\n  2\n  >>> numberDivisors(4, 7)\n  1\n  >>> numberDivisors(4, 8)\n  0\n  >>> numberDivisors(4, 9)\n  1\n  >>> numberDivisors(4, 10)\n  0\n  >>> numberDivisors(4, 11)\n  1\n  >>> numberDivisors(4, 12)\n  0\n  >>> numberDivisors(4, 13)\n  1\n  >>> numberDivisors(4, 14)\n  0\n  >>> numberDivisors(4, 15)\n  1\n  >>> numberDivisors(4, 16)\n  0\n  >>> numberDivisors(4, 17)\n  1\n  >>> numberDivisors(4, 18)\n  0\n  >>> numberDivisors(4, 19)\n  1\n  >>> numberDivisors(4, 20)\n  0\n  >>> numberDivisors(4, 21)\n  1\n  >>> numberDivisors(4, 22)\n  0\n  >>> numberDivisors(4, 23)\n  1\n  >>> numberDivisors(4, 24)\n  0\n  >>> numberDivisors(4, 25)\n  1\n  >>> numberDivisors(4, 26)\n  0\n  >>> numberDivisors(4, 27)\n  1\n  >>> numberDivisors(4, 28)\n  0\n  >>> numberDivisors(4, 29)\n  1\n  >>> numberDivisors(4, 30)\n  0\n  >>> numberDivisors(4, 31)\n  1\n  >>> numberDivisors(4, 32)\n  0\n  >>> numberDivisors(4, 33)\n  1\n  >>> numberDivisors(4, 34)\n  0\n  >>> numberDivisors(4, 35)\n  1\n  >>> numberDivisors(4, 36)\n  0\n  >>> numberDivisors(4, 37)\n  1\n  >>> numberDivisors(4, 38)\n  0\n  >>> numberDivisors(4, 39)\n  1\n  >>> numberDivisors(4, 40)\n  0\n  >>> numberDivisors(4, 41)\n  1\n  >>> numberDivisors(4, 42)\n  0\n  >>> numberDivisors(4, 43)\n  1\n  >>> numberDivisors(4, 44)\n  0\n  >>> numberDivisors(4, 45)\n  1\n  >>> numberDivisors(4, 46)\n  0\n  >>> numberDivisors(4, 47)\n  1\n  >>> numberDivisors(4, 48)\n  0\n  >>> numberDivisors(4, 49)\n  1\n  >>> numberDivisors(4, 50)\n  0\n  >>> numberDivisors(4, 51)\n  1\n  >>> numberDivisors(4, 52)\n  0\n  >>> numberDivisors(4, 53)\n  1\n  >>> numberDivisors(4, 54)\n  0\n  >>> numberDivisors(4, 55)\n  1\n  >>> numberDivisors(4, 56)\n  0\n  >>> numberDivisors(4, 57)\n  1\n  >>> numberDivisors(4, 58)\n  0\n  >>> numberDivisors(4, 59)\n  1\n  >>> numberDivisors(4, 60)\n  0\n  >>> numberDivisors(4, 61)\n  1\n  >>> numberDivisors(4, 62)\n  0\n  >>> numberDivisors(4, 63)\n  1\n  >>> numberDivisors(4, 64)\n  0\n  >>> numberDivisors(4, 65)\n  1\n  >>> numberDivisors(4, 66)\n  0\n  >>> numberDivisors(4, 67)\n  1\n  >>> numberDivisors(4, 68)\n  0\n  >>> numberDivisors(4, 69)\n  1\n  >>> numberDivisors(4, 70)\n  0\n  >>> numberDivisors(4, 71)\n  1\n  >>> numberDivisors(4, 72)\n  0\n  >>> numberDivisors(4, 73)\n  1\n  >>> numberDivisors(4, 74)\n  0\n  >>> numberDivisors(4, 75)\n  1\n  >>> numberDivisors(4, 76)\n  0\n  >>> numberDivisors(4, 77)\n  1\n  >>> numberDivisors(4, 78)\n  0\n  >>> numberDivisors(4, 79)\n  1\n  >>> numberDivisors(4, 80)\n  0\n  >>> numberDivisors(4, 81)\n  1\n  >>> numberDivisors(4, 82)\n  0\n  >>> numberDivisors(4, 83)\n  1\n  >>> numberDivisors(4, 84)\n  0\n  >>> numberDivisors(4, 85)\n  1\n  >>> numberDivisors(4, 86)\n  0\n  >>> numberDivisors(4, 87)\n  1\n  >>> numberDivisors(4, 88)\n  0\n  >>> numberDivisors(4, 89)\n  1\n  >>> numberDivisors(4, 90)\n  0\n  >>> numberDivisors(4, 91)\n  1\n  >>> numberDivisors(4, 92)\n  0\n  >>> numberDivisors(4, 93)\n  1\n  >>> numberDivisors(4, 94)\n  0\n  >>> numberDivisors(4, 95)\n  1\n  >>> numberDivisors(4, 96)\n  0\n  >>> numberDivisors(4, 97)\n  1\n  >>> numberDivisors(4, 98)\n  0\n  >>> numberDivisors(4, 99)\n  1\n  >>> numberDivisors(4, 100)\n  0\n  >>> numberDivisors(4, 101)\n  1\n  >>> numberDivisors(4, 102)\n  0\n  >>> numberDivisors(4, 103)\n  1\n  >>> numberDivisors(4, 104)\n  0\n  >>> numberDivisors(4, 105)\n  1\n  >>> numberDivisors(4, 106)\n  0\n  >>> numberDivisors(4, 107)\n  1\n  >>> numberDivisors(4, 108)\n  0\n  >>> numberDivisors(4, 109)\n  1\n  >>> numberDivisors(4, 110)\n  0\n  >>> numberDivisors(4, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const nesting_level = new Array(paren_string.length).fill(0);\n  let current_level = 0;\n  let current_paren_level = 0;\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_char;\n  let paren_char_count = 0;\n  let paren_char_level = 0;\n  let paren_char_char;\n  let paren_char_char_count = 0;\n  let paren_char_char_level = 0;\n  let paren_char_char_char;\n  let paren_char_char_char_count = 0;\n  let paren_char_char_char_level = 0;\n  let paren_char_char_char_char;\n  let paren_char_char_char_char_count = 0;\n  let paren_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char;\n  let paren_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_level = 0;\n  let paren_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n\n  // if there are an equal number of opening and closing brackets\n  // then they are all correct\n  if (openingBrackets.length === closingBrackets.length) {\n    for (let i = 0; i < openingBrackets.length; i++) {\n      if (openingBrackets[i]!== closingBrackets[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // if there are an odd number of opening and closing brackets\n  // then they are not all correct\n  if (openingBrackets.length % 2!== 0) {\n    return false;\n  }\n\n  // if there are an even number of opening and closing brackets\n  // then some are correct and others are not\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if a string is a valid function name.\n * Function names must start with a letter, and can only contain letters, numbers, and underscores.\n * Underscores are allowed anywhere except the first character of the name.\n * No spaces are allowed anywhere in the name.\n * No other characters are allowed.\n * @param {string} functionName The name of the function.\n * @return {boolean} True if the string is a valid function name.\n */\nconst isValidFunctionName = (functionName) => {\n  const firstChar = functionName[0];\n  const lastChar = functionName[functionName.length - 1];\n  const firstCharLower = firstChar.toLowerCase();\n  const lastCharLower = lastChar.toLowerCase();\n  const firstCharDigit = firstChar.charCodeAt(0);\n  const lastCharDigit = lastChar.charCodeAt(0);\n\n  // Function names must start with a letter, and can only contain letters, numbers, and underscores.\n  // Underscores are allowed anywhere except the first character of the name.\n  // No spaces are allowed anywhere in the name.\n  // No other characters are allowed.\n  if (firstCharDigit === lastCharDigit && firstCharDigit >= 65 && firstCharDigit <= 90 && lastCharDigit >= 65 && lastCharDigit <= 90) {\n    if (firstCharLower === lastCharLower) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if a string is a valid variable name.\n * Variable names must start with a letter, and can only contain letters, numbers, and underscores.\n * Underscores are allowed anywhere except the first character of the name.\n * No spaces are allowed anywhere in the name.\n * No other characters are allowed.\n * @param {string} variableName The name of the variable.\n * @return {boolean} True if the string is a valid variable name.\n */\nconst isValidVariableName = (variableName) => {\n  const firstChar = variableName[0];\n  const lastChar = variableName[variableName.length - 1];\n  const firstCharLower = firstChar.toLowerCase();\n  const lastCharLower = lastChar.toLowerCase();\n  const firstCharDigit = firstChar.charCodeAt(0);\n  const lastCharDigit = lastChar.charCodeAt(0);\n\n  // Variable names must start with a letter, and can only contain letters, numbers, and underscores.\n  // Underscores are allowed anywhere except the first character of the name.\n  // No spaces are allowed anywhere in the name.\n  // No other characters are allowed.\n  if (firstCharDigit === lastCharDigit && firstCharDigit >= 65 && firstCharDigit <= 90 && lastCharDigit >= 65 && lastCharDigit <= 90) {\n    if (firstCharLower === lastCharLower) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if a string is a valid function parameter name.\n * Function parameter names must start with a letter, and can only contain letters, numbers, and underscores.\n * Underscores are allowed anywhere except the first character of the name.\n * No spaces are allowed anywhere in the name.\n * No other characters are allowed.\n * @param {string} functionParameterName The name of the function parameter.\n * @return {boolean} True if the string is a valid function parameter name.\n */\nconst isValidFunctionParameterName = (functionParameterName) => {\n  const firstChar = functionParameterName[0];\n  const lastChar = functionParameterName[functionParameterName.length - 1];\n  const firstCharLower = firstChar.toLowerCase();\n  const lastCharLower = lastChar.toLowerCase();\n  const firstCharDigit = firstChar.charCodeAt(0);\n  const lastCharDigit = lastChar.charCodeAt(0);\n\n  // Function parameter names must start with a letter, and can only contain letters, numbers, and underscores.\n  // Underscores are allowed anywhere except the first character of the name.\n  // No spaces are allowed anywhere in the name.\n  // No other characters are allowed.\n  if (firstCharDigit === lastCharDigit && firstCharDigit >= 65 && firstCharDigit <= 90 && lastCharDigit >= 65 && lastCharDigit <= 90) {\n    if (firstCharLower === lastCharLower) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if a string is a valid variable parameter name.\n * Variable parameter names must start with a letter, and can only contain letters, numbers, and underscores.\n * Underscores are allowed anywhere except the first character of the name.\n * No spaces are allowed anywhere in the name.\n * No other characters are allowed.\n * @param {string} variableParameterName The name of the variable parameter.\n * @return {boolean} True if the string is a valid variable parameter name.\n */\nconst isValidVariableParameterName = (variableParameterName) => {\n  const firstChar = variableParameterName[0];\n  const lastChar = variableParameterName[variableParameterName.length - 1];\n  const firstCharLower = firstChar.toLowerCase();\n  const lastCharLower = lastChar.toLowerCase();\n  const firstCharDigit = firstChar.charCodeAt(0);\n  const lastCharDigit = lastChar.charCodeAt(0);\n\n  // Variable parameter names must start with a letter, and can only contain letters, numbers, and underscores.\n  // Underscores are allowed anywhere except the first character of the name.\n  // No spaces are allowed anywhere in the name.\n  // No other characters are allowed.\n  if (firstCharDigit === lastCharDigit && firstCharDigit >= 65 && firstCharDigit <= 90 && lastCharDigit >= 65 && lastCharDigit <= 90) {\n    if (firstCharLower === lastCharLower) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if a string is a valid function parameter type.\n * Function parameter types must start with a letter, and can only contain letters, numbers, and underscores.\n * Underscores are allowed anywhere except the first character of the type.\n * No spaces are allowed anywhere in the type.\n * No other characters are allowed.\n * @param {string} functionParameterType The type of the function parameter.\n * @return {boolean} True if the string is a valid function parameter type.\n */\nconst isValidFunctionParameterType = (functionParameterType) => {\n  const firstChar = functionParameterType[0];\n  const lastChar = functionParameterType[functionParameterType.length - 1];\n  const firstCharLower = firstChar.toLowerCase();\n  const lastCharLower = lastChar.toLowerCase();\n  const firstCharDigit = firstChar.charCodeAt(0);\n  const lastCharDigit = lastChar.charCodeAt(0);\n\n  // Function parameter types must start with a letter, and can only contain letters, numbers, and underscores.\n  // Underscores are allowed anywhere except the first character of the type.\n  // No spaces are allowed anywhere in the type.\n  // No other characters are allowed.\n  if (firstCharDigit === lastCharDigit && firstCharDigit >= 65 && firstChar", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = [\n    1,\n  ]\n  for (let i = 1; i < n; i++) {\n    d[i] = d[i - 1] * xs[i]\n  }\n  return d\n}\n\n/* Calculate roots of a polynomial using Newton's method.\n  Return an array of roots.\n  >>> roots([3, 1, 2, 4, 5])\n  [-0.66666667, 0.66666667, 1.0, -0.33333333]\n  >>> roots([1, 2, 3])\n  [-0.66666667, 0.66666667]\n  */\nconst roots = (poly) => {\n  const n = poly.length\n  if (n === 0) return []\n  if (n === 1) return [poly[0]]\n  const xs = [poly[0]]\n  const d = derivative(poly)\n  for (let i = 1; i < n; i++) {\n    const x = xs[i] / d[i]\n    xs.push(x)\n  }\n  return xs\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly[i - 1]\n  }\n  return area\n}\n\n/* Calculate area under a curve.\n  Return area under curve.\n  >>> area([3, 1, 2, 4, 5])\n  1.0\n  >>> area([1, 2, 3])\n  1.0\n  */\nconst area = (poly) => {\n  const n = poly.length\n  if (n === 0) return 0\n  if (n === 1) return poly[0] * poly[0]\n  const area = poly[0]\n  for (let i = 1; i < n; i++) {\n    area += poly[i] * poly", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes in two numbers and returns their sum.\n  >>> sum(1, 2)\n  3\n  >>> sum(1, 3)\n  6\n  >>> sum(1, 4)\n  10\n  >>> sum(1, 5)\n  15\n  >>> sum(2, 3)\n  6\n  >>> sum(2, 4)\n  10\n  >>> sum(2, 5)\n  15\n  >>> sum(3, 4)\n  10\n  >>> sum(3, 5)\n  15\n  >>> sum(4, 5)\n  15\n  >>> sum(5, 5)\n  15\n  >>> sum(6, 6)\n  15\n  >>> sum(7, 7)\n  15\n  >>> sum(8, 8)\n  15\n  >>> sum(9, 9)\n  15\n  >>> sum(10, 10)\n  15\n  >>> sum(11, 11)\n  15\n  >>> sum(12, 12)\n  15\n  >>> sum(13, 13)\n  15\n  >>> sum(14, 14)\n  15\n  >>> sum(15, 15)\n  15\n  >>> sum(16, 16)\n  15\n  >>> sum(17, 17)\n  15\n  >>> sum(18, 18)\n  15\n  >>> sum(19, 19)\n  15\n  >>> sum(20, 20)\n  15\n  >>> sum(21, 21)\n  15\n  >>> sum(22, 22)\n  15\n  >>> sum(23, 23)\n  15\n  >>> sum(24, 24)\n  15\n  >>> sum(25, 25)\n  15\n  >>> sum(26, 26)\n  15\n  >>> sum(27, 27)\n  15\n  >>> sum(28, 28)\n  15\n  >>> sum(29, 29)\n  15\n  >>> sum(30, 30)\n  15\n  >>> sum(31, 31)\n  15\n  >>> sum(32, 32)\n  15\n  >>> sum(33, 33)\n  15\n  >>> sum(34, 34)\n  15\n  >>> sum(35, 35)\n  15\n  >>> sum(36, 36)\n  15\n  >>> sum(37, 37)\n  15\n  >>> sum(38, 38)\n  15\n  >>> sum(39, 39)\n  15\n  >>> sum(40, 40)\n  15\n  >>> sum(41, 41)\n  15\n  >>> sum(42, 42)\n  15\n  >>> sum(43, 43)\n  15\n  >>> sum(44, 44)\n  15\n  >>> sum(45, 45)\n  15\n  >>> sum(46, 46)\n  15\n  >>> sum(47, 47)\n  15\n  >>> sum(48, 48)\n  15\n  >>> sum(49, 49)\n  15\n  >>> sum(50, 50)\n  15\n  >>> sum(51, 51)\n  15\n  >>> sum(52, 52)\n  15\n  >>> sum(53, 53)\n  15\n  >>> sum(54, 54)\n  15\n  >>> sum(55, 55)\n  15\n  >>> sum(56, 56)\n  15\n  >>> sum(57, 57)\n  15\n  >>> sum(58, 58)\n  15\n  >>> sum(59, 59)\n  15\n  >>> sum(60, 60)\n  15\n  >>> sum(61, 61)\n  15\n  >>> sum(62, 62)\n  15\n  >>> sum(63, 63)\n  15\n  >>> sum(64, 64)\n  15\n  >>> sum(65, 65)\n  15\n  >>> sum(66, 66)\n  15\n  >>> sum(67, 67)\n  15\n  >>> sum(68, 68)\n  15\n  >>> sum(69, 69)\n  15\n  >>> sum(70, 70)\n  15\n  >>> sum(71, 71)\n  15\n  >>> sum(72, 72)\n  15\n  >>> sum(73, 73)\n  15\n  >>> sum(74, 74)\n  15\n  >>> sum(75, 75)\n  15\n  >>> sum(76, 76)\n  15\n  >>> sum(77, 77)\n  15\n  >>> sum(78, 78)\n  15\n  >>> sum(79, 79)\n  15\n  >>> sum(80, 80)\n  15\n  >>> sum(81, 81)\n  15\n  >>> sum(82, 82)\n  15\n  >>> sum(83, 83)\n  15\n  >>> sum(84, 84)\n  15\n  >>> sum(85, 85)\n  15\n  >>> sum(86, 86)\n  15\n  >>> sum(87, 87)\n  15\n  >>> sum(88, 88)\n  15\n  >>> sum(89, 89)\n  15\n  >>> sum(90, 90)\n  15\n  >>> sum(91, 91)\n  15\n  >>> sum(92, 92)\n  15\n  >>> sum(93, 93)\n  15\n  >>> sum(94, 94)\n  15\n  >>> sum(95, 95)\n  15\n  >>> sum(96, 96)\n  15\n  >>> sum(97, 97)\n  15\n  >>> sum(98, 98)\n  15\n  >>> sum(99, 99)\n  15\n  >>> sum(100, 100)\n  15\n  >>> sum(101, 101)\n  15\n  >>> sum(102, 102)\n  15\n  >>> sum(103, 103)\n  15\n  >>> sum(104, 104)\n  15\n  >>> sum(105, 105)\n  15\n  >>> sum(106, 106)\n  15\n  >>> sum(107, 107)\n  15\n  >>> sum(108, 108)\n  15\n  >>> sum(109, 109)\n  15\n  >>> sum(110, 110)\n  15\n  >>> sum(111, 111)\n  15\n  >>> sum(112, 112)\n  15\n  >>> sum(113, 113)\n  15\n  >>> sum(114, 114)\n  15\n  >>> sum(115, 115)\n  15\n  >>> sum(116, 116)\n  15\n  >>> sum(117, 117)\n  15\n  >>> sum(118, 118)\n  15\n  >>> sum(119, 119)\n  15\n  >>> sum(120, 120)\n  15\n  >>> sum(121, 121)\n  15\n  >>> sum(122, 122)\n  15\n  >>> sum(123, 123)\n  15\n  >>> sum(124, 124)\n  15\n  >>> sum(125, 125)\n  15\n  >>> sum(126, 126)\n  15\n  >>> sum(127, 127)\n  15\n  >>> sum(128, 128)\n  15\n  >>> sum(129, 129)\n  15\n  >>> sum(130, 130)\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n  return digits.slice(shift, digits.length).join('') + digits.slice(0, shift).reverse().join('');\n};\n\n/*\n  Given a binary string x, return an array of its characters in reverse order.\n  >>> reverseBinary('1100')\n  '0110'\n  >>> reverseBinary('11')\n  '1'\n  >>> reverseBinary('10')\n  '0'\n  >>> reverseBinary('')\n  ''\n  */\nconst reverseBinary = (x) => {\n  if (x === '') return '';\n  return x.split('').reverse().join('');\n};\n\n/*\n  Given a binary string x, return a string where each character in x is reversed.\n  >>> reverseString('1100')\n  '0110'\n  >>> reverseString('11')\n  '1'\n  >>> reverseString('10')\n  '0'\n  >>> reverseString('')\n  ''\n  */\nconst reverseString = (x) => {\n  if (x === '') return '';\n  return x.split('').reverse().join('');\n};\n\n/*\n  Return the number of decimal digits in x.\n  >>> decimalDigits('100')\n  2\n  >>> decimalDigits('123.45')\n  2\n  >>> decimalDigits('12.345')\n  4\n  >>> decimalDigits('123.456789')\n  6\n  >>> decimalDigits('123.45678901')\n  7\n  >>> decimalDigits('123.456789012')\n  8\n  >>> decimalDigits('123.4567890123')\n  9\n  >>> decimalDigits('123.45678901234')\n  10\n  >>> decimalDigits('123.456789012345')\n  11\n  >>> decimalDigits('123.4567890123456')\n  12\n  >>> decimalDigits('123.45678901234567')\n  13\n  >>> decimalDigits('123.456789012345678')\n  14\n  >>> decimalDigits('123.4567890123456789')\n  15\n  >>> decimalDigits('123.45678901234567890')\n  16\n  >>> decimalDigits('123.456789012345678901')\n  17\n  >>> decimalDigits('123.4567890123456789012')\n  18\n  >>> decimalDigits('123.45678901234567890123')\n  19\n  >>> decimalDigits('123.456789012345678901234')\n  20\n  >>> decimalDigits('123.4567890123456789012345')\n  21\n  >>> decimalDigits('123.45678901234567890123456')\n  22\n  >>> decimalDigits('123.456789012345678901234567')\n  23\n  >>> decimalDigits('123.4567890123456789012345678')\n  24\n  >>> decimalDigits('123.45678901234567890123456789')\n  25\n  >>> decimalDigits('123.456789012345678901234567890')\n  26\n  >>> decimalDigits('123.4567890123456789012345678901')\n  27\n  >>> decimalDigits('123.45678901234567890123456789012')\n  28\n  >>> decimalDigits('123.456789012345678901234567890123')\n  29\n  >>> decimalDigits('123.4567890123456789012345678901234')\n  30\n  >>> decimalDigits('123.45678901234567890123456789012345')\n  31\n  >>> decimalDigits('123.456789012345678901234567890123456')\n  32\n  >>> decimalDigits('123.4567890123456789012345678901234567')\n  33\n  >>> decimalDigits('123.45678901234567890123456789012345678')\n  34\n  >>> decimalDigits('123.456789012345678901234567890123456789')\n  35\n  >>> decimalDigits('123.4567890123456789012345678901234567890')\n  36\n  >>> decimalDigits('123.45678901234567890123456789012345678901')\n  37\n  >>> decimalDigits('123.456789012345678901234567890123456789012')\n  38\n  >>> decimalDigits('123.4567890123456789012345678901234567890123')\n  39\n  >>> decimalDigits('123.45678901234567890123456789012345678901234')\n  40\n  >>> decimalDigits('123.456789012345678901234567890123456789012345')\n  41\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456')\n  42\n  >>> decimalDigits('123.45678901234567890123456789012345678901234567')\n  43\n  >>> decimalDigits('123.456789012345678901234567890123456789012345678')\n  44\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456789')\n  45\n  >>> decimalDigits('123.45678901234567890123456789012345678901234567890')\n  46\n  >>> decimalDigits('123.456789012345678901234567890123456789012345678901')\n  47\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456789012')\n  48\n  >>> decimalDigits('123.45678901234567890123456789012345678901234567890123')\n  49\n  >>> decimalDigits('123.456789012345678901234567890123456789012345678901234')\n  50\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456789012345')\n  51\n  >>> decimalDigits('123.45678901234567890123456789012345678901234567890123456')\n  52\n  >>> decimalDigits('123.456789012345678901234567890123456789012345678901234567')\n  53\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456789012345678')\n  54\n  >>> decimalDigits('123.45678901234567890123456789012345678901234567890123456789')\n  55\n  >>> decimalDigits('123.456789012345678901234567890123456789012345678901234567890')\n  56\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456789012345678901')\n  57\n  >>> decimalDigits('123.45678901234567890123456789012345678901234567890123456789012')\n  58\n  >>> decimalDigits('123.456789012345678901234567890123456789012345678901234567890123')\n  59\n  >>> decimalDigits('123.4567890123456789012345678901234567890123456789012345678901234')\n  60\n  >>> decimalDigits('123.45", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      sum += char - 'a' + 10;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 153\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(x => x % 2 === 0)\n  const index = arr.findIndex(x => x % 2 === 0)\n  return even.length? even.sort((a, b) => a - b)[0] : index\n}\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const odd = arr.filter(x => x % 2!== 0)\n  const index = arr.findIndex(x => x % 2!== 0)\n  return odd.length? odd.sort((a, b) => a - b)[0] : index\n}\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const odd = arr.filter(x => x % 2!== 0)\n  const index = arr.findIndex(x => x % 2!== 0)\n  return odd.length? odd.sort((a, b) => a - b)[0] : index\n}\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const odd = arr.filter(x => x % 2!== 0)\n  const index = arr.findIndex(x => x % 2!== 0)\n  return odd.length? odd.sort((a, b) => a - b)[0] : index\n}\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const odd = arr.filter(x => x % 2!== 0)\n  const index = arr.findIndex(x => x % 2!== 0)\n  return odd.length? odd.sort((a, b) => a - b)[0] : index\n}\n\nexport { pluckOddsIndex3 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item)) {\n      map.set(item, map.get(item) + 1);\n    } else {\n      map.set(item, 1);\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item)) {\n      if (map.get(item) > 0) {\n        return item;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns a string where each letter\n  is replaced by the letter that comes earliest in the alphabet in lexicographical order.\n  Examples:\n      letterReplacement(\"abc\") == \"bca\"\n      letterReplacement(\"ab\") == \"ba\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"z\") == \"a\"\n      letterReplacement(\"a\") == \"a\"\n      letterReplacement(\"a\") == \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string => string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(string =>!string.includes(substring));\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given a string, return a new string with each letter replaced by its ASCII value.\n\n  Examples:\n  letterToAscii('a') == '97'\n  letterToAscii('z') == '122'\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  letterToAscii(' ') ==''\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a\n  }\n  if (a === b || a === c || b === c) {\n    return -1\n  }\n  return Math.round((a + b + c) / 2)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle\n  rounded to 2 decimal points if the sides form a valid triangle. Otherwise return\n  -1\n  Two sides make a valid triangle when the sum of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n\n  const maxSum = Math.max(...q)\n  const maxWeight = maxSum + w\n\n  return q.reduce((acc, cur, i) => {\n    if (cur === maxSum) return true\n    if (cur === maxWeight - w) return false\n    return acc\n  }, true)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n\n  const maxSum = Math.max(...q)\n  const maxWeight = maxSum + w\n\n  return q.reduce((acc, cur, i) => {\n    if (cur === maxSum) return true\n    if (cur === maxWeight - w) return false\n    return acc\n  }, true)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n\n  const maxSum = Math.max(...q)\n  const maxWeight = maxSum + w\n\n  return q.reduce((acc, cur, i) => {\n    if (cur === maxSum) return true\n    if (cur === maxWeight - w) return false\n    return acc\n  }, true)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n\n  const maxSum = Math.max(...q)\n  const maxWeight = maxSum + w\n\n  return q.reduce((acc, cur, i) => {\n    if (cur === maxSum) return true\n    if (cur === maxWeight - w) return false\n    return acc\n  }, true)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n\n  const maxSum = Math.max(...q)\n  const maxWeight = maxSum + w\n\n  return q.reduce((acc, cur, i) => {\n    if (cur === maxSum) return true\n    if (cur === maxWeight - w) return false\n    return acc\n  }, true)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length <= 1) return true\n  if (q.length <= w) return false\n\n  const maxSum = Math.max(...q)\n  const maxWeight = maxSum + w\n\n  return q.reduce((acc, cur, i) => {\n    if (cur === maxSum) return true\n    if (cur === maxWeight - w) return false\n    return acc\n  }, true)\n}\n\n/*\n  Write a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = i;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of an element in the array.\n\n  For example:\n  maxValue([1,2,3,4,5]) == 5\n  maxValue([1,2,3]) == 2\n  maxValue([1,2]) == 1\n  maxValue([1,1]) == 0\n  */\nconst maxValue = (arr) => {\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the minimum value of an element in the array.\n\n  For example:\n  minValue([1,2,3,4,5]) == 3\n  minValue([1,2,3]) == 1\n  minValue([1,2]) == 2\n  minValue([1,1]) == 1\n  */\nconst minValue = (arr) => {\n  let min = arr[0];\n  for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const arr1 = lst1.sort((a, b) => a.length - b.length);\n  const arr2 = lst2.sort((a, b) => a.length - b.length);\n  const result = [];\n  let i = 0;\n  while (i < arr1.length && i < arr2.length) {\n    if (arr1[i] === arr2[i]) {\n      result.push(arr1[i]);\n      i++;\n    } else {\n      result.push(arr2[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the vowels removed.\n\n  Examples\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo'\n  removeVowels('hello') ➞ 'helo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isMultiplyPrime = true\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] < a) {\n      isMultiplyPrime = false\n      break\n    }\n  }\n  return isMultiplyPrime\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (n % 2 === 1) return false;\n  if (n % 3 === 2) return false;\n  if (n % 5 === 3) return true;\n  if (n % 7 === 5) return true;\n  if (n % 11 === 9) return true;\n  if (n % 13 === 7) return true;\n  if (n % 17 === 11) return true;\n  if (n % 19 === 13) return true;\n  if (n % 23 === 17) return true;\n  if (n % 29 === 19) return true;\n  if (n % 31 === 23) return true;\n  if (n % 37 === 29) return true;\n  if (n % 41 === 31) return true;\n  if (n % 47 === 37) return true;\n  if (n % 53 === 41) return true;\n  if (n % 59 === 47) return true;\n  if (n % 63 === 53) return true;\n  if (n % 69 === 59) return true;\n  if (n % 73 === 63) return true;\n  if (n % 79 === 69) return true;\n  if (n % 83 === 73) return true;\n  if (n % 87 === 79) return true;\n  if (n % 91 === 83) return true;\n  if (n % 97 === 87) return true;\n  if (n % 101 === 91) return true;\n  if (n % 103 === 97) return true;\n  if (n % 111 === 101) return true;\n  if (n % 113 === 103) return true;\n  if (n % 127 === 127) return true;\n  if (n % 131 === 131) return true;\n  if (n % 137 === 137) return true;\n  if (n % 143 === 143) return true;\n  if (n % 149 === 149) return true;\n  if (n % 151 === 151) return true;\n  if (n % 157 === 157) return true;\n  if (n % 163 === 163) return true;\n  if (n % 169 === 169) return true;\n  if (n % 173 === 173) return true;\n  if (n % 179 ===\n    179) return true;\n  if (n % 183 === 183) return true;\n  if (n % 191 === 191) return true;\n  if (n % 197 ===\n    197) return true;\n  if (n % 203 === 203) return true;\n  if (n % 209 === 209) return true;\n  if (n % 211 === 211) return true;\n  if (n % 217 === 217) return true;\n  if (n % 223 === 223) return true;\n  if (n % 229 === 229) return true;\n  if (n % 233 === 233) return true;\n  if (n % 239 === 239) return true;\n  if (n % 243 === 243) return true;\n  if (n % 249 === 249) return true;\n  if (n % 251 === 251) return true;\n  if (n % 257 ===\n    257) return true;\n  if (n % 263 === 263) return true;\n  if (n % 269 === 269) return true;\n  if (n % 273 === 273) return true;\n  if (n % 279 === 279) return true;\n  if (n % 283 === 283) return true;\n  if (n % 297 ===\n    297) return true;\n  if (n % 303 === 303) return true;\n  if (n % 309 === 309) return true;\n  if (n % 313 === 313) return true;\n  if (n % 317 === 317) return true;\n  if (n % 323 === 323) return true;\n  if (n % 329 === 329) return true;\n  if (n % 333 === 333) return true;\n  if (n % 339 ===\n    339) return true;\n  if (n % 343 === 343) return true;\n  if (n % 349 === 349) return true;\n  if (n % 351 === 351) return true;\n  if (n % 357 === 357) return true;\n  if (n % 363 === 363) return true;\n  if (n % 369 === 369) return true;\n  if (n % 373 === 373) return true;\n  if (n % 379 === 379) return true;\n  if (n % 383 === 383) return true;\n  if (n % 389 === 389) return true;\n  if (n % 393 === 393) return true;\n  if (n % 399 === 399) return true;\n  if (n % 403 === 403) return true;\n  if (n % 409 === 409) return true;\n  if (n % 413 === 413) return true;\n  if (n % 417 === 417) return true;\n  if (n % 423 === 423) return true;\n  if (n % 429 === 429) return true;\n  if (n % 433 === 433) return true;\n  if (n % 439 === 439) return true;\n  if (n % 443 === 443) return true;\n  if (n % 449 === 449) return true;\n  if (n % 467 === 467) return true;\n  if (n % 473 === 473) return true;\n  if (n % 479 === 479) return true;\n  if (n % 483 === 483) return true;\n  if (n % 489 === 489) return true;\n  if (n % 493 === 493) return true;\n  if (n % 499 === 499) return true;\n  if (n % 501 === 501) return true;\n  if (n % 507 ===\n    507) return true;\n  if (n % 509 === 509) return true;\n  if (n % 523 === 523) return true;\n  if (n % 529 === 529) return true;\n  if (n % 533 === 533) return true;\n  if (n % 539 === 539) return true;\n  if (n % 543 === 543) return true;\n  if (n % 549 === 549) return true;\n  if (n % 551 === 551) return true;\n  if (n % 557 === 557) return true;\n  if (n % 563 === 563) return true;\n  if (n % 569 === 569) return true;\n  if (n % 573 === 573) return true;\n  if (n % 579 === 579) return true;\n  if (n % 583 === 583) return true;\n  if (n % 589 === 589) return true;\n  if (n % 593 === 593) return true;\n  if (n % 599 === 599) return true;\n  if (n % 601 === 601) return true;\n  if (n % 607 ===\n    607) return true;\n  if (n % 613 === 613) return true;\n  if (n % 617 === 617) return true;\n  if (n % 619 === 619) return true;\n  if (n % 623 === 623) return true;\n  if (n % 629 === 629) return true;\n  if (n % 633 === 633) return true;\n  if (n % 639 === 639) return true;\n  if (n % 643 === 643) return true;\n  if (n % 649 === 649) return true;\n  if (n % 651 === 651) return true;\n  if (n % 657 === 657) return true;\n  if (n % 663 === 663) return true;\n  if (n % 669 === 669) return true;\n  if (n % 673 === 673) return true;\n  if (n % 679 === 679) return true;\n  if (n % 683 === 683) return true;\n  if (n % 689 === 689) return true;\n  if (n % 691 === 691) return true;\n  if (n % 697 ===\n    697) return true;\n  if (n % 703 === 703) return true;\n  if (n % 709 === 709) return true;\n  if (n % 711 === 711) return true;\n  if (n % 713 === 713) return true;\n  if (n % 715 === 715) return true;\n  if (n % 717 === 717) return true;\n  if (n % 719 === 719) return true;\n  if (n % 723 === 723) return true;\n  if (n % 729 === 729) return true;\n  if (n % 733 === 733) return true;\n  if (n % 739 === 739) return true;\n  if (n % 743 === 743) return true;\n  if (n % 749 === 749) return true;\n  if (n % 751 === 751) return true;\n  if (n % 757 === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  let hexesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hexesCount++;\n    }\n  }\n  return hexesCount;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesValues = (num) => {\n  let hexesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hexesCount++;\n    }\n  }\n  return hexesCount;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesSum = (num) => {\n  let hexesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hexesCount++;\n    }\n  }\n  return hexesCount;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesProduct = (num) => {\n  let hexesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hexesCount++;\n    }\n  }\n  return hexesCount;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesSumProduct = (num) => {\n  let hexesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hexesCount++;\n    }\n  }\n  return hexesCount;\n};\n\n/*You have been tasked to write a function that receives a hexadecimal number\n  as a string and counts the number of hexadecimal digits that are primes\n  (prime number=== or a prime=== is a natural number greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = '';\n  let decimals = decimal;\n  while (decimals > 0) {\n    binary = `${decimals % 2? '1' : '0'}${binary}`;\n    decimals = Math.floor(decimals / 2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a binary string and returns the decimal equivalent. \n  \n  Examples:\n  binaryToDecimal(\"0100\") // returns 5\n  binaryToDecimal(\"1111\") // returns 15\n  binaryToDecimal(\"1010\") // returns 10\n  binaryToDecimal(\"101010\") // returns 1010\n  binaryToDecimal(\"10101010\") // returns 101010\n  binaryToDecimal(\"1010101010\") // returns 10101010\n  binaryToDecimal(\"101010101010\") // returns 1010101010\n  binaryToDecimal(\"10101010101010\") // returns 101010101010\n  binaryToDecimal(\"1010101010101010\") // returns 10101010101010\n  binaryToDecimal(\"101010101010101010\") // returns 1010101010101010\n  binaryToDecimal(\"10101010101010101010\") // returns 101010101010101010\n  binaryToDecimal(\"1010101010101010101010\") // returns 10101010101010101010\n  binaryToDecimal(\"101010101010101010101010\") // returns 1010101010101010101010\n  binaryToDecimal(\"10101010101010101010101010\") // returns 101010101010101010101010\n  binaryToDecimal(\"1010101010101010101010101010\") // returns 10101010101010101010101010\n  binaryToDecimal(\"101010101010101010101010101010\") // returns 1010101010101010101010101010\n  binaryToDecimal(\"10101010101010101010101010101010\") // returns 101010101010101010101010101010\n  binaryToDecimal(\"1010101010101010101010101010101010\") // returns 10101010101010101010101010101010\n  binaryToDecimal(\"101010101010101010101010101010101010\") // returns 1010101010101010101010101010101010\n  binaryToDecimal(\"10101010101010101010101010101010101010\") // returns 101010101010101010101010101010101010\n  binaryToDecimal(\"101010101010101010101010101010101010101010\") // returns 1010101010101010101010101010101010101010\n  binaryToDecimal(\"1010101010101010101010101010101010101010101010\") // returns 1010101010101010101010101010101010101010101010\n  binaryToDecimal(\"101010101010101010101010101010101010101010101010101010\") // returns 101010101010101010101010101010101010101010101010101010\n  binaryToDecimal(\"1010101010101010101010101010101010101010101010101010101010\") // returns 1010101010101010101010101010101010101010101010101010101010\n  binaryToDecimalpassed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy(aabb) => true\n  isHappy(adb) => true\n  isHappy(xyy) => true\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => false\n  isHappy", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((acc, val) => acc + val, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesArrayAverage = gradesArray.map(grade => grade / gradesAverage);\n  const gradesArrayAverageSum = gradesArrayAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverage = gradesArrayAverageSum / gradesArrayAverage.length;\n  const gradesArrayAverageAverageSum = gradesArrayAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverage = gradesArrayAverageAverageSum / gradesArrayAverageAverage.length;\n  const gradesArrayAverageAverageAverage = gradesArrayAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageSum = gradesArrayAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverage = gradesArrayAverageAverageAverageSum / gradesArrayAverageAverage.length;\n  const gradesArrayAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);\n  const gradesArrayAverageAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverageSum / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageAverage = gradesArrayAverageAverageAverageAverageAverageAverage / gradesArray.length;\n  const gradesArrayAverageAverageAverageAverageAverageAverageSum = gradesArrayAverageAverageAverageAverageAverageAverage.reduce((acc, val) => acc + val, 0);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  const primes = primesOfThree;\n  for (let i = 0; i < string.length; i++) {\n    if (primes.indexOf(string[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  const letters = string.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i]!== 'a' && letters[i]!== 'A' && letters[i]!== 'b' && letters[i]!== 'B' && letters[i]!== 'c' && letters[i]!== 'C' && letters[i]!== 'd' && letters[i]!== 'D' && letters[i]!== 'e' && letters[i]!== 'E' && letters[i]!== 'f' && letters[i]!== 'F' && letters[i]!== 'g' && letters[i]!== 'G' && letters[i]!== 'h' && letters[i]!== 'H' && letters[i]!== 'i' && letters[i]!== 'I' && letters[i]!== 'j' && letters[i]!== 'J' && letters[i]!== 'k' && letters[i]!== 'K' && letters[i]!== 'l' && letters[i]!== 'L' && letters[i]!=='m' && letters[i]!== 'M' && letters[i]!== 'n' && letters[i]!== 'N' && letters[i]!== 'o' && letters[i]!== 'O' && letters[i]!== 'p' && letters[i]!== 'P' && letters[i]!== 'q' && letters[i]!== 'Q' && letters[i]!== 'r' && letters[i]!== 'R' && letters[i]!=='s' && letters[i]!== 'S' && letters[i]!== 't' && letters[i]!== 'T' && letters[i]!== 'u' && letters[i]!== 'U' && letters[i]!== 'v' && letters[i]!== 'V' && letters[i]!== 'w' && letters[i]!== 'W' && letters[i]!== 'x' && letters[i]!== 'X' && letters[i]!== 'y' && letters[i]!== 'Y' && letters[i]!== 'z' && letters[i]!== 'Z') {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9 or false otherwise\n  Examples\n  digits('Hello') == true\n  digits('abcdcba') == true\n  digits('kittens') == false\n  digits('orange') == false\n  */\nconst digits = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  const digits = string.split('');\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i]!== '0' && digits[i]!== '1' && digits[i]!== '2' && digits[i]!== '3' && digits[i]!== '4' && digits[i]!== '5' && digits[i]!== '6' && digits[i]!== '7' && digits[i]!== '8' && digits[i]!== '9') {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters A-Z or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  const letters = string.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i]!== 'a' && letters[i]!== 'A' && letters[i]!== 'b' && letters[i]!== 'B' && letters[i]!== 'c' && letters[i]!== 'C' && letters[i]!== 'd' && letters[i]!== 'D' && letters[i]!== 'e' && letters[i]!== 'E' && letters[i]!== 'f' && letters[i]!== 'F' && letters[i]!== 'g' && letters[i]!== 'G' && letters[i]!== 'h' && letters[i]!== 'H' && letters[i]!== 'i' && letters[i]!== 'I' && letters[i]!== 'j' && letters[i]!== 'J' && letters[i]!== 'k' && letters[i]!== 'K' && letters[i]!== 'l' && letters[i]!== 'L' && letters[i]!=='m' && letters[i]!== 'M' && letters[i]!== 'n' && letters[i]!== 'N' && letters[i]!== 'o' && letters[i]!== 'O' && letters[i]!== 'p' && letters[i]!== 'P' && letters[i]!== 'q' && letters[i]!== 'Q' && letters[i]!== 'r' && letters[i]!== 'R' && letters[i]!=='s' && letters[i]!== 'S' && letters[i]!== 't' && letters[i]!== 'T' && letters[i]!== 'u' && letters[i]!== 'U' && letters[i]!== 'v' && letters[i]!== 'V' && letters[i]!== 'w' && letters[i]!== 'W' && letters[i]!== 'x' && letters[i]!== 'X' && letters[i]!== 'y' && letters[i]!== 'Y' && letters[i]!== 'z' && letters[i]!== 'Z') {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters a-z or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  if (string.length <= 1) {\n    return false;\n  }\n  const letters = string.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i]!== 'a' && letters[i]!== 'A' && letters[i]!== 'b' && letters[i]!== 'B' && letters[i]!== 'c' && letters[i]!== 'C' && letters[i]!== 'd' && letters[i]!== 'D' && letters[i]!== 'e' && letters[i]!== 'E' && letters[i]!== 'f' && letters[i]!== 'F' && letters[i]!== 'g' && letters[i]!== 'G' && letters[i]!== 'h' && letters[i]!== 'H' && letters[i]!== 'i' && letters[i]!== 'I' && letters[i]!== 'j' && letters[i]!== 'J' && letters[i]!== 'k' && letters[i]!== 'K' && letters[i]!== 'l' && letters[i]!== 'L' && letters[i]!=='m' && letters[i]!== 'M' && letters[i]!== 'n' && letters[i]!== 'N' && letters[i]!== 'o' && letters[i]!== 'O' && letters[i]!== 'p' && letters[i]!== 'P' && letters[i]!== 'q' && letters[i]!== 'Q' && letters[i]!== 'r' && letters[i]!== 'R' && letters[i]!=='s' && letters[i]!== 'S' && letters[i]!== 't' && letters[i]!== 'T' && letters[i]!== 'u' && letters[i]!== 'U' && letters[i]!== 'v' && letters[i]!== 'V' && letters[i]!== 'w' && letters[i]!== 'W' && letters[i]!== 'x' && letters[i]!== 'X' && letters[i]!== 'y' && letters[i]!== 'Y' && letters[i]!== 'z' && letters[i]!== 'Z') {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols!, @, #, $, %, ^, &, *, +, =, <, >,?, -, :, ;,,, /, |,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let str = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    str += '1';\n    sum--;\n  }\n  return str;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    const index = s.indexOf(char, i + 1);\n    newString += s.substring(index, i + 1);\n    newString += char;\n  }\n  return newString;\n};\n\n/*\n  Write ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCols([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getCols([], 1) == []\n  getCols([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getCols = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const colResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        colResult.push([i, j]);\n      }\n    }\n    result.push(colResult);\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonals = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const diagResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        diagResult.push([i, j, i, j, i]);\n      }\n    }\n    result.push(diagResult);\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiagonals([], 2) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonals = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const diagResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        diagResult.push([i, j, i, j, i]);\n      }\n    }\n    result.push(diagResult);\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiagonals([], 3) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonals = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const diagResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        diagResult.push([i, j, i, j, i]);\n      }\n    }\n    result.push(diagResult);\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 4) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiagonals([], 4) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 3)]\n  */\nconst getDiagonals = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const diagResult = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        diagResult.push([i, j, i, j, i]);\n      }\n    }\n    result.push(diagResult);\n  }\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isOdd) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\nexport { sortsArray };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDesc([]) => []\n  * sortsArrayDesc([5]) => [5]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDesc = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\nexport { sortsArrayDesc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayAsc([]) => []\n  * sortsArrayAsc([5]) => [5]\n  * sortsArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayAsc = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isOdd) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\nexport { sortsArrayAsc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDesc([]) => []\n  * sortsArrayDesc([5]) => [5]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDesc = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\nexport { sortsArrayDesc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayAsc([]) => []\n  * sortsArrayAsc([5]) => [5]\n  * sortsArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayAsc = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isOdd) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\nexport { sortsArrayAsc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayDesc([]) => []\n  * sortsArrayDesc([5]) => [5]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortsArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayDesc = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\nexport { sortsArrayDesc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArrayAsc([]) => []\n  * sortsArrayAsc([5]) => [5]\n  * sortsArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArrayAsc = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = newArray.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n  if (isOdd) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n  return newArray;\n};\n\nexport { sortsArrayAsc };\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order.\n\n  Note:\n  * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s[i]) + 2)\n  }\n  return newString\n}\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decrypt", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n    } else {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n      min = numbers[i];\n    } else {\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n    sum = numbers[i];\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    } else {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n      maxCount = 1;\n    } else {\n      result.push(max);\n      if (maxCount > result.length) {\n        result.push(max);\n      }\n      maxCount++;\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStdev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingStdev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2, 1]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(count);\n    sum = numbers[i];\n    count++;\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function that returns the sum of the integers in the list.\n  Return 0 if there are no integers in the list.\n  \n  sum([1, 2, 3]) == 6\n  sum([1, 2]) == 0\n  sum([1, 2]) == null\n  \n  sum([1, 2, 3]) == 6\n  sum([1, 2]) == 3\n  sum([1, 2]) == null\n  */\nconst sum = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, curr) => acc + curr, 0)\n}\n\n/*\n  You are given a list of integers. Write a function that returns the product of the integers in the list.\n  Return 0 if there are no integers in the list.\n  \n  product([1, 2, 3]) == 6\n  product([1, 2]) == 1\n  product([1, 2]) == null\n  \n  product([1, 2, 3]) == 6\n  product([1, 2]) == 1\n  product([1, 2]) == null\n  */\nconst product = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, curr) => acc * curr, 1)\n}\n\n/*\n  You are given a list of integers. Write a function that returns the largest integer in the list.\n  Return null if there are no integers in the list.\n  \n  max([1, 2, 3]) == 3\n  max([1, 2]) == 2\n  max([1, 2]) == null\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([5, 1, 4, 3, 2]) == null\n  */\nconst max = (lst) => {\n  if (lst.length === 0) return null\n  return Math.max(...lst)\n}\n\n/*\n  You are given a list of integers. Write a function that returns the smallest integer in the list.\n  Return null if there are no integers in the list.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([5, 1, 4, 3, 2]) == null\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([5, 1, 4, 3, 2]) == null\n  */\nconst min = (lst) => {\n  if (lst.length === 0) return null\n  return Math.min(...lst)\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are even.\n  Return false if there are any non-even numbers in the list.\n  \n  even([1, 2, 3]) == true\n  even([1, 2]) == false\n  even([1, 2]) == null\n  \n  even([1, 2, 3]) == true\n  even([1, 2]) == false\n  even([1, 2]) == null\n  */\nconst even = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x % 2 === 0)\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are odd.\n  Return false if there are any even numbers in the list.\n  \n  odd([1, 2, 3]) == false\n  odd([1, 2]) == true\n  odd([1, 2]) == null\n  \n  odd([1, 2, 3]) == false\n  odd([1, 2]) == true\n  odd([1, 2]) == null\n  */\nconst odd = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x % 2!== 0)\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are greater than the given number.\n  Return false if there are any numbers in the list that are less than the given number.\n  \n  greater([1, 2, 3], 2) == true\n  greater([1, 2], 2) == false\n  greater([1, 2], 2) == null\n  \n  greater([1, 2, 3], 2) == true\n  greater([1, 2], 2) == false\n  greater([1, 2], 2) == null\n  */\nconst greater = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x > lst[0])\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are less than the given number.\n  Return false if there are any numbers in the list that are greater than the given number.\n  \n  less([1, 2, 3], 2) == false\n  less([1, 2], 2) == true\n  less([1, 2], 2) == null\n  \n  less([1, 2, 3], 2) == false\n  less([1, 2], 2) == true\n  less([1, 2], 2) == null\n  */\nconst less = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x < lst[0])\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are equal to the given number.\n  Return false if there are any numbers in the list that are not equal to the given number.\n  \n  equal([1, 2, 3], 2) == true\n  equal([1, 2], 2) == false\n  equal([1, 2], 2) == null\n  \n  equal([1, 2, 3], 2) == true\n  equal([1, 2], 2) == false\n  equal([1, 2], 2) == null\n  */\nconst equal = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x === lst[0])\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are greater than or equal to the given number.\n  Return false if there are any numbers in the list that are less than or equal to the given number.\n  \n  greaterOrEqual([1, 2, 3], 2) == true\n  greaterOrEqual([1, 2], 2) == true\n  greaterOrEqual([1, 2], 2) == true\n  \n  greaterOrEqual([1, 2, 3], 2) == true\n  greaterOrEqual([1, 2], 2) == true\n  greaterOrEqual([1, 2], 2) == true\n  */\nconst greaterOrEqual = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x >= lst[0])\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are less than or equal to the given number.\n  Return false if there are any numbers in the list that are greater than or equal to the given number.\n  \n  lessOrEqual([1, 2, 3], 2) == false\n  lessOrEqual([1, 2], 2) == true\n  lessOrEqual([1, 2], 2) == true\n  \n  lessOrEqual([1, 2, 3], 2) == false\n  lessOrEqual([1, 2], 2) == true\n  lessOrEqual([1, 2], 2) == true\n  */\nconst lessOrEqual = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x <= lst[0])\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are in the given range.\n  Return false if there are any numbers in the list that are not in the given range.\n  \n  range([1, 2, 3], 2, 4) == true\n  range([1, 2], 2, 4) == false\n  range([1, 2], 2, 4) == null\n  \n  range([1, 2, 3], 2, 4) == true\n  range([1, 2], 2, 4) == false\n  range([1, 2], 2, 4) == null\n  */\nconst range = (lst) => {\n  if (lst.length === 0) return false\n  return lst.every(x => x >= lst[0] && x <= lst[1])\n}\n\n/*\n  You are given a list of integers. Write a function that returns true if all elements in the list are in the given range.\n  Return false if there are any numbers in the list that are not in the given range.\n  \n  range", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  anyNonInt(5, 2, 7) ➞ true\n  anyNonInt(3, 2, 2) ➞ false\n  anyNonInt(3, -2, 1) ➞ true\n  anyNonInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-negative.\n  Returns false in any other cases.\n  Examples\n  anyNonNegative(5, 2, 7) ➞ true\n  anyNonNegative(3, 2, 2) ➞ false\n  anyNonNegative(3, -2, 1) ➞ true\n  anyNonNegative(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonNegative = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-positive.\n  Returns false in any other cases.\n  Examples\n  anyNonPositive(5, 2, 7) ➞ true\n  anyNonPositive(3, 2, 2) ➞ false\n  anyNonPositive(3, -2, 1) ➞ true\n  anyNonPositive(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonPositive = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-zero.\n  Returns false in any other cases.\n  Examples\n  anyNonZero(5, 2, 7) ➞ true\n  anyNonZero(3, 2, 2) ➞ false\n  anyNonZero(3, -2, 1) ➞ true\n  anyNonZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyNonZero = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  anyPositive(5, 2, 7) ➞ true\n  anyPositive(3, 2, 2) ➞ false\n  anyPositive(3, -2, 1) ➞ true\n  anyPositive(3.6, -2.2, 2) ➞ false\n  */\nconst anyPositive = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strictly less than the other.\n  Returns false in any other cases.\n  Examples\n  lessThan(5, 2, 7) ➞ true\n  lessThan(3, 2, 2) ➞ false\n  lessThan(3, -2, 1) ➞ true\n  lessThan(3.6, -2.2, 2) ➞ false\n  */\nconst lessThan = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strictly greater than the other.\n  Returns false in any other cases.\n  Examples\n  greaterThan(5, 2, 7) ➞ true\n  greaterThan(3, 2, 2) ➞ false\n  greaterThan(3, -2, 1) ➞ true\n  greaterThan(3.6, -2.2, 2) ➞ false\n  */\nconst greaterThan = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strictly greater than or equal to the other.\n  Returns false in any other cases.\n  Examples\n  greaterThanOrEqual(5, 2, 7) ➞ true\n  greaterThanOrEqual(3, 2, 2) ➞ false\n  greaterThanOrEqual(3, -2, 1) ➞ true\n  greaterThanOrEqual(3.6, -2.2, 2) ➞ false\n  */\nconst greaterThanOrEqual = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strictly less than or equal to the other.\n  Returns false in any other cases.\n  Examples\n  lessThanOrEqual(5, 2, 7) ➞ true\n  lessThanOrEqual(3, 2, 2) ➞ false\n  lessThanOrEqual(3, -2, 1) ➞ true\n  lessThanOrEqual(3.6, -2.2, 2) ➞ false\n  */\nconst lessThanOrEqual = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter = newMessage[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.slice(0, i) + newMessage.slice(i + 1, i + 2) + newMessage.slice(i + 2, i + 3) + newMessage.slice(i + 3, i + 4);\n    }\n  }\n  for (let i = 0; i < newMessage.length; i++) {\n    let letter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 9\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 7\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (isEmpty(dict)) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === i) {\n        primes.push(i);\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of the squares of all the integers in the array.\n  for example:\n  sumSquares([2,3,4]) => [5,10,13]\n  sumSquares([2,3,5,7,11]) => [18,25,36,49,64]\n  sumSquares([]) => []\n  sumSquares([0,1]) => []\n  sumSquares([0,1,2,3,4,5]) => [45,94,144,196,248,292,344,396,440]\n  sumSquares([0,1,2,3,4,5,6,7,8,9,10]) => [45,94,144,196,248,292,344,396,440,484,536,588,644,728,796,840]\n  */\nconst sumSquares = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.length; i++) {\n    sum += n[i] * n[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  product([2,3,4]) => 24\n  product([2,3,5,7,11]) => 2428800\n  product([]) => 0\n  product([0,1]) => 1\n  product([0,1,2,3,4,5]) => 45\n  product([0,1,2,3,4,5,6,7,8,9,10]) => 45\n  */\nconst product = (n) => {\n  let product = 1;\n  for (let i = 0; i < n.length; i++) {\n    product *= n[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the squares of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [4,9,16]\n  productOfSquares([2,3,5,7,11]) => [24,48,72,96]\n  productOfSquares([]) => []\n  productOfSquares([0,1]) => []\n  productOfSquares([0,1,2,3,4,5]) => [45,90,154,210,285,360]\n  productOfSquares([0,1,2,3,4,5,6,7,8,9,10]) => [45,90,154,210,285,360,420,570,715,840]\n  */\nconst productOfSquares = (n) => {\n  let product = [];\n  for (let i = 0; i < n.length; i++) {\n    product.push(n[i] * n[i]);\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of all the integers in the array.\n  for example:\n  sumOf([2,3,4]) => 7\n  sumOf([2,3,5,7,11]) => 42\n  sumOf([]) => 0\n  sumOf([0,1]) => 1\n  sumOf([0,1,2,3,4,5]) => 15\n  sumOf([0,1,2,3,4,5,6,7,8,9,10]) => 15\n  */\nconst sumOf = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.length; i++) {\n    sum += n[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOf([2,3,4]) => 24\n  productOf([2,3,5,7,11]) => 2428800\n  productOf([]) => 0\n  productOf([0,1]) => 1\n  productOf([0,1,2,3,4,5]) => 45\n  productOf([0,1,2,3,4,5,6,7,8,9,10]) => 45\n  */\nconst productOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n.length; i++) {\n    product *= n[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the sum of all the squares of the integers in the array.\n  for example:\n  sumOfSquares([2,3,4]) => [7,21,29]\n  sumOfSquares([2,3,5,7,11]) => [36,72,108]\n  sumOfSquares([]) => []\n  sumOfSquares([0,1]) => []\n  sumOfSquares([0,1,2,3,4,5]) => [45,90,154,210,285,360]\n  sumOfSquares([0,1,2,3,4,5,6,7,8,9,10]) => [45,90,154,210,285,360,420,570,715,840]\n  */\nconst sumOfSquares = (n) => {\n  let sum = [];\n  for (let i = 0; i < n.length; i++) {\n    sum.push(n[i] * n[i]);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the squares of the integers in the array.\n  for example:\n  productOfSquaresOf([2,3,4]) => [4,9,16]\n  productOfSquaresOf([2,3,5,7,11]) => [24,48,72,96]\n  productOfSquaresOf([]) => []\n  productOfSquaresOf([0,1]) => []\n  productOfSquaresOf([0,1,2,3,4,5]) => [45,90,154,210,285,360]\n  productOfSquaresOf([0,1,2,3,4,5,6,7,8,9,10]) => [45,90,154,210,285,360,420,570,715,840]\n  */\nconst productOfSquaresOf = (n) => {\n  let product = [];\n  for (let i = 0; i < n.length; i++) {\n    product.push(n[i] * n[i]);\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the integers in the array.\n  for example:\n  productOf([2,3,4]) => 24\n  productOf([2,3,5,7,11]) => 2428800\n  productOf([]) => 0\n  productOf([0,1]) => 1\n  productOf([0,1,2,3,4,5]) => 45\n  productOf([0,1,2,3,4,5,6,7,8,9,10]) => 45\n  */\nconst productOf = (n) => {\n  let product = 1;\n  for (let i = 0; i < n.length; i++) {\n    product *= n[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the product of the squares of the integers in the array.\n  for example:\n  productOfSquaresOf([2,3,4]) => [4,9,16]\n  productOfSquaresOf([2,3,5,7,11]) => [24,48,72,96]\n  productOfSquaresOf([]) => []\n  productOfSquaresOf([0,1]) => []\n  productOfSquaresOf([0,1,2,3,4,5]) => [45,90,154,210,285,360]\n  productOfSquaresOf([0,1,2,3,4,5,6,7,8,9,10]) => ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a negative sign if \n  the second number is negative.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyNegative = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is positive.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositive = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is negative.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegative = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is positive.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositive = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is negative.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegative = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is positive.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegativePositive = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is negative.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegativePositiveNegative = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is positive.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegativePositiveNegativePositive = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is negative.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegativePositiveNegativePositive = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is positive.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegativePositiveNegativePositiveNegative = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is negative.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  multiply(-14, -15) should return -20.\n  multiply(-14, -15) should return -20.\n  */\nconst multiplyPositiveNegativePositiveNegativePositiveNegativePositiveNegative = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits and a positive sign if \n  the second number is positive.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n      if (s[i] === 'A' || s[i] === 'a') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 0\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in all indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in all indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I' || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in all indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n      if (s[i] === 'A' || s[i] === 'a') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in all indices.\n  \n  For example:\n  countLower('aBCdEf') returns 3\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerAll = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in all indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsAllOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n      if (s[i] === 'a' || s[i] === 'A') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in all indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsAllOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1Int, integer2Int] = integer1.split('');\n  const [integer1Int, integer2Int] = integer2.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer2Int.split('');\n  const [integer1Int, integer2Int] = integer1Int.split('');\n  const [integer1Int, integer2Int] = integer", "passed": 0, "run_status": 2}
