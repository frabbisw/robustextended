{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n\n  return firstElement - lastElement < threshold;\n};\n\n/**\n * Check if given number is in given list of numbers\n * and are any two numbers closer to each other than\n * given threshold.\n * If two numbers are closer to each other than\n * given threshold, return true.\n * If two numbers are not closer to each other than\n * given threshold, return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given number is not in given list of numbers,\n * return false.\n * If given number is in given list of numbers,\n * return true.\n * If given ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  let groups = [];\n  let open_braces = 0;\n  let closed_braces = 0;\n  let open_brace_groups = [];\n  let closed_brace_groups = [];\n  let current_group = [];\n  let current_group_open_braces = 0;\n  let current_group_closed_braces = 0;\n  let current_group_open_brace_groups = [];\n  let current_group_closed_brace_groups = [];\n  let current_group_open_brace_group_index = 0;\n  let current_group_closed_brace_group_index = 0;\n  let current_group_open_brace_group_length = 0;\n  let current_group_closed_brace_group_length = 0;\n  let current_group_open_brace_group_char = '';\n  let current_group_closed_brace_group_char = '';\n  let current_group_open_brace_group_char_length = 0;\n  let current_group_closed_brace_group_char_length = 0;\n  let current_group_open_brace_group_char_char = '';\n  let current_group_closed_brace_group_char_char = '';\n  let current_group_open_brace_group_char_char_length = 0;\n  let current_group_closed_brace_group_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char = '';\n  let current_group_open_brace_group_char_char_char_length = 0;\n  let current_group_closed_brace_group_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char = '';\n  let current_group_open_brace_group_char_char_char_char_length = 0;\n  let current_group_closed_brace_group_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char = '';\n  let current_group_open_brace_group_char_char_char_char_char_length = 0;\n  let current_group_closed_brace_group_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char = '';\n  let current_group_open_brace_group_char_char_char_char_char_char_char_length = 0;\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let current_group_open_brace_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char = '';\n  let current_group_closed_brace_group_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharPalindrome = currentChar.split(\"\").join(\"\") === currentCharReverse;\n    const currentCharLongestPalindrome = currentCharLength > longestPalindromeLength?\n      currentCharLength : longestPalindromeLength;\n    const currentCharLongestPalindromePrefix = currentCharLength > longestPalindromePrefix?\n      currentCharLength : longestPalindromePrefix;\n    const currentCharLongestPalindromeSuffix = currentCharLength > longestPalindromeSuffix?\n      currentCharLength : longestPalindromeSuffix;\n    if (currentCharPalindrome && currentCharLongestPalindrome) {\n      longestPalindrome = currentChar;\n      longestPalindromeLength = currentCharLongestPalindrome;\n      longestPalindromePrefix = currentCharLongestPalindromePrefix;\n      longestPalindromeSuffix = currentCharLongestPalindromeSuffix;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharPalindrome = currentChar.split(\"\").join(\"\") === currentCharReverse;\n    const currentCharLongestPalindrome = currentCharLength > longestPalindromeLength?\n      currentCharLength : longestPalindromeLength;\n    const currentCharLongestPalindromePrefix = currentCharLength > longestPalindromePrefix?\n      currentCharLength : longestPalindromePrefix;\n    const currentCharLongestPalindromeSuffix = currentCharLength > longestPalindromeSuffix?\n      currentCharLength : longestPalindromeSuffix;\n    if (currentCharPalindrome && currentCharLongestPalindrome) {\n      longestPalindrome = currentChar;\n      longestPalindromeLength = currentCharLongestPalindrome;\n      longestPalindromePrefix = currentCharLongestPalindromePrefix;\n      longestPalindromeSuffix = currentCharLongestPalindromeSuffix;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const currentCharSuffix = string.slice(i + 1);\n    const currentCharReverse = currentChar.split(\"\").reverse().join(\"\");\n    const currentCharPalindrome = currentChar.split(\"\").join(\"\") === currentCharReverse;\n    const currentCharLongestPalindrome = currentCharLength > longestPalindromeLength?\n      currentCharLength : longestPalindromeLength;\n    const currentCharLongestPalindromePrefix = currentCharLength > longestPalindromePrefix?\n      currentCharLength : longestPalindromePrefix;\n    const currentCharLongestPalindromeSuffix = currentCharLength > longestPalindromeSuffix?\n      currentCharLength : longestPalindromeSuffix;\n    if (currentCharPalindrome && currentCharLongestPalindrome) {\n      longestPalindrome = currentChar;\n      longestPalindromeLength = currentCharLongestPalindrome;\n      longestPalindromePrefix = currentCharLongestPalindromePrefix;\n      longestPalindromeSuffix = currentCharLongestPalindromeSuffix;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentCharLength = currentChar.length;\n    const currentCharPrefix = string.slice(0, i);\n    const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worfsStringReverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worfsStringCapitalize = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(word => word.trim().toUpperCase());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word and remove all punctuation.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worfsStringCapitalizeAndRemovePunctuation = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(word => word.trim().toUpperCase().replace(/[^A-Za-z]/g, \"\"));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word and remove all punctuation and remove all numbers.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worfsStringCapitalizeAndRemoveNumbers = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(word => word.trim().toUpperCase().replace(/[^A-Za-z]/g, \"\").replace(/[0-9]/g, \"\"));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word and remove all punctuation and remove all numbers.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worfsStringCapitalizeAndRemoveNumbersAndPunctuation = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(word => word.trim().toUpperCase().replace(/[^A-Za-z]/g, \"\").replace(/[0-9]/g, \"\").replace(/[!,.?]/g, \"\"));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  capitalize each word and remove all punctuation and remove all numbers.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst worfsStringCapitalizeAndRemoveNumbersAndPunctuationAndRemoveAllNumbersAndPunctuation = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(word => word.trim().toUpperCase().replace(/[^A-Za-z]/g, \"\").replace(/[0-9]/g, \"\").replace(/[!,.?]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\").replace(/[?]/g, \"\").replace(/[!]/g, \"\").replace(/[.]/g, \"\").replace(/[,]/g, \"\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNum(x / 2, y);\n  }\n  return cholseNum(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 13\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumOdd(x / 2, y);\n  }\n  return cholseNumOdd(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRange(x / 2, y);\n  }\n  return cholseNumInRange(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeOdd(x / 2, y);\n  }\n  return cholseNumInRangeOdd(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRange(x / 2, y);\n  }\n  return cholseNumInRangeInRange(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeOdd(x / 2, y);\n  }\n  return cholseNumInRangeInRangeOdd(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRange(x / 2, y);\n  }\n  return cholseNumInRangeInRangeInRange(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeOdd(x / 2, y);\n  }\n  return cholseNumInRangeInRangeInRangeOdd(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeInRange(x / 2, y);\n  }\n  return cholseNumInRangeInRangeInRangeInRange(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeInRangeOdd(x / 2, y);\n  }\n  return cholseNumInRangeInRangeInRangeInRangeOdd(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 15\n  cholseNum(13, 12) = -1\n  */\nconst cholseNumInRangeInRangeInRangeInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return cholseNumInRangeInRangeInRangeInRangeInRange(x / 2, y);\n  }\n  return cholseNumInRangeInRangeInRangeInRangeInRange(y - 1, x);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n};\n\n/*You are given an integer array nums, in which each element represents the number of \n  times the number in the position i appears in the array nums. \n  Return the number of times each number appears in the array.\n  Example:\n  countOccurrences([1, 1, 2, 1, 2, 3], 1) => 3\n  countOccurrences([1, 1, 2, 1, 2, 3], 2) => 2\n  countOccurrences([1, 1, 2, 1, 2, 3], 3) => 1\n  countOccurrences([1, 1, 2, 1, 2, 3], 4) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 5) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 6) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 7) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 8) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 9) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 10) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 11) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 12) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 13) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 14) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 15) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 16) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 17) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 18) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 19) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 20) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 21) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 22) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 23) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 24) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 25) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 26) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 27) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 28) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 29) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 30) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 31) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 32) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 33) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 34) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 35) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 36) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 37) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 38) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 39) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 40) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 41) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 42) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 43) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 44) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 45) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 46) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 47) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 48) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 49) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 50) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 51) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 52) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 53) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 54) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 55) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 56) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 57) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 58) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 59) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 60) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 61) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 62) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 63) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 64) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 65) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 66) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 67) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 68) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 69) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 70) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 71) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 72) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 73) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 74) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 75) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 76) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 77) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 78) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 79) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 80) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 81) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 82) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 83) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 84) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 85) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 86) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 87) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 88) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 89) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 90) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 91) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 92) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 93) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 94) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 95) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 96) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 97) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 98) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 99) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 100) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 101) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 102) => 0\n  countOccurrences([1, 1, 2, 1, 2, 3], 103) => 0\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = [];\n  let evenDigit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      evenDigit++;\n    } else {\n      if (evenDigit === 0) {\n        result.push(x[i]);\n      }\n      evenDigit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsOdd = (x) => {\n  let result = [];\n  let oddDigit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      oddDigit++;\n    } else {\n      if (oddDigit === 0) {\n        result.push(x[i]);\n      }\n      oddDigit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit greater than 10.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsGreaterThanTen = (x) => {\n  let result = [];\n  let greaterThanTen = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] > 10) {\n      greaterThanTen++;\n    } else {\n      if (greaterThanTen === 0) {\n        result.push(x[i]);\n      }\n      greaterThanTen = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit less than 10.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsLessThanTen = (x) => {\n  let result = [];\n  let lessThanTen = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] < 10) {\n      lessThanTen++;\n    } else {\n      if (lessThanTen === 0) {\n        result.push(x[i]);\n      }\n      lessThanTen = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit greater than or equal to 10.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsGreaterThanOrEqualToTen = (x) => {\n  let result = [];\n  let greaterThanOrEqualToTen = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= 10) {\n      greaterThanOrEqualToTen++;\n    } else {\n      if (greaterThanOrEqualToTen === 0) {\n        result.push(x[i]);\n      }\n      greaterThanOrEqualToTen = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit less than or equal to 10.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsLessThanOrEqualToTen = (x) => {\n  let result = [];\n  let lessThanOrEqualToTen = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] <= 10) {\n      lessThanOrEqualToTen++;\n    } else {\n      if (lessThanOrEqualToTen === 0) {\n        result.push(x[i]);\n      }\n      lessThanOrEqualToTen = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit greater than or equal to 20.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsGreaterThanOrEqualToTwenty = (x) => {\n  let result = [];\n  let greaterThanOrEqualToTwenty = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= 20) {\n      greaterThanOrEqualToTwenty++;\n    } else {\n      if (greaterThanOrEqualToTwenty === 0) {\n        result.push(x[i]);\n      }\n      greaterThanOrEqualToTwenty = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit less than or equal to 20.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsLessThanOrEqualToTwenty = (x) => {\n  let result = [];\n  let lessThanOrEqualToTwenty = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] <= 20) {\n      lessThanOrEqualToTwenty++;\n    } else {\n      if (lessThanOrEqualToTwenty === 0) {\n        result.push(x[i]);\n      }\n      lessThanOrEqualToTwenty = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit greater than or equal to 30.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigitsGreaterThanOrEqualToThirty = (x) => {\n  let result = [];\n  let greaterThanOrEqualToThirty = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= 30) {\n      greaterThanOrEqualToThirty++;\n    } else {\n      if (greaterThanOrEqualToThirty === 0) {\n        result.push(x[i]);\n      }\n      greaterThanOrEqualToThirty = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit less than or equal to 30.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reversedArr = sortedArr.reverse();\n  const reversedArrString = reversedArr.map(num => num.toString()).join('');\n  const reversedArrStringArray = reversedArrString.split('');\n  const reversedArrStringArrayReversed = reversedArrStringArray.reverse();\n  const reversedArrStringArrayReversedString = reversedArrStringArrayReversed.join('');\n  const reversedArrStringArrayReversedStringArray = reversedArrStringArrayReversedString.split('');\n  const reversedArrStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedString = reversedArrStringArrayReversedStringArrayReversed.join('');\n  const reversedArrStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedString = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedString.split('');\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed.split('');\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed.split('');\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversed = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray = reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray.reverse();\n  const reversedArrStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArrayReversedStringArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n// TESTS\n\nconst tests = [\n  { input: 2, expected: [1, 2, 6, 24, 15] },\n  { input: 3, expected: [1, 2, 6, 24, 15, 62, 120, 720, 5040, 40320, 362880, 3628800] },\n  { input: 4, expected: [1, 2, 6, 24, 15, 62, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000, 15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000, 304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000] },\n  { input: 5, expected: [1, 2, 6, 24, 15, 62, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000, 15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000, 304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000, 5142294465661621094588000000, 10307921510663296249904000000, 21892299583455516902476400000, 4398046511104675668032000000, 87960930222082197169388000000, 17592186044416843008131296000000, 351843720888327686400000, 72529029846191406250000000, 14073748835532800000000000, 2814749767106566561600000000000, 56294995342131216858996160000000, 11258999068426240000000000000, 22517998136852480000000000000, 4503599627370496000000000000000, 9007199254740992000000000000000, 18014398509481984000000000000000, 36028797018963968000000000000000, 72057594037927936000000000000000, 144115188075855872088000000000000000, 288230376151711744000000000000000, 576460752303423488000000000000000, 1152921504606846976000000000000000, 2305843009213693952000000000000000, 4611686018427387904000000000000000, 9223372036854775808000000000000000, 18446744073709551616000000000000000, 36893488147419103232000000000000000, 73786976294838206464000000000000000, 14073748835532806432000000000000000, 28147497671065152096000000000000000, 562949953421311952000000000000000, 1125899906842624000000000000000, 2251799813685248000000000000000, 4503599627370496000000000000000, 9007199254740992000000000000000, 18014398509481984000000000000000, 36028797018963968000000000000000, 72057594037927936000000000000000, 144115188075855872088000000000000000, 288230376151711744000000000000000, 576460752303423488000000000000000, 1152921504606846976000000000000000, 2305843009213693952000000000000000, 4611686018427387904000000000000000, 9223372036854775808000000000000000, 18446744073709551616000000000000000, 36893488147419103232000000000000000, 73786976294838206464000000000000000, 14073748835532806432000000000000000, 28147497671065152096000000000000000, 562949953421311952000000000000000, 1125899906842624000000000000000, 2251799813685248000000000000000, 4503599627370496000000000000000, 9007199254740992000000000000000, 18014398509481984000000000000000, 36028797018963968000000000000000, 72057594037927936000000000000000, 144115188075855872088000000000000000, 288230376151711744000000000000000, 576460752303423488000000000000000, 1152921504606846976000000000000000, 2305843009213693952000000000000000, 4611686018427387904000000000000000, 9223372036854775808000000000000000, 18446744073709551616000000000000000, 36893488147419103232000000000000000, 73786976294838206464000000000000000, 14073748835532806432000000000000000, 28147497671065152096000000000000000, 562949953421311952000000000000000, 1125899906842624000000000000000, 2251799813685248000000000000000, 4503599627370496000000000000000, 9007199254740992000000000000000, 18014398509481984000000000000000, 36028797018963968000000000000000, 72057594037927936000000000000000, 144115188075855872088000000000000000, 288230376151711744000000000000000, 576460752303423488000000000000000, 1152921504606846976000000000000000, 2305843009213693952000000000000000, 4611686018427387904000000000000000, 9", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else {\n      if (evenPalindromes.includes(evenPalindrome)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given an integer n, return all possible palindromes that can be formed by\n  concatenating n copies of the string \"a\".\n\n  Example 1:\n\n      Input: 3\n      Output: [\"aaa\", \"aay\", \"aba\", \"baa\"]\n      Explanation: \"aaa\" is one palindrome, \"aay\" is another palindrome.\n\n  Example 2:\n\n      Input: 4\n      Output: [\"aaa\", \"aay\", \"aba\", \"baa\", \"bba\"]\n      Explanation: \"aaa\" is one palindrome, \"aay\" is another palindrome,\n      \"aba\" is one palindrome, \"baa\" is another palindrome, and \"bba\" is another\n      palindrome.\n\n  Note:\n      All characters in the string will be lowercase letters.\n      1 <= n <= 10^5\n*/\nconst allPalindromes = (n) => {\n  const result = [];\n  const a = 'a';\n  for (let i = 1; i <= n; i++) {\n    for (let j = 0; j < i; j++) {\n      result.push(`${a}${a}`);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an integer n, return all possible palindromes that can be formed by\n  concatenating n copies of the string \"a\" and concatenating n-1 copies of \"b\".\n\n  Example 1:\n\n      Input: 3\n      Output: [\"aaa\", \"aba\", \"baa\"]\n      Explanation: \"aaa\" is one palindrome, \"aba\" is another palindrome,\n      \"baa\" is another palindrome.\n\n  Example 2:\n\n      Input: 4\n      Output: [\"aaa\", \"aba\", \"baa\", \"bba\"]\n      Explanation: \"aaa\" is one palindrome, \"aba\" is another palindrome,\n      \"baa\" is another palindrome, \"bba\" is another palindrome.\n\n  Note:\n      All characters in the string will be lowercase letters.\n      1 <= n <= 10^5\n*/\nconst allPalindromesWithB = (n) => {\n  const result = [];\n  const a = 'a';\n  const b = 'b';\n  for (let i = 1; i <= n; i++) {\n    for (let j = 0; j < i; j++) {\n      result.push(`${a}${a}${b}${b}`);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return all root-to-leaf paths.\n\n  For example:\n      Given binary tree [3,9,20,null,null,15,7],\n      Return: [\n          [3,9,20],\n          [9,20],\n          [20],\n          [15,7]\n      ]\n\n  Note:\n      A leaf is a node with no children.\n      You may assume that the input fits memory constraints.\n*/\nconst allPaths = (root) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null) return result;\n    result.push(node.val);\n    stack.push(node.left);\n    stack.push(node.right);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return all nodes with values greater than or equal\n  to the specified k.\n\n  For example:\n      Given binary tree [3,9,20,null,null,15,7],\n      Return all values greater than 10: \n          [9,15,7]\n*/\nconst greaterThan = (root, k) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null) return result;\n    if (node.val > k) result.push(node.val);\n    stack.push(node.left);\n    stack.push(node.right);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return all nodes with values less than or equal\n  to the specified k.\n\n  For example:\n      Given binary tree [3,9,20,null,null,15,7],\n      Return all values less than 10: \n          [3,9,15,7]\n*/\nconst lessThan = (root, k) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null) return result;\n    if (node.val < k) result.push(node.val);\n    stack.push(node.left);\n    stack.push(node.right);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return all values greater than or equal to node k,\n  and less than or equal to node (any of its descendants). If there are two\n  values equal, return any of them (doesn't matter which).\n\n  For example:\n      Given binary tree [3,9,20,null,null,15,7],\n      Return 30: \n          [9,15,7]\n*/\nconst range = (root, k) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null) return result;\n    if (node.val > k) result.push(node.val);\n    if (node.val < k) result.push(node.val);\n    stack.push(node.left);\n    stack.push(node.right);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return all values between node k and (any\n  of its descendants).\n\n  For example:\n      Given binary tree [3,9,20,null,null,15,7],\n      Return 30: \n          [9,15,7]\n*/\nconst rangeInclusive = (root, k) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null) return result;\n    if (node.val > k) result.push(node.val);\n    stack.push(node.left);\n    stack.push(node.right);\n  }\n  return result;\n};\n\n/*\n  Given a binary tree, return all values strictly greater than node k,\n  and less than or equal to (any of its descendants). If there are two\n  values equal, return any of them (doesn't matter which).\n\n  For example:\n      Given binary tree [3,9,20,null,null,15,7],\n      Return 30: \n          [9,15,7]\n*/\nconst rangeStrict = (root, k) => {\n  const result = [];", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "<|endoftext|>/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums2 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums2([]) == 0\n  >>> coujtNums2([-1, 11, -11]) == 1\n  >>> coujtNums2([1, 1, 2]) == 3\n  */\nconst coujtNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums3 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums3([]) == 0\n  >>> coujtNums3([-1, 11, -11]) == 1\n  >>> coujtNums3([1, 1, 2]) == 3\n  */\nconst coujtNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums4 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums4([]) == 0\n  >>> coujtNums4([-1, 11, -11]) == 1\n  >>> coujtNums4([1, 1, 2]) == 3\n  */\nconst coujtNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums5 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums5([]) == 0\n  >>> coujtNums5([-1, 11, -11]) == 1\n  >>> coujtNums5([1, 1, 2]) == 3\n  */\nconst coujtNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums6 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums6([]) == 0\n  >>> coujtNums6([-1, 11, -11]) == 1\n  >>> coujtNums6([1, 1, 2]) == 3\n  */\nconst coujtNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums7 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums7([]) == 0\n  >>> coujtNums7([-1, 11, -11]) == 1\n  >>> coujtNums7([1, 1, 2]) == 3\n  */\nconst coujtNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums8 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums8([]) == 0\n  >>> coujtNums8([-1, 11, -11]) == 1\n  >>> coujtNums8([1, 1, 2]) == 3\n  */\nconst coujtNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums9 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums9([]) == 0\n  >>> coujtNums9([-1, 11, -11]) == 1\n  >>> coujtNums9([1, 1, 2]) == 3\n  */\nconst coujtNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums10 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums10([]) == 0\n  >>> coujtNums10([-1, 11, -11]) == 1\n  >>> coujtNums10([1, 1, 2]) == 3\n  */\nconst coujtNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums11 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums11([]) == 0\n  >>> coujtNums11([-1, 11, -11]) == 1\n  >>> coujtNums11([1, 1, 2]) == 3\n  */\nconst coujtNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function coujtNums12 which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couj", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  for (let i = 1; i < n; i++) {\n    if (arr[i] > arr[i-1]) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform \n  any number of operations on the given array arr. Your task is to determine \n  if the array can be sorted in non-decreasing order by performing \n  the following operations on the given array:\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n      You are allowed to perform swap operation on any two elements of the array.\n      You are allowed to perform any number of operations on the given array.\n  \n  One swap operation means swapping two elements of the array i.e. arr[i] and\n  arr[j]. \n  \n  If it is possible to obtain the sorted array by performing the above \n  operations then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  swap([3, 4, 5, 1, 2])==>true\n  Explanation: By performing a swap operation on any two elements of the array,\n               non-decreasing order can be achieved for the given array.\n  swap([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of swap operations.\n  \n  */\nconst swap = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (arr[i] > arr[j]) {\n          flag = false;\n          break;\n        }\n      }\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform \n  any number of operations on the given array arr. Your task is to determine \n  if the array can be sorted in non-decreasing order by performing \n  the following operations on the given array:\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n      You are allowed to perform swap operation on any two elements of the array.\n      You are allowed to perform any number of operations on the given array.\n  \n  One swap operation means swapping two elements of the array i.e. arr[i] and\n  arr[j]. \n  \n  If it is possible to obtain the sorted array by performing the above \n  operations then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  swap([3, 4, 5, 1, 2])==>true\n  Explanation: By performing a swap operation on any two elements of the array,\n               non-decreasing order can be achieved for the given array.\n  swap([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of swap operations.\n  \n  */\nconst swap = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (arr[i] > arr[j]) {\n          flag = false;\n          break;\n        }\n      }\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform \n  any number of operations on the given array arr. Your task is to determine \n  if the array can be sorted in non-decreasing order by performing \n  the following operations on the given array:\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n      You are allowed to perform swap operation on any two elements of the array.\n      You are allowed to perform any number of operations on the given array.\n  \n  One swap operation means swapping two elements of the array i.e. arr[i] and\n  arr[j]. \n  \n  If it is possible to obtain the sorted array by performing the above \n  operations then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  swap([3, 4, 5, 1, 2])==>true\n  Explanation: By performing a swap operation on any two elements of the array,\n               non-decreasing order can be achieved for the given array.\n  swap([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of swap operations.\n  \n  */\nconst swap = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (arr[i] > arr[j]) {\n          flag = false;\n          break;\n        }\n      }\n    }\n  }\n  return flag;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform \n  any number of operations on the given array arr. Your task is to determine \n  if the array can be sorted in non-decreasing order by performing \n  the following operations on the given array:\n      You are allowed to perform left shift operation any number of times.\n      You are allowed to perform right shift operation any number of times.\n      You are allowed to perform swap operation on any two elements of the array.\n      You are allowed to perform any number of operations on the given array.\n  \n  One swap operation means swapping two elements of the array i.e. arr[i] and\n  arr[j]. \n  \n  If it is possible to obtain the sorted array by performing the above \n  operations then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  swap([3, 4, 5, 1, 2])==>true\n  Explanation: By performing a swap operation on any two elements of the array,\n               non-decreasing order can be achieved for the given array.\n  swap([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of swap operations.\n  \n  */\nconst swap = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (arr[i] > arr[j]) {\n          flag = false;\n          break;\n        }\n      }\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const xorResult = [];\n  for (let i = 0; i < aLen; i++) {\n    xorResult.push(a[i] ^ b[i]);\n  }\n  return xorResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const andResult = [];\n  for (let i = 0; i < aLen; i++) {\n    andResult.push(a[i] & b[i]);\n  }\n  return andResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const orResult = [];\n  for (let i = 0; i < aLen; i++) {\n    orResult.push(a[i] | b[i]);\n  }\n  return orResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010', '110')\n  '110'\n  */\nconst strlngNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const notResult = [];\n  for (let i = 0; i < aLen; i++) {\n    notResult.push(a[i] ^ b[i]);\n  }\n  return notResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010', '110')\n  '110'\n  */\nconst strlngNot = (x, y) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const notResult = [];\n  for (let i = 0; i < aLen; i++) {\n    notResult.push(a[i] ^ b[i]);\n  }\n  return notResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const andResult = [];\n  for (let i = 0; i < aLen; i++) {\n    andResult.push(a[i] & b[i]);\n  }\n  return andResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const orResult = [];\n  for (let i = 0; i < aLen; i++) {\n    orResult.push(a[i] | b[i]);\n  }\n  return orResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010', '110')\n  '110'\n  */\nconst strlngNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const notResult = [];\n  for (let i = 0; i < aLen; i++) {\n    notResult.push(a[i] ^ b[i]);\n  }\n  return notResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010', '110')\n  '110'\n  */\nconst strlngNot = (x, y) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const notResult = [];\n  for (let i = 0; i < aLen; i++) {\n    notResult.push(a[i] ^ b[i]);\n  }\n  return notResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const andResult = [];\n  for (let i = 0; i < aLen; i++) {\n    andResult.push(a[i] & b[i]);\n  }\n  return andResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const orResult = [];\n  for (let i = 0; i < aLen; i++) {\n    orResult.push(a[i] | b[i]);\n  }\n  return orResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010', '110')\n  '110'\n  */\nconst strlngNot = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const notResult = [];\n  for (let i = 0; i < aLen; i++) {\n    notResult.push(a[i] ^ b[i]);\n  }\n  return notResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010', '110')\n  '110'\n  */\nconst strlngNot = (x, y) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const notResult = [];\n  for (let i = 0; i < aLen; i++) {\n    notResult.push(a[i] ^ b[i]);\n  }\n  return notResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '100'\n  */\nconst strlngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const andResult = [];\n  for (let i = 0; i < aLen; i++) {\n    andResult.push(a[i] & b[i]);\n  }\n  return andResult.join('');\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '100'\n  */\nconst strlngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const orResult = [];\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Call the function and print the result\nexcjange([1, 2, 3, 4], [1, 2, 3, 4]);\nexcjange([1, 2, 3, 4], [1, 5, 3, 4]);</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your answer! I really appreciate it! I understand it now!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction excjange(lst1, lst2) {\n  var even = [];\n  var odd = [];\n  for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i]);\n    } else {\n      odd.push(lst1[i]);\n    }\n  }\n  for (var i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i]);\n    } else {\n      odd.push(lst2[i]);\n    }\n  }\n  if (even.length == lst1.length && odd.length == lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] > count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] < count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] > count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] < count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] > count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] < count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n      letters[test[i]] = 1;\n    }\n  }\n  for (let key in letters) {\n    if (letters[key] > count) {\n      count = letters[key];\n    }\n  }\n  return letters;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the least repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let letters = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (letters[test[i]]) {\n      letters[test[i]] += 1;\n    } else {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let rev = s.split(\"\").reverse().join(\"\");\n  let result = rev;\n  let flag = true;\n  for (let i = 0; i < rev.length; i++) {\n    if (rev[i]!== c[i]) {\n      flag = false;\n      break;\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. Your task is to find the first occurrence of substring in s that is of length k but is not part of another substring in s.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\"\n  For s = \"abcabcbb\", k = 120, the result should be \"bb\"\n  For s = \"abcabcbb\", k = 2, the result should be \"\"\n  For s = \"abcabcbb\", k = 0, the result should be \"\"\n  For s = \"abcabcbb\", k = 1, the result should be \"\"\n  For s = \"abcabcbb\", k = 2, the result should be \"\"\n  For s = \"abcabcbb\", k = 4, the result should be \"\"\n  For s = \"abcabcbb\", k = 5, the result should be \"\"\n  For s = \"abcabcbb\", k = 6, the result should be \"\"\n  For s = \"abcabcbb\", k = 7, the result should be \"\"\n  For s = \"abcabcbb\", k = 8, the result should be \"\"\n  For s = \"abcabcbb\", k = 9, the result should be \"\"\n  For s = \"abcabcbb\", k = 10, the result should be \"\"\n  For s = \"abcabcbb\", k = 11, the result should be \"\"\n  For s = \"abcabcbb\", k = 12, the result should be \"\"\n  For s = \"abcabcbb\", k = 13, the result should be \"\"\n  For s = \"abcabcbb\", k = 14, the result should be \"\"\n  For s = \"abcabcbb\", k = 15, the result should be \"\"\n  For s = \"abcabcbb\", k = 16, the result should be \"\"\n  For s = \"abcabcbb\", k = 17, the result should be \"\"\n  For s = \"abcabcbb\", k = 18, the result should be \"\"\n  For s = \"abcabcbb\", k = 19, the result should be \"\"\n  For s = \"abcabcbb\", k = 20, the result should be \"\"\n  For s = \"abcabcbb\", k = 21, the result should be \"\"\n  For s = \"abcabcbb\", k = 22, the result should be \"\"\n  For s = \"abcabcbb\", k = 23, the result should be \"\"\n  For s = \"abcabcbb\", k = 24, the result should be \"\"\n  For s = \"abcabcbb\", k = 25, the result should be \"\"\n  For s = \"abcabcbb\", k = 26, the result should be \"\"\n  For s = \"abcabcbb\", k = 27, the result should be \"\"\n  For s = \"abcabcbb\", k = 28, the result should be \"\"\n  For s = \"abcabcbb\", k = 29, the result should be \"\"\n  For s = \"abcabcbb\", k = 30, the result should be \"\"\n  For s = \"abcabcbb\", k = 31, the result should be \"\"\n  For s = \"abcabcbb\", k = 32, the result should be \"\"\n  For s = \"abcabcbb\", k = 33, the result should be \"\"\n  For s = \"abcabcbb\", k = 34, the result should be \"\"\n  For s = \"abcabcbb\", k = 35, the result should be \"\"\n  For s = \"abcabcbb\", k = 36, the result should be \"\"\n  For s = \"abcabcbb\", k = 37, the result should be \"\"\n  For s = \"abcabcbb\", k = 38, the result should be \"\"\n  For s = \"abcabcbb\", k = 39, the result should be \"\"\n  For s = \"abcabcbb\", k = 40, the result should be \"\"\n  For s = \"abcabcbb\", k = 41, the result should be \"\"\n  For s = \"abcabcbb\", k = 42, the result should be \"\"\n  For s = \"abcabcbb\", k = 43, the result should be \"\"\n  For s = \"abcabcbb\", k = 44, the result should be \"\"\n  For s = \"abcabcbb\", k = 45, the result should be \"\"\n  For s = \"abcabcbb\", k = 46, the result should be \"\"\n  For s = \"abcabcbb\", k = 47, the result should be \"\"\n  For s = \"abcabcbb\", k = 48, the result should be \"\"\n  For s = \"abcabcbb\", k = 49, the result should be \"\"\n  For s = \"abcabcbb\", k = 50, the result should be \"\"\n  For s = \"abcabcbb\", k = 51, the result should be \"\"\n  For s = \"abcabcbb\", k = 52, the result should be \"\"\n  For s = \"abcabcbb\", k = 53, the result should be \"\"\n  For s = \"abcabcbb\", k = 54, the result should be \"\"\n  For s = \"abcabcbb\", k = 55, the result should be \"\"\n  For s = \"abcabcbb\", k = 56, the result should be \"\"\n  For s = \"abcabcbb\", k = 57, the result should be \"\"\n  For s = \"abcabcbb\", k = 58, the result should be \"\"\n  For s = \"abcabcbb\", k = 59, the result should be \"\"\n  For s = \"abcabcbb\", k = 60, the result should be \"\"\n  For s = \"abcabcbb\", k = 61, the result should be \"\"\n  For s = \"abcabcbb\", k = 62, the result should be \"\"\n  For s = \"abcabcbb\", k = 63, the result should be \"\"\n  For s = \"abcabcbb\", k = 64, the result should be \"\"\n  For s = \"abcabcbb\", k = 65, the result should be \"\"\n  For s = \"abcabcbb\", k = 66, the result should be \"\"\n  For s = \"abcabcbb\", k = 67, the result should be \"\"\n  For s = \"abcabcbb\", k = 68, the result should be \"\"\n  For s = \"abcabcbb\", k = 69, the result should be \"\"\n  For s = \"abcabcbb\", k = 70, the result should be \"\"\n  For s = \"abcabcbb\", k = 71, the result should be \"\"\n  For s = \"abcabcbb\", k = 72, the result should be \"\"\n  For s = \"abcabcbb\", k = 73, the result should be \"\"\n  For s = \"abcabcbb\", k = 74, the result should be \"\"\n  For s = \"abcabcbb\", k = 75, the result should be \"\"\n  For s = \"abcabcbb\", k = 76, the result should be \"\"\n  For s = \"abcabcbb\", k = 77, the result should be \"\"\n  For s = \"abcabcbb\", k = 78, the result should be \"\"\n  For s = \"abcabcbb\", k = 79, the result should be \"\"\n  For s = \"abcabcbb\", k = 80, the result should be \"\"\n  For s = \"abcabcbb\", k = 81, the result should be \"\"\n  For s = \"abcabcbb\", k = 82, the result should be \"\"\n  For s = \"abcabcbb\", k = 83, the result should be \"\"\n  For s = \"abcabcbb\", k = 84, the result should be \"\"\n  For s = \"abcabcbb\", k = 85, the result should be \"\"\n  For s = \"abcabcbb\", k = 86, the result should be \"\"\n  For s = \"abcabcbb\", k = 87, the result should be \"\"\n  For s = \"abcabcbb\", k = 88, the result should be \"\"\n  For s = \"abcabcbb\", k = 89, the ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddCount++;\n      }\n    }\n  }\n  return [`${oddCount} odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenFount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenFount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenFount = (lst) => {\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '0') {\n        evenCount++;\n      }\n    }\n  }\n  return [`${evenCount} even elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (str.charAt(j) === '0') {\n        oddEvenCount++;\n      }\n    }\n  }\n  return [`${oddEvenCount} even and odd elements`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenFount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenFount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenFount = (lst) => {\n  let oddEvenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str.charAt(j) === '1') {\n        oddEvenCount++;\n      }\n      if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxDubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxDubArraySum([-1, -2, -3]) == 6\n  */\nconst maxDubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all even numbers in nums.\n  Example\n  evenSum([2, 3, 4, 1, 2, 4]) == 6\n  evenSum([-1, -2, -3]) == 6\n  */\nconst evenSum = (nums) => {\n  let evenSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenSum += nums[i];\n    }\n  }\n  return evenSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all odd numbers in nums.\n  Example\n  oddSum([2, 3, 4, 1, 2, 4]) == 3\n  oddSum([-1, -2, -3]) == 3\n  */\nconst oddSum = (nums) => {\n  let oddSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2!== 0) {\n      oddSum += nums[i];\n    }\n  }\n  return oddSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 3.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSum([-1, -2, -3]) == 6\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 5.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 10\n  divisibleSum([-1, -2, -3]) == 10\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 7.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 14\n  divisibleSum([-1, -2, -3]) == 14\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 11.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 21\n  divisibleSum([-1, -2, -3]) == 21\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 13.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 26\n  divisibleSum([-1, -2, -3]) == 26\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 13 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 17.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 33\n  divisibleSum([-1, -2, -3]) == 33\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 17 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 19.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 42\n  divisibleSum([-1, -2, -3]) == 42\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 19 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 21.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 50\n  divisibleSum([-1, -2, -3]) == 50\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 21 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 23.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 58\n  divisibleSum([-1, -2, -3]) == 58\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 23 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 25.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 66\n  divisibleSum([-1, -2, -3]) == 66\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 25 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 27.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 76\n  divisibleSum([-1, -2, -3]) == 76\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 27 === 0) {\n      divisibleSum += nums[i];\n    }\n  }\n  return divisibleSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that are divisible by 29.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 84\n  divisibleSum([-1, -2, -3]) == 84\n  */\nconst divisibleSum = (nums) => {\n  let divisibleSum = 0;\n  for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) {\n      count += buckets[i] / n;\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an n x n grid of numbers. \n  Each cell of the grid contains a single positive integer.\n  Your task is to count the total number of integers in the grid.\n  \n  Constraints:\n      * n >= 0\n      * n and m are integers \n      * -10^9 <= grid[i][j] <= 10^9\n  \n  Example 1:\n      Input: \n          grid = [[1,3,5,7],[2,4,6,8],[9,10,11,12]]\n      Output: 16\n  \n  Example 2:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8]]\n      Output: 10\n  \n  Example 3:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10]]\n      Output: 15\n  \n  Example 4:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12]]\n      Output: 16\n  \n  Example 5:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14]]\n      Output: 17\n  \n  Example 6:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16]]\n      Output: 18\n  \n  Example 7:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18]]\n      Output: 19\n  \n  Example 8:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]\n      Output: 20\n  \n  Example 9:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22]]\n      Output: 21\n  \n  Example 10:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24]]\n      Output: 22\n  \n  Example 11:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26]]\n      Output: 23\n  \n  Example 12:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28]]\n      Output: 24\n  \n  Example 13:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30]]\n      Output: 25\n  \n  Example 14:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32]]\n      Output: 26\n  \n  Example 15:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34]]\n      Output: 27\n  \n  Example 16:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36]]\n      Output: 28\n  \n  Example 17:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38]]\n      Output: 29\n  \n  Example 18:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38],[39,40]]\n      Output: 30\n  \n  Example 19:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,32],[33,34],[35,36],[37,38],[39,40],[41,42]]\n      Output: 31\n  \n  Example 20:\n      Input: \n          grid = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[25,26],[27,28],[29,30],[31,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return a - b\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return -1\n    if (b === 0) return 1\n    const ones = binToInt(a)\n    const twos = binToInt(b)\n    if (ones === twos) {\n      return b - a\n    }\n    return ones - twos\n  })\n  return sorted\n}\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sorhArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === 0) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  vowelWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  vowelWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  vowelWords(\"simple white space\", 2) ==> []\n  vowelWords(\"Hello world\", 4) ==> [\"world\"]\n  vowelWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst vowelWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  consonantWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  consonantWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  consonantWords(\"simple white space\", 2) ==> []\n  consonantWords(\"Hello world\", 4) ==> [\"world\"]\n  consonantWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst consonantWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  vowelWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  vowelWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  vowelWords(\"simple white space\", 2) ==> []\n  vowelWords(\"Hello world\", 4) ==> [\"world\"]\n  vowelWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst vowelWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  consonantWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  consonantWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  consonantWords(\"simple white space\", 2) ==> []\n  consonantWords(\"Hello world\", 4) ==> [\"world\"]\n  consonantWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst consonantWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  vowelWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  vowelWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  vowelWords(\"simple white space\", 2) ==> []\n  vowelWords(\"Hello world\", 4) ==> [\"world\"]\n  vowelWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst vowelWords = (s, n) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  let vowelsFound = false;\n  let vowelFound = \"\";\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      vowelsFound = true;\n      vowelFound = word[i];\n      vowelIndex++;\n      vowelCount++;\n      if (vowelIndex === vowelsCount) {\n        break;\n      }\n    }\n  }\n  return vowelFound;\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  let vowelsFound = false;\n  let vowelFound = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      vowelsFound = true;\n      vowelFound = word[i];\n      vowelIndex++;\n      vowelCount++;\n      if (vowelIndex === vowelsCount) {\n        break;\n      }\n    }\n  }\n  return vowelFound;\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  let vowelsFound = false;\n  let vowelFound = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      vowelsFound = true;\n      vowelFound = word[i];\n      vowelIndex++;\n      vowelCount++;\n      if (vowelIndex === vowelsCount) {\n        break;\n      }\n    }\n  }\n  return vowelFound;\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  let vowelsFound = false;\n  let vowelFound = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      vowelsFound = true;\n      vowelFound = word[i];\n      vowelIndex++;\n      vowelCount++;\n      if (vowelIndex === vowelsCount) {\n        break;\n      }\n    }\n  }\n  return vowelFound;\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  let vowelsFound = false;\n  let vowelFound = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      vowelsFound = true;\n      vowelFound = word[i];\n      vowelIndex++;\n      vowelCount++;\n      if (vowelIndex === vowelsCount) {\n        break;\n      }\n    }\n  }\n  return vowelFound;\n};\n\n/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  let vowelsFound = false;\n  let vowelFound = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      vowelsFound = true;\n      vowelFound = word[i];\n      vowelIndex++;\n      vowelCount++;\n      if (vowelIndex === vowelsCount) {\n        break;\n      }\n    }\n  }\n  return vowelFound;\n};\n\n/*You are given a word. Your task is to find the closest vowel that ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/* You are given a list of strings. Your job is to concatenate all strings\n  in the list into one string. For example: if the list contains ['(', ')',\npassed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "<|endoftext|>/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (!strings.length) return null\n  const longest = strings.reduce((acc, str) => {\n    return str.length > acc? str.length : acc\n  }, 0)\n  return strings.find((str) => str.length === longest) || null\n}\n\n/* Given a string, return a list of all its possible substrings.\n  >>> substrings('abc')\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substrings = (str) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = i; j < str.length + 1; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length.\n  >>> substringsUpTo('abc', 2)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpTo = (str, length) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = i; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpTo('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', 'abbc', 'abcc', 'ac', 'acb', 'acc', 'accc', 'acccc']\n  */\nconst substringsUpToIndex = (str, length, index) => {\n  const result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = index; j < str.length + length; j++) {\n      result.push(str.slice(0, j))\n    }\n  }\n  return result\n}\n\n/* Given a string, return a list of all its possible substrings up to a certain length\n  and starting at a certain index.\n  >>> substringsUpToIndex('abc', 2, 1)\n  ['', 'a', 'ab', 'abc', '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { maxlmum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minlmum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { minlmum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 5, -4]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxrmum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { maxrmum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minrmum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { minrmum };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxrmax = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { maxrmax };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minrmin = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { minrmin };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, 2, -1, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxrmin = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  while (index >= 0) {\n    result.unshift(arr[index]);\n    index--;\n  }\n  return result.slice(0, k);\n};\n\nexport { maxrmin };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an even number of times.\n\n  Examples\n  removeOdds([5, 8, 7, 1, 3]) ==> [8, 7, 3]\n  removeOdds([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeOdds([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeOdds = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an odd number of times.\n\n  Examples\n  removeEvens([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeEvens([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeEvens([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeEvens = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an even number of times.\n\n  Examples\n  removeOddsAndEvens([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeOddsAndEvens([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeOddsAndEvens([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeOddsAndEvens = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an odd number of times.\n\n  Examples\n  removeEvensAndOdds([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeEvensAndOdds([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeEvensAndOdds([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeEvensAndOdds = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an even number of times.\n\n  Examples\n  removeOddsAndOdds([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeOddsAndOdds([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeOddsAndOdds([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeOddsAndOdds = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an odd number of times.\n\n  Examples\n  removeEvensAndEvens([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeEvensAndEvens([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeEvensAndEvens([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeEvensAndEvens = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an even number of times.\n\n  Examples\n  removeOddsAndEvensAndOdds([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeOddsAndEvensAndOdds([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeOddsAndEvensAndOdds([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeOddsAndEvensAndOdds = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an odd number of times.\n\n  Examples\n  removeEvensAndOddsAndEvens([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeEvensAndOddsAndEvens([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeEvensAndOddsAndEvens([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeEvensAndOddsAndEvens = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an odd number of times.\n\n  Examples\n  removeEvensAndOddsAndOdds([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeEvensAndOddsAndOdds([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeEvensAndOddsAndOdds([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeEvensAndOddsAndOdds = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an even number of times.\n\n  Examples\n  removeOddsAndOddsAndEvens([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeOddsAndOddsAndEvens([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeOddsAndOddsAndEvens([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst removeOddsAndOddsAndEvens = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing all of the integers in the original list except the one that occurs an odd number of times.\n\n  Examples\n  removeEvensAndEvensAndOdds([5, 8, 7, 1, 3]) ==> [5, 3]\n  removeEvensAndEvensAndOdds([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  removeEvensAndEvensAnd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    result.push(currentNumber);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    result.push(currentNumber);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    result.push(currentNumber);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    result.push(currentNumber);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    result.push(currentNumber);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    result.push(currentNumber);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  let dateArray = date.split('-');\n  let day = dateArray[0];\n  let month = dateArray[1];\n  let year = dateArray[2];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonthMonth = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n  let daysInMonthYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n  let monthArray = [0, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let monthArrayYear = [0, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];\n  let yearArrayMonth = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];\n  let yearArrayMonthYear = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];\n  let yearArrayMonthYearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];\n  let yearArrayMonthYearArrayYear = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100];\n  let yearArrayMonthYearArrayYearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const wordCounts = {};\n  words.forEach((word) => {\n    const lowerCaseLetters = word.toLowerCase();\n    if (wordCounts[lowerCaseLetters]) {\n      wordCounts[lowerCaseLetters] += 1;\n    } else {\n      wordCounts[lowerCaseLetters] = 1;\n    }\n  });\n  const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n  return sortedWordCounts.filter(([, count]) => count % 2 === 1).map(([word]) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with even order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const wordCounts = {};\n  words.forEach((word) => {\n    const lowerCaseLetters = word.toLowerCase();\n    if (wordCounts[lowerCaseLetters]) {\n      wordCounts[lowerCaseLetters] += 1;\n    } else {\n      wordCounts[lowerCaseLetters] = 1;\n    }\n  });\n  const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n  return sortedWordCounts.filter(([, count]) => count % 2 === 0).map(([word]) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 25, ord('Z') = 26, ord('a') = 27, ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOdd = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const wordCounts = {};\n  words.forEach((word) => {\n    const upperCaseLetters = word.toUpperCase();\n    if (wordCounts[upperCaseLetters]) {\n      wordCounts[upperCaseLetters] += 1;\n    } else {\n      wordCounts[upperCaseLetters] = 1;\n    }\n  });\n  const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n  return sortedWordCounts.filter(([, count]) => count % 2 === 1).map(([word]) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with even order in the\n  alphabet, ord('A') = 25, ord('Z') = 26, ord('a') = 27, ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsEvenOdd = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const wordCounts = {};\n  words.forEach((word) => {\n    const upperCaseLetters = word.toUpperCase();\n    if (wordCounts[upperCaseLetters]) {\n      wordCounts[upperCaseLetters] += 1;\n    } else {\n      wordCounts[upperCaseLetters] = 1;\n    }\n  });\n  const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n  return sortedWordCounts.filter(([, count]) => count % 2 === 0).map(([word]) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 25, ord('Z') = 26, ord('a') = 27, ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsOddEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const wordCounts = {};\n  words.forEach((word) => {\n    const upperCaseLetters = word.toUpperCase();\n    if (wordCounts[upperCaseLetters]) {\n      wordCounts[upperCaseLetters] += 1;\n    } else {\n      wordCounts[upperCaseLetters] = 1;\n    }\n  });\n  const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n  return sortedWordCounts.filter(([, count]) => count % 2 === 1).map(([word]) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWordsEvenOddEven = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const wordCounts = {};\n  words.forEach((word) => {\n    const lowerCaseLetters = word.toLowerCase();\n    if (wordCounts[lowerCaseLetters]) {\n      wordCounts[lowerCaseLetters] += 1;\n    } else {\n      wordCounts[lowerCaseLetters] = 1;\n    }\n  });\n  const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n  return sortedWordCounts.filter(([, count]) => count % 2 === 0).map(([word]) => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.filter((x, i) => i === lst.indexOf(x)).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrtedDesc([5]) ➞ true\n  isSlrtedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSlrtedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSlrtedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrtedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrtedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrtedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrtedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrtedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.filter((x, i) => i === lst.indexOf(x)).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of the\n  same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrtedOrdered([5]) ➞ true\n  isSlrtedOrdered([1, 2, 3, 4, 5]) ➞ true\n  isSlrtedOrdered([1, 3, 2, 4, 5]) ➞ true\n  isSlrtedOrdered([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrtedOrdered([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrtedOrdered([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrtedOrdered([1, 2, 2, 2, 3, 4]) ➞ true\n  isSlrtedOrdered([1, 2, 2, 3, 3, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 6, 7]) ➞ false\n  isSlrtedOrdered([1, 2, 2, 3, 3, 4, 5]) �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  if (start1 <= start2 && end2 >= end1) return \"YES\";\n  if (start2 <= start1 && end1 >= end2) return \"YES\";\n  if (start2 <= start1 && end2 >= end1) return \"YES\";\n  return \"NO\";\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  if (start1 <= start2 && end2 >= end1) return \"YES\";\n  if (start2 <= start1 && end1 >= end2) return \"YES\";\n  if (start2 <= start1 && end2 >= end1) return \"YES\";\n  return \"NO\";\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  if (start1 <= start2 && end2 >= end1) return \"YES\";\n  if (start2 <= start1 && end1 >= end2) return \"YES\";\n  if (start2 <= start1 && end2 >= end1) return \"YES\";\n  return \"NO\";\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  if (start1 <= start2 && end2 >= end1) return \"YES\";\n  if (start2 <= start1 && end1 >= end2) return \"YES\";\n  if (start2 <= start1 && end2 >= end1) return \"YES\";\n  return \"NO\";\n};\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  if (start1 <= start2 && end2 >= end1) return \"YES", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns2 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns3 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns4 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns5 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns6 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns7 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns8 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns9 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns10 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1 // sign of number\n    sum += sign * Math.pow(Math.abs(arr[i]), 1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns11 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const dfs = (i, j) => {\n    if (visited[i] === false && grid[i][j] <= k) {\n      M[i] = Math.max(M[i], 1 + dfs(i, j + 1));\n      ans.push(grid[i][j]);\n      visited[i] = true;\n    }\n    return M[i];\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      dfs(i, j);\n    }\n  }\n  return ans;\n};\n\n// --------------------------------------------------\n// Tests\nconst tests = [\n  {\n    name: 'empty grid',\n    grid: [],\n    k: 0,\n    expected: []\n  },\n  {\n    name: 'grid of size 0',\n    grid: [],\n    k: 0,\n    expected: []\n  },\n  {\n    name: 'grid of size 1',\n    grid: [[1]],\n    k: 0,\n    expected: [1]\n  },\n  {\n    name: 'grid of size 2',\n    grid: [\n      [1, 2],\n      [3, 4]\n    ],\n    k: 1,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 3',\n    grid: [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]\n    ],\n    k: 2,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 4',\n    grid: [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 16]\n    ],\n    k: 3,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 5',\n    grid: [\n      [1, 2, 3, 4, 5],\n      [6, 7, 8, 9, 10],\n      [11, 12, 13, 14, 15],\n      [16, 17, 18, 19, 20],\n      [21, 22, 23, 24, 25],\n      [26, 27, 28, 29, 30],\n      [31, 32, 33, 34, 35]\n    ],\n    k: 4,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 6',\n    grid: [\n      [1, 2, 3, 4, 5, 6],\n      [7, 8, 9, 10, 11, 12],\n      [13, 14, 15, 16, 17, 18],\n      [19, 20, 21, 22, 23, 24],\n      [25, 26, 27, 28, 29, 30],\n      [31, 32, 33, 34, 35, 36],\n      [37, 38, 39, 40, 41, 42],\n      [43, 44, 45, 46, 47, 48]\n    ],\n    k: 5,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 7',\n    grid: [\n      [1, 2, 3, 4, 5, 6, 7],\n      [8, 9, 10, 11, 12, 13, 14],\n      [15, 16, 17, 18, 19, 20, 21],\n      [22, 23, 24, 25, 26, 27, 28],\n      [29, 30, 31, 32, 33, 34, 35],\n      [36, 37, 38, 39, 40, 41, 42],\n      [43, 44, 45, 46, 47, 48, 49],\n      [50, 51, 52, 53, 54, 55, 56]\n    ],\n    k: 6,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 8',\n    grid: [\n      [1, 2, 3, 4, 5, 6, 7, 8],\n      [9, 10, 11, 12, 13, 14, 15, 16],\n      [17, 18, 19, 20, 21, 22, 23, 24],\n      [25, 26, 27, 28, 29, 30, 31, 32],\n      [33, 34, 35, 36, 37, 38, 39, 40],\n      [41, 42, 43, 44, 45, 46, 47, 48],\n      [49, 50, 51, 52, 53, 54, 55, 56],\n      [57, 58, 59, 60, 61, 62, 63, 64]\n    ],\n    k: 7,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 9',\n    grid: [\n      [1, 2, 3, 4, 5, 6, 7, 8, 9],\n      [10, 11, 12, 13, 14, 15, 16, 17, 18],\n      [19, 20, 21, 22, 23, 24, 25, 26, 27],\n      [28, 29, 30, 31, 32, 33, 34, 35, 36],\n      [37, 38, 39, 40, 41, 42, 43, 44, 45],\n      [46, 47, 48, 49, 50, 51, 52, 53, 54],\n      [55, 56, 57, 58, 59, 60, 61, 62, 63],\n      [64, 65, 66, 67, 68, 69, 70, 71, 72],\n      [73, 74, 75, 76, 77, 78, 79, 80, 81]\n    ],\n    k: 8,\n    expected: [1, 2]\n  },\n  {\n    name: 'grid of size 10',\n    grid: [\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n      [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n      [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n      [29, 30, 31, 32, 33, 34, 35, 36, 37, 38],\n      [37, 38, 39, 40, 41, 42, 43, 44, 45, 46],\n      [47, 48, 49, 50, 51, 52, 53, 54, 55, 56],\n      [57, 58, 59, 60, 61, 62, 63, 64, 65, 66],\n      [67, 68, 69, 70, 71, 72, 73, 74, 75, 76],\n      [77, 78, 79, 80, 81, 82, 83, 84, 85, 86],\n      [87, 88, 89, 90, 91, 92, 93, 94, 95, 96],\n      [97, 98, 99, 100, 101, 102, 103, 104, 105, 106],\n      [107, 108, 109, 110, 111, 112, 113, 114, 115, 116],\n      [117, 118, 119, 120, 121, 122, 123, 124, 125, 126],\n      [127, 128, 129, 130, 131, 132, 133, 134, 135, 136],\n      [137, 138, 139, 140, 141, 142, 143, 144, 145, 146],\n      [147, 148, 149, 150, 151, 152, 153, 154, 155, 156],\n      [157, 158, 159, 160, 161, 162, 163, 164, 165, 166],\n      [167, 168, 169, 170, 171, 172, 173, 174, 175, 176],\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a < b) return grewtestCommonDivisor(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a % b);\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  3\n  >>> leastCommonMultiple(25, 15)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence up to and including n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(5) = [1, 1, 2, 3, 5]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n*/\nconst fib = (n) => {\n  let arr = [];\n  arr.push(1);\n  if (n === 1) {\n    return arr;\n  }\n  arr.push(fib(n - 1) + fib(n - 2));\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Spiral sequence up to and including n.\n  Examples:\n  spiral(3) = [1, 1, 2]\n  spiral(5) = [1, 1, 2, 5, 10, 15, 20]\n  spiral(10) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000]\n  spiral(20) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1075, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1350, 1375]\n*/\nconst spiral = (n) => {\n  let arr = [];\n  arr.push(1);\n  if (n === 1) {\n    return arr;\n  }\n  arr.push(spiral(n - 1) + spiral(n - 2));\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Spiral sequence up to and including n.\n  Examples:\n  spiral(3) = [1, 1, 2]\n  spiral(5) = [1, 1, 2, 5, 10, 15, 20]\n  spiral(10) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000]\n  spiral(20) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1075, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1350, 1375]\n*/\nconst spiral = (n) => {\n  let arr = [];\n  arr.push(1);\n  if (n === 1) {\n    return arr;\n  }\n  arr.push(spiral(n - 1) + spiral(n - 2));\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Spiral sequence up to and including n.\n  Examples:\n  spiral(3) = [1, 1, 2]\n  spiral(5) = [1, 1, 2, 5, 10, 15, 20]\n  spiral(10) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1075, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1350, 1375]\n  spiral(20) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1075, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1350, 1375]\n*/\nconst spiral = (n) => {\n  let arr = [];\n  arr.push(1);\n  if (n === 1) {\n    return arr;\n  }\n  arr.push(spiral(n - 1) + spiral(n - 2));\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Spiral sequence up to and including n.\n  Examples:\n  spiral(3) = [1, 1, 2]\n  spiral(5) = [1, 1, 2, 5, 10, 15, 20]\n  spiral(10) = [1, 1, 2, 5, 10, 15, 20, 25, 40, 50, 60, 75, 90, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1075, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1350, 1375]\n  sp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 0) return n * diglts(n - 1);\n  return n * diglts(n - 2) / 2;\n};\n\n/*Given a positive integer n, return the product of the even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDiglts = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDiglts(n - 1);\n  return n * evenDiglts(n - 2) / 2;\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSum(n - 1);\n  return n * evenDigltsAndSum(n - 2) + diglts(n);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts and sum of all even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSumAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSumAndSum(n - 1);\n  return n * evenDigltsAndSumAndSum(n - 2) + diglts(n) + evenDiglts(n);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts and sum of all even diglts and sum of all even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSumAndSumAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSumAndSumAndSum(n - 1);\n  return n * evenDigltsAndSumAndSumAndSum(n - 2) + diglts(n) + evenDiglts(n) + evenDigltsAndSum(n);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSumAndSumAndSumAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSumAndSumAndSumAndSum(n - 1);\n  return n * evenDigltsAndSumAndSumAndSumAndSum(n - 2) + diglts(n) + evenDiglts(n) + evenDigltsAndSum(n) + evenDigltsAndSumAndSum(n);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSumAndSumAndSumAndSumAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSumAndSumAndSumAndSumAndSum(n - 1);\n  return n * evenDigltsAndSumAndSumAndSumAndSumAndSum(n - 2) + diglts(n) + evenDiglts(n) + evenDigltsAndSum(n) + evenDigltsAndSumAndSum(n) + evenDigltsAndSumAndSumAndSum(n);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSumAndSumAndSumAndSumAndSumAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSumAndSumAndSumAndSumAndSumAndSum(n - 1);\n  return n * evenDigltsAndSumAndSumAndSumAndSumAndSumAndSum(n - 2) + diglts(n) + evenDiglts(n) + evenDigltsAndSum(n) + evenDigltsAndSumAndSum(n) + evenDigltsAndSumAndSumAndSum(n) + evenDigltsAndSumAndSumAndSumAndSum(n);\n};\n\n/*Given a positive integer n, return the product of the even diglts\n  and sum of all diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts and sum of all even diglts.\n  Return 0 if all diglts are odd.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 4\n  diglts(235) == 235\n  */\nconst evenDigltsAndSumAndSumAndSumAndSumAndSumAndSumAndSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 1) return n * evenDigltsAndSumAndSumAndSumAndSumAndSumAndSumAndSum(n - 1);\n  return n * evenDigltsAndSumAndSumAndSumAndSumAndSumAndSumAndSum(n - 2) + diglts(n) + evenDiglts(n) + evenDigltsAndSum(n) + evenDigltsAndSumAndSum(n) + evenDigl", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const openingBrackets = string.match(/\\[+/gi);\n  const closingBrackets = string.match(/\\]+/gi);\n  const openingBracketsCount = openingBrackets? opening", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst sumNumbersRounded9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 4\n  For lst = [-2.4,1,1] the output should be 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '/' || lastChar === '\\\\' || lastChar === '!' || lastChar === '?' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '&' || lastChar === '@' || lastChar === '#' || lastChar === '$' || lastChar === '%' || lastChar === '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 0\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...negatives), Math.min(...positives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  larhestLargestIntegers([]) == (null, null)\n  larhestLargestIntegers([0]) == (null, null)\n  */\nconst larhestLargestIntegers = (lst) => {\n  const negatives = lst.filter((x) => x < 0);\n  const positives = lst.filter((x) => x >= 0);\n  if (negatives.length === 0) {\n    return null;\n  }\n  if (positives.length === 0) {\n    return null;\n  }\n  return Math.max(...positives), Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \"*\" || b === \"*\") return null\n  if (a === \"/\" || b === \"/\") return null\n  if (a === \"^\" || b === \"^\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"&\" || b === \"&\") return null\n  if (a === \"|\" || b === \"|\") return null\n  if (a === \"~\" || b === \"~\") return null\n  if (a === \"<=\" || b === \"<=\") return null\n  if (a === \">=\" || b === \">=\") return null\n  if (a === \"!=\" || b === \"!=\") return null\n  if (a === \"==\" || b === \"==\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"|\" || b === \"|\") return null\n  if (a === \"&\" || b === \"&\") return null\n  if (a === \"~\" || b === \"~\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null\n  if (a === \"!\" || b === \"!\") return null\n  if (a === \"=\" || b === \"=\") return null\n  if (a === \"<\" || b === \"<\") return null\n  if (a === \">\" || b === \">\") return null", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  if (n === 0) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  if (n === 0) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive numbers\n  Example\n  isEeualToSum(8) == true\n  isEeualToSum(10) == true\n  isEeualToSum(12) == false\n  isEeualToSum(16) == false\n  isEeualToSum(20) == false\n  isEeualToSum(24) == false\n  isEeualToSum(32) == false\n  isEeualToSum(40) == false\n  isEeualToSum(48) == false\n  isEeualToSum(56) == false\n  isEeualToSum(64) == false\n  isEeualToSum(72) == false\n  isEeualToSum(80) == false\n  isEeualToSum(88) == false\n  isEeualToSum(96) == false\n  isEeualToSum(104) == false\n  isEeualToSum(112) == false\n  isEeualToSum(120) == false\n  isEeualToSum(128) == false\n  isEeualToSum(136) == false\n  isEeualToSum(144) == false\n  isEeualToSum(152) == false\n  isEeualToSum(160) == false\n  isEeualToSum(168) == false\n  isEeualToSum(176) == false\n  isEeualToSum(184) == false\n  isEeualToSum(192) == false\n  isEeualToSum(200) == false\n  isEeualToSum(208) == false\n  isEeualToSum(216) == false\n  isEeualToSum(224) == false\n  isEeualToSum(232) == false\n  isEeualToSum(240) == false\n  isEeualToSum(248) == false\n  isEeualToSum(256) == false\n  isEeualToSum(264) == false\n  isEeualToSum(272) == false\n  isEeualToSum(280) == false\n  isEeualToSum(288) == false\n  isEeualToSum(296) == false\n  isEeualToSum(304) == false\n  isEeualToSum(312) == false\n  isEeualToSum(320) == false\n  isEeualToSum(328) == false\n  isEeualToSum(336) == false\n  isEeualToSum(344) == false\n  isEeualToSum(352) == false\n  isEeualToSum(360) == false\n  isEeualToSum(368) == false\n  isEeualToSum(376) == false\n  isEeualToSum(384) == false\n  isEeualToSum(392) == false\n  isEeualToSum(400) == false\n  isEeualToSum(408) == false\n  isEeualToSum(416) == false\n  isEeualToSum(432) == false\n  isEeualToSum(440) == false\n  isEeualToSum(448) == false\n  isEeualToSum(456) == false\n  isEeualToSum(464) == false\n  isEeualToSum(472) == false\n  isEeualToSum(480) == false\n  isEeualToSum(488) == false\n  isEeualToSum(496) == false\n  isEeualToSum(504) == false\n  isEeualToSum(512) == false\n  */\nconst isEeualToSum = (n) => {\n  if (n === 0) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive numbers\n  Example\n  isEeualToSum(8) == true\n  isEeualToSum(10) == true\n  isEeualToSum(12) == false\n  isEeualToSum(16) == false\n  isEeualToSum(20) == false\n  isEeualToSum(24) == false\n  isEeualToSum(32) == false\n  isEeualToSum(40) == false\n  isEeualToSum(48) == false\n  isEeualToSum(56) == false\n  isEeualToSum(64) == false\n  isEeualToSum(72) == false\n  isEeualToSum(80) == false\n  isEeualToSum(88) == false\n  isEeualToSum(96) == false\n  isEeualToSum(104) == false\n  isEeualToSum(112) == false\n  isEeualToSum(120) == false\n  isEeualToSum(128) == false\n  isEeualToSum(136) == false\n  isEeualToSum(144) == false\n  isEeualToSum(152) == false\n  isEeualToSum(160) == false\n  isEeualToSum(168) == false\n  isEeualToSum(176) == false\n  isEeualToSum(184) == false\n  isEeualToSum(192) == false\n  isEeualToSum(200) == false\n  isEeualToSum(208) == false\n  isEeualToSum(216) == false\n  isEeualToSum(224) == false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial(5)\n  120\n  >>> factorial(3)\n  6\n  >>> factorial(0)\n  1\n*/\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial2(5)\n  120\n  >>> factorial2(3)\n  6\n  >>> factorial2(0)\n  1\n*/\nconst factorial2 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial3(5)\n  120\n  >>> factorial3(3)\n  6\n  >>> factorial3(0)\n  1\n*/\nconst factorial3 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial4(5)\n  120\n  >>> factorial4(3)\n  6\n  >>> factorial4(0)\n  1\n*/\nconst factorial4 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial5(5)\n  120\n  >>> factorial5(3)\n  6\n  >>> factorial5(0)\n  1\n*/\nconst factorial5 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial6(5)\n  120\n  >>> factorial6(3)\n  6\n  >>> factorial6(0)\n  1\n*/\nconst factorial6 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial7(5)\n  120\n  >>> factorial7(3)\n  6\n  >>> factorial7(0)\n  1\n*/\nconst factorial7 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial8(5)\n  120\n  >>> factorial8(3)\n  6\n  >>> factorial8(0)\n  1\n*/\nconst factorial8 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial9(5)\n  120\n  >>> factorial9(3)\n  6\n  >>> factorial9(0)\n  1\n*/\nconst factorial9 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial10(5)\n  120\n  >>> factorial10(3)\n  6\n  >>> factorial10(0)\n  1\n*/\nconst factorial10 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial11(5)\n  120\n  >>> factorial11(3)\n  6\n  >>> factorial11(0)\n  1\n*/\nconst factorial11 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial12(5)\n  120\n  >>> factorial12(3)\n  6\n  >>> factorial12(0)\n  1\n*/\nconst factorial12 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial13(5)\n  120\n  >>> factorial13(3)\n  6\n  >>> factorial13(0)\n  1\n*/\nconst factorial13 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial14(5)\n  120\n  >>> factorial14(3)\n  6\n  >>> factorial14(0)\n  1\n*/\nconst factorial14 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial15(5)\n  120\n  >>> factorial15(3)\n  6\n  >>> factorial15(0)\n  1\n*/\nconst factorial15 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial16(5)\n  120\n  >>> factorial16(3)\n  6\n  >>> factorial16(0)\n  1\n*/\nconst factorial16 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial17(5)\n  120\n  >>> factorial17(3)\n  6\n  >>> factorial17(0)\n  1\n*/\nconst factorial17 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial18(5)\n  120\n  >>> factorial18(3)\n  6\n  >>> factorial18(0)\n  1\n*/\nconst factorial18 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  Given a number n, returns the factorial of n. For example:\n  >>> factorial19(5)\n  120\n  >>> factorial19(3)\n  6\n  >>> factorial19(0)\n  1\n*/\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"|\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === \"|\") {\n      suffixes.push(currentSuffix);\n      currentSuffix = \"\";\n    } else {\n      currentSuffix += char;\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === \"\") {\n      suffixes.push(currentSuffix);\n      currentSuffix = \"\";\n    } else {\n      currentSuffix += char;\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === \"\") {\n      suffixes.push(currentSuffix);\n      currentSuffix = \"\";\n    } else {\n      currentSuffix += char;\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === \"\") {\n      suffixes.push(currentSuffix);\n      currentSuffix = \"\";\n    } else {\n      currentSuffix += char;\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === \"\") {\n      suffixes.push(currentSuffix);\n      currentSuffix = \"\";\n    } else {\n      currentSuffix += char;\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === \"\") {\n      suffixes.push(currentSuffix);\n      currentSuffix = \"\";\n    } else {\n      currentSuffix += char;\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"\") {\n      prefixes.push(currentPrefix);\n      currentPrefix = \"\";\n    } else {\n      currentPrefix += char;\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"\n  fixNonAlphanumeric(\"Example 1\") == \"Example_1\"\n  fixNonAlphanumeric(\" Example 2\") == \"_Example_2\"\n  fixNonAlphanumeric(\" Example   3\") == \"_Example-3\"\n  */\nconst fixNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  fixNonAlphanumeric(\"Example\") == \"Example\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  file_name = file_name.replace(/\\./g, '');\n  file_name = file_name.substring(0, 3);\n  let file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[0-9]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = file_name.match(/[a-z]/gi);\n  file_name = file_name[0];\n  file_name = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDquares = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDcubes = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDsums = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDsumsCubes = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDsumsCubesSums = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDsumsCubesSumsCubes = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDsumsCubesSumsCubesSums = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a \n  multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countDsumsCubesSumsCubesSumsCubes = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      count++;\n    } else if (i % 3 === 0) {\n      count++;\n    } else if (i % 4 === 0) {\n      count++;\n    } else {\n      continue;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list \n  that are ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      result.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (j % 1 === 0) continue;\n        if (j === len) result.push(str);\n        else {\n          for (let k = 1; k <= len; k++) {\n            if (k === j) continue;\n            if (k === len) result.push(str);\n            else {\n              for (let l = 1; l <= len; l++) {\n                if (l === j) continue;\n                if (l === len) result.push(str);\n                else {\n                  for (let m = 1; m <= len; m++) {\n                    if (m === j) continue;\n                    if (m === len) result.push(str);\n                    else {\n                      for (let n = 2; n <= len; n++) {\n                        if (n === j) continue;\n                        if (n === len) result.push(str);\n                        else {\n                          for (let o = 3; o <= len; o++) {\n                            if (o === j) continue;\n                            if (o === len) result.push(str);\n                            else {\n                              for (let p = 1; p <= len; p++) {\n                                if (p === j) continue;\n                                if (p === len) result.push(str);\n                                else {\n                                  for (let q = 1; q <= len; q++) {\n                                    if (q === j) continue;\n                                    if (q === len) result.push(str);\n                                    else {\n                                      for (let r = 2; r <= len; r++) {\n                                        if (r === j) continue;\n                                        if (r === len) result.push(str);\n                                        else {\n                                          for (let s = 3; s <= len; s++) {\n                                            if (s === j) continue;\n                                            if (s === len) result.push(str);\n                                            else {\n                                              for (let t = 1; t <= len; t++) {\n                                                if (t === j) continue;\n                                                if (t === len) result.push(str);\n                                                else {\n                                                  for (let u = 2; u <= len; u++) {\n                                                    if (u === j) continue;\n                                                    if (u === len) result.push(str);\n                                                    else {\n                                                      for (let v = 1; v <= len; v++) {\n                                                        if (v === j) continue;\n                                                        if (v === len) result.push(str);\n                                                        else {\n                                                          for (let w = 1; w <= len; w++) {\n                                                            if (w === j) continue;\n                                                            if (w === len) result.push(str);\n                                                            else {\n                                                              for (let x = 2; x <= len; x++) {\n                                                                if (x === j) continue;\n                                                                if (x === len) result.push(str);\n                                                                else {\n                                                                  for (let y = 1; y <= len; y++) {\n                                                                    if (y === j) continue;\n                                                                    if (y === len) result.push(str);\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { worfsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      result.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (j % 1 === 0) continue;\n        if (j === len) result.push(str);\n        else {\n          for (let k = 1; k <= len; k++) {\n            if (k === j) continue;\n            if (k === len) result.push(str);\n            else {\n              for (let l = 1; l <= len; l++) {\n                if (l === j) continue;\n                if (l === len) result.push(str);\n                else {\n                  for (let m = 1; m <= len; m++) {\n                    if (m === j) continue;\n                    if (m === len) result.push(str);\n                    else {\n                      for (let n = 2; n <= len; n++) {\n                        if (n === j) continue;\n                        if (n === len) result.push(str);\n                        else {\n                          for (let o = 3; o <= len; o++) {\n                            if (o === j) continue;\n                            if (o === len) result.push(str);\n                            else {\n                              for (let p = 1; p <= len; p++) {\n                                if (p === j) continue;\n                                if (p === len) result.push(str);\n                                else {\n                                  for (let q = 1; q <= len; q++) {\n                                    if (q === j) continue;\n                                    if (q === len) result.push(str);\n                                    else {\n                                      for (let r = 2; r <= len; r++) {\n                                        if (r === j) continue;\n                                        if (r === len) result.push(str);\n                                        else {\n                                          for (let s = 3; s <= len; s++) {\n                                            if (s === j) continue;\n                                            if (s === len) result.push(str);\n                                            else {\n                                              for (let t = 1; t <= len; t++) {\n                                                if (t === j) continue;\n                                                if (t === len) result.push(str);\n                                                else {\n                                                  for (let u = 2; u <= len; u++) {\n                                                    if (u === j) continue;\n                                                    if (u === len) result.push(str);\n                                                    else {\n                                                      for (let v = 1; v <= len; v++) {\n                                                        if (v === j) continue;\n                                                        if (v === len) result.push(str);\n                                                        else {\n                                                          for (let w = 1; w <= len; w++) {\n                                                            if (w === j) continue;\n                                                            if (w === len) result.push(str);\n                                                            else {\n                                                              for (let x = 2; x <= len; x++) {\n                                                                if (x === j) continue;\n                                                                if (x === len) result.push(str);\n                                                                else {\n                                                                  for (let y = 1; y <= len; y++) {\n                                                                    if (y === j) continue;\n                                                                    if (y === len) result.push(str);\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                        ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "<|endoftext|>/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simolify(\"1/5\", \"5/1\"));\nconsole.log(simolify(\"1/6\", \"2/1\"));\nconsole.log(simolify(\"7/10\", \"10/2\"));\nconsole.log(simolify(\"1/5\", \"5/0\"));\nconsole.log(simolify(\"1/5\", \"0/5\"));\nconsole.log(simolify(\"1/5\", \"5/-1\"));\nconsole.log(simolify(\"1/5\", \"5/-2\"));\nconsole.log(simolify(\"1/5\", \"5/-3\"));\nconsole.log(simolify(\"1/5\", \"5/-4\"));\nconsole.log(simolify(\"1/5\", \"5/-5\"));\nconsole.log(simolify(\"1/5\", \"5/-6\"));\nconsole.log(simolify(\"1/5\", \"5/-7\"));\nconsole.log(simolify(\"1/5\", \"5/-8\"));\nconsole.log(simolify(\"1/5\", \"5/-9\"));\nconsole.log(simolify(\"1/5\", \"5/-10\"));\nconsole.log(simolify(\"1/5\", \"5/-11\"));\nconsole.log(simolify(\"1/5\", \"5/-12\"));\nconsole.log(simolify(\"1/5\", \"5/-13\"));\nconsole.log(simolify(\"1/5\", \"5/-14\"));\nconsole.log(simolify(\"1/5\", \"5/-15\"));\nconsole.log(simolify(\"1/5\", \"5/-16\"));\nconsole.log(simolify(\"1/5\", \"5/-17\"));\nconsole.log(simolify(\"1/5\", \"5/-18\"));\nconsole.log(simolify(\"1/5\", \"5/-19\"));\nconsole.log(simolify(\"1/5\", \"5/-20\"));\nconsole.log(simolify(\"1/5\", \"5/-21\"));\nconsole.log(simolify(\"1/5\", \"5/-22\"));\nconsole.log(simolify(\"1/5\", \"5/-23\"));\nconsole.log(simolify(\"1/5\", \"5/-24\"));\nconsole.log(simolify(\"1/5\", \"5/-25\"));\nconsole.log(simolify(\"1/5\", \"5/-26\"));\nconsole.log(simolify(\"1/5\", \"5/-27\"));\nconsole.log(simolify(\"1/5\", \"5/-28\"));\nconsole.log(simolify(\"1/5\", \"5/-29\"));\nconsole.log(simolify(\"1/5\", \"5/-30\"));\nconsole.log(simolify(\"1/5\", \"5/-31\"));\nconsole.log(simolify(\"1/5\", \"5/-32\"));\nconsole.log(simolify(\"1/5\", \"5/-33\"));\nconsole.log(simolify(\"1/5\", \"5/-34\"));\nconsole.log(simolify(\"1/5\", \"5/-35\"));\nconsole.log(simolify(\"1/5\", \"5/-36\"));\nconsole.log(simolify(\"1/5\", \"5/-37\"));\nconsole.log(simolify(\"1/5\", \"5/-38\"));\nconsole.log(simolify(\"1/5\", \"5/-39\"));\nconsole.log(simolify(\"1/5\", \"5/-40\"));\nconsole.log(simolify(\"1/5\", \"5/-41\"));\nconsole.log(simolify(\"1/5\", \"5/-42\"));\nconsole.log(simolify(\"1/5\", \"5/-43\"));\nconsole.log(simolify(\"1/5\", \"5/-44\"));\nconsole.log(simolify(\"1/5\", \"5/-45\"));\nconsole.log(simolify(\"1/5\", \"5/-46\"));\nconsole.log(simolify(\"1/5\", \"5/-47\"));\nconsole.log(simolify(\"1/5\", \"5/-48\"));\nconsole.log(simolify(\"1/5\", \"5/-49\"));\nconsole.log(simolify(\"1/5\", \"5/-50\"));\nconsole.log(simolify(\"1/5\", \"5/-51\"));\nconsole.log(simolify(\"1/5\", \"5/-52\"));\nconsole.log(simolify(\"1/5\", \"5/-53\"));\nconsole.log(simolify(\"1/5\", \"5/-54\"));\nconsole.log(simolify(\"1/5\", \"5/-55\"));\nconsole.log(simolify(\"1/5\", \"5/-56\"));\nconsole.log(simolify(\"1/5\", \"5/-57\"));\nconsole.log(simolify(\"1/5\", \"5/-58\"));\nconsole.log(simolify(\"1/5\", \"5/-59\"));\nconsole.log(simolify(\"1/5\", \"5/-60\"));\nconsole.log(simolify(\"1/5\", \"5/-61\"));\nconsole.log(simolify(\"1/5\", \"5/-62\"));\nconsole.log(simolify(\"1/5\", \"5/-63\"));\nconsole.log(simolify(\"1/5\", \"5/-64\"));\nconsole.log(simolify(\"1/5\", \"5/-65\"));\nconsole.log(simolify(\"1/5\", \"5/-66\"));\nconsole.log(simolify(\"1/5\", \"5/-67\"));\nconsole.log(simolify(\"1/5\", \"5/-68\"));\nconsole.log(simolify(\"1/5\", \"5/-69\"));\nconsole.log(simolify(\"1/5\", \"5/-70\"));\nconsole.log(simolify(\"1/5\", \"5/-71\"));\nconsole.log(simolify(\"1/5\", \"5/-72\"));\nconsole.log(simolify(\"1/5\", \"5/-73\"));\nconsole.log(simolify(\"1/5\", \"5/-74\"));\nconsole.log(simolify(\"1/5\", \"5/-75\"));\nconsole.log(simolify(\"1/5\", \"5/-76\"));\nconsole.log(simolify(\"1/5\", \"5/-77\"));\nconsole.log(simolify(\"1/5\", \"5/-78\"));\nconsole.log(simolify(\"1/5\", \"5/-79\"));\nconsole.log(simolify(\"1/5\", \"5/-80\"));\nconsole.log(simolify(\"1/5\", \"5/-81\"));\nconsole.log(simolify(\"1/5\", \"5/-82\"));\nconsole.log(simolify(\"1/5\", \"5/-83\"));\nconsole.log(simolify(\"1/5\", \"5/-84\"));\nconsole.log(simolify(\"1/5\", \"5/-85\"));\nconsole.log(simolify(\"1/5\", \"5/-86\"));\nconsole.log(simolify(\"1/5\", \"5/-87\"));\nconsole.log(simolify(\"1/5\", \"5/-88\"));\nconsole.log(simolify(\"1/5\", \"5/-89\"));\nconsole.log(simolify(\"1/5\", \"5/-90\"));\nconsole.log(simolify(\"1/5\", \"5/-91\"));\nconsole.log(simolify(\"1/5\", \"5/-92\"));\nconsole.log(simolify(\"1/5\", \"5/-93\"));\nconsole.log(simolify(\"1/5\", \"5/-94\"));\nconsole.log(simolify(\"1/5\", \"5/-95\"));\nconsole.log(simolify(\"1/5\", \"5/-96\"));\nconsole.log(simoli", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, curr) => acc + parseInt(curr), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array. For example:\n  sumArray([15, -73, 14, -15]) => -36\n  sumArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst sumArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. For example:\n  productArray([15, -73, 14, -15]) => -75\n  productArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. For example:\n  maxArray([15, -73, 14, -15]) => -15\n  maxArray([33, -2, -3, 45, 21, 109]) => 109\n  */\nconst maxArray = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. For example:\n  minArray([15, -73, 14, -15]) => -15\n  minArray([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst minArray = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the average of the elements in the array. For example:\n  averageArray([15, -73, 14, -15]) => -13.33333333333333\n  averageArray([33, -2, -3, 45, 21, 109]) => -14.28571428571429\n  */\nconst averageArray = (nums) => {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  average = sum / nums.length;\n  return average;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array. For example:\n  minMaxArray([15, -73, 14, -15]) => [-15, -73] \n  minMaxArray([33, -2, -3, 45, 21, 109]) => [-33, -45]\n  */\nconst minMaxArray = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the squares of the elements in the array. For example:\n  sumSquaresArray([15, -73, 14, -15]) => -36\n  sumSquaresArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst sumSquaresArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the squares of the elements in the array. For example:\n  productSquaresArray([15, -73, 14, -15]) => -75\n  productSquaresArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productSquaresArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i] * nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array. For example:\n  minMaxSquaresArray([15, -73, 14, -15]) => [-15, -73] \n  minMaxSquaresArray([33, -2, -3, 45, 21, 109]) => [-33, -45]\n  */\nconst minMaxSquaresArray = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the cubes of the elements in the array. For example:\n  sumCubesArray([15, -73, 14, -15]) => -36\n  sumCubesArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst sumCubesArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * nums[i] * nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the cubes of the elements in the array. For example:\n  productCubesArray([15, -73, 14, -15]) => -75\n  productCubesArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst productCubesArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i] * nums[i] * nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array. For example:\n  minMaxCubesArray([15, -73, 14, -15]) => [-15, -73] \n  minMaxCubesArray([33, -2, -3, 45, 21, 109]) => [-33, -45]\n  */\nconst minMaxCubesArray = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the first and last elements in the array. For example:\n  sumFirstLastArray([15, -73, 14, -15]) => 15\n  sumFirstLastArray([33, -2, -3, 45, 21, 109]) => 45\n  */\nconst sumFirstLastArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the first and last elements in the array. For example:\n  productFirstLastArray([15, -73, 14, -15]) => -75\n  productFirstLastArray([33, -2, -3, 45, 21, 109]) => -27\n  */\nconst product", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\nconsole.log(getLaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === 3) {\n                    a[i] = a[j];\n                    a[j] = a[k];\n                    a[k] = i;\n                }\n            }\n        }\n    }\n    return a.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction countTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[j] + a[k] + a[i] === ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => orbit(planet, planet1));\n  const planetsBetween = planets.filter((planet) => orbits.includes(planet));\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a - b);\n  return planetsBetweenSorted;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => orbit(planet, planet1));\n  const planetsBetween = planets.filter((planet) => orbits.includes(planet));\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a - b);\n  return planetsBetweenSorted;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => orbit(planet, planet1));\n  const planetsBetween = planets.filter((planet) => orbits.includes(planet));\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a - b);\n  return planetsBetweenSorted;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf3(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => orbit(planet, planet1));\n  const planetsBetween = planets.filter((planet) => orbits.includes(planet));\n  const planetsBetweenSorted = planetsBetween.sort((a, b) => a - b);\n  return planetsBetweenSorted;\n};\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf4(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf4(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf4(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sat", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted.findIndex(item => item.length === word.length);\n    if (index!== -1) {\n      sorted[index].push(word);\n    } else {\n      sorted.push([word]);\n    }\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    sorted[i].sort();\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted.findIndex(item => item.length === word.length);\n    if (index!== -1) {\n      sorted[index].push(word);\n    } else {\n      sorted.push([word]);\n    }\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    sorted[i].sort();\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted.findIndex(item => item.length === word.length);\n    if (index!== -1) {\n      sorted[index].push(word);\n    } else {\n      sorted.push([word]);\n    }\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    sorted[i].sort();\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted.findIndex(item => item.length === word.length);\n    if (index!== -1) {\n      sorted[index].push(word);\n    } else {\n      sorted.push([word]);\n    }\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    sorted[i].sort();\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted.findIndex(item => item.length === word.length);\n    if (index!== -1) {\n      sorted[index].push(word);\n    } else {\n      sorted.push([word]);\n    }\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    sorted[i].sort();\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = sorted.findIndex(item => item.length === word.length);\n    if (index!== -1) {\n      sorted[index].push(word);\n    } else {\n      sorted.push([word]);\n    }\n  }\n  for (let i = 0; i < sorted.length; i++) {\n    sorted[i].sort();\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  douhleTheProduct([1, 3, 2, 0]) == 9\n  douhleTheProduct([-1, -2, 0]) == 1\n  douhleTheProduct([9, -2]) == 81\n  douhleTheProduct([0]) == 1\n  If the input list is empty, return 1.\n  */\nconst douhleTheProduct = (lst) => {\n  if (lst.length === 0) {\n    return 1;\n  }\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    product *= lst[i];\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the product of all the numbers in the list. Ignore numbers that are negative\n  or not integers.\n  douhleTheProductOfAll([1, 3, 2, 0]) == [9, 3, 9, 1]\n  douhleTheProductOfAll([-1, -2, 0]) == [-1, -2, -1]\n  douhleTheProductOfAll([9, -2]) == [9, 81]\n  douhleTheProductOfAll([0]) == [1]\n  If the input list is empty, return an empty list.\n  */\nconst douhleTheProductOfAll = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let product = 1;\n  let products = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    product *= lst[i];\n    products.push(product);\n  }\n  return products;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list. Ignore numbers that are negative\n  or not integers.\n  douhleTheSumOfAll([1, 3, 2, 0]) == [3, 9, 9, 1]\n  douhleTheSumOfAll([-1, -2, 0]) == [-1, -2, -1]\n  douhleTheSumOfAll([9, -2]) == [9, 81]\n  douhleTheSumOfAll([0]) == [1]\n  If the input list is empty, return an empty list.\n  */\nconst douhleTheSumOfAll = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let sum = 0;\n  let sums = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    sum += lst[i];\n    sums.push(sum);\n  }\n  return sums;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list that are odd. Ignore numbers that are negative\n  or not integers.\n  douhleTheSumOfOdds([1, 3, 2, 0]) == [3, 9, 9, 1]\n  douhleTheSumOfOdds([-1, -2, 0]) == [-1, -2, -1]\n  douhleTheSumOfOdds([9, -2]) == [9, 81]\n  douhleTheSumOfOdds([0]) == [1]\n  If the input list is empty, return an empty list.\n  */\nconst douhleTheSumOfOdds = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let sum = 0;\n  let sums = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      sums.push(sum);\n    }\n  }\n  return sums;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list that are even. Ignore numbers that are negative\n  or not integers.\n  douhleTheSumOfEvens([1, 3, 2, 0]) == [3, 9, 9, 1]\n  douhleTheSumOfEvens([-1, -2, 0]) == [-1, -2, -1]\n  douhleTheSumOfEvens([9, -2]) == [9, 81]\n  douhleTheSumOfEvens([0]) == [1]\n  If the input list is empty, return an empty list.\n  */\nconst douhleTheSumOfEvens = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let sum = 0;\n  let sums = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      sums.push(sum);\n    }\n  }\n  return sums;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list that are odd and even. Ignore numbers that are negative\n  or not integers.\n  douhleTheSumOfOddsAndEvens([1, 3, 2, 0]) == [3, 9, 9, 1]\n  douhleTheSumOfOddsAndEvens([-1, -2, 0]) == [-1, -2, -1]\n  douhleTheSumOfOddsAndEvens([9, -2]) == [9, 81]\n  douhleTheSumOfOddsAndEvens([0]) == [1]\n  If the input list is empty, return an empty list.\n  */\nconst douhleTheSumOfOddsAndEvens = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let sum = 0;\n  let sums = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      sums.push(sum);\n    } else {\n      if (lst[i] % 2!== 0) {\n        sum += lst[i];\n        sums.push(sum);\n      }\n    }\n  }\n  return sums;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list that are odd and even. Ignore numbers that are negative\n  or not integers.\n  douhleTheSumOfOddsAndEvens([1, 3, 2, 0]) == [3, 9, 9, 1]\n  douhleTheSumOfOddsAndEvens([-1, -2, 0]) == [-1, -2, -1]\n  douhleTheSumOfOddsAndEvens([9, -2]) == [9, 81]\n  douhleTheSumOfOddsAndEvens([0]) == [1]\n  If the input list is empty, return an empty list.\n  */\nconst douhleTheSumOfOddsAndEvens = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let sum = 0;\n  let sums = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      continue;\n    }\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      sums.push(sum);\n    } else {\n      if (lst[i] % 2!== 0) {\n        sum += lst[i];\n        sums.push(sum);\n      }\n    }\n  }\n  return sums;\n};\n\n/* Given a list of numbers, return a list of numbers that are\n  the sum of all the numbers in the list that are odd and even. Ignore numbers that are negative\n  or not integers.\n  douhleTheSumOfOddsAndEvens([1, 3, 2, 0]) == [3, 9, 9, 1]\n  douhleTheSumOfOddsAndEvens([-1, -2, 0]) == [-1, -2, -1]\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    const gameScore = game[i];\n    const guessScore = guess[i];\n    const diff = Math.abs(guessScore - gameScore);\n    if (guessScore === gameScore) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Comoare\n// 👽 Como", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabc' has a\n  count of 3.\n*/\nconst countA = (str) => {\n  let count = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex === aLen) {\n    aSubStr = true;\n  }\n  if (bIndex === bLen) {\n    bSubStr = true;\n  }\n  return aSubStr || bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex === aLen) {\n    aSubStr = true;\n  }\n  if (bIndex === bLen) {\n    bSubStr = true;\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex === aLen) {\n    aSubStr = true;\n  }\n  if (bIndex === bLen) {\n    bSubStr = true;\n  }\n  return aSubStr || bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex === aLen) {\n    aSubStr = true;\n  }\n  if (bIndex === bLen) {\n    bSubStr = true;\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex === aLen) {\n    aSubStr = true;\n  }\n  if (bIndex === bLen) {\n    bSubStr = true;\n  }\n  return aSubStr || bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => true\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => true\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => true\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejEvenCount(-12) ==> (1, 1)\n      evejEvenCount(123) ==> (1, 2)\n  */\nconst evejEvenCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    evenCount += num % 2 === 0? 1 : 0;\n    oddCount += num % 2 === 1? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'XIX'\n  >>> intHoMiniRoman(152) == 'CLII'\n  >>> intHoMiniRoman(426) == 'CDXXVI'\n  */\nconst intHoMiniRomanUpper = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanUpper(19) == 'XIX'\n  >>> intHoMiniRomanUpper(152) == 'CLII'\n  >>> intHoMiniRomanUpper(426) == 'CDXXVI'\n  */\nconst intHoMiniRomanUpperAndLower = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('')\n   .toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanUpperAndLower(19) == 'XIX XIX'\n  >>> intHoMiniRomanUpperAndLower(152) == 'CLII CLII'\n  >>> intHoMiniRomanUpperAndLower(426) == 'CDXXVI CDXXVI'\n  */\nconst intHoMiniRomanUpperAndLowerWithSpaces = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('')\n   .toUpperCase()\n   .split('')\n   .map((letter) => letter +'')\n   .join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanUpperAndLowerWithSpaces(19) == 'XIX XIX'\n  >>> intHoMiniRomanUpperAndLowerWithSpaces(152) == 'CLII CLII'\n  >>> intHoMiniRomanUpperAndLowerWithSpaces(426) == 'CDXXVI CDXXVI'\n  */\nconst intHoMiniRomanUpperAndLowerWithSpacesWithSpaces = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('')\n   .toUpperCase()\n   .split('')\n   .map((letter) => letter +'')\n   .join('')\n   .replace(/ /g, '');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpaces(19) == 'XIX XIX'\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpaces(152) == 'CLII CLII'\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpaces(426) == 'CDXXVI CDXXVI'\n  */\nconst intHoMiniRomanUpperAndLowerWithSpacesWithSpacesWithSpaces = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('')\n   .toUpperCase()\n   .split('')\n   .map((letter) => letter +'')\n   .join('')\n   .replace(/ /g, '');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpacesWithSpaces(19) == 'XIX XIX'\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpacesWithSpaces(152) == 'CLII CLII'\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpacesWithSpaces(426) == 'CDXXVI CDXXVI'\n  */\nconst intHoMiniRomanUpperAndLowerWithSpacesWithSpacesWithSpacesWithSpaces = (number) => {\n  if (number < 1 || number > 1000) {\n    return '';\n  }\n  const roman = Array(number + 1).fill(0);\n  roman[number] = 1;\n  for (let i = 2; i <= number; i++) {\n    roman[i] = roman[i - 1] * i;\n  }\n  return roman\n   .map((digit, index) => digit.toString().toUpperCase())\n   .join('')\n   .toUpperCase()\n   .split('')\n   .map((letter) => letter +'')\n   .join('')\n   .replace(/ /g, '');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase and uppercase with spaces between each letter.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRomanUpperAndLowerWithSpacesWithSpa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  if (a < b + c && b < a + c && c < a + b) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMin([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finfMin = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst finfMaxIndex = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMin([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finfMinIndex = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"bb\"\n  */\nconst finfMaxIndex2 = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMin([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finfMinIndex2 = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"bb\"\n  */\nconst finfMaxIndex3 = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMin([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMin([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMin([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finfMinIndex3 = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);\n  });\n  return Array.from(map.keys()).sort((a, b) => map.get(b) - map.get(a))[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"name\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"game\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst finfMaxIndex4 = (words) => {\n  const map = new Map();\n  words.forEach((word) => {\n    const chars = word.split('').filter((char) =>!map.has(char));\n    map.set(chars.join(''), chars.length);", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - number\n  return [carrots, leftCarrots]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const distinctCharacters = string.split('').filter((char) => char.match(/[a-z]/i) && char.match(/[A-Z]/i)).join('');\n  return distinctCharacters.length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to find out how many times each letter appears in the string.\n  If the letter appears more than once, print it out as many times as it appears.\n  If the letter appears only once, print it out once.\n  If the letter appears less than once, print it out as many times as it appears.\n  Examples\n  count(\"abba\") = \"abba\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"abba\") = \"aabb\"\n  count(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (!text) return null;\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha1 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha1('Hello world') == 'c99e4f9f39e29e3a6c4c54bcfb94f09e03e39a1'\n  */\nconst strlngToSha1 = (text) => {\n  if (!text) return null;\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha256 = (text) => {\n  if (!text) return null;\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst strlngToSha512 = (text) => {\n  if (!text) return null;\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha3 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst strlngToSha3 = (text) => {\n  if (!text) return null;\n  const sha3sum = crypto.createHash('sha3');\n  sha3sum.update(text);\n  return sha3sum.digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const evens = genfrateIntegers(a + 1, b);\n  const odds = genfrateIntegers(a, b - 1);\n  return evens.concat(odds);\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's decimal\n  representation.\n\n  For example:\n  digits(12) => 3\n  digits(100) => 2\n  digits(1000) => 1\n  digits(1000000) => 0\n  digits(100000000) => 0\n  digits(1000000000000) => 0\n  digits(1000000000000000) => 0\n  digits(100000000000000000000) => 0\n  digits(100000000000000000000000) => 0\n  digits(10000000000000000000000000000) => 0\n  digits(10000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000000000) => 0\n  digits(1000000000000000000000000000000000) => 0\n  digits(100000000000000000000000000", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_beats = [];\n\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_index = notes.indexOf(note, i + 1);\n    const note_bpm = note.charAt(0) - '0';\n    const note_bps = note.charAt(1) - '0';\n\n    if (note_index === -1) {\n      notes_beats.push(0);\n    } else {\n      notes_beats.push(note_bpm / 4);\n      notes_beats.push(note_bps / 2);\n    }\n  }\n\n  return notes_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicScale = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_beats = [];\n\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_index = notes.indexOf(note, i + 1);\n    const note_bpm = note.charAt(0) - '0';\n    const note_bps = note.charAt(1) - '0';\n\n    if (note_index === -1) {\n      notes_beats.push(0);\n    } else {\n      notes_beats.push(note_bpm / 4);\n      notes_beats.push(note_bps / 2);\n    }\n  }\n\n  return notes_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicScale('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicScale = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_beats = [];\n\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_index = notes.indexOf(note, i + 1);\n    const note_bpm = note.charAt(0) - '0';\n    const note_bps = note.charAt(1) - '0';\n\n    if (note_index === -1) {\n      notes_beats.push(0);\n    } else {\n      notes_beats.push(note_bpm / 4);\n      notes_beats.push(note_bps / 2);\n    }\n  }\n\n  return notes_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicScale('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicScale = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_beats = [];\n\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_index = notes.indexOf(note, i + 1);\n    const note_bpm = note.charAt(0) - '0';\n    const note_bps = note.charAt(1) - '0';\n\n    if (note_index === -1) {\n      notes_beats.push(0);\n    } else {\n      notes_beats.push(note_bpm / 4);\n      notes_beats.push(note_bps / 2);\n    }\n  }\n\n  return notes_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicScale('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicScale = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_beats = [];\n\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_index = notes.indexOf(note, i + 1);\n    const note_bpm = note.charAt(0) - '0';\n    const note_bps = note.charAt(1) - '0';\n\n    if (note_index === -1) {\n      notes_beats.push(0);\n    } else {\n      notes_beats.push(note_bpm / 4);\n      notes_beats.push(note_bps / 2);\n    }\n  }\n\n  return notes_beats;\n};\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  last in musical scale.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusicScale('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusicScale = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_beats = [];\n\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_index = notes.indexOf(note, i + 1);\n    const note_bpm = note.charAt(0) - '0';\n    const note_bps = note.charAt(1) - '0';\n\n    if (note_index === -1) {\n      notes_beats.push(0);\n    } else {\n      notes_beats.push(note_bpm / 4);\n      notes_beats.push(note_bps / 2);\n    }\n  }\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> how", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedArray = numberArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n  Return the string with letters sorted from smallest to largest\n  >>> sorhLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sorhLetters = (letters) => {\n  const letterArray = letters.split(' ');\n  const sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(' ');\n};\n\n/* Input is a space-delimited string of letters from 'a' to 'z'.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3)\n  0\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const smallest = Math.min(...sortedNumbers);\n  const largest = Math.max(...sortedNumbers);\n  return [smallest, largest];\n};\n\n/**\n * Given a number and a set of numbers, return the number that is closest to the given number in the set.\n * If the given number is in the set, the given number is returned.\n * If the given number is not in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.\n * If the given number is in the set, the number closest to the given number is returned.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = numbers.map((number) => {\n    const scaled = (number - min) / range;\n    return scaled * range;\n  });\n  return newNumbers;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleToRange(0.5, 10)\n  5\n */\nconst resfaleToRange = (number, range) => {\n  const scaled = (number - range) / range;\n  return scaled * range;\n};\n\n/**\n * Given a number and a range, convert that number to a value between 0 and the range\n * >>> resfaleTo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc']\n  */\nconst filherStrings = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true]\n  */\nconst filherBooleans = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [3.14, 5.0]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0, 3.0, 3.0]\n  */\nconst filherFloats = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for lists\n  >>> filherLists(['a', 3.14, 5])\n  [['a', 3.14, 5]]\n  >>> filherLists([1, 2, 3, 'abc', {}, []])\n  [['1', '2', '3'], ['abc'], {}, []]\n  */\nconst filherLists = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filherDicts(['a', 3.14, 5])\n  [{'a': 3.14, '5': 5}]\n  >>> filherDicts([1, 2, 3, 'abc', {}, []])\n  [{'1': 1, '2': 2, '3': 3}, {'abc': {}}, {}]\n  */\nconst filherDicts = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filherSets(['a', 3.14, 5])\n  [{'a', 3.14, 5}]\n  >>> filherSets([1, 2, 3, 'abc', {}, []])\n  [{'1', '2', '3'}, {'abc'}, {}]\n  */\nconst filherSets = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filherTuples(['a', 3.14, 5])\n  [('a', 3.14, 5)]\n  >>> filherTuples([1, 2, 3, 'abc', {}, []])\n  [(1, 2, 3), ('abc', {}), {}]\n  */\nconst filherTuples = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filherSets(['a', 3.14, 5])\n  [{'a', 3.14, 5}]\n  >>> filherSets([1, 2, 3, 'abc', {}, []])\n  [{'1', '2', '3'}, {'abc'}, {}]\n  */\nconst filherSets = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filherTuples(['a', 3.14, 5])\n  [('a', 3.14, 5)]\n  >>> filherTuples([1, 2, 3, 'abc', {}, []])\n  [(1, 2, 3), ('abc', {}), {}]\n  */\nconst filherTuples = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filherSets(['a', 3.14, 5])\n  [{'a', 3.14, 5}]\n  >>> filherSets([1, 2, 3, 'abc', {}, []])\n  [{'1', '2', '3'}, {'abc'}, {}]\n  */\nconst filherSets = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filherTuples(['a', 3.14, 5])\n  [('a', 3.14, 5)]\n  >>> filherTuples([1, 2, 3, 'abc', {}, []])\n  [(1, 2, 3), ('abc', {}), {}]\n  */\nconst filherTuples = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filherSets(['a', 3.14, 5])\n  [{'a', 3.14, 5}]\n  >>> filherSets([1, 2, 3, 'abc', {}, []])\n  [{'1', '2', '3'}, {'abc'}, {}]\n  */\nconst filherSets = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filherTuples(['a', 3.14, 5])\n  [('a', 3.14, 5)]\n  >>> filherTuples([1, 2, 3, 'abc', {}, []])\n  [(1, 2, 3), ('abc', {}), {}]\n  */\nconst filherTuples = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for sets\n  >>> filherSets(['a', 3.14, 5])\n  [{'a', 3.14, 5}]\n  >>> filherSets([1, 2, 3, 'abc', {}, []])\n  [{'1', '2', '3'}, {'abc'}, {}]\n  */\nconst filherSets = (values) => {\n  const filtered = [];\n  values.forEach((value) => {\n    if (value!== null && typeof value === 'object') {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filherTuples(['a', 3.14, 5])\n  [('a', 3.14, 5)]\n  >>> filherTuples([1, 2, 3, 'abc', {}, []])\n  [(1, 2, 3), ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> strlen(true)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(2)\n  2\n  */\nconst strlen = (string) => {\n  if (string === null) return 0\n  if (string === undefined) return 0\n  if (string === false) return 0\n  if (string === true) return 0\n  if (string === 0) return 0\n  if (string === 1) return 1\n  if (string === 2) return 2\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen([])\n  0\n  >>> strlen(['a', 'b'])\n  2\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen({})\n  0\n  >>> strlen({a: 'b'})\n  1\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return Object.keys(string).length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> strlen(true)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(2)\n  2\n  */\nconst strlen = (string) => {\n  if (string === null) return 0\n  if (string === undefined) return 0\n  if (string === false) return 0\n  if (string === true) return 0\n  if (string === 0) return 0\n  if (string === 1) return 1\n  if (string === 2) return 2\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen([])\n  0\n  >>> strlen(['a', 'b'])\n  2\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen({})\n  0\n  >>> strlen({a: 'b'})\n  1\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return Object.keys(string).length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> strlen(true)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(2)\n  2\n  */\nconst strlen = (string) => {\n  if (string === null) return 0\n  if (string === undefined) return 0\n  if (string === false) return 0\n  if (string === true) return 0\n  if (string === 0) return 0\n  if (string === 1) return 1\n  if (string === 2) return 2\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen([])\n  0\n  >>> strlen(['a', 'b'])\n  2\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen({})\n  0\n  >>> strlen({a: 'b'})\n  1\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return Object.keys(string).length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> strlen(true)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(2)\n  2\n  */\nconst strlen = (string) => {\n  if (string === null) return 0\n  if (string === undefined) return 0\n  if (string === false) return 0\n  if (string === true) return 0\n  if (string === 0) return 0\n  if (string === 1) return 1\n  if (string === 2) return 2\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen([])\n  0\n  >>> strlen(['a', 'b'])\n  2\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen({})\n  0\n  >>> strlen({a: 'b'})\n  1\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return Object.keys(string).length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> strlen(true)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(2)\n  2\n  */\nconst strlen = (string) => {\n  if (string === null) return 0\n  if (string === undefined) return 0\n  if (string === false) return 0\n  if (string === true) return 0\n  if (string === 0) return 0\n  if (string === 1) return 1\n  if (string === 2) return 2\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen([])\n  0\n  >>> strlen(['a', 'b'])\n  2\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen({})\n  0\n  >>> strlen({a: 'b'})\n  1\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return Object.keys(string).length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> strlen(true)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(2)\n  2\n  */\nconst strlen = (string) => {\n  if (string === null) return 0\n  if (string === undefined) return 0\n  if (string === false) return 0\n  if (string === true) return 0\n  if (string === 0) return 0\n  if (string === 1) return 1\n  if (string === 2) return 2\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen([])\n  0\n  >>> strlen(['a', 'b'])\n  2\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen({})\n  0\n  >>> strlen({a: 'b'})\n  1\n  */\nconst strlen = (string) => {\n  if (Array.isArray(string)) return string.length\n  return Object.keys(string).length\n}\n\n/* Return length of given string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(false)\n  0\n  >>> str", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n  for (let i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize2(8)\n  [2, 2, 2]\n  >>> fachorize2(25)\n  [5, 5]\n  >>> fachorize2(70)\n  [2, 5, 7]\n  */\nconst fachorize2 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize3(8)\n  [2, 2, 2]\n  >>> fachorize3(25)\n  [5, 5]\n  >>> fachorize3(70)\n  [2, 5, 7]\n  */\nconst fachorize3 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize4(8)\n  [2, 2, 2]\n  >>> fachorize4(25)\n  [5, 5]\n  >>> fachorize4(70)\n  [2, 5, 7]\n  */\nconst fachorize4 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize5(8)\n  [2, 2, 2]\n  >>> fachorize5(25)\n  [5, 5]\n  >>> fachorize5(70)\n  [2, 5, 7]\n  */\nconst fachorize5 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize6(8)\n  [2, 2, 2]\n  >>> fachorize6(25)\n  [5, 5]\n  >>> fachorize6(70)\n  [2, 5, 7]\n  */\nconst fachorize6 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize7(8)\n  [2, 2, 2]\n  >>> fachorize7(25)\n  [5, 5]\n  >>> fachorize7(70)\n  [2, 5, 7]\n  */\nconst fachorize7 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize8(8)\n  [2, 2, 2]\n  >>> fachorize8(25)\n  [5, 5]\n  >>> fachorize8(70)\n  [2, 5, 7]\n  */\nconst fachorize8 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize9(8)\n  [2, 2, 2]\n  >>> fachorize9(25)\n  [5, 5]\n  >>> fachorize9(70)\n  [2, 5, 7]\n  */\nconst fachorize9 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize10(8)\n  [2, 2, 2]\n  >>> fachorize10(25)\n  [5, 5]\n  >>> fachorize10(70)\n  [2, 5, 7]\n  */\nconst fachorize10 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize11(8)\n  [2, 2, 2]\n  >>> fachorize11(25)\n  [5, 5]\n  >>> fachorize11(70)\n  [2, 5, 7]\n  */\nconst fachorize11 = (n) => {\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remlveDuplicatesLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.from(map.keys());\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remlveDuplicatesExactlyOnceLessThanOnce = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number, true);\n    } else {\n      map.set(number, map.get(number));\n    }\n  }\n  return Array.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 64 && char.charCodeAt(0) < 91? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, flip all uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCaseAll('Hello')\n  'hELLO'\n  */\nconst flioCaseAll = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? char.toLowerCase() : char", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filherBySuffix([], 'a')\n  []\n  >>> filherBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(s => s.include", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You're given a list of deposit and withdrawal operations on a bank ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n <= 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter(n => n % 23 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter(n => n % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter(n => n % 27 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter(n => n % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter(n => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> getDivisibleBy33([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy33 = (l) => {\n  return l.filter(n => n % 33 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getDivisibleBy35 = (l) => {\n  return l.filter(n ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return true;\n  }\n  if (n % 47 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return true;\n  }\n  if (n % 59 === 0) {\n    return false;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n  if (n % 69 === 0) {\n    return false;\n  }\n  if (n % 73 === 0) {\n    return true;\n  }\n  if (n % 79 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return true;\n  }\n  if (n % 87 === 0) {\n    return false;\n  }\n  if (n % 91 === 0) {\n    return true;\n  }\n  if (n % 97 === 0) {\n    return false;\n  }\n  if (n % 101 === 0) {\n    return true;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 105 === 0) {\n    return true;\n  }\n  if (n % 107 === 0) {\n    return false;\n  }\n  if (n % 109 === 0) {\n    return true;\n  }\n  if (n % 111 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return true;\n  }\n  if (n % 115 === 0) {\n    return false;\n  }\n  if (n % 117 === 0) {\n    return true;\n  }\n  if (n % 119 === 0) {\n    return false;\n  }\n  if (n % 121 === 0) {\n    return true;\n  }\n  if (n % 123 === 0) {\n    return false;\n  }\n  if (n % 125 === 0) {\n    return true;\n  }\n  if (n % 127 === 0) {\n    return false;\n  }\n  if (n % 129 === 0) {\n    return true;\n  }\n  if (n % 131 === 0) {\n    return false;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 135 === 0) {\n    return false;\n  }\n  if (n % 137 === 0) {\n    return true;\n  }\n  if (n % 139 === 0) {\n    return false;\n  }\n  if (n % 141 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n % 145 === 0) {\n    return true;\n  }\n  if (n % 147 === 0) {\n    return false;\n  }\n  if (n % 149 === 0) {\n    return true;\n  }\n  if (n % 151 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 155 === 0) {\n    return false;\n  }\n  if (n % 157 === 0) {\n    return true;\n  }\n  if (n % 159 === 0) {\n    return false;\n  }\n  if (n % 161 === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 165 === 0) {\n    return true;\n  }\n  if (n % 167 === 0) {\n    return false;\n  }\n  if (n % 169 === 0) {\n    return true;\n  }\n  if (n % 171 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 175 === 0) {\n    return false;\n  }\n  if (n % 177 === 0) {\n    return true;\n  }\n  if (n % 179 === 0) {\n    return false;\n  }\n  if (n % 181 === 0) {\n    return true;\n  }\n  if (n % 183 === 0) {\n    return false;\n  }\n  if (n % 185 === 0) {\n    return true;\n  }\n  if (n % 187 === 0) {\n    return false;\n  }\n  if (n % 189 === 0) {\n    return true;\n  }\n  if (n % 191 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n % 195 === 0) {\n    return false;\n  }\n  if (n % 197 === 0) {\n    return true;\n  }\n  if (n % 199 === 0) {\n    return false;\n  }\n  if (n % 201 === 0) {\n    return true;\n  }\n  if (n % 203 === 0) {\n    return false;\n  }\n  if (n % 205 === 0) {\n    return true;\n  }\n  if (n % 207 === 0) {\n    return false;\n  }\n  if (n % 209 === 0) {\n    return true;\n  }\n  if (n % 211 === 0) {\n    return false;\n  }\n  if (n % 213 === 0) {\n    return true;\n  }\n  if (n % 215 === 0) {\n    return false;\n  }\n  if (n % 217 === 0) {\n    return true;\n  }\n  if (n % 219 === 0) {\n    return false;\n  }\n  if (n % 221 === 0) {\n    return true;\n  }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 225 === 0) {\n    return true;\n  }\n  if (n % 227 === 0) {\n    return false;\n  }\n  if (n % 229 === 0) {\n    return true;\n  }\n  if (n % 231 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n    return true;\n  }\n  if (n % 235 === 0) {\n    return false;\n  }\n  if (n % 237 === 0) {\n    return true;\n  }\n  if (n % 239 === 0) {\n    return false;\n  }\n  if (n % 241 === 0) {\n    return true;\n  }\n  if (n % 243 === 0) {\n    return false;\n  }\n  if (n % 245 === 0) {\n    return true;\n  }\n  if (n % 247 === 0) {\n    return false;\n  }\n  if (n % 249 === 0) {\n    return true;\n  }\n  if (n % 251 === 0) {\n    return false;\n  }\n  if (n % 253 === 0) {\n    return true;\n  }\n  if (n % 255 === 0) {\n    return false;\n  }\n  if (n % 257 === 0) {\n    return true;\n  }\n  if (n % 259 === 0) {\n    return false;\n  }\n  if (n % 261 === 0) {\n    return true;\n  }\n  if (n % 263 === 0) {\n    return false;\n  }\n  if (n % 265 === 0) {\n    return true;\n  }\n  if (n % 267 === 0) {\n    return false;\n  }\n  if (n % 269 === 0) {\n    return true;\n  }\n  if (n % 271 === 0) {\n    return false;\n  }\n  if (n % 273 === 0) {\n    return true;\n  }\n  if (n % 275 === 0) {\n    return false;\n  }\n  if (n % 277 === 0) {\n    return true;\n  }\n  if (n % 279 === 0) {\n    return false;\n  }\n  if (n % 281 === 0) {\n    return true;\n  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 285 === 0) {\n    return true;\n  }\n  if (n % 287 === 0) {\n    return false;\n  }\n  if (n % 289 === 0) {\n    return true;\n  }\n  if (n % 291 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n    return true;\n  }\n  if (n % 295 === 0) {\n    return false;\n  }\n  if (n % 297 === 0) {\n    return true;\n  }\n  if (n % 299 === 0) {\n    return false;\n  }\n  if (n % 301 === 0) {\n    return true;\n  }\n  if (n % 303 === 0) {\n    return false;\n  }\n  if (n % 305 === 0) {\n    return true;\n  }\n  if (n % 307 === 0) {\n    return false;\n  }\n  if (n % 309 === 0) {\n    return true;\n  }\n  if (n % 311 === 0) {\n    return false;\n  }\n  if (n % 313 === 0) {\n    return true;\n  }\n  if (n % 315 === 0) {\n    return false;\n  }\n  if (n % 317 === 0) {\n    return true;\n  }\n  if (n % 319 === 0) {\n    return false;\n  }\n  if (n % 321 === 0) {\n    return true;\n  }\n  if (n % 323 === 0) {\n    return false;\n  }\n  if (n % 325 === 0) {\n    return true;\n  }\n  if (n % 327 === 0) {\n    return false;\n  }\n  if (n % 329 === 0) {\n    return true;\n  }\n  if (n % 331 === 0) {\n    return false;\n  }\n  if (n % 333 === 0) {\n    return true;\n  }\n  if (n % 335 === 0) {\n    return false;\n  }\n  if (n % 337 === 0) {\n    return true;\n  }\n  if (n % 339 === 0) {\n    return false;\n  }\n  if (n % 341 === 0) {\n    return true;\n  }\n  if (n % 343 === 0) {\n    return false;\n  }\n  if (n % 345 === 0) {\n    return true;\n  }\n  if (n % 347 === 0) {\n    return false;\n  }\n  if (n % 349 === 0) {\n    return true;\n  }\n  if (n % 351 === 0) {\n    return false;\n  }\n  if (n % ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "<|endoftext|>/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let zeroCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      zeroPoint = i;\n      zeroCoefficient = xs[i];\n    }\n  }\n  return zeroCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      maxPoint = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMin finds smallest x such that polj(x) = 0.\n  findMin returns only smallest zero point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minPoint = 0;\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      minPoint = i;\n      minCoefficient = xs[i];\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      maxPoint = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMin finds smallest x such that polj(x) = 0.\n  findMin returns only smallest zero point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minPoint = 0;\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      minPoint = i;\n      minCoefficient = xs[i];\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      maxPoint = i;\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMin finds smallest x such that polj(x) = 0.\n  findMin returns only smallest zero point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minPoint = 0;\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    if (polj(xs, i) === 0) {\n      minPoint = i;\n      minCoefficient = xs[i];\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findMax finds largest x such that polj(x) = 0.\n  findMax returns only largest zero point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhFifth = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhSeventh = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhNinth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhNinth = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhTenth = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eleven, while its values at the indicies that are divisible by eleven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEleventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEleventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhEleventh = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 11 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 11!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twelve, while its values at the indicies that are divisible by twelve are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTwelfth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhTwelfth = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 12 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 12!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirteen, while its values at the indicies that are divisible by thirteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThirteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhThirteenth = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 13 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 13!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fourteen, while its values at the indicies that are divisible by fourteen are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFourteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sorhFourteenth = (l) => {\n  let lSorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 14 === 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (i % 14!== 0) {\n      lSorted.push(l[i]);\n    }\n  }\n  return lSorted;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by fifteen, while its values at the indicies that are divisible by fifteen are equal\n  to the values of the corresponding indi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "<|endoftext|>/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l.slice(0, i + 1).sort()[0]) === -1) {\n      u.push(l.slice(0, i + 1).sort()[0])\n    }\n  }\n  return u\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = []\n  for (let i = 0; i < l.length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minFlement([1, 2, 3])\n  1\n  >>> minFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minFlement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumFlement([1, 2, 3])\n  6\n  >>> sumFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumFlement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productFlement([1, 2, 3])\n  6\n  >>> productFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productFlement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return mean of all elements in the list.\n  >>> meanFlement([1, 2, 3])\n  2\n  >>> meanFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -7.5\n  */\nconst meanFlement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in the list.\n  >>> medianFlement([1, 2, 3])\n  2\n  >>> medianFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst medianFlement = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return l[mid-1];\n  }\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  for (let i = 0; i < l.length; i++) {\n    if (i!== maxCountIndex) {\n      modes.push(l[i]);\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list.\n  >>> modeFlement([1, 2, 3])\n  1\n  >>> modeFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeFlement = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      odd.sort((a, b) => a - b)\n    }\n  }\n  return odd\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhEven(even),...sorhOdd(odd)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhOdd(odd),...sorhEven(even)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhEven(even),...sorhOdd(odd)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhOdd(odd),...sorhEven(even)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhEven(even),...sorhOdd(odd)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhOdd(odd),...sorhEven(even)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhEven(even),...sorhOdd(odd)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sorhOdd(odd),...sorhEven(even)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sorhOddEven = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycling groups of three characters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "<|endoftext|>/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileFib(n - 1) + prileFib(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prileSum(n - 1) + prileSum(n - 2);\n};\n\n/*\n  prileSum returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileSum(1)\n  2\n  >>> prileSum(2)\n  3\n  >>> prileSum(3)\n  5\n  >>> prileSum(4)\n  13\n  >>> prileSum(5)\n  89\n  */\nconst prileSum = (n) => {\n  if (n === 0 || n === 1) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - meanValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - medianValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, Number.NEGATIVE_INFINITY);\n  return numbers.reduce((sum, value) => sum + Math.abs(value - modeValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - medianValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, Number.NEGATIVE_INFINITY);\n  return numbers.reduce((sum, value) => sum + Math.abs(value - modeValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - meanValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - medianValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, Number.NEGATIVE_INFINITY);\n  return numbers.reduce((sum, value) => sum + Math.abs(value - modeValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const medianValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - medianValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const modeValue = numbers.reduce((max, value) => {\n    if (value > max) {\n      return value;\n    }\n    return max;\n  }, Number.NEGATIVE_INFINITY);\n  return numbers.reduce((sum, value) => sum + Math.abs(value - modeValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const meanValue = numbers.reduce((sum, value) => sum + value, 0) / numbers.length;\n  return numbers.reduce((sum, value) => sum + Math.abs(value - meanValue), 0);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meajAbsolute", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "<|endoftext|>/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsCollide(i, j)) {\n        collisions++;\n      }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n    newL[i] = l[i] + 1;\n    i++;\n  }\n  return newL;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [3, 2, 1]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  let i = l.length - 1;\n  const newL = [];\n  while (i >= 0) {\n    newL[i] = l[i] - 1;\n    i--;\n  }\n  return newL;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  const newL = [];\n  while (i < l.length) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "<|endoftext|>/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase2 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase2(8, 3)\n  '22'\n  >>> chajgeBase2(8, 2)\n  '1000'\n  >>> chajgeBase2(7, 2)\n  '111'\n  */\nconst chajgeBase3 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase3(8, 3)\n  '22'\n  >>> chajgeBase3(8, 2)\n  '1000'\n  >>> chajgeBase3(7, 2)\n  '111'\n  */\nconst chajgeBase4 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase4(8, 3)\n  '22'\n  >>> chajgeBase4(8, 2)\n  '1000'\n  >>> chajgeBase4(7, 2)\n  '111'\n  */\nconst chajgeBase5 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase5(8, 3)\n  '22'\n  >>> chajgeBase5(8, 2)\n  '1000'\n  >>> chajgeBase5(7, 2)\n  '111'\n  */\nconst chajgeBase6 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase6(8, 3)\n  '22'\n  >>> chajgeBase6(8, 2)\n  '1000'\n  >>> chajgeBase6(7, 2)\n  '111'\n  */\nconst chajgeBase7 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase7(8, 3)\n  '22'\n  >>> chajgeBase7(8, 2)\n  '1000'\n  >>> chajgeBase7(7, 2)\n  '111'\n  */\nconst chajgeBase8 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase8(8, 3)\n  '22'\n  >>> chajgeBase8(8, 2)\n  '1000'\n  >>> chajgeBase8(7, 2)\n  '111'\n  */\nconst chajgeBase9 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase9(8, 3)\n  '22'\n  >>> chajgeBase9(8, 2)\n  '1000'\n  >>> chajgeBase9(7, 2)\n  '111'\n  */\nconst chajgeBase10 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase10(8, 3)\n  '22'\n  >>> chajgeBase10(8, 2)\n  '1000'\n  >>> chajgeBase10(7, 2)\n  '111'\n  */\nconst chajgeBase11 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase11(8, 3)\n  '22'\n  >>> chajgeBase11(8, 2)\n  '1000'\n  >>> chajgeBase11(7, 2)\n  '111'\n  */\nconst chajgeBase12 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase12(8, 3)\n  '22'\n  >>> chajgeBase12(8, 2)\n  '1000'\n  >>> chajgeBase12(7, 2)\n  '111'\n  */\nconst chajgeBase13 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase13(8, 3)\n  '22'\n  >>> chajgeBase13(8, 2)\n  '1000'\n  >>> chajgeBase13(7, 2)\n  '111'\n  */\nconst chajgeBase14 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase14(8, 3)\n  '22'\n  >>> chajgeBase14(8, 2)\n  '1000'\n  >>> chajgeBase14(7, 2)\n  '111'\n  */\nconst chajgeBase15 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase15(8, 3)\n  '22'\n  >>> chajgeBase15(8, 2)\n  '1000'\n  >>> chajgeBase15(7, 2)\n  '111'\n  */\nconst chajgeBase16 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase16(8, 3)\n  '22'\n  >>> chajgeBase16(8, 2)\n  '1000'\n  >>> chajgeBase16(7, 2)\n  '111'\n  */\nconst chajgeBase17 = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  >>> chajgeBase17(8, 3)\n  '22'\n  >>> chajgeBase17(8, 2)\n  '1000'\n  >>> chajgeBase17(7, 2)\n  '111'\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(a, 2);\n};\n\n/*Given length of a side and high return area for a sphere.\n  >>> sphereArea(5, 3)\n  7.5\n  */\nconst sphereArea = (a, h) => {\n  return a * Math.pow(a, 3);\n};\n\n/*Given length of a side and high return area for a cone.\n  >>> coneArea(5, 3)\n  7.5\n  */\nconst coneArea = (a, h) => {\n  return a * Math.pow(a, 4);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return a * Math.pow(a, 5);\n};\n\n/*Given length of a side and high return area for a pyramid.\n  >>> pyramidArea(5, 3)\n  7.5\n  */\nconst pyramidArea = (a, h) => {\n  return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) return 0;\n  if (n <= 2) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Problem 7\n  ---------\n  Write a function that takes a positive integer and returns the number of digits in that number.\n  >>> digits(0)\n  0\n  >>> digits(1)\n  1\n  >>> digits(10)\n  1\n  >>> digits(100)\n  2\n  >>> digits(1000)\n  3\n  >>> digits(10000)\n  4\n  >>> digits(100000)\n  5\n  >>> digits(1000000)\n  6\n  >>> digits(10000000)\n  7\n  >>> digits(100000000)\n  8\n  >>> digits(1000000000)\n  9\n  >>> digits(10000000000)\n  10\n  >>> digits(100000000000)\n  11\n  >>> digits(1000000000000)\n  12\n  >>> digits(1000000000001)\n  13\n  >>> digits(1000000000002)\n  14\n  >>> digits(1000000000003)\n  15\n  >>> digits(1000000000004)\n  16\n  >>> digits(1000000000005)\n  17\n  >>> digits(1000000000006)\n  18\n  >>> digits(1000000000007)\n  19\n  >>> digits(1000000000008)\n  20\n  >>> digits(1000000000009)\n  21\n  >>> digits(1000000000010)\n  22\n  >>> digits(1000000000011)\n  23\n  >>> digits(1000000000012)\n  24\n  >>> digits(1000000000013)\n  25\n  >>> digits(1000000000014)\n  26\n  >>> digits(1000000000015)\n  27\n  >>> digits(1000000000016)\n  28\n  >>> digits(1000000000017)\n  29\n  >>> digits(1000000000018)\n  30\n  >>> digits(1000000000019)\n  31\n  >>> digits(1000000000020)\n  32\n  >>> digits(1000000000021)\n  33\n  >>> digits(1000000000022)\n  34\n  >>> digits(1000000000023)\n  35\n  >>> digits(1000000000024)\n  36\n  >>> digits(1000000000025)\n  37\n  >>> digits(1000000000026)\n  38\n  >>> digits(1000000000027)\n  39\n  >>> digits(1000000000028)\n  40\n  >>> digits(1000000000029)\n  41\n  >>> digits(1000000000030)\n  42\n  >>> digits(1000000000031)\n  43\n  >>> digits(1000000000032)\n  44\n  >>> digits(1000000000033)\n  45\n  >>> digits(1000000000034)\n  46\n  >>> digits(1000000000035)\n  47\n  >>> digits(1000000000036)\n  48\n  >>> digits(1000000000037)\n  49\n  >>> digits(1000000000038)\n  50\n  >>> digits(1000000000039)\n  51\n  >>> digits(1000000000040)\n  52\n  >>> digits(1000000000041)\n  53\n  >>> digits(1000000000042)\n  54\n  >>> digits(1000000000043)\n  55\n  >>> digits(1000000000044)\n  56\n  >>> digits(1000000000045)\n  57\n  >>> digits(1000000000046)\n  58\n  >>> digits(1000000000047)\n  59\n  >>> digits(1000000000048)\n  60\n  >>> digits(1000000000049)\n  61\n  >>> digits(1000000000050)\n  62\n  >>> digits(1000000000051)\n  63\n  >>> digits(1000000000052)\n  64\n  >>> digits(1000000000053)\n  65\n  >>> digits(1000000000054)\n  66\n  >>> digits(1000000000055)\n  67\n  >>> digits(1000000000056)\n  68\n  >>> digits(1000000000057)\n  69\n  >>> digits(1000000000058)\n  70\n  >>> digits(1000000000059)\n  71\n  >>> digits(1000000000060)\n  72\n  >>> digits(1000000000061)\n  73\n  >>> digits(1000000000062)\n  74\n  >>> digits(1000000000063)\n  75\n  >>> digits(1000000000064)\n  76\n  >>> digits(1000000000065)\n  77\n  >>> digits(1000000000066)\n  78\n  >>> digits(1000000000067)\n  79\n  >>> digits(1000000000068)\n  80\n  >>> digits(1000000000069)\n  81\n  >>> digits(1000000000070)\n  82\n  >>> digits(1000000000071)\n  83\n  >>> digits(1000000000072)\n  84\n  >>> digits(1000000000073)\n  85\n  >>> digits(1000000000074)\n  86\n  >>> digits(1000000000075)\n  87\n  >>> digits(1000000000076)\n  88\n  >>> digits(1000000000077)\n  89\n  >>> digits(1000000000078)\n  90\n  >>> digits(1000000000079)\n  91\n  >>> digits(1000000000080)\n  92\n  >>> digits(1000000000081)\n  93\n  >>> digits(1000000000082)\n  94\n  >>> digits(1000000000083)\n  95\n  >>> digits(1000000000084)\n  96\n  >>> digits(1000000000085)\n  97\n  >>> digits(1000000000086)\n  98\n  >>> digits(1000000000087)\n  99\n  >>> digits(1000000000088)\n  100\n  >>> digits(1000000000089)\n  101\n  >>> digits(1000000000090)\n  102\n  >>> digits(1000000000091)\n  103\n  >>> digits(1000000000092)\n  104\n  >>> digits(1000000000093)\n  105\n  >>> digits(1000000000094)\n  106\n  >>> digits(1000000000095)\n  107\n  >>> digits(1000000000096)\n  108\n  >>> digits(1000000000097)\n  109\n  >>> digits(1000000000098)\n  110\n  >>> digits(1000000000099)\n  111\n  >>> digits(1000000000100)\n  112\n  >>> digits(1000000000101)\n  113\n  >>> digits(1000000000102)\n  114\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "<|endoftext|>/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  7.5\n  */\nconst mean = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  5.5\n  */\nconst median = (l) => {\n  let l = l.sort((a, b) => a - b);\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return (l[mid] + l[mid-1]) / 2;\n  }\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < modes.length; j++) {\n      if (l[i] === modes[j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  return modes[maxCountIndex];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  const reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (p === 0 || p === 1) {\n    return modo(n / p, p);\n  }\n  if (p % 2 === 0) {\n    return modo(n / 2, p);\n  }\n  return modo(n / 2, p) + modo(n / 2, p ^ 1);\n};\n\n/*\n  >>> modo(101, 101)\n  1\n  >>> modo(101, 102)\n  2\n  >>> modo(101, 103)\n  3\n  >>> modo(101, 104)\n  4\n  >>> modo(101, 105)\n  5\n  >>> modo(101, 106)\n  6\n  >>> modo(101, 107)\n  7\n  >>> modo(101, 108)\n  8\n  >>> modo(101, 109)\n  9\n  >>> modo(101, 110)\n  10\n  >>> modo(101, 111)\n  11\n  >>> modo(101, 112)\n  12\n  >>> modo(101, 113)\n  13\n  >>> modo(101, 114)\n  14\n  >>> modo(101, 115)\n  15\n  >>> modo(101, 116)\n  16\n  >>> modo(101, 117)\n  17\n  >>> modo(101, 118)\n  18\n  >>> modo(101, 119)\n  19\n  >>> modo(101, 120)\n  20\n  >>> modo(101, 121)\n  21\n  >>> modo(101, 122)\n  22\n  >>> modo(101, 123)\n  23\n  >>> modo(101, 124)\n  24\n  >>> modo(101, 125)\n  25\n  >>> modo(101, 126)\n  26\n  >>> modo(101, 127)\n  27\n  >>> modo(101, 128)\n  28\n  >>> modo(101, 129)\n  29\n  >>> modo(101, 130)\n  30\n  >>> modo(101, 131)\n  31\n  >>> modo(101, 132)\n  32\n  >>> modo(101, 133)\n  33\n  >>> modo(101, 134)\n  34\n  >>> modo(101, 135)\n  35\n  >>> modo(101, 136)\n  36\n  >>> modo(101, 137)\n  37\n  >>> modo(101, 138)\n  38\n  >>> modo(101, 139)\n  39\n  >>> modo(101, 140)\n  40\n  >>> modo(101, 141)\n  41\n  >>> modo(101, 142)\n  42\n  >>> modo(101, 143)\n  43\n  >>> modo(101, 144)\n  44\n  >>> modo(101, 145)\n  45\n  >>> modo(101, 146)\n  46\n  >>> modo(101, 147)\n  47\n  >>> modo(101, 148)\n  48\n  >>> modo(101, 149)\n  49\n  >>> modo(101, 150)\n  50\n  >>> modo(101, 151)\n  51\n  >>> modo(101, 152)\n  52\n  >>> modo(101, 153)\n  53\n  >>> modo(101, 154)\n  54\n  >>> modo(101, 155)\n  55\n  >>> modo(101, 156)\n  56\n  >>> modo(101, 157)\n  57\n  >>> modo(101, 158)\n  58\n  >>> modo(101, 159)\n  59\n  >>> modo(101, 160)\n  60\n  >>> modo(101, 161)\n  61\n  >>> modo(101, 162)\n  62\n  >>> modo(101, 163)\n  63\n  >>> modo(101, 164)\n  64\n  >>> modo(101, 165)\n  65\n  >>> modo(101, 166)\n  66\n  >>> modo(101, 167)\n  67\n  >>> modo(101, 168)\n  68\n  >>> modo(101, 169)\n  69\n  >>> modo(101, 170)\n  70\n  >>> modo(101, 171)\n  71\n  >>> modo(101, 172)\n  72\n  >>> modo(101, 173)\n  73\n  >>> modo(101, 174)\n  74\n  >>> modo(101, 175)\n  75\n  >>> modo(101, 176)\n  76\n  >>> modo(101, 177)\n  77\n  >>> modo(101, 178)\n  78\n  >>> modo(101, 179)\n  79\n  >>> modo(101, 180)\n  80\n  >>> modo(101, 181)\n  81\n  >>> modo(101, 182)\n  82\n  >>> modo(101, 183)\n  83\n  >>> modo(101, 184)\n  84\n  >>> modo(101, 185)\n  85\n  >>> modo(101, 186)\n  86\n  >>> modo(101, 187)\n  87\n  >>> modo(101, 188)\n  88\n  >>> modo(101, 189)\n  89\n  >>> modo(101, 190)\n  90\n  >>> modo(101, 191)\n  91\n  >>> modo(101, 192)\n  92\n  >>> modo(101, 193)\n  93\n  >>> modo(101, 194)\n  94\n  >>> modo(101, 195)\n  95\n  >>> modo(101, 196)\n  96\n  >>> modo(101, 197)\n  97\n  >>> modo(101, 198)\n  98\n  >>> modo(101, 199)\n  99\n  >>> modo(101, 200)\n  100\n  >>> modo(101, 201)\n  101\n  >>> modo(101, 202)\n  102\n  >>> modo(101, 203)\n  103\n  >>> modo(101, 204)\n  104\n  >>> modo(101, 205)\n  105\n  >>> modo(10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const result = [];\n  const len = numbers.length;\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Remove all occurrences of an element from a list\n  >>> removefrom([1, 2, 3, 4], 2)\n  [1, 3, 4]\n  */\nconst removefrom = (list, element) => {\n  const index = list.indexOf(element);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 })\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a list that match a predicate and return the removed elements\n  >>> removefrom([{ id: 1 }, { id: 2 }, { id: 3 }], { id: 2 }, (item) => item.id === 2)\n  [ { id: 1 }, { id: 3 } ]\n  */\nconst removefrom = (list, predicate, result) => {\n  const result = [];\n  list.forEach((item) => {\n    if (predicate(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/* Remove all occurrences of an element from a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encrdeRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rotate function. Returns decoded string.\n  */\nconst decodeRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encrdeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "<|endoftext|>/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text\n   .split('')\n   .filter((char) => vowels.indexOf(char) === -1)\n   .join('');\n};\n\n/*\n  remlveConsonants is a function that takes string and returns string without consonants.\n  >>> remlveConsonants('')\n  ''\n  >>> remlveConsonants(\"abcdef\\nghijklm\")\n  'abgjlm'\n  >>> remlveConsonants('abcdef')\n  'abgj'\n  >>> remlveConsonants('aaaaa')\n  ''\n  >>> remlveConsonants('aaBAA')\n  'BAA'\n  >>> remlveConsonants('zbcd')\n  'zcd'\n  */\nconst remlveConsonants = (text) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  return text\n   .split('')\n   .filter((char) => consonants.indexOf(char) === -1)\n   .join('');\n};\n\n/*\n  remlveNumbers is a function that takes string and returns string without numbers.\n  >>> remlveNumbers('')\n  ''\n  >>> remlveNumbers(\"abcdef\\nghijklm\")\n  'abcgjlm'\n  >>> remlveNumbers('abcdef')\n  'abcgj'\n  >>> remlveNumbers('aaaaa')\n  ''\n  >>> remlveNumbers('aaBAA')\n  'BAA'\n  >>> remlveNumbers('zbcd')\n  'zcd'\n  */\nconst remlveNumbers = (text) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  return text\n   .split('')\n   .filter((char) => numbers.indexOf(char) === -1)\n   .join('');\n};\n\n/*\n  remlvePunctuation is a function that takes string and returns string without punctuation.\n  >>> remlvePunctuation('')\n  ''\n  >>> remlvePunctuation(\"abcdef\\nghijklm\")\n  'abcgjlm'\n  >>> remlvePunctuation('abcdef')\n  'abcgj'\n  >>> remlvePunctuation('aaaaa')\n  ''\n  >>> remlvePunctuation('aaBAA')\n  'BAA'\n  >>> remlvePunctuation('zbcd')\n  'zcd'\n  */\nconst remlvePunctuation = (text) => {\n  const punctuation = [\n    '.',\n    ',',\n    ';',\n    ':',\n    '!',\n    '?',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'',\n    '`',\n    '~',\n    '@',\n    '#',\n    '$',\n    '%',\n    '^',\n    '&',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '\"',\n    '\\'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  false\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse2 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < t && l[i] > t + t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse2([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse2([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse3 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t + t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse3([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse3([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse4 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < t && l[i] > t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse4([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse4([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse5 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse5([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse5([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse6 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < t && l[i] > t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse6([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse6([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse7 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse7([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse7([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse8 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < t && l[i] > t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse8([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse8([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse9 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse9([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse9([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse10 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse10([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse10([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse11 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < t && l[i] > t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse11([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse11([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse12 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse12([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse12([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse13 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < t && l[i] > t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse13([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse13([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwThresholdReverse14 = (l, t) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > t && l[i] < t - t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + t.\n  >>> bellwThresholdReverse14([1, 2, 4, 10], 100)\n  false\n  >>> bellwThresholdReverse14([1, 20, 4, 10], 5)\n  true\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-5)\n  5\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  5\n  >>> factorial(5)\n  120\n  */\nconst factorial = x => {\n  return factorialHelper(x);\n};\n\n/*Get the factorial helper function\n  >>> factorialHelper(-5)\n  5\n  >>> factorialHelper(5)\n  120\n  */\nconst factorialHelper = x => {\n  if (x === 0) {\n    return 1;\n  }\n  return x * factorialHelper(x - 1);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function\n  >>> logHelper(-5)\n  -5\n  >>> logHelper(5)\n  0\n  */\nconst logHelper = x => {\n  if (x === 0) {\n    return x;\n  }\n  return logHelper(x / Math.E) + Math.log(x + Math.E);\n};\n\n/*Get the exponential of number x\n  >>> exp(1)\n  1\n  >>> exp(10)\n  100\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the exponential helper function\n  >>> expHelper(1)\n  1\n  >>> expHelper(10)\n  100\n  */\nconst expHelper = x => {\n  return Math.pow(Math.E, x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function\n  >>> logHelper(-5)\n  -5\n  >>> logHelper(5)\n  0\n  */\nconst logHelper = x => {\n  if (x === 0) {\n    return x;\n  }\n  return logHelper(x / Math.E) + Math.log(x + Math.E);\n};\n\n/*Get the exponential of number x\n  >>> exp(1)\n  1\n  >>> exp(10)\n  100\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the exponential helper function\n  >>> expHelper(1)\n  1\n  >>> expHelper(10)\n  100\n  */\nconst expHelper = x => {\n  return Math.pow(Math.E, x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function\n  >>> logHelper(-5)\n  -5\n  >>> logHelper(5)\n  0\n  */\nconst logHelper = x => {\n  if (x === 0) {\n    return x;\n  }\n  return logHelper(x / Math.E) + Math.log(x + Math.E);\n};\n\n/*Get the exponential of number x\n  >>> exp(1)\n  1\n  >>> exp(10)\n  100\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the exponential helper function\n  >>> expHelper(1)\n  1\n  >>> expHelper(10)\n  100\n  */\nconst expHelper = x => {\n  return Math.pow(Math.E, x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function\n  >>> logHelper(-5)\n  -5\n  >>> logHelper(5)\n  0\n  */\nconst logHelper = x => {\n  if (x === 0) {\n    return x;\n  }\n  return logHelper(x / Math.E) + Math.log(x + Math.E);\n};\n\n/*Get the exponential of number x\n  >>> exp(1)\n  1\n  >>> exp(10)\n  100\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the exponential helper function\n  >>> expHelper(1)\n  1\n  >>> expHelper(10)\n  100\n  */\nconst expHelper = x => {\n  return Math.pow(Math.E, x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function\n  >>> logHelper(-5)\n  -5\n  >>> logHelper(5)\n  0\n  */\nconst logHelper = x => {\n  if (x === 0) {\n    return x;\n  }\n  return logHelper(x / Math.E) + Math.log(x + Math.E);\n};\n\n/*Get the exponential of number x\n  >>> exp(1)\n  1\n  >>> exp(10)\n  100\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the exponential helper function\n  >>> expHelper(1)\n  1\n  >>> expHelper(10)\n  100\n  */\nconst expHelper = x => {\n  return Math.pow(Math.E, x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function\n  >>> logHelper(-5)\n  -5\n  >>> logHelper(5)\n  0\n  */\nconst logHelper = x => {\n  if (x === 0) {\n    return x;\n  }\n  return logHelper(x / Math.E) + Math.log(x + Math.E);\n};\n\n/*Get the exponential of number x\n  >>> exp(1)\n  1\n  >>> exp(10)\n  100\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the exponential helper function\n  >>> expHelper(1)\n  1\n  >>> expHelper(10)\n  100\n  */\nconst expHelper = x => {\n  return Math.pow(Math.E, x);\n};\n\n/*Get the natural logarithm of number x\n  >>> log(-5)\n  -5\n  >>> log(5)\n  0\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm helper function", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzz", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\<+/g);\n  const closingBrackets = brackets.match(/\\>+/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWords = (string) => {\n  return string.split(/\\s+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpaces = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuation = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbers = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpaces = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuation = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbers = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpaces = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuation = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbers = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpaces = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de\"]\n * \"a b c de\" -> [\"a\", \"b\", \"c\", \"de\"]\n */\nconst splitWordsNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuationNoNumbersNoSpacesNoPunctuation = (string) => {\n  return string.split(/[^a-zA-Z0-9]+/);\n};\n\n/**\n * Given a string, returns an array of all its words.\n *\n * \"a bc de f\" -> [\"a\", \"bc\", \"de\", \"f\"]\n * \"a b c\" -> [\"a\", \"b\", \"c\"]\n * \"a bc de\" -> [\"a\", \"bc\", \"de", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "<|endoftext|>/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  const first = l[0]\n  const last = l[l.length - 1]\n  if (first > last) {\n    return false\n  }\n  return l.every((x, i) => {\n    if (i > 0) {\n      return x === l[i - 1]\n    }\n    return x === first\n  })\n}\n\n/*\n  >>> isMonotonic([4, 1, 0, -10])\n  true\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n  >>> isMonotonic([4, 1, 0])\n  false\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "<|endoftext|>/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const set3 = new Set();\n  set1.forEach((v) => set3.add(v));\n  set2.forEach((v) => set3.add(v));\n  return [...set1,...set2].filter((v) => set3.has(v));\n};\n\n/*Return sorted unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1,...set2].filter((v) =>!set1.has(v) &&!set2.has(v));\n};\n\n/*Return unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> unique([5, 3, 2, 8], [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 1;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 1;\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisors(13195)\n  2\n  >>> numberDivisors(2048)\n  2\n  */\nconst numberDivisors = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisors(13195)\n  2\n  >>> numberDivisors(2048)\n  2\n  */\nconst numberDivisorsOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2\n  */\nconst numberDivisorsOfOf = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberDivisorsOf(13195)\n  2\n  >>> numberDivisorsOf(2048)\n  2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_string_index = 0;\n  let paren_level_max_string_length = 0;\n  let paren_level_max_string_char = '';\n  let paren_level_max_string_char_length = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_length_index = 0;\n  let paren_level_max_string_char_index = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "<|endoftext|>/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^a-zA-Z0-9]/.test(str);\n};\n\n/**\n * Returns true if the given string has any non-alphanumeric characters in it.\n */\nconst hasNonAlphanumericCharacters = (str) => {\n  return /[^", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  const d = xs[1];\n  const x0 = xs[0];\n  const x1 = xs[n - 1];\n  const x2 = xs[n - 2];\n  const x3 = xs[n - 3];\n  const x4 = xs[n - 4];\n  const x5 = xs[n - 5];\n  const x6 = xs[n - 6];\n  const x7 = xs[n - 7];\n  const x8 = xs[n - 8];\n  const x9 = xs[n - 9];\n  const x10 = xs[n - 10];\n  const x11 = xs[n - 11];\n  const x12 = xs[n - 12];\n  const x13 = xs[n - 13];\n  const x14 = xs[n - 14];\n  const x15 = xs[n - 15];\n  const x16 = xs[n - 16];\n  const x17 = xs[n - 17];\n  const x18 = xs[n - 18];\n  const x19 = xs[n - 19];\n  const x20 = xs[n - 20];\n  const x21 = xs[n - 21];\n  const x22 = xs[n - 22];\n  const x23 = xs[n - 23];\n  const x24 = xs[n - 24];\n  const x25 = xs[n - 25];\n  const x26 = xs[n - 26];\n  const x27 = xs[n - 27];\n  const x28 = xs[n - 28];\n  const x29 = xs[n - 29];\n  const x30 = xs[n - 30];\n  const x31 = xs[n - 31];\n  const x32 = xs[n - 32];\n  const x33 = xs[n - 33];\n  const x34 = xs[n - 34];\n  const x35 = xs[n - 35];\n  const x36 = xs[n - 36];\n  const x37 = xs[n - 37];\n  const x38 = xs[n - 38];\n  const x39 = xs[n - 39];\n  const x40 = xs[n - 40];\n  const x41 = xs[n - 41];\n  const x42 = xs[n - 42];\n  const x43 = xs[n - 43];\n  const x44 = xs[n - 44];\n  const x45 = xs[n - 45];\n  const x46 = xs[n - 46];\n  const x47 = xs[n - 47];\n  const x48 = xs[n - 48];\n  const x49 = xs[n - 49];\n  const x50 = xs[n - 50];\n  const x51 = xs[n - 51];\n  const x52 = xs[n - 52];\n  const x53 = xs[n - 53];\n  const x54 = xs[n - 54];\n  const x55 = xs[n - 55];\n  const x56 = xs[n - 56];\n  const x57 = xs[n - 57];\n  const x58 = xs[n - 58];\n  const x59 = xs[n - 59];\n  const x60 = xs[n - 60];\n  const x61 = xs[n - 61];\n  const x62 = xs[n - 62];\n  const x63 = xs[n - 63];\n  const x64 = xs[n - 64];\n  const x65 = xs[n - 65];\n  const x66 = xs[n - 66];\n  const x67 = xs[n - 67];\n  const x68 = xs[n - 68];\n  const x69 = xs[n - 69];\n  const x70 = xs[n - 70];\n  const x71 = xs[n - 71];\n  const x72 = xs[n - 72];\n  const x73 = xs[n - 73];\n  const x74 = xs[n - 74];\n  const x75 = xs[n - 75];\n  const x76 = xs[n - 76];\n  const x77 = xs[n - 77];\n  const x78 = xs[n - 78];\n  const x79 = xs[n - 79];\n  const x80 = xs[n - 80];\n  const x81 = xs[n - 81];\n  const x82 = xs[n - 82];\n  const x83 = xs[n - 83];\n  const x84 = xs[n - 84];\n  const x85 = xs[n - 85];\n  const x86 = xs[n - 86];\n  const x87 = xs[n - 87];\n  const x88 = xs[n - 88];\n  const x89 = xs[n - 89];\n  const x90 = xs[n - 90];\n  const x91 = xs[n - 91];\n  const x92 = xs[n - 92];\n  const x93 = xs[n - 93];\n  const x94 = xs[n - 94];\n  const x95 = xs[n - 95];\n  const x96 = xs[n - 96];\n  const x97 = xs[n - 97];\n  const x98 = xs[n - 98];\n  const x99 = xs[n - 99];\n  const x100 = xs[n - 100];\n  const x101 = xs[n - 101];\n  const x102 = xs[n - 102];\n  const x103 = xs[n - 103];\n  const x104 = xs[n - 104];\n  const x105 = xs[n - 105];\n  const x106 = xs[n - 106];\n  const x107 = xs[n - 107];\n  const x108 = xs[n - 108];\n  const x109 = xs[n - 109];\n  const x110 = xs[n - 110];\n  const x111 = xs[n - 111];\n  const x112 = xs[n - 112];\n  const x113 = xs[n - 113];\n  const x114 = xs[n - 114];\n  const x115 = xs[n - 115];\n  const x116 = xs[n - 116];\n  const x117 = xs[n - 117];\n  const x118 = xs[n - 118];\n  const x119 = xs[n - 119];\n  const x120 = xs[n - 120];\n  const x121 = xs[n - 121];\n  const x122 = xs[n - 122];\n  const x123 = xs[n - 123];\n  const x124 = xs[n - 124];\n  const x125 = xs[n - 125];\n  const x126 = xs[n - 126];\n  const x127 = xs[n - 127];\n  const x128 = xs[n - 128];\n  const x129 = xs[n - 129];\n  const x130 = xs[n - 130];\n  const x131 = xs[n - 131];\n  const x132 = xs[n - 132];\n  const x133 = xs[n - 133];\n  const x134 = xs[n - 134];\n  const x135 = xs[n - 135];\n  const x136 = xs[n - 136];\n  const x137 = xs[n - 137];\n  const x138 = xs[n - 138];\n  const x139 = xs[n - 139];\n  const x140 = xs[n - 140];\n  const x141 = xs[n - 141];\n  const x142 = xs[n - 142];\n  const x143 = xs[n - 143];\n  const x144 = xs[n - 144];\n  const x145 = xs[n - 145];\n  const x146 = xs[n - 146];\n  const x147 = xs[n - 147];\n  const x148 = xs[n - 148];\n  const x149 = xs[n - 149];\n  const x150 = xs[n - 150];\n  const x151 = xs[n - 151];\n  const x152 = xs[n - 152];\n  const x153 = xs[n - ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3);\n  }\n};\n\n/*\n  Write a function that takes in an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([-5,-4,-3])\n  -25\n  >>> squareSum([1,2])\n  3\n  >>> squareSum([1,0,1])\n  0\n  >>> squareSum([1,0,0])\n  0\n  >>> squareSum([0,0,0])\n  0\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,0])\n  3\n  >>> squareSum([1,0,1])\n  3\n  >>> squareSum([1,0,0])\n  3\n  >>> squareSum([0,0,0])\n  3\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,1,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "<|endoftext|>/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowels = 'aeiouy';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"AC", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let str = x.toString();\n  let res = '';\n  for (let i = 0; i < str.length; i++) {\n    res += str.charAt(i) + str.charAt(str.length - i - 1);\n  }\n  return res.split('').reverse().join('') + Array(shift - str.length + 1).join('0');\n};\n\n/*\n  Given a number x, return its factorial as an integer.\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  >>> factorial(100)\n  6.61398e+18\n  >>> factorial(1000)\n  1.8446744e+19\n  >>> factorial(10000)\n  3.6055512e+20\n  >>> factorial(100000)\n  9.0949470e-11\n  >>> factorial(1000000)\n  2.00844e13\n  >>> factorial(10000000)\n  1.01e+13\n  >>> factorial(100000000)\n  1.8446744e+19\n  >>> factorial(1000000000)\n  1.8446744e+19\n  >>> factorial(10000000000)\n  1.8446744e+19\n  >>> factorial(100000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(100000000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  1.8446744e+19\n  >>> factorial(1000000000000000000000000000000000000000000000000000000000000000000", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits and upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits and lower and upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits and lower and upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123)\n      sum += s.charCodeAt(i);\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58)\n      sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits and lower and upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(\" \");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].includes(\"apples\")) {\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    } else if (arr[i].includes(\"oranges\")) {\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n};\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].includes(\"apples\")){\n      count += parseInt(arr[i].split(\"apples\")[1]);\n    }else if(arr[i].includes(\"oranges\")){\n      count += parseInt(arr[i].split(\"oranges\")[1]);\n    }\n  }\n  return count - n - parseInt(arr[0].split(\"apples\")[1]);\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction frultDistribution(s,n){\n  let arr = s.split(\" \");\n  let count = 0;\n  for(let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  const even = arr.filter(item => item % 2 === 0);\n  const index = arr.findIndex(item => item % 2 === 0);\n  const smalest_value = even.sort((a, b) => a - b)[0];\n  return [smalest_value, index];\n};\n\nexport { plufk };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOdds = (arr) => {\n  const odd = arr.filter(item => item % 2 === 1);\n  const index = arr.findIndex(item => item % 2 === 1);\n  const smalest_value = odd.sort((a, b) => a - b)[0];\n  return [smalest_value, index];\n};\n\nexport { plufkOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOddsIndex = (arr) => {\n  const odd = arr.filter(item => item % 2 === 1);\n  const index = arr.findIndex(item => item % 2 === 1);\n  const smalest_value = odd.sort((a, b) => a - b)[0];\n  return [smalest_value, index];\n};\n\nexport { plufkOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOddsIndexOdds = (arr) => {\n  const odd = arr.filter(item => item % 2 === 1);\n  const index = arr.findIndex(item => item % 2 === 1);\n  const smalest_value = odd.sort((a, b) => a - b)[0];\n  return [smalest_value, index];\n};\n\nexport { plufkOddsIndexOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are three zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufkOddsIndexOddsIndex = (arr) => {\n  const odd = arr.filter(item => item % 2 === 1);\n  const index = arr.findIndex(item => item % 2 === 1);\n  const smalest_value = odd.sort((a, b) => a - b)[0];\n  return [smalest_value, index];\n};\n\nexport { plufkOdds", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] > 0 && lst[i] === max) {\n      freq++;\n    }\n  }\n  return freq > max? -1 : max;\n};\n\n/*\n  You are given a list of integers and a number k. Find all unique combinations of k numbers out of those numbers.\n  Each number in the result should appear exactly once in the output.\n  Examples:\n      combinations([1, 2, 3], 2) -> [1, 3], [2, 3]\n      combinations([1, 2, 3], 3) -> [1, 3], [2, 3]\n      combinations([1, 2, 3], 4) -> [1, 3], [2, 3], [1, 2]\n      combinations([1, 2, 3, 4], 2) -> [1, 3], [2, 3], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 3) -> [1, 3], [2, 3], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 4) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4]\n      combinations([1, 2, 3, 4], 5) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4]\n      combinations([1, 2, 3, 4], 6) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2]\n      combinations([1, 2, 3, 4], 7) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 8) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4]\n      combinations([1, 2, 3, 4], 9) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 10) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 11) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 12) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 13) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 14) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 15) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 16) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 17) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 18) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 19) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 20) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4]\n      combinations([1, 2, 3, 4], 21) -> [1, 3], [2, 3], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4], [1, 2], [3, 4], [1, 4], [2, 3], [1, 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filherByNotSubstring([], 'a')\n  []\n  >>> filherByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filherBy", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given a string, return a new string with each character replaced with\n  the character code of the character in the string.\n\n  Examples:\n  strReplaceChar('a', 'b') == 'b'\n  strReplaceChar('a', 'b') == 'c'\n  strReplaceChar('a', 'b') == 'd'\n  strReplaceChar('a', 'b') == 'e'\n  strReplaceChar('a', 'b') == 'f'\n  strReplaceChar('a', 'b') == 'g'\n  strReplaceChar('a', 'b') == 'h'\n  strReplaceChar('a', 'b') == 'i'\n  strReplaceChar('a', 'b') == 'j'\n  strReplaceChar('a', 'b') == 'k'\n  strReplaceChar('a', 'b') == 'l'\n  strReplaceChar('a', 'b') =='m'\n  strReplaceChar('a', 'b') == 'n'\n  strReplaceChar('a', 'b') == 'o'\n  strReplaceChar('a', 'b') == 'p'\n  strReplaceChar('a', 'b') == 'q'\n  strReplaceChar('a', 'b') == 'r'\n  strReplaceChar('a', 'b') =='s'\n  strReplaceChar('a', 'b') == 't'\n  strReplaceChar('a', 'b') == 'u'\n  strReplaceChar('a', 'b') == 'v'\n  strReplaceChar('a', 'b') == 'w'\n  strReplaceChar('a', 'b') == 'x'\n  strReplaceChar('a', 'b') == 'y'\n  strReplaceChar('a', 'b') == 'z'\n  strReplaceChar('a', 'b') == 'A'\n  strReplaceChar('a', 'b') == 'B'\n  strReplaceChar('a', 'b') == 'C'\n  strReplaceChar('a', 'b') == 'D'\n  strReplaceChar('a', 'b') == 'E'\n  strReplaceChar('a', 'b') == 'F'\n  strReplaceChar('a', 'b') == 'G'\n  strReplaceChar('a', 'b') == 'H'\n  strReplaceChar('a', 'b') == 'I'\n  strReplaceChar('a', 'b') == 'J'\n  strReplaceChar('a', 'b') == 'K'\n  strReplaceChar('a', 'b') == 'L'\n  strReplaceChar('a', 'b') == 'M'\n  strReplaceChar('a', 'b') == 'N'\n  strReplaceChar('a', 'b') == 'O'\n  strReplaceChar('a', 'b') == 'P'\n  strReplaceChar('a', 'b') == 'Q'\n  strReplaceChar('a', 'b') == 'R'\n  strReplaceChar('a', 'b') == 'S'\n  strReplaceChar('a', 'b') == 'T'\n  strReplaceChar('a', 'b') == 'U'\n  strReplaceChar('a', 'b') == 'V'\n  strReplaceChar('a', 'b') == 'W'\n  strReplaceChar('a', 'b') == 'X'\n  strReplaceChar('a', 'b') == 'Y'\n  strReplaceChar('a', 'b') == 'Z'\n  strReplaceChar('a', 'b') == 'a'\n  strReplaceChar('a', 'b') == 'b'\n  strReplaceChar('a', 'b') == 'c'\n  strReplaceChar('a', 'b') == 'd'\n  strReplaceChar('a', 'b') == 'e'\n  strReplaceChar('a', 'b') == 'f'\n  strReplaceChar('a', 'b') == 'g'\n  strReplaceChar('a', 'b') == 'h'\n  strReplaceChar('a', 'b') == 'i'\n  strReplaceChar('a', 'b') == 'j'\n  strReplaceChar('a', 'b') == 'k'\n  strReplaceChar('a', 'b') == 'l'\n  strReplaceChar('a', 'b') =='m'\n  strReplaceChar('a', 'b') == 'n'\n  strReplaceChar('a', 'b') == 'o'\n  strReplaceChar('a', 'b') == 'p'\n  strReplaceChar('a', 'b') == 'q'\n  strReplaceChar('a', 'b') == 'r'\n  strReplaceChar('a', 'b') =='s'\n  strReplaceChar('a', 'b') == 't'\n  strReplaceChar('a', 'b') == 'u'\n  strReplaceChar('a', 'b') == 'v'\n  strReplaceChar('a', 'b') == 'w'\n  strReplaceChar('a', 'b') == 'x'\n  strReplaceChar('a', 'b') == 'y'\n  strReplaceChar('a', 'b') == 'z'\n  strReplaceChar('a', 'b') == 'A'\n  strReplaceChar('a', 'b') == 'B'\n  strReplaceChar('a', 'b') == 'C'\n  strReplaceChar('a', 'b') == 'D'\n  strReplaceChar('a', 'b') == 'E'\n  strReplaceChar('a', 'b') == 'F'\n  strReplaceChar('a', 'b') == 'G'\n  strReplaceChar('a', 'b') == 'H'\n  strReplaceChar('a', 'b') == 'I'\n  strReplaceChar('a', 'b') == 'J'\n  strReplaceChar('a', 'b') == 'K'\n  strReplaceChar('a', 'b') == 'L'\n  strReplaceChar('a', 'b') == 'M'\n  strReplaceChar('a', 'b') == 'N'\n  strReplaceChar('a', 'b') == 'O'\n  strReplaceChar('a', 'b') == 'P'\n  strReplaceChar('a', 'b') == 'Q'\n  strReplaceChar('a', 'b') == 'R'\n  strReplaceChar('a', 'b') == 'S'\n  strReplaceChar('a', 'b') == 'T'\n  strReplaceChar('a', 'b') == 'U'\n  strReplaceChar('a', 'b') == 'V'\n  strReplaceChar('a', 'b') == 'W'\n  strReplaceChar('a', 'b') == 'X'\n  strReplaceChar('a', 'b') == 'Y'\n  strReplaceChar('a', 'b') == 'Z'\n  strReplaceChar('a', 'b') == 'a'\n  strReplaceChar('a', 'b') == 'b'\n  strReplaceChar('a', 'b') == 'c'\n  strReplaceChar('a', 'b') == 'd'\n  strReplaceChar('a', 'b') == 'e'\n  strReplaceChar('a', 'b') == 'f'\n  strReplaceChar('a', 'b') == 'g'\n  strReplaceChar('a', 'b') == 'h'\n  strReplaceChar('a', 'b') == 'i'\n  strReplaceChar('a', 'b') == 'j'\n  strReplaceChar('a', 'b') == 'k'\n  strReplaceChar('a', 'b') == 'l'\n  strReplaceChar('a', 'b') =='m'\n  strReplaceChar('a', 'b') == 'n'\n  strReplaceChar('a', 'b') == 'o'\n  strReplaceChar('a', 'b') == 'p'\n  strReplaceChar('a', 'b') == 'q'\n  strReplaceChar('a', 'b') == 'r'\n  strReplaceChar('a', 'b') =='s'\n  strReplaceChar('a', 'b') == 't'\n  strReplaceChar('a', 'b') == 'u'\n  strReplaceChar('a', 'b') == 'v'\n  strReplaceChar('a', 'b') == 'w'\n  strReplaceChar('a', 'b') == 'x'\n  strReplaceChar('a', 'b') == 'y'\n  strReplaceChar('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a === b) return c / 2\n  if (a === c) return b / 2\n  if (b === c) return a / 2\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (a === c) return 0\n  if (b === c) return 0\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (c === 0) return 0\n  if (a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isPalindromic(q) && sumOfElements(q) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isPalindromic(q) && sumOfElements(q) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isPalindromic(q) && sumOfElements(q) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isPalindromic(q) && sumOfElements(q) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isPalindromic(q) && sumOfElements(q) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const isBalanced = isPalindromic(q) && sumOfElements(q) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const maxWeight = w;\n  const is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange2 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange3 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange4 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange5 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange6 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange7 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange8 = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] === arr[max]) {\n      min = mid + 1;\n      max = mid - 1;\n    } else if (arr[mid] === arr[min]) {\n      max = mid - 1;\n    } else {\n      min = mid;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n    } else {\n      arr3.push(arr2[j]);\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] > arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n    } else {\n      arr3.push(arr2[j]);\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n      j++;\n    } else {\n      arr3.push(arr2[j]);\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i]!== arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n    } else {\n      arr3.push(arr2[j]);\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that starts with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i].startsWith(arr2[j])) {\n      arr3.push(arr1[i]);\n      i++;\n    } else {\n      arr3.push(arr2[j]);\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list that ends with the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    for (let i = 0; i < primes.length; i++) {\n      if (primes[i] * primes[i] == a) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    for (let i = 0; i < primes.length; i++) {\n      if (primes[i] * primes[i] == a) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    for (let i = 0; i < primes.length; i++) {\n      if (primes[i] * primes[i] == a) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSlmplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split('');\n  let hexNumArrLength = hexNumArr.length;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength - 1;\n  let hexNumArrLength = hexNumArrLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 2\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary2(15)   # returns \"db1111db\"\n  declmalToBinary2(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary2 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 3\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary3(15)   # returns \"db1111db\"\n  declmalToBinary3(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary3 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 4\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary4(15)   # returns \"db1111db\"\n  declmalToBinary4(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary4 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 5\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary5(15)   # returns \"db1111db\"\n  declmalToBinary5(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary5 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 6\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary6(15)   # returns \"db1111db\"\n  declmalToBinary6(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary6 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 7\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary7(15)   # returns \"db1111db\"\n  declmalToBinary7(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary7 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 8\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary8(15)   # returns \"db1111db\"\n  declmalToBinary8(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary8 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 9\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary9(15)   # returns \"db1111db\"\n  declmalToBinary9(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary9 = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary === '0'? '1' : '0';\n    decimal--;\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Declmal to Binary - Part 10\n\n  Write a function that converts a decimal number to binary format. The function should return\n  a string, with each character representing a binary number. Each character in the string will\n  be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary10(15)   # returns \"db1111db\"\n  decl", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([0, 1])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = 0;\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false;\n  }\n  return true;\n};\n\n/*You are given a string s.\n  Your task is to check if its length is at least 3 and every 3 consecutive letters are distinct\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesDiff = gradesSum - gradesAvg;\n  const gradesDiffArray = gradesDiff.map(grade => grade / 10);\n  const gradesDiffSum = gradesDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffAvg = gradesDiffSum / gradesDiffArray.length;\n  const gradesDiffDiff = gradesDiffSum - gradesDiffAvg;\n  const gradesDiffDiffArray = gradesDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffSum = gradesDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffAvg = gradesDiffDiffSum / gradesDiffDiffArray.length;\n  const gradesDiffDiffDiff = gradesDiffDiffSum - gradesDiffDiffAvg;\n  const gradesDiffDiffDiffArray = gradesDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffSum = gradesDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffAvg = gradesDiffDiffDiffSum / gradesDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiff = gradesDiffDiffDiffSum - gradesDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffArray = gradesDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffDiffDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffDiffDiffDiffDiffAvg;\n  const gradesDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiff.map(grade => grade / 10);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((acc, cur) => acc + cur, 0);\n  const gradesDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiff", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letter = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      letter = false;\n      break;\n    }\n  }\n  return letter;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9 or false otherwise\n  Examples\n  digits('Hello') == true\n  digits('abcdcba') == true\n  digits('kittens') == false\n  digits('orange') == false\n  */\nconst digits = (string) => {\n  let digit = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      digit = false;\n      break;\n    }\n  }\n  return digit;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters A-Z or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      uppercase = false;\n      break;\n    }\n  }\n  return uppercase;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters a-z or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lowercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lowercase = false;\n      break;\n    }\n  }\n  return lowercase;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == true\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let space = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      space = false;\n      break;\n    }\n  }\n  return space;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only punctuation characters or false otherwise\n  Examples\n  punctuation('Hello') == true\n  punctuation('abcdcba') == true\n  punctuation('kittens') == false\n  punctuation('orange') == false\n  */\nconst punctuation = (string) => {\n  let punctuation = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      punctuation = false;\n      break;\n    }\n  }\n  return punctuation;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lettersAndNumbers = false;\n      break;\n    }\n  }\n  return lettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lettersAndNumbers = false;\n      break;\n    }\n  }\n  return lettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lettersAndNumbers = false;\n      break;\n    }\n  }\n  return lettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lettersAndNumbers = false;\n      break;\n    }\n  }\n  return lettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lettersAndNumbers = false;\n      break;\n    }\n  }\n  return lettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let lettersAndNumbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      lettersAndNumbers = false;\n      break;\n    }\n  }\n  return lettersAndNumbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z, A-Z, 0-9, spaces, punctuation or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0;\n  let ones = 0;\n  let twos = 0;\n  let threes = 0;\n  let fours = 0;\n  let fives = 0;\n  let sixes = 0;\n  let sevens = 0;\n  let eights = 0;\n  let nines = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      ones++;\n    } else if (i % 10 === 2) {\n      twos++;\n    } else if (i % 10 === 3) {\n      threes++;\n    } else if (i % 10 === 4) {\n      fours++;\n    } else if (i % 10 === 5) {\n      fives++;\n    } else if (i % 10 === 6) {\n      sixes++;\n    } else if (i % 10 === 7) {\n      sevens++;\n    } else if (i % 10 === 8) {\n      eights++;\n    } else if (i % 10 === 9) {\n      nines++;\n    }\n  }\n\n  if (ones === 1) {\n    count++;\n  } else if (twos === 1) {\n    count++;\n  } else if (threes === 1) {\n    count++;\n  } else if (fours === 1) {\n    count++;\n  } else if (fives === 1) {\n    count++;\n  } else if (sixes === 1) {\n    count++;\n  } else if (sevens === 1) {\n    count++;\n  } else if (eights === 1) {\n    count++;\n  } else if (nines === 1) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst stagtsTwoEnds = (n) => {\n  let count = 0;\n  let ones = 0;\n  let twos = 0;\n  let threes = 0;\n  let fours = 0;\n  let fives = 0;\n  let sixes = 0;\n  let sevens = 0;\n  let eights = 0;\n  let nines = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      ones++;\n    } else if (i % 10 === 2) {\n      twos++;\n    } else if (i % 10 === 3) {\n      threes++;\n    } else if (i % 10 === 4) {\n      fours++;\n    } else if (i % 10 === 5) {\n      fives++;\n    } else if (i % 10 === 6) {\n      sixes++;\n    } else if (i % 10 === 7) {\n      sevens++;\n    } else if (i % 10 === 8) {\n      eights++;\n    } else if (i % 10 === 9) {\n      nines++;\n    }\n  }\n\n  if (ones === 2) {\n    count++;\n  } else if (twos === 2) {\n    count++;\n  } else if (threes === 2) {\n    count++;\n  } else if (fours === 2) {\n    count++;\n  } else if (fives === 2) {\n    count++;\n  } else if (sixes === 2) {\n    count++;\n  } else if (sevens === 2) {\n    count++;\n  } else if (eights === 2) {\n    count++;\n  } else if (nines === 2) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst stagtsThreeEnds = (n) => {\n  let count = 0;\n  let ones = 0;\n  let twos = 0;\n  let threes = 0;\n  let fours = 0;\n  let fives = 0;\n  let sixes = 0;\n  let sevens = 0;\n  let eights = 0;\n  let nines = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      ones++;\n    } else if (i % 10 === 2) {\n      twos++;\n    } else if (i % 10 === 3) {\n      threes++;\n    } else if (i % 10 === 4) {\n      fours++;\n    } else if (i % 10 === 5) {\n      fives++;\n    } else if (i % 10 === 6) {\n      sixes++;\n    } else if (i % 10 === 7) {\n      sevens++;\n    } else if (i % 10 === 8) {\n      eights++;\n    } else if (i % 10 === 9) {\n      nines++;\n    }\n  }\n\n  if (ones === 3) {\n    count++;\n  } else if (twos === 3) {\n    count++;\n  } else if (threes === 3) {\n    count++;\n  } else if (fours === 3) {\n    count++;\n  } else if (fives === 3) {\n    count++;\n  } else if (sixes === 3) {\n    count++;\n  } else if (sevens === 3) {\n    count++;\n  } else if (eights === 3) {\n    count++;\n  } else if (nines === 3) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst stagtsFourEnds = (n) => {\n  let count = 0;\n  let ones = 0;\n  let twos = 0;\n  let threes = 0;\n  let fours = 0;\n  let fives = 0;\n  let sixes = 0;\n  let sevens = 0;\n  let eights = 0;\n  let nines = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      ones++;\n    } else if (i % 10 === 2) {\n      twos++;\n    } else if (i % 10 === 3) {\n      threes++;\n    } else if (i % 10 === 4) {\n      fours++;\n    } else if (i % 10 === 5) {\n      fives++;\n    } else if (i % 10 === 6) {\n      sixes++;\n    } else if (i % 10 === 7) {\n      sevens++;\n    } else if (i % 10 === 8) {\n      eights++;\n    } else if (i % 10 === 9) {\n      nines++;\n    }\n  }\n\n  if (ones === 4) {\n    count++;\n  } else if (twos === 4) {\n    count++;\n  } else if (threes === 4) {\n    count++;\n  } else if (fours === 4) {\n    count++;\n  } else if (fives === 4) {\n    count++;\n  } else if (sixes === 4) {\n    count++;\n  } else if (sevens === 4) {\n    count++;\n  } else if (eights === 4) {\n    count++;\n  } else if (nines === 4) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst stagtsFiveEnds = (n) => {\n  let count = 0;\n  let ones = 0;\n  let twos = 0;\n  let threes = 0;\n  let fours = 0;\n  let fives = 0;\n  let sixes = 0;\n  let sevens = 0;\n  let eights = 0;\n  let nines = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      ones++;\n    } else if (i % 10 === 2) {\n      twos++;\n    } else if (i % 10 === 3) {\n      threes++;\n    } else if (i % 10 === 4) {\n      fours++;\n    } else if (i % 10 === 5) {\n      fives++;\n    } else if (i % 10 === 6) {\n      sixes++;\n    } else if (i % 10 === 7) {\n      sevens++;\n    } else if (i % 10 === 8) {\n      eights++;\n    } else if (i % 10 === 9) {\n      nines++;\n    }\n  }\n\n  if (ones === 5) {\n    count++;\n  } else if (twos === 5) {\n    count++;\n  } else if (threes === 5) {\n    count++;\n  } else if (fours === 5) {\n    count++;\n  } else if (fives === 5) {\n    count++;\n  } else if (sixes === 5) {\n    count++;\n  } else if (sevens === 5) {\n    count++;\n  } else if (eights === 5) {\n    count++;\n  } else if (nines === 5) {\n    count++;\n  }\n\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst stagtsSixEnds = (n) => {\n  let count = 0;\n  let ones = 0;\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge2 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge3 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge4 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge5 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge6 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge7 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge8 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge9 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge10 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge11 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge12 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge13 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge14 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge15 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge16 = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge17 = (N) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeOdd = (lst) => {\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(lst[i])\n    }\n  }\n  return odd\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are equal to some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6]\n  */\nconst removeEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 4) ==> [2, 6, 7]\n  */\nconst removeLessThan = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6, 7]\n  */\nconst removeGreaterThan = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are divisible by some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeDivideBy = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are not divisible by some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeNotDivideBy = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val!== 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than or equal to some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 4) ==> [2, 6, 7]\n  */\nconst removeLessThanOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than or equal to some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6, 7]\n  */\nconst removeGreaterThanOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are divisible by some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeDivideByOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are not divisible by some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeNotDivideByOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val!== 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 4) ==> [2, 6, 7]\n  */\nconst removeLessThanOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6, 7]\n  */\nconst removeGreaterThanOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are divisible by some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeDivideByOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val === 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are not divisible by some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeNotDivideByOrEqual = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val!== 0) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value val..\n\n\n  Examples:\n      remove([4, 2, 6, 7], 4) ==> [2, 6, 7]\n  */\nconst removeLessThan = (lst, val) => {\n  let even = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < val) {\n      even.push(lst[i])\n    }\n  }\n  return even\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value val..\n\n\n  Examples:\n      remove([4, 2, 6, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'olleh'\n  antlShuffle('Hello World!!!') returns '!dlroW olleH'\n  */\nconst antlShuffleDesc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().reverse().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAsc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleDesc('Hi') returns 'Hi'\n  antlShuffleDesc('hello') returns 'olleh'\n  antlShuffleDesc('Hello World!!!') returns '!dlroW olleH'\n  */\nconst antlShuffleDescAsc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().reverse().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleAsc('Hi') returns 'Hi'\n  antlShuffleAsc('hello') returns 'ehllo'\n  antlShuffleAsc('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAscDesc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleDescAsc('Hi') returns 'Hi'\n  antlShuffleDescAsc('hello') returns 'olleh'\n  antlShuffleDescAsc('Hello World!!!') returns '!dlroW olleH'\n  */\nconst antlShuffleDescAscDesc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().reverse().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleAscDesc('Hi') returns 'Hi'\n  antlShuffleAscDesc('hello') returns 'ehllo'\n  antlShuffleAscDesc('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffleAscDescAsc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffleDescAscDesc('Hi') returns 'Hi'\n  antlShuffleDescAscDesc('hello') returns 'olleh'\n  antlShuffleDescAscDesc('Hello World!!!') returns '!dlroW olleH'\n  */\nconst antlShuffleDescAscDescAsc = (s) => {\n  let newString = '';\n  let wordArr = s.split(' ');\n  for (let i = 0; i < wordArr.length; i++) {\n    newString += wordArr[i].split('').sort().reverse().join('');\n    if (i < wordArr.length - 1) {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedRows[i];\n    const sortedColumnIndex = sortedColumns.findIndex(column => column[0] === i);\n    const sortedColumn = sortedColumns[sortedColumnIndex];\n    \n    for (let j = 0; j < columns; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedRows[i];\n    const sortedColumnIndex = sortedColumns.findIndex(column => column[0] === i);\n    const sortedColumn = sortedColumns[sortedColumnIndex];\n    \n    for (let j = 0; j < columns; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedRows[i];\n    const sortedColumnIndex = sortedColumns.findIndex(column => column[0] === i);\n    const sortedColumn = sortedColumns[sortedColumnIndex];\n    \n    for (let j = 0; j < columns; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedRows[i];\n    const sortedColumnIndex = sortedColumns.findIndex(column => column[0] === i);\n    const sortedColumn = sortedColumns[sortedColumnIndex];\n    \n    for (let j = 0; j < columns; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const result = [];\n  const rows = lst.length;\n  const columns = lst[0].length;\n  const sortedRows = sortRows(lst);\n  const sortedColumns = sortColumns(sortedRows);\n  \n  for (let i = 0; i < rows; i++) {\n    const row = sortedRows[i];\n    const sortedColumnIndex = sortedColumns.findIndex(column => column[0] === i);\n    const sortedColumn = sortedColumns[sortedColumnIndex];\n    \n    for (let j = 0; j < columns; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in asc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const sumOfLastIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n\n  if (isOdd) {\n    newArray.sort((a, b) => a - b);\n  } else {\n    newArray.sort((a, b) => b - a);\n  }\n\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArrayReverse([]) => []\n  * sorhArrayReverse([5]) => [5]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArrayReverse = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const sumOfLastIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArrayReverse([]) => []\n  * sorhArrayReverse([5]) => [5]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArrayReverse = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const sumOfLastIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArrayReverse([]) => []\n  * sorhArrayReverse([5]) => [5]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArrayReverse = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const sumOfLastIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArrayReverse([]) => []\n  * sorhArrayReverse([5]) => [5]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArrayReverse = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const sumOfLastIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArrayReverse([]) => []\n  * sorhArrayReverse([5]) => [5]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sorhArrayReverse([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArrayReverse = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const sumOfLastIndex = newArray.reduce((acc, val) => acc + val, 0);\n  const isOdd = sumOfFirstIndex & 1;\n  const isEven = sumOfLastIndex & 1;\n\n  if (isEven) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArrayReverse([]) => []\n  * sorhArrayReverse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "<|endoftext|>/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    newString += char.charCodeAt(0) - 65;\n  }\n  return newString;\n};\n\n/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  let maxElement = numbers[0];\n  let maxIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxElement) {\n      maxElement = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(0, maxIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolpingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rolpingMin = (numbers) => {\n  let minElement = numbers[0];\n  let minIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minElement) {\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return numbers.slice(0, minIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolpingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6]\n  */\nconst rolpingSum = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolpingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingAvg = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  let avgElement = 0;\n  let avgIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  avgElement = sumElement / numbers.length;\n  for (let i = 1; i < numbers.length; i++) {\n    avgElement += numbers[i];\n    if (avgIndex === -1) {\n      avgIndex = i;\n    }\n  }\n  return numbers.slice(0, avgIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolpingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingMedian = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  let medianElement = 0;\n  let medianIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  medianElement = sumElement / numbers.length;\n  for (let i = 1; i < numbers.length; i++) {\n    medianElement += numbers[i];\n    if (medianIndex === -1) {\n      medianIndex = i;\n    }\n  }\n  if (numbers.length % 2 === 0) {\n    return numbers.slice(0, medianIndex + 1);\n  }\n  if (medianElement === numbers[numbers.length / 2]) {\n    return numbers.slice(0, medianIndex + 1);\n  }\n  if (medianElement > numbers[numbers.length / 2]) {\n    return numbers.slice(0, medianIndex + 1);\n  }\n  return numbers.slice(0, medianIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolpingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rolpingMode = (numbers) => {\n  let modeElement = numbers[0];\n  let modeIndex = -1;\n  let modeCount = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndex) {\n        modeIndex = modeCount;\n      }\n      modeElement = numbers[i];\n      modeCount = 1;\n    }\n  }\n  return numbers.slice(0, modeIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolpingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingVariance = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  let varianceElement = 0;\n  let varianceIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  varianceElement = sumElement / numbers.length;\n  for (let i = 1; i < numbers.length; i++) {\n    varianceElement += numbers[i];\n    if (varianceIndex === -1) {\n      varianceIndex = i;\n    }\n  }\n  return numbers.slice(0, varianceIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolpingStddev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolpingStddev = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  let stdDeviationElement = 0;\n  let stdDeviationIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  stdDeviationElement = Math.sqrt(varianceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    stdDeviationElement += numbers[i];\n    if (stdDeviationIndex === -1) {\n      stdDeviationIndex = i;\n    }\n  }\n  return numbers.slice(0, stdDeviationIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rolpingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rolpingCount = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  let countElement = 0;\n  let countIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  countElement = sumElement;\n  for (let i = 1; i < numbers.length; i++) {\n    countElement += numbers[i];\n    if (countIndex === -1) {\n      countIndex = i;\n    }\n  }\n  return numbers.slice(0, countIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  return numbers.slice(0, sumIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  let sumElement = 0;\n  let sumIndex = -1;\n  let avgElement = 0;\n  let avgIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    if (sumIndex === -1) {\n      sumIndex = i;\n    }\n  }\n  avgElement = sumElement / numbers.length;\n  for (let i = 1; i < numbers.length; i++) {\n    avgElement += numbers[i];\n    if (avgIndex === -1) {\n      avgIndex = i;\n    }\n  }\n  return numbers.slice(0, avgIndex + 1);\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 5\n  nexhLargest([5, 1, 4, 3, 2]) == 5\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 2\n  nexhLargest([5, 1, 4, 3, 2]) == 2\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 5\n  nexhLargest([5, 1, 4, 3, 2]) == 5\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 2\n  nexhLargest([5, 1, 4, 3, 2]) == 2\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 5\n  nexhLargest([5, 1, 4, 3, 2]) == 5\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 2\n  nexhLargest([5, 1, 4, 3, 2]) == 2\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 5\n  nexhLargest([5, 1, 4, 3, 2]) == 5\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 2\n  nexhLargest([5, 1, 4, 3, 2]) == 2\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 5\n  nexhLargest([5, 1, 4, 3, 2]) == 5\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 2\n  nexhLargest([5, 1, 4, 3, 2]) == 2\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 5\n  nexhLargest([5, 1, 4, 3, 2]) == 5\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  return sorted[sorted.length - 2] || null;\n};\n\n/*\n  You are given a list of integers. \n  Write a function nexhLargest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhLargest([1, 2, 3, 4, 5]) == 2\n  nexhLargest([5, 1, 4, 3, 2]) == 2\n  nexhLargest([]) == null\n  nexhLargest([1, 1]) == null\n  */\nconst nexhLargest = (lst) => {\n  const sorted = lst.sort((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x!== y && x!== z && y!== z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allLnt(5, 2, 7) ➞ true\n  allLnt(3, 2, 2) ➞ true\n  allLnt(3, -2, 1) ➞ true\n  allLnt(3.6, -2.2, 2) ➞ true\n  */\nconst allLnt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is integer.\n  Returns false in any other cases.\n  Examples\n  allLntInt(5, 2, 7) ➞ true\n  allLntInt(3, 2, 2) ➞ false\n  allLntInt(3, -2, 1) ➞ true\n  allLntInt(3.6, -2.2, 2) ➞ true\n  */\nconst allLntInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is non-zero.\n  Returns false in any other cases.\n  Examples\n  allNonZero(5, 2, 7) ➞ true\n  allNonZero(3, 2, 2) ➞ false\n  allNonZero(3, -2, 1) ➞ true\n  allNonZero(3.6, -2.2, 2) ➞ true\n  */\nconst allNonZero = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is positive.\n  Returns false in any other cases.\n  Examples\n  allPositive(5, 2, 7) ➞ true\n  allPositive(3, 2, 2) ➞ false\n  allPositive(3, -2, 1) ➞ true\n  allPositive(3.6, -2.2, 2) ➞ true\n  */\nconst allPositive = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is negative.\n  Returns false in any other cases.\n  Examples\n  allNegative(5, 2, 7) ➞ true\n  allNegative(3, 2, 2) ➞ false\n  allNegative(3, -2, 1) ➞ true\n  allNegative(3.6, -2.2, 2) ➞ true\n  */\nconst allNegative = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is zero.\n  Returns false in any other cases.\n  Examples\n  allZero(5, 2, 7) ➞ true\n  allZero(3, 2, 2) ➞ false\n  allZero(3, -2, 1) ➞ true\n  allZero(3.6, -2.2, 2) ➞ true\n  */\nconst allZero = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is non-negative.\n  Returns false in any other cases.\n  Examples\n  allNonNegative(5, 2, 7) ➞ true\n  allNonNegative(3, 2, 2) ➞ false\n  allNonNegative(3, -2, 1) ➞ true\n  allNonNegative(3.6, -2.2, 2) ➞ true\n  */\nconst allNonNegative = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is non-positive.\n  Returns false in any other cases.\n  Examples\n  allNonPositive(5, 2, 7) ➞ true\n  allNonPositive(3, 2, 2) ➞ false\n  allNonPositive(3, -2, 1) ➞ true\n  allNonPositive(3.6, -2.2, 2) ➞ true\n  */\nconst allNonPositive = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is non-zero.\n  Returns false in any other cases.\n  Examples\n  allNonZero(5, 2, 7) ➞ true\n  allNonZero(3, 2, 2) ➞ false\n  allNonZero(3, -2, 1) ➞ true\n  allNonZero(3.6, -2.2, 2) ➞ true\n  */\nconst allNonZero = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  return x === y && x === z\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and at least one number is positive.\n  Returns false in any other cases.\n  Examples\n  allPositive", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    if (vowels.includes(letter)) {\n      newMessage += letter;\n    } else {\n      newMessage += letter.charAt(0).toUpperCase() + letter.slice(1);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst en", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i] % 10;\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return its value.\n\n  Examples:\n  For lst = [2,3,5,7,11] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13,17] the output should be 13\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] the output should be 97\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 7\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 7\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 7\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else if(typeof dict[keys[i]] === \"number\"){\n      if(keys[i]!== keys[i].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else if(typeof dict[keys[i]] === \"number\"){\n      if(keys[i]!== keys[i].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else if(typeof dict[keys[i]] === \"number\"){\n      if(keys[i]!== keys[i].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else if(typeof dict[keys[i]] === \"number\"){\n      if(keys[i]!== keys[i].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else if(typeof dict[keys[i]] === \"number\"){\n      if(keys[i]!== keys[i].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else if(typeof dict[keys[i]] === \"number\"){\n      if(keys[i]!== keys[i].toLowerCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtDownTo(5) => [2,3]\n  coujtDownTo(11) => [2,3,5,7]\n  coujtDownTo(0) => []\n  coujtDownTo(20) => [2,3,5,7,11,13,17,19]\n  coujtDownTo(1) => []\n  coujtDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtDownTo = (n) => {\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        break;\n      }\n    }\n    if (j === i) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the integers that are not\n  prime numbers.\n  for example:\n  coujtNotPrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  coujtNotPrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17,19]\n  coujtNotPrimes([]) => []\n  coujtNotPrimes([0]) => []\n  coujtNotPrimes([1,2]) => []\n  coujtNotPrimes([1,3]) => []\n  coujtNotPrimes([1,4]) => []\n  coujtNotPrimes([1,5]) => []\n  coujtNotPrimes([1,6]) => []\n  coujtNotPrimes([1,7]) => []\n  coujtNotPrimes([1,8]) => []\n  coujtNotPrimes([1,9]) => []\n  coujtNotPrimes([1,10]) => []\n  coujtNotPrimes([1,11]) => []\n  coujtNotPrimes([1,12]) => []\n  coujtNotPrimes([1,13]) => []\n  coujtNotPrimes([1,14]) => []\n  coujtNotPrimes([1,15]) => []\n  coujtNotPrimes([1,16]) => []\n  coujtNotPrimes([1,17]) => []\n  coujtNotPrimes([1,18]) => []\n  coujtNotPrimes([1,19]) => []\n  coujtNotPrimes([1,20]) => []\n  coujtNotPrimes([1,21]) => []\n  coujtNotPrimes([1,22]) => []\n  coujtNotPrimes([1,23]) => []\n  coujtNotPrimes([1,24]) => []\n  coujtNotPrimes([1,25]) => []\n  coujtNotPrimes([1,26]) => []\n  coujtNotPrimes([1,27]) => []\n  coujtNotPrimes([1,28]) => []\n  coujtNotPrimes([1,29]) => []\n  coujtNotPrimes([1,30]) => []\n  coujtNotPrimes([1,31]) => []\n  coujtNotPrimes([1,32]) => []\n  coujtNotPrimes([1,33]) => []\n  coujtNotPrimes([1,34]) => []\n  coujtNotPrimes([1,35]) => []\n  coujtNotPrimes([1,36]) => []\n  coujtNotPrimes([1,37]) => []\n  coujtNotPrimes([1,38]) => []\n  coujtNotPrimes([1,39]) => []\n  coujtNotPrimes([1,40]) => []\n  coujtNotPrimes([1,41]) => []\n  coujtNotPrimes([1,42]) => []\n  coujtNotPrimes([1,43]) => []\n  coujtNotPrimes([1,44]) => []\n  coujtNotPrimes([1,45]) => []\n  coujtNotPrimes([1,46]) => []\n  coujtNotPrimes([1,47]) => []\n  coujtNotPrimes([1,48]) => []\n  coujtNotPrimes([1,49]) => []\n  coujtNotPrimes([1,50]) => []\n  coujtNotPrimes([1,51]) => []\n  coujtNotPrimes([1,52]) => []\n  coujtNotPrimes([1,53]) => []\n  coujtNotPrimes([1,54]) => []\n  coujtNotPrimes([1,55]) => []\n  coujtNotPrimes([1,56]) => []\n  coujtNotPrimes([1,57]) => []\n  coujtNotPrimes([1,58]) => []\n  coujtNotPrimes([1,59]) => []\n  coujtNotPrimes([1,60]) => []\n  coujtNotPrimes([1,61]) => []\n  coujtNotPrimes([1,62]) => []\n  coujtNotPrimes([1,63]) => []\n  coujtNotPrimes([1,64]) => []\n  coujtNotPrimes([1,65]) => []\n  coujtNotPrimes([1,66]) => []\n  coujtNotPrimes([1,67]) => []\n  coujtNotPrimes([1,68]) => []\n  coujtNotPrimes([1,69]) => []\n  coujtNotPrimes([1,70]) => []\n  coujtNotPrimes([1,71]) => []\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply2 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply3 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply4 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply5 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply6 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply7 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply8 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply9 = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp = 0;\n  while (b > 0) {\n    temp = (b % 10) * a + carry;\n    carry = temp / 10;\n    sum = sum + temp % 10;\n    b = Math.floor(temp / 10);\n  }\n  if (carry > 0) {\n    sum = sum + carry;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply10 = (a, b) => {\n  let sum = 0;\n  let carry", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  coujtVowel('aBCdEf') returns 2\n  coujtVowel('abcdefg') returns 0\n  coujtVowel('dBBE') returns 0\n  */\nconst coujtVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  coujtCons('aBCdEf') returns 2\n  coujtCons('abcdefg') returns 0\n  coujtCons('dBBE') returns 0\n  */\nconst coujtCons = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y' || s.charAt(i) === 'A' || s.charAt(i) === 'E' || s.charAt(i) === 'I' || s.charAt(i) === 'O' || s.charAt(i) === 'U' || s.charAt(i) === 'Y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  coujtConsOdd('aBCdEf') returns 1\n  coujtConsOdd('abcdefg') returns 0\n  coujtConsOdd('dBBE') returns 0\n  */\nconst coujtConsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y' || s.charAt(i) === 'A' || s.charAt(i) === 'E' || s.charAt(i) === 'I' || s.charAt(i) === 'O' || s.charAt(i) === 'U' || s.charAt(i) === 'Y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  coujtVowelOdd('aBCdEf') returns 2\n  coujtVowelOdd('abcdefg') returns 0\n  coujtVowelOdd('dBBE') returns 0\n  */\nconst coujtVowelOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  coujtConsOdd('aBCdEf') returns 1\n  coujtConsOdd('abcdefg') returns 0\n  coujtConsOdd('dBBE') returns 0\n  */\nconst coujtConsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2!== 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y' || s.charAt(i) === 'A' || s.charAt(i) === 'E' || s.charAt(i) === 'I' || s.charAt(i) === 'O' || s.charAt(i) === 'U' || s.charAt(i) === 'Y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  coujtVowelEven('aBCdEf') returns 2\n  coujtVowelEven('abcdefg') returns 0\n  coujtVowelEven('dBBE') returns 0\n  */\nconst coujtVowelEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  coujtConsEven('aBCdEf') returns 2\n  coujtConsEven('abcdefg') returns 0\n  coujtConsEven('dBBE') returns 0\n  */\nconst coujtConsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u' || s.charAt(i) === 'y' || s.charAt(i) === 'A' || s.charAt(i) === 'E' || s.charAt(i) === 'I' || s.charAt(i) === 'O' || s.charAt(i) === 'U' || s.charAt(i) === 'Y') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpperOdd('aBCdEf') returns 1\n  coujtUpperOdd('abcdefg') returns 0\n  coujtUpperOdd('dBBE') returns 0\n  */\nconst coujtUpperOdd = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestDecimal(\"10\")\n  10\n  >>> clodestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestDecimal(\"14.5\") should\n  return 15 and clodestDecimal(\"-14.5\") should return -15.\n  */\nconst clodestDecimal = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest float to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestFloat(\"10\")\n  10\n  >>> clodestFloat(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestFloat(\"14.5\") should\n  return 15 and clodestFloat(\"-14.5\") should return -15.\n  */\nconst clodestFloat = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestWhole(\"10\")\n  10\n  >>> clodestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestWhole(\"14.5\") should\n  return 15 and clodestWhole(\"-14.5\") should return -15.\n  */\nconst clodestWhole = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestWhole(\"10\")\n  10\n  >>> clodestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestWhole(\"14.5\") should\n  return 15 and clodestWhole(\"-14.5\") should return -15.\n  */\nconst clodestWhole = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestWhole(\"10\")\n  10\n  >>> clodestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestWhole(\"14.5\") should\n  return 15 and clodestWhole(\"-14.5\") should return -15.\n  */\nconst clodestWhole = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestWhole(\"10\")\n  10\n  >>> clodestWhole(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestWhole(\"14.5\") should\n  return 15 and clodestWhole(\"-14.5\") should return -15.\n  */\nconst clodestWhole = (value) => {\n  const num = parseFloat(value);\n  const isNegative = num < 0;\n  const absNum = Math.abs(num);\n  const isEquidistant = absNum % 1 === 0;\n  const isCloser = absNum < 1;\n  return isEquidistant && isCloser? absNum - 1 : isNegative? -absNum : absNum;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestWhole(\"10\")\n  10\n  >>> clodestWhole(\"", "passed": 0, "run_status": 1}
