{"task_id": "JavaScript/0", "prompt": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    const diff2 = numbers[i] - numbers[i - 1]\n    if (Math.abs(diff - diff2) > threshold) return false\n  }\n  return true\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    const diff2 = numbers[i] - numbers[i - 1]\n    if (Math.abs(diff - diff2) > threshold) return false\n  }\n  return true\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    const diff2 = numbers[i] - numbers[i - 1]\n    if (Math.abs(diff - diff2) > threshold) return false\n  }\n  return true\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    const diff2 = numbers[i] - numbers[i - 1]\n    if (Math.abs(diff - diff2) > threshold) return false\n  }\n  return true\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    const diff2 = numbers[i] - numbers[i - 1]\n    if (Math.abs(diff - diff2) > threshold) return false\n  }\n  return true\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers[1]\n  for (let i = 2; i < len; i++) {\n    const diff2 = numbers[i] - numbers[i - 1]\n    if (Math.abs(diff - diff2) > threshold) return false\n  }\n  return true\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers[0] - numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_len = paren_groups.length;\n  const paren_groups_len_minus_1 = paren_groups_len - 1;\n  const paren_groups_len_minus_2 = paren_groups_len - 2;\n  const paren_groups_len_minus_3 = paren_groups_len - 3;\n  const paren_groups_len_minus_4 = paren_groups_len - 4;\n  const paren_groups_len_minus_5 = paren_groups_len - 5;\n  const paren_groups_len_minus_6 = paren_groups_len - 6;\n  const paren_groups_len_minus_7 = paren_groups_len - 7;\n  const paren_groups_len_minus_8 = paren_groups_len - 8;\n  const paren_groups_len_minus_9 = paren_groups_len - 9;\n  const paren_groups_len_minus_10 = paren_groups_len - 10;\n  const paren_groups_len_minus_11 = paren_groups_len - 11;\n  const paren_groups_len_minus_12 = paren_groups_len - 12;\n  const paren_groups_len_minus_13 = paren_groups_len - 13;\n  const paren_groups_len_minus_14 = paren_groups_len - 14;\n  const paren_groups_len_minus_15 = paren_groups_len - 15;\n  const paren_groups_len_minus_16 = paren_groups_len - 16;\n  const paren_groups_len_minus_17 = paren_groups_len - 17;\n  const paren_groups_len_minus_18 = paren_groups_len - 18;\n  const paren_groups_len_minus_19 = paren_groups_len - 19;\n  const paren_groups_len_minus_20 = paren_groups_len - 20;\n  const paren_groups_len_minus_21 = paren_groups_len - 21;\n  const paren_groups_len_minus_22 = paren_groups_len - 22;\n  const paren_groups_len_minus_23 = paren_groups_len - 23;\n  const paren_groups_len_minus_24 = paren_groups_len - 24;\n  const paren_groups_len_minus_25 = paren_groups_len - 25;\n  const paren_groups_len_minus_26 = paren_groups_len - 26;\n  const paren_groups_len_minus_27 = paren_groups_len - 27;\n  const paren_groups_len_minus_28 = paren_groups_len - 28;\n  const paren_groups_len_minus_29 = paren_groups_len - 29;\n  const paren_groups_len_minus_30 = paren_groups_len - 30;\n  const paren_groups_len_minus_31 = paren_groups_len - 31;\n  const paren_groups_len_minus_32 = paren_groups_len - 32;\n  const paren_groups_len_minus_33 = paren_groups_len - 33;\n  const paren_groups_len_minus_34 = paren_groups_len - 34;\n  const paren_groups_len_minus_35 = paren_groups_len - 35;\n  const paren_groups_len_minus_36 = paren_groups_len - 36;\n  const paren_groups_len_minus_37 = paren_groups_len - 37;\n  const paren_groups_len_minus_38 = paren_groups_len - 38;\n  const paren_groups_len_minus_39 = paren_groups_len - 39;\n  const paren_groups_len_minus_40 = paren_groups_len - 40;\n  const paren_groups_len_minus_41 = paren_groups_len - 41;\n  const paren_groups_len_minus_42 = paren_groups_len - 42;\n  const paren_groups_len_minus_43 = paren_groups_len - 43;\n  const paren_groups_len_minus_44 = paren_groups_len - 44;\n  const paren_groups_len_minus_45 = paren_groups_len - 45;\n  const paren_groups_len_minus_46 = paren_groups_len - 46;\n  const paren_groups_len_minus_47 = paren_groups_len - 47;\n  const paren_groups_len_minus_48 = paren_groups_len - 48;\n  const paren_groups_len_minus_49 = paren_groups_len - 49;\n  const paren_groups_len_minus_50 = paren_groups_len - 50;\n  const paren_groups_len_minus_51 = paren_groups_len - 51;\n  const paren_groups_len_minus_52 = paren_groups_len - 52;\n  const paren_groups_len_minus_53 = paren_groups_len - 53;\n  const paren_groups_len_minus_54 = paren_groups_len - 54;\n  const paren_groups_len_minus_55 = paren_groups_len - 55;\n  const paren_groups_len_minus_56 = paren_groups_len - 56;\n  const paren_groups_len_minus_57 = paren_groups_len - 57;\n  const paren_groups_len_minus_58 = paren_groups_len - 58;\n  const paren_groups_len_minus_59 = paren_groups_len - 59;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!== string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.substring(0, i + 1);\n      postfix = string.substring(j, string.length);\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!== string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.substring(0, i + 1);\n      postfix = string.substring(j, string.length);\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!== string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.substring(0, i + 1);\n      postfix = string.substring(j, string.length);\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    while (i < j && string[i]!== string[j]) {\n      i++;\n      j--;\n    }\n    if (i < j) {\n      prefix = string.substring(0, i + 1);\n      postfix = string.substring(j, string.length);\n      break;\n    }\n  }\n  return prefix + string.split('').reverse().join('') + postfix;\n}\n\n/* Test if a string is a p alindrome */\nconst isPalindrome = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find the longest postfix of a supplied string that is a palindrome.\n Algorithm idea is simple:\n  - Find the longest postfix of a supplied string that is a palindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s .\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []\n    for (let j = 1; j <= i; j++) {\n      level.push(j)\n    }\n    pile.push(level)\n  }\n  return pile\n}\n\nconst makeAPile15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    const level = []", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let result = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid % 2 === 0) {\n      result = mid;\n      break;\n    }\n    i = mid + 1;\n  }\n  return result;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digits = [];\n    for (let j = 0; j < num; j++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    const sorted = digits.sort();\n    lis.push(sorted);\n  }\n  return lis;\n};\n\nconst uniqueDigits = (x) => {\n  const lis = [];\n  for (let i = 0; i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const sortedArrLengthDiff = sortedArrLength - reversedArrLength\n  const reversedArrLengthDiff = reversedArrLength - sortedArrLength\n  const sortedArrLengthDiffStr = `${sortedArrLengthDiff}`\n  const reversedArrLengthDiffStr = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverse = `${reversedArrLengthDiff}`\n  const reversedArrLengthDiffStrReverse = `${sortedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverse = `${sortedArrLengthDiff}`\n  const reversedArrLengthDiffStrReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseReverseReverse = `${reversedArrLengthDiff}`\n  const sortedArrLengthDiffStrReverseReverseReverseR", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst g = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst h = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst i = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst j = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst k = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst l = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst m = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst n = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst o = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst p = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst q = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst r = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst s = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst t = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst u = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst v = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst w = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst x = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst y = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst z = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst aa = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1\n    }\n    return n * factorial(n - 1)\n  }\n  return factorial(n)\n}\n\nconst ab = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (n) => {\n  let str = n.toString();\n  let reversed = str.split('').reverse().join('');\n  return str === reversed;\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0 .\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e .g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      const firstDig = num.toString().charAt(0);\n      const secondDig = num.toString().charAt(1);\n      const thirdDig = num.toString().charAt(2);\n      if (firstDig === '1' && secondDig === '1' && thirdDig === '1') {\n        count++;\n      }\n    } else {\n      const sumDigits = num.toString().split('').reduce((a, b) => a + b, 0);\n      if (sumDigits > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 1, -2]));\nconsole.log(countNums([1, 2, 3]));\nconsole.log(countNums([-1, -2, -3]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have anarra y 'arr '  of Nintegersarr[1], arr[2], ...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We have anarra y 'arr' of Nintegersarr[1], arr[2],...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  if (N === 0) return true;\n  const sorted = arr.slice().sort((a, b) => a - b);\n  let i = 0;\n  while (i < N) {\n    if (arr[i]!== sorted[i]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst moveOneBall =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this pro blem , youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this pro blem, youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  if (len!== len2) {\n    return \"NO\";\n  }\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i] + lst2[i]);\n  }\n  const lst2_copy = lst2.slice();\n  for (let i = 0; i < len; i++) {\n    if (lst[i] % 2!== 0) {\n      return \"NO\";\n    }\n    lst2_copy.splice(i, 1);\n  }\n  if (lst2_copy.length === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nexports.exchange = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') ==", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  let flag = false;\n  while (i >= 0) {\n    if (result[i] === c) {\n      result.splice(i, 1);\n      j++;\n    }\n    i--;\n  }\n  if (result.join('') === s) {\n    flag = true;\n  }\n  return [result.join(''), flag];\n};\n\nconst isPalindrome = (s) => {\n  let [result, flag] = reverseDelete(s, s);\n  return flag;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t .\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  };\n  return lst.map(count);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < minSum) {\n        minSum = sum;\n      }\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity .  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity.  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(m);\n  for (let i = 0; i < m; i++) {\n    buckets[i] = new Array(n);\n    for (let j = 0; j < n; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[j][i] = capacity;\n        count++;\n      }\n    }\n  }\n  let max = 0;\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (buckets[i][j] > max) {\n        max = buckets[i][j];\n      }\n    }\n  }\n  return count - max;\n};\n\nconst main = () => {\n  const grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const arrLength = arr.length;\n  const sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  const wordEnd = wordLength - 1\n  let closestVowel = ''\n  let closestVowelDistance = Infinity\n  for (let i = wordLength - 1; i >= 0; i--) {\n    const vowel = word[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(wordEnd - i)\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel\n        closestVowelDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"F\"\n  getClosestVowel(\"quick\") ==> \"k\"\n  getClosestVowel(\"ab\") ==> \"a\"\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only .\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only.\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach((string) => {\n    if (string.length > longest.length) {\n      longest = string;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '10'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '11'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '12'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '13'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '14'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '15'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '16'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '17'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '18'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '19'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '20'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '21'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '22'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '23'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '24'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '25'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '26'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '27'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '28'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '29'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '30'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  '31'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  '32'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  '33'\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  '34'\n  >>> longest([1, 2, 3, 4, 5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((acc, num) => Math.max(acc, num), -Infinity)\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const result = sorted.slice(0, k)\n  return result\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz2 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz3 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz4 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz5 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz6 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz7 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz8 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz9 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz10 = (n) => {\n  const collatz = []\n  const odd = []\n  collatz.push(1)\n  odd.push(1)\n  while (collatz.length < n) {\n    const t = collatz.pop()\n    if (t % 2 === 0) {\n      collatz.push(t / 2)\n    } else {\n      collatz.push(3 * t + 1)\n    }\n    odd.push(t)\n  }\n  return odd\n}\n\nconst getOddCollatz11 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString();\n  const dateArray = dateString.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const daysInMonth = getDaysInMonth(month, year);\n  const daysInYear = getDaysInYear(year);\n  const daysInDate = day + daysInMonth;\n  const daysInDateRange = daysInYear + daysInMonth;\n  return (daysInDate <= daysInDateRange);\n};\n\nconst getDaysInMonth = (month, year) => {\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      return 31;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return 30;\n    default:\n      return 0;\n  }\n};\n\nconst getDaysInYear = (year) => {\n  if (year % 4 === 0) {\n    return 366;\n  } else {\n    return 365;\n  }\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1, ... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsArray = [];\n  for (let i = 0; i < wordsLength; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordsArray.push(word.toLowerCase());\n    }\n  }\n  return wordsArray;\n};\n\nconst isValidWord = (word) => {\n  const wordLength = word.length;\n  const wordArray = splitWords(word);\n  const wordArrayLength = wordArray.length;\n  const wordArrayLengthOdd = wordArrayLength % 2;\n  const wordArrayLengthEven = wordArrayLength - wordArrayLengthOdd;\n  const wordArrayLengthEvenOdd = wordArrayLengthEven % 2;\n  const wordArrayLengthEvenOddOdd = wordArrayLengthEvenOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOdd = wordArrayLengthEvenOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOdd = wordArrayLengthEvenOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthOdd;\n  const wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = wordArrayLengthEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd + wordArrayLengthO", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    if (lst[i] < lst[j]) {\n      i++\n      j--\n    } else {\n      i++\n      j--\n    }\n  }\n  return true\n}\n\nexport default isSorted\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  const isPrime = (n) => {\n    const divisor = 2\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (length === 1 && isPrime(length)) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\n// console.log(intersection((1, 2), (2, 3)))\n// console.log(intersection((-1, 1), (0, 4)))\n// console.log(intersection((-3, -1), (-5, 5)))\n\n// console.log(intersection((1, 2), (2, 3)))\n// console.log(intersection((-1, 1), (0, 4)))\n// console.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i]\n  }\n  return prod\n}\n\n/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k ,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  for (let i = 1; i < n; i++) {\n    dp[i] = grid[i][0]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      if (dp[i - 1] < dp[i] && dp[i] < dp[i + 1]) {\n        dp[i] = Math.min(dp[i - 1], dp[i], dp[i + 1])\n      }\n    }\n  }\n  let res = []\n  for (let i = 0; i < n; i++) {\n    res.push(dp[i])\n  }\n  res.sort()\n  return res.slice(0, k)\n}\n\nconst test = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  for (let i = 1; i < n; i++) {\n    dp[i] = grid[i][0]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      if (dp[i - 1] < dp[i] && dp[i] < dp[i + 1]) {\n        dp[i] = Math.min(dp[i - 1], dp[i], dp[i + 1])\n      }\n    }\n  }\n  let res = []\n  for (let i = 0; i < n; i++) {\n    res.push(dp[i])\n  }\n  res.sort()\n  return res.slice(0, k)\n}\n\nconst test2 = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  for (let i = 1; i < n; i++) {\n    dp[i] = grid[i][0]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      if (dp[i - 1] < dp[i] && dp[i] < dp[i + 1]) {\n        dp[i] = Math.min(dp[i - 1], dp[i], dp[i + 1])\n      }\n    }\n  }\n  let res = []\n  for (let i = 0; i < n; i++) {\n    res.push(dp[i])\n  }\n  res.sort()\n  return res.slice(0, k)\n}\n\nconst test3 = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  for (let i = 1; i < n; i++) {\n    dp[i] = grid[i][0]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      if (dp[i - 1] < dp[i] && dp[i] < dp[i + 1]) {\n        dp[i] = Math.min(dp[i - 1], dp[i], dp[i + 1])\n      }\n    }\n  }\n  let res = []\n  for (let i = 0; i < n; i++) {\n    res.push(dp[i])\n  }\n  res.sort()\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a % b, b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  25\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the sum of two integers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  30\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the difference of two integers a and b\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  10\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/* Return the product of two integers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  225\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return the quotient of two integers a and b\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of two integers a and b\n  >>> remainder(3, 5)\n  2\n  >>> remainder(25, 15)\n  10\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n/* Return the absolute value of an integer\n  >>> abs(3)\n  3\n  >>> abs(25)\n  25\n  */\nconst abs = (a) => {\n  return a < 0? -a : a;\n};\n\n/* Return the square root of an integer\n  >>> sqrt(25)\n  5\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = (a) => {\n  return Math.sqrt(a);\n};\n\n/* Return the cube root of an integer\n  >>> cubeRoot(25)\n  5\n  >>> cubeRoot(3)\n  1.7320508075688772\n  */\nconst cubeRoot = (a) => {\n  return Math.pow(a, 1 / 3);\n};\n\n/* Return the factorial of an integer\n  >>> factorial(25)\n  16807\n  >>> factorial(3)\n  6\n  */\nconst factorial = (a) => {\n  return a <= 1? 1 : a * factorial(a - 1);\n};\n\n/* Return the fibonacci number of an integer\n  >>> fibonacci(25)\n  16807\n  >>> fibonacci(3)\n  6\n  */\nconst fibonacci = (a) => {\n  if (a <= 1) return 1;\n  return fibonacci(a - 1) + fibonacci(a - 2);\n};\n\n/* Return the harmonic number of an integer\n  >>> harmonic(25)\n  16807\n  >>> harmonic(3)\n  6\n  */\nconst harmonic = (a) => {\n  return 1 + Math.log(a) / Math.log(2);\n};\n\n/* Return the hyperbolic cosine of an integer\n  >>> hyperbolicCosine(25)\n  0.923885610786934\n  >>> hyperbolicCosine(3)\n  0.923885610786934\n  */\nconst hyperbolicCosine = (a) => {\n  return Math.cos(Math.acos(a));\n};\n\n/* Return the hyperbolic sine of an integer\n  >>> hyperbolicSine(25)\n  0.923885610786934\n  >>> hyperbolicSine(3)\n  0.923885610786934\n  */\nconst hyperbolicSine = (a) => {\n  return Math.sin(Math.asin(a));\n};\n\n/* Return the hyperbolic tangent of an integer\n  >>> hyperbolicTangent(25)\n  0.923885610786934\n  >>> hyperbolicTangent(3)\n  0.923885610786934\n  */\nconst hyperbolicTangent = (a) => {\n  return Math.tan(Math.atan(a));\n};\n\n/* Return the hyperbolic cotangent of an integer\n  >>> hyperbolicCotangent(25)\n  0.923885610786934\n  >>> hyperbolicCotangent(3)\n  0.923885610786934\n  */\nconst hyperbolicCotangent = (a) => {\n  return Math.cbrt(1 / a);\n};\n\n/* Return the hyperbolic secant of an integer\n  >>> hyperbolicSecant(25)\n  0.923885610786934\n  >>> hyperbolicSecant(3)\n  0.923885610786934\n  */\nconst hyperbolicSecant = (a) => {\n  return 1 / Math.sqrt(1 - a * a);\n};\n\n/* Return the hyperbolic cosecant of an integer\n  >>> hyperbolicCosecant(25)\n  0.923885610786934\n  >>> hyperbolicCosecant(3)\n  0.923885610786934\n  */\nconst hyperbolicCosecant = (a) => {\n  return 1 / Math.sqrt(a * a - 1);\n};\n\n/* Return the hyperbolic cosecant of an integer\n  >>> hyperbolicCosecant(25)\n  0.923885610786934\n  >>> hyperbolicCosecant(3)\n  0.923885610", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return [...new Array(n + 1).fill(1),...new Array(n + 1).fill(c)];\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let i = 1;\n  let result = 0;\n  while (i <= n) {\n    result += n % 2;\n    n = Math.floor(n / 2);\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast2 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow2 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast3 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow3 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast4 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow4 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast5 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow5 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast6 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow6 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast7 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow7 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast8 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow8 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast9 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow9 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast10 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeSlow10 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast11 = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (digits(i) === 0) {\n      return false;\n    }\n    i++;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[ [ [[]'));\nconsole.log(isNested(' [[]][['));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter &&!/[a-zA-Z]/.test(txt.slice(-2));\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = /[a-zA", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange8 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange9 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange10 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange11 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange12 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange13 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange14 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange15 = (arr) => {\n  let max = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t .\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t.\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null)\n  }\n  const lstLength = lst.length\n  const lstMax = lst[lstLength - 1]\n  const lstMin = lst[0]\n  if (lstMax < 0) {\n    return largestSmallestIntegers([...lst.slice(0, lstLength - 1), -lstMax])\n  }\n  if (lstMin > 0) {\n    return largestSmallestIntegers([...lst.slice(0, lstLength - 1), lstMin])\n  }\n  return largestSmallestIntegers([...lst.slice(0, lstLength - 1), lstMin, lstMax])\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be . or ,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be. or,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n  if (a === b) return null\n  if (a < b) return a\n  return b\n}\n\nconst compareOne = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst compareO = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reOne = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwo = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reThree = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reFour = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reFive = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reSix = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reSeven = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reEight = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reNine = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reEleven = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwelve = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reThirteen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reFourteen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reFifteen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reSixteen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reSeventeen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reEighteen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reNineteen = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwenty = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyOne = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyTwo = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyThree = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyFour = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyFive = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentySix = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentySeven = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyEight = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reTwentyNine = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reThirty = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reThirtyOne = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b) return a\n  return b\n}\n\nconst reThirtyTwo = (a, b) => {\n  if (a === b) return \"\"\n  if (a < b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEven(n - 1)\n}\n\nexport default isEqualToSumEven\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! * ...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! *...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial20(n - 1);\n};\n\n/*The function will", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscoresAndSpacesAndUnderscores = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getUnderscoresAndSpacesAndUnders", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a fu ncti on whi c h take s a strin g representing a file 's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on whi c h take s a strin g representing a file's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex13 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex14 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex15 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex16 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex17 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex18 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex19 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex20 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex21 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex22 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex23 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex24 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)$/;\n  const regex25 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.(txt|exe|dll)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num % 3 === 0) {\n      sum += num * num\n    }\n    if (num % 4 === 0) {\n      sum += num * num * num\n    }\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10]))\nconsole.log(sumSquares([-1,-5,2,-1,-5]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(\" \")\n    let newWords = []\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i]\n        let isPrime = true\n        for (let j = 2; j < word.length; j++) {\n            if (word.charAt(j)!== word.charAt(j - 1)) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            newWords.push(word)\n        }\n    }\n    return newWords.join(\" \")\n}\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(\" \")\n    let newWords = []\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i]\n        let isPrime = true\n        for (let j = 2; j < word.length; j++) {\n            if (word.charAt(j)!== word.charAt(j - 1)) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            newWords.push(word)\n        }\n    }\n    return newWords.join(\" \")\n}\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(\" \")\n    let newWords = []\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i]\n        let isPrime = true\n        for (let j = 2; j < word.length; j++) {\n            if (word.charAt(j)!== word.charAt(j - 1)) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            newWords.push(word)\n        }\n    }\n    return newWords.join(\" \")\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n  const [numerator, denominator] = parseInt(x).toString().split('/');\n  const [numerator, denominator] = parseInt(n).toString().split('/');\n  if (numerator === '0') {\n    return false;\n  }\n  if (numerator === '1') {\n    return true;\n  }\n  if (numerator === denominator) {\n    return true;\n  }\n  if (numerator === '-1') {\n    return false;\n  }\n  if (numerator === '-2') {\n    return true;\n  }\n  if (numerator === '2') {\n    return false;\n  }\n  if (numerator === '3') {\n    return true;\n  }\n  if (numerator === '4') {\n    return false;\n  }\n  if (numerator === '5') {\n    return true;\n  }\n  if (numerator === '6') {\n    return false;\n  }\n  if (numerator === '7') {\n    return true;\n  }\n  if (numerator === '8') {\n    return false;\n  }\n  if (numerator === '9') {\n    return true;\n  }\n  if (numerator === '10') {\n    return false;\n  }\n  if (numerator === '11') {\n    return true;\n  }\n  if (numerator === '12') {\n    return false;\n  }\n  if (numerator === '13') {\n    return true;\n  }\n  if (numerator === '14') {\n    return false;\n  }\n  if (numerator === '15') {\n    return true;\n  }\n  if (numerator === '16') {\n    return false;\n  }\n  if (numerator === '17') {\n    return true;\n  }\n  if (numerator === '18') {\n    return false;\n  }\n  if (numerator === '19') {\n    return true;\n  }\n  if (numerator === '20') {\n    return false;\n  }\n  if (numerator === '21') {\n    return true;\n  }\n  if (numerator === '22') {\n    return false;\n  }\n  if (numerator === '23') {\n    return true;\n  }\n  if (numerator === '24') {\n    return false;\n  }\n  if (numerator === '25') {\n    return true;\n  }\n  if (numerator === '26') {\n    return false;\n  }\n  if (numerator === '27') {\n    return true;\n  }\n  if (numerator === '28') {\n    return false;\n  }\n  if (numerator === '29') {\n    return true;\n  }\n  if (numerator === '30') {\n    return false;\n  }\n  if (numerator === '31') {\n    return true;\n  }\n  if (numerator === '32') {\n    return false;\n  }\n  if (numerator === '33') {\n    return true;\n  }\n  if (numerator === '34') {\n    return false;\n  }\n  if (numerator === '35') {\n    return true;\n  }\n  if (numerator === '36') {\n    return false;\n  }\n  if (numerator === '37') {\n    return true;\n  }\n  if (numerator === '38') {\n    return false;\n  }\n  if (numerator === '39') {\n    return true;\n  }\n  if (numerator === '40') {\n    return false;\n  }\n  if (numerator === '41') {\n    return true;\n  }\n  if (numerator === '42') {\n    return false;\n  }\n  if (numerator === '43') {\n    return true;\n  }\n  if (numerator === '44') {\n    return false;\n  }\n  if (numerator === '45') {\n    return true;\n  }\n  if (numerator === '46') {\n    return false;\n  }\n  if (numerator === '47') {\n    return true;\n  }\n  if (numerator === '48') {\n    return false;\n  }\n  if (numerator === '49') {\n    return true;\n  }\n  if (numerator === '50') {\n    return false;\n  }\n  if (numerator === '51') {\n    return true;\n  }\n  if (numerator === '52') {\n    return false;\n  }\n  if (numerator === '53') {\n    return true;\n  }\n  if (numerator === '54') {\n    return false;\n  }\n  if (numerator === '55') {\n    return true;\n  }\n  if (numerator === '56') {\n    return false;\n  }\n  if (numerator === '57') {\n    return true;\n  }\n  if (numerator === '58') {\n    return false;\n  }\n  if (numerator === '59') {\n    return true;\n  }\n  if (numerator === '60') {\n    return false;\n  }\n  if (numerator === '61", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits .\n  Note: if thereare sever al items w i th similar sum of their digi ts ,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints19 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints20 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst orderByPoints21 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.sort((a, b) => a - b);\n  const odd = arr.filter((n) => n % 2 === 1);\n  const even = arr.filter((n) => n % 2 === 0);\n  const oddLength = odd.length;\n  const evenLength = even.length;\n  const result = oddLength > evenLength? oddLength : evenLength;\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = new Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1 = planet1.toLowerCase();\n  let planet2 = planet2.toLowerCase();\n  let planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  let result = [];\n  let i = 0;\n  while (i < planets.length) {\n    let planet = planets[i];\n    if (planet1 === planet) {\n      result.push(planet2);\n      break;\n    }\n    if (planet2 === planet) {\n      result.push(planet1);\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Mercury\"));\nconsole", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort2 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort3 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort4 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort5 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort6 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort7 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort8 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort9 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort10 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort11 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort12 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort13 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort14 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort15 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort16 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort17 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort18 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort19 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => s.length);\n};\n\nconst list_sort20 = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be >= 0\n  >>> stringRepeat('a', 3.5)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  */\nconst stringRepeat = (c, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be an integer');\n  }\n  if (n < 0) {\n    throw new ValueError('n must be >= 0');\n  }\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += c;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be >= 0\n  >>> stringRepeat('a', 3.5)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  */\nconst stringRepeat = (c, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be an integer');\n  }\n  if (n < 0) {\n    throw new ValueError('n must be >= 0');\n  }\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += c;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be >= 0\n  >>> stringRepeat('a', 3.5)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  */\nconst stringRepeat = (c, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be an integer');\n  }\n  if (n < 0) {\n    throw new ValueError('n must be >= 0');\n  }\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += c;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be >= 0\n  >>> stringRepeat('a', 3.5)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  */\nconst stringRepeat = (c, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be an integer');\n  }\n  if (n < 0) {\n    throw new ValueError('n must be >= 0');\n  }\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += c;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be >= 0\n  >>> stringRepeat('a', 3.5)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  */\nconst stringRepeat = (c, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be an integer');\n  }\n  if (n < 0) {\n    throw new ValueError('n must be >= 0');\n  }\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += c;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be >= 0\n  >>> stringRepeat('a', 3.5)\n  Traceback (most recent call last):\n ...\n  TypeError: n must be an integer\n  */\nconst stringRepeat = (c, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be an integer');\n  }\n  if (n < 0) {\n    throw new ValueError('n must be >= 0');\n  }\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += c;\n  }\n  return s;\n};\n\n/* Return a string of the given length, with the given character repeated n times.\n  >>> stringRepeat('a', 3)\n  'aaa'\n  >>> stringRepeat('a', 0)\n  ''\n  >>> stringRepeat('a', -1)\n  Traceback", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd . Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd. Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match . \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match. \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare9 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare10 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare11 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare12 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i]\n    let guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(guess - score))\n    }\n  }\n  return result\n}\n\nconst compare13 = (game, guess) => {\n  let result = []\n  for", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions . \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions. \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm = ext.toLowerCase().charCodeAt(0);\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(0, -1);\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().charCodeAt(0);\n    const sm =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are giv en 2  words .  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are giv en 2  words.  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n  let a = a.split(\" \")\n  let b = b.split(\" \")\n  let a1 = a[0].split(\"\")\n  let b1 = b[0].split(\"\")\n  let a2 = a[1].split(\"\")\n  let b2 = b[1].split(\"\")\n  let a3 = a[2].split(\"\")\n  let b3 = b[2].split(\"\")\n  let a4 = a[3].split(\"\")\n  let b4 = b[3].split(\"\")\n  let a5 = a[4].split(\"\")\n  let b5 = b[4].split(\"\")\n  let a6 = a[5].split(\"\")\n  let b6 = b[5].split(\"\")\n  let a7 = a[6].split(\"\")\n  let b7 = b[6].split(\"\")\n  let a8 = a[7].split(\"\")\n  let b8 = b[7].split(\"\")\n  let a9 = a[8].split(\"\")\n  let b9 = b[8].split(\"\")\n  let a10 = a[9].split(\"\")\n  let b10 = b[9].split(\"\")\n  let a11 = a[10].split(\"\")\n  let b11 = b[10].split(\"\")\n  let a12 = a[11].split(\"\")\n  let b12 = b[11].split(\"\")\n  let a13 = a[12].split(\"\")\n  let b13 = b[12].split(\"\")\n  let a14 = a[13].split(\"\")\n  let b14 = b[13].split(\"\")\n  let a15 = a[14].split(\"\")\n  let b15 = b[14].split(\"\")\n  let a16 = a[15].split(\"\")\n  let b16 = b[15].split(\"\")\n  let a17 = a[16].split(\"\")\n  let b17 = b[16].split(\"\")\n  let a18 = a[17].split(\"\")\n  let b18 = b[17].split(\"\")\n  let a19 = a[18].split(\"\")\n  let b19 = b[18].split(\"\")\n  let a20 = a[19].split(\"\")\n  let b20 = b[19].split(\"\")\n  let a21 = a[20].split(\"\")\n  let b21 = b[20].split(\"\")\n  let a22 = a[21].split(\"\")\n  let b22 = b[21].split(\"\")\n  let a23 = a[22].split(\"\")\n  let b23 = b[22].split(\"\")\n  let a24 = a[23].split(\"\")\n  let b24 = b[23].split(\"\")\n  let a25 = a[24].split(\"\")\n  let b25 = b[24].split(\"\")\n  let a26 = a[25].split(\"\")\n  let b26 = b[25].split(\"\")\n  let a27 = a[26].split(\"\")\n  let b27 = b[26].split(\"\")\n  let a28 = a[27].split(\"\")\n  let b28 = b[27].split(\"\")\n  let a29 = a[28].split(\"\")\n  let b29 = b[28].split(\"\")\n  let a30 = a[29].split(\"\")\n  let b30 = b[29].split(\"\")\n  let a31 = a[30].split(\"\")\n  let b31 = b[30].split(\"\")\n  let a32 = a[31].split(\"\")\n  let b32 = b[31].split(\"\")\n  let a33 = a[32].split(\"\")\n  let b33 = b[32].split(\"\")\n  let a34 = a[33].split(\"\")\n  let b34 = b[33].split(\"\")\n  let a35 = a[34].split(\"\")\n  let b35 = b[34].split(\"\")\n  let a36 = a[35].split(\"\")\n  let b36 = b[35].split(\"\")\n  let a37 = a[36].split(\"\")\n  let b37 = b[36].split(\"\")\n  let a38 = a[37].split(\"\")\n  let b38 = b[37].split(\"\")\n  let a39 = a[38].split(\"\")\n  let b39 = b[38].split(\"\")\n  let a40 = a[39].split(\"\")\n  let b40 = b[39].split(\"\")\n  let a41 = a[40].split(\"\")\n  let b41 = b[40].split(\"\")\n  let a42 = a[41].split(\"\")\n  let b42 = b[41].split(\"\")\n  let a43 = a[42].split(\"\")\n  let b43 = b[42].split(\"\")\n  let a44 = a[43].split(\"\")\n  let b44 = b[43].split(\"\")\n  let a45 = a[44].split(\"\")\n  let b45 = b[44].split(\"\")\n  let a46 = a[45].split(\"\")\n  let b46 = b[45].split(\"\")\n  let a47 = a[46].split(\"\")\n  let b47 = b[46].split(\"\")\n  let a48 = a[47].split(\"\")\n  let b48 = b[47].split(\"\")\n  let a49 = a[48].split(\"\")\n  let b49 = b[48].split(\"\")\n  let a50 = a[49].split(\"\")\n  let b50 = b[49].split(\"\")\n  let a51 = a[50].split(\"\")\n  let b51 = b[50].split(\"\")\n  let a52 = a[51].split(\"\")\n  let b52 = b[51].split(\"\")\n  let a53 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount2 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount3 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 100;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount4 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 1000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount5 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount6 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount7 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 100000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    digitCount(12345) ==> 5\n    digitCount(123456) ==> 6\n    digitCount(1234567) ==> 7\n    digitCount(12345678) ==> 8\n    digitCount(123456789) ==> 9\n    digitCount(1234567890) ==> 10\n*/\nconst digitCount8 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 1000000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n    digitCount(123) ==> 3\n    digitCount(1234) ==> 4\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g ,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  };\n  const romanNum = [];\n  for (let i = 0; i < roman.length; i++) {\n    romanNum.push(roman[i]);\n  }\n  let result = '';\n  let i = 0;\n  while (num > 0) {\n    if (num >= romanNum[i]) {\n      result += romanNum[i];\n      num -= romanNum[i];\n    } else {\n      i++;\n    }\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the lowercase letters replaced by\n  the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToRoman('xix') == 'ix'\n  >>> intToRoman('clii') == 'lii'\n  >>> intToRoman('cdxxvi') == 'cdxxv'\n  */\nconst intToRoman = (string) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  };\n  const romanNum = [];\n  for (let i = 0; i < roman.length; i++) {\n    romanNum.push(roman[i]);\n  }\n  let result = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i].toLowerCase() === string[i]) {\n      result += string[i];\n      i++;\n    } else {\n      if (i + 1 < string.length) {\n        if (romanNum[i] <= string[i + 1].toLowerCase()) {\n          result += romanNum[i];\n          i++;\n        } else {\n          result += string[i];\n          i++;\n        }\n      } else {\n        result += string[i];\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string with all the lowercase letters replaced by\n  the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToRoman('xix') == 'ix'\n  >>> intToRoman('clii') == 'lii'\n  >>> intToRoman('cdxxvi') == 'cdxxv'\n  */\nconst intToRoman = (string) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  };\n  const romanNum = [];\n  for (let i = 0; i < roman.length; i++) {\n    romanNum.push(roman[i]);\n  }\n  let result = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i].toLowerCase() === string[i]) {\n      result += string[i];\n      i++;\n    } else {\n      if (i + 1 < string.length) {\n        if (romanNum[i] <= string[i + 1].toLowerCase()) {\n          result += romanNum[i];\n          i++;\n        } else {\n          result += string[i];\n          i++;\n        }\n      } else {\n        result += string[i];\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string with all the lowercase letters replaced by\n  the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToRoman('xix') == 'ix'\n  >>> intToRoman('clii') == 'lii'\n  >>> intToRoman('cdxxvi') == 'cdxxv'\n  */\nconst intToRoman = (string) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  };\n  const romanNum = [];\n  for (let i = 0; i < roman.length; i++) {\n    romanNum.push(roman[i]);\n  }\n  let result = '';\n  let i = 0;\n  while (i < string.length) {\n    if (string[i].toLowerCase() === string[i]) {\n      result += string[i];\n      i++;\n    } else {\n      if (i + 1 < string.length) {\n        if (romanNum[i] <= string[i + 1].toLowerCase()) {\n          result += romanNum[i];\n          i++;\n        } else {\n          result += string[i];\n          i++;\n        }\n      } else {\n        result += string[i];\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return a string with all the lowercase letters replaced by\n  the corresponding roman numeral.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToRoman('xix') == 'ix'\n  >>> intToRoman('clii') == 'lii'\n  >>> intToRoman('cdxxvi') == 'cdxxv'\n  */\nconst intToRoman = (string) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  };\n  const romanNum = [];\n  for (let", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle , false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle, false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  return (a + b > c) && (a + c > b) && (b + c > a);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle2 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle3 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle4 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle5 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle6 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle7 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle8 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle9 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle10 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle11 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle12 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle13 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle14 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle15 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle16 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle17 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle18 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle19 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle20 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle21 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle22 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle23 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle24 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle25 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle26 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle27 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle28 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle29 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle30 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle31 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle32 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle33 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle34 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle35 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle36 = (a, b, c) => {\n  return isRight", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\" ,\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\",\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.find((item) => {\n    return unique.indexOf(item) === 0;\n  });\n};\n\nconst findMax =  (words) => {\n  const unique = words.reduce((acc, item) => {\n    if(acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return words.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const total = number - need;\n    const left = remaining - need;\n    if (total <= 0) {\n        return [0, left];\n    }\n    return [total, left];\n}\n\nconst main = () => {\n    const [total, left] = eat(5, 6, 10);\n    console.log(`${total} carrots eaten, ${left} left`);\n}\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a st ring , find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrencesInStringInStringInStringInStringInString = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times it occurs in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra2 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra3 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra4 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra5 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra6 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra7 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len) {\n    sum = 0;\n    j = 0;\n    while (j < len) {\n      temp = operand[i][j];\n      temp2 = operand[j][i];\n      sum += operator[i][j] * temp * temp2;\n      j++;\n    }\n    result[i] = sum;\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebra8 = (operator, operand) => {\n  const result = [];\n  const len = operator.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < len)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a st ring  'text ' , retu rn its md 5 hash equivalent str ing.\n  If 'text '  is an empty string , returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  'text ', retu rn its md 5 hash equivalent str ing.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  const music_string_length = music_string.length;\n  let current_note = 0;\n  let current_beat = 0;\n  let current_beat_length = 0;\n  let current_note_length = 0;\n  let current_note_length_in_beats = 0;\n  let current_note_length_in_seconds = 0;\n  let current_note_length_in_seconds_in_beats = 0;\n  let current_note_length_in_seconds_in_beats_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_half_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_quarters = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_half_notes = 0;\n  let current_note_length_in_seconds_in_beats_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in_whole_notes_in", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g . Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g. Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j] === substring[j]) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains only\n  characters in the set of lowercase letters.\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero ' to 'nine'.\n V alid choices are 'z ero', 'one', 'two', ' three', 'fou r ', 'five', 'six ', 'seven' ,  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    let numbersArray = numbers.split(' ');\n    let sortedArray = [];\n    for (let i = 0; i < numbersArray.length; i++) {\n        let number = parseInt(numbersArray[i]);\n        sortedArray.push(number);\n    }\n    sortedArray.sort((a, b) => {\n        if (a < b) {\n            return -1;\n        } else if (a > b) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    let sortedNumbers = sortedArray.join(' ');\n    return sortedNumbers;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let parts = number.toString().split('.');\n  return parts[0].length? parts[0] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the whole number of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateWholeNumber = (number) => {\n  let parts = number.toString().split('.');\n  return parts[0].length? number : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberOf = (number) => {\n  let parts = number.toString().split('.');\n  return parts[0].length? parts[0] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberOfWhole = (number) => {\n  let parts = number.toString().split('.');\n  return parts[0].length? number : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberOfDecimal = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberOfDecimalWhole = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberOfDecimalDecimal = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberOfDecimalDecimalWhole = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberOfDecimalDecimalDecimal = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the number of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateNumberOfDecimalDecimalDecimalWhole = (number) => {\n  let parts = number.toString().split('.');\n  return parts[1].length? parts[1] : 0;\n}\n\n/* Given a po siti ve flo a t", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sort(numbers);\n  const min = sortedNumbers[0];\n  const max = sortedNumbers[sortedNumbers.length - 1];\n  const minIndex = findIndex(sortedNumbers, min);\n  const maxIndex = findIndex(sortedNumbers, max);\n  const minDistance = Math.abs(min - sortedNumbers[minIndex]);\n  const maxDistance = Math.abs(max - sortedNumbers[maxIndex]);\n  const minIndexDistance = Math.abs(minIndex - maxIndex);\n  const minIndexDistanceIsSmaller = minIndexDistance < minDistance;\n  const maxIndexDistanceIsSmaller = maxIndexDistance < maxDistance;\n  if (minIndexDistanceIsSmaller && maxIndexDistanceIsSmaller) {\n    return [min, max];\n  } else if (minIndexDistanceIsSmaller) {\n    return [min, sortedNumbers[minIndex]];\n  } else {\n    return [sortedNumbers[maxIndex], max];\n  }\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let scale = (max - min) / (1 - min);\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push((numbers[i] - min) / scale);\n  }\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the squares of the numbers\n  >>> square([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] * numbers[i]);\n  }\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the cubes of the numbers\n  >>> cube([1, 2, 3, 4, 5])\n  [1, 8, 27, 64, 125]\n  */\nconst cube = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] * numbers[i] * numbers[i]);\n  }\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the nth roots of the numbers\n  >>> nthRoot([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> nthRoot([1, 2, 3, 4, 5], 2)\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst nthRoot = (numbers, n) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.pow(numbers[i], 1 / n));\n  }\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the sum of the numbers\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] + newNumbers[i]);\n  }\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the product of the numbers\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] * newNumbers[i]);\n  }\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the mean of the numbers\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  */\nconst mean = (numbers) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] + newNumbers[i]);\n  }\n  return newNumbers.reduce((a, b) => a + b) / numbers.length;\n};\n\n/*\n  Given a list of numbers, return a list of the median of the numbers\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (numbers) => {\n  let newNumbers = [];\n  let sortedNumbers = sorted(numbers);\n  let half = Math.floor(numbers.length / 2);\n  for (let i = 0; i < half; i++) {\n    newNumbers.push(sortedNumbers[i]);\n  }\n  newNumbers.push(sortedNumbers[half]);\n  return newNumbers.reduce((a, b) => a + b) / 2;\n};\n\n/*\n  Given a list of numbers, return a list of the mode of the numbers\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode = (numbers) => {\n  let newNumbers = [];\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  newNumbers.push(max);\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the mode of the numbers\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode2 = (numbers) => {\n  let newNumbers = [];\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  newNumbers.push(max);\n  return newNumbers;\n};\n\n/*\n  Given a list of numbers, return a list of the mode of the numbers\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode3 = (numbers) => {\n  let newNumbers = [];\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v))\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v))\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v))\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/**\n  * Filter giv en l ist of any py thon valu es only", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if s1 equals s2\n  >>> strcmp('abc', 'abc')\n  0\n  >>> strcmp('abc', 'abd')\n  -1\n  >>> strcmp('abd', 'abc')\n  1\n  */\nconst strcmp = (s1, s2) => {\n  return s1 === s2? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 starts with s2\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcd')\n  -1\n  >>> strcmp('abcd', 'abc')\n  1\n  */\nconst strcmp = (s1, s2) => {\n  return s1.indexOf(s2) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 ends with s2\n  >>> strcmp('abc', 'bc')\n  0\n  >>> strcmp('abc', 'abcd')\n  -1\n  >>> strcmp('abcd', 'abc')\n  1\n  */\nconst strcmp = (s1, s2) => {\n  return s1.lastIndexOf(s2) === s1.length - s2.length? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 contains s2\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcd')\n  -1\n  >>> strcmp('abcd', 'abc')\n  1\n  */\nconst strcmp = (s1, s2) => {\n  return s1.indexOf(s2)!== -1? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1)!== -1? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1, s2) => {\n  return s2.indexOf(s1) === 0? 0 : s1 > s2? 1 : -1\n}\n\n/* Return true if s1 is a substring of s2\n  >>> strcmp('abc', 'abcd')\n  0\n  >>> strcmp('abcd', 'abc')\n  1\n  >>> strcmp('abc', 'ab')\n  0\n  >>> strcmp('abc', 'abcdc')\n  -1\n  */\nconst strcmp = (s1,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a give n nu mber n ,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a give n nu mber n,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let i = 1;\n  let j = n;\n  while (j > 0) {\n    if (n % j === 0) {\n      return j;\n    }\n    i++;\n    j = Math.floor(n / j);\n  }\n  return i;\n};\n\n/*\n  >>> largestDivisor(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    let j = n\n    while (j % i === 0) {\n      j = j / i\n      factors.push(i)\n    }\n    i++\n  }\n  return factors\n}\n\n/* Return lis t of  prime factor s of give n integer in the orde r from largest to smallest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    let j = 1\n    while (i % j === 0) {\n      j = j * 2\n      factors.push(j)\n    }\n    i = i / j\n  }\n  return factors\n}\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorizeReverse(8)\n  [2, 2, 2]\n  >>> factorizeReverse(25)\n  [5, 5]\n  >>> factorizeReverse(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    let j = 1\n    while (i % j === 0) {\n      j = j * 2\n      factors.push(j)\n    }\n    i = i / j\n  }\n  return factors\n}\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorizeReverse2(8)\n  [2, 2, 2]\n  >>> factorizeReverse2(25)\n  [5, 5]\n  >>> factorizeReverse2(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    let j = 1\n    while (i % j === 0) {\n      j = j * 2\n      factors.push(j)\n    }\n    i = i / j\n  }\n  return factors\n}\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorizeReverse3(8)\n  [2, 2, 2]\n  >>> factorizeReverse3(25)\n  [5, 5]\n  >>> factorizeReverse3(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    let j = 1\n    while (i % j === 0) {\n      j = j * 2\n      factors.push(j)\n    }\n    i = i / j\n  }\n  return factors\n}\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorizeReverse4(8)\n  [2, 2, 2]\n  >>> factorizeReverse4(25)\n  [5, 5]\n  >>> factorizeReverse4(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse5 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    let j = 1\n    while (i % j === 0) {\n      j = j * 2\n      factors.push(j)\n    }\n    i = i / j\n  }\n  return factors\n}\n\n/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorizeReverse5(8)\n  [2, 2, 2]\n  >>> factorizeReverse5(25)\n  [5, 5]\n  >>> factorizeReverse5(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse6 = (n) => {\n  let factors = []\n  let i = n\n  while (i > 1) {\n    let j = 1\n    while (i % j === 0) {\n      j = j * 2\n      factors.push(j)\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n      uniqueNumbersIndex.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower + upper.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toUpperCase() + lower.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toUpperCase() + upper.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toLowerCase() + lower.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toUpperCase() + upper.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toLowerCase() + lower.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toUpperCase() + upper.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toUpperCase() + lower.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toLowerCase() + upper.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toUpperCase() + lower.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toLowerCase() + upper.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toUpperCase() + lower.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toUpperCase() + upper.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toLowerCase() + lower.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toUpperCase() + upper.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.toLowerCase() + lower.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, (match, lower, upper) => {\n    return lower.toUpperCase() + upper.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/([A-Z])([a-z])/g, (match, upper, lower) => {\n    return upper.to", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArray = (strings) => {\n  return concatenate(strings.map(str => str))\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparator = (strings, separator) => {\n  return concatenateArray(strings).split(separator).join('')\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefix = (strings, separator, prefix) => {\n  return concatenateArrayWithSeparator(strings, separator).split(separator).join(prefix)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndSuffix = (strings, separator, suffix) => {\n  return concatenateArrayWithSeparator(strings, separator).split(separator).join(suffix)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffix = (strings, separator, prefix, suffix) => {\n  return concatenateArrayWithSeparatorAndPrefix(strings, separator, prefix).split(separator).join(suffix)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparator = (strings, separator, prefix, suffix, separator2) => {\n  return concatenateArrayWithSeparatorAndPrefixAndSuffix(strings, separator, prefix, suffix).split(separator).join(separator2)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndPrefix = (strings, separator, prefix, suffix, separator2, prefix2) => {\n  return concatenateArrayWithSeparatorAndPrefixAndSuffix(strings, separator, prefix, suffix).split(separator).join(separator2).split(prefix).join(prefix2)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffix = (strings, separator, prefix, suffix, separator2, suffix2) => {\n  return concatenateArrayWithSeparatorAndPrefixAndSuffix(strings, separator, prefix, suffix).split(separator).join(separator2).split(suffix).join(suffix2)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffixAndPrefix = (strings, separator, prefix, suffix, separator2, suffix2, prefix2) => {\n  return concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffix(strings, separator, prefix, suffix).split(separator).join(separator2).split(suffix).join(suffix2).split(prefix).join(prefix2)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffixAndPrefix = (strings, separator, prefix, suffix, separator2, suffix2, prefix2) => {\n  return concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffix(strings, separator, prefix, suffix).split(separator).join(separator2).split(suffix).join(suffix2).split(prefix).join(prefix2)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffixAndPrefix = (strings, separator, prefix, suffix, separator2, suffix2, prefix2) => {\n  return concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffix(strings, separator, prefix, suffix).split(separator).join(separator2).split(suffix).join(suffix2).split(prefix).join(prefix2)\n}\n\n/*\n  * Concatenate the strings in the array, and return the result\n  *\n  * @param {Array} strings\n  * @return {String}\n  */\nconst concatenateArrayWithSeparatorAndPrefixAndSuffixAndSeparatorAndSuffixAndPrefix = (strings, separator, prefix, suffix, separator2, suffix2, prefix2) => {\n  return concatenateArrayWithSeparatorAndPref", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((acc, curr) => {\n    if (acc === 0) {\n      return true;\n    }\n    if (curr < acc) {\n      return true;\n    }\n    return false;\n  }, false);\n  return result;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>> isPrime(1000000)\n  true\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 + .... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = xs[n - 1];\n  const min = xs[0];\n  let x = (max - min) / (n - 1);\n  let i = 0;\n  while (x === 0) {\n    x = (max - min) / (n - 1);\n    i++;\n  }\n  return xs[i];\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  },", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sorted2 = []\n  const sorted3 = []\n  const sorted4 = []\n  const sorted5 = []\n  const sorted6 = []\n  const sorted7 = []\n  const sorted8 = []\n  const sorted9 = []\n  const sorted10 = []\n  const sorted11 = []\n  const sorted12 = []\n  const sorted13 = []\n  const sorted14 = []\n  const sorted15 = []\n  const sorted16 = []\n  const sorted17 = []\n  const sorted18 = []\n  const sorted19 = []\n  const sorted20 = []\n  const sorted21 = []\n  const sorted22 = []\n  const sorted23 = []\n  const sorted24 = []\n  const sorted25 = []\n  const sorted26 = []\n  const sorted27 = []\n  const sorted28 = []\n  const sorted29 = []\n  const sorted30 = []\n  const sorted31 = []\n  const sorted32 = []\n  const sorted33 = []\n  const sorted34 = []\n  const sorted35 = []\n  const sorted36 = []\n  const sorted37 = []\n  const sorted38 = []\n  const sorted39 = []\n  const sorted40 = []\n  const sorted41 = []\n  const sorted42 = []\n  const sorted43 = []\n  const sorted44 = []\n  const sorted45 = []\n  const sorted46 = []\n  const sorted47 = []\n  const sorted48 = []\n  const sorted49 = []\n  const sorted50 = []\n  const sorted51 = []\n  const sorted52 = []\n  const sorted53 = []\n  const sorted54 = []\n  const sorted55 = []\n  const sorted56 = []\n  const sorted57 = []\n  const sorted58 = []\n  const sorted59 = []\n  const sorted60 = []\n  const sorted61 = []\n  const sorted62 = []\n  const sorted63 = []\n  const sorted64 = []\n  const sorted65 = []\n  const sorted66 = []\n  const sorted67 = []\n  const sorted68 = []\n  const sorted69 = []\n  const sorted70 = []\n  const sorted71 = []\n  const sorted72 = []\n  const sorted73 = []\n  const sorted74 = []\n  const sorted75 = []\n  const sorted76 = []\n  const sorted77 = []\n  const sorted78 = []\n  const sorted79 = []\n  const sorted80 = []\n  const sorted81 = []\n  const sorted82 = []\n  const sorted83 = []\n  const sorted84 = []\n  const sorted85 = []\n  const sorted86 = []\n  const sorted87 = []\n  const sorted88 = []\n  const sorted89 = []\n  const sorted90 = []\n  const sorted91 = []\n  const sorted92 = []\n  const sorted93 = []\n  const sorted94 = []\n  const sorted95 = []\n  const sorted96 = []\n  const sorted97 = []\n  const sorted98 = []\n  const sorted99 = []\n  const sorted100 = []\n  const sorted101 = []\n  const sorted102 = []\n  const sorted103 = []\n  const sorted104 = []\n  const sorted105 = []\n  const sorted106 = []\n  const sorted107 = []\n  const sorted108 = []\n  const sorted109 = []\n  const sorted110 = []\n  const sorted111 = []\n  const sorted112 = []\n  const sorted113 = []\n  const sorted114 = []\n  const sorted115 = []\n  const sorted116 = []\n  const sorted117 = []\n  const sorted118 = []\n  const sorted119 = []\n  const sorted120 = []\n  const sorted121 = []\n  const sorted122 = []\n  const sorted123 = []\n  const sorted124 = []\n  const sorted125 = []\n  const sorted126 = []\n  const sorted127 = []\n  const sorted128 = []\n  const sorted129 = []\n  const sorted130 = []\n  const sorted131 = []\n  const sorted132 = []\n  const sorted133 = []\n  const sorted134 = []\n  const sorted135 = []\n  const sorted136 = []\n  const sorted137 = []\n  const sorted138 = []\n  const sorted139 = []\n  const sorted140 = []\n  const sorted141 = []\n  const sorted142 = []\n  const sorted143 = []\n  const sorted144 = []\n  const sorted145 = []\n  const sorted146 = []\n  const sorted147 = []\n  const sorted148 = []\n  const sorted149 = []\n  const sorted150 = []\n  const sorted151 = []\n  const sorted152 = []\n  const sorted153 = []\n  const sorted154 = []\n  const sorted155 = []\n  const sorted156 = []\n  const sorted157 = []\n  const sorted158 = []\n  const sorted159 = []\n  const sorted160 = []\n  const sorted161 = []\n  const sorted162 = []\n  const sorted163 = []\n  const sorted164 = []\n  const sorted165 = []\n  const sorted166 = []\n  const sorted167 = []\n  const sorted168 = []\n  const sorted169 = []\n  const sorted170 = []\n  const sorted171 = []\n  const sorted172 = []\n  const sorted173 = []\n  const sorted174 = []\n  const sorted175 = []\n  const sorted176 = []\n  const sorted177 = []\n  const sorted178 = []\n  const sorted179 = []\n  const sorted180 = []\n  const sorted181 = []\n  const sorted182 = []\n  const sorted183 = []\n  const sorted184 = []\n  const sorted185 = []\n  const sorted186 = []\n  const sorted187 = []\n  const sorted188 = []\n  const sorted189 = []\n  const sorted190 = []\n  const sorted191 = []\n  const sorted192 = []\n  const sorted193 = []\n  const sorted194 = []\n  const sorted195 = []\n  const sorted196 = []\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  const u = {};\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    u[l[i]] = 1;\n  }\n  return Object.keys(u);\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = divisors[Math.floor(Math.random() * divisors.length)]\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % divisor === 0) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic2 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic3 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic4 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic5 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic6 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic7 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic8 = (s) => {\n  var groups =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  if (n === 3) return 5;\n  if (n === 4) return 13;\n  if (n === 5) return 89;\n  let i = 2;\n  let j = 3;\n  let k = 5;\n  let nPrime = 0;\n  while (k < n) {\n    if (isPrime(k)) {\n      nPrime += k;\n    }\n    k += 2;\n  }\n  return nPrime;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, n) => acc + n, 0) / numbers.length\n  const deviation = numbers.reduce((acc, n) => {\n    const diff = n - mean\n    return acc + Math.abs(diff)\n  }, 0) / numbers.length\n  return deviation\n}\n\n/*\n  For a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray8 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray9 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray10 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray11 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray12 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray13 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray14 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray15 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray16 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray17 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroToArray\n  */\nconst triplesSumToZeroToArray18 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other .  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n    let c = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (carRaceCollision(i, j)) {\n                c++;\n            }\n        }\n    }\n    return c;\n};\n\nconst carRaceCollision = (i, j) => {\n    let x1 = carRaceX(i);\n    let x2 = carRaceX(j);\n    let y1 = carRaceY(i);\n    let y2 = carRaceY(j);\n    let d = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    return d < carRaceDistance;\n};\n\nconst carRaceX = (i) => {\n    let x = carRaceX0 + carRaceSpeed * i * carRaceDistance / carRaceTime;\n    return x;\n};\n\nconst carRaceY = (i) => {\n    let y = carRaceY0 + carRaceSpeed * i * carRaceDistance / carRaceTime;\n    return y;\n};\n\nconst carRaceX0 = 0;\nconst carRaceY0 = 0;\nconst carRaceSpeed = 1;\nconst carRaceTime = 1;\nconst carRaceDistance = 1;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while (i < len) {\n    newList[newLen] = l[i];\n    newLen++;\n    i++;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0,\n    len = l.length,\n    newList = [],\n    newLen = 0;\n  while", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x > 0 && x < sum);\n};\n\n/*\n  pairsSumToZero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convert = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num % base, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToDecimal = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToHex = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToBinary = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToOctal = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToDecimalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToHexToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToBinaryToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToOctalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToDecimalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToHexToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToBinaryToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToOctalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToDecimalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToHexToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToBinaryToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToOctalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToDecimalToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBaseToHexToBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = changeBase(num, base) + res;\n    num = Math.floor(num / base);\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle .\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (a + h)) / 2;\n};\n\n/*\n  Given a triangle and a point p, find the distance from p to the nearest\n  vertex of the triangle.\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5])\n  2\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  0\n  >>> distanceToVertex(triangleArea(5, 3), [3, 4, 5, 6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return undefined\n  }\n  if (len === 1) {\n    return l[0]\n  }\n  const half = len / 2\n  const left = l.slice(0, half)\n  const right = l.slice(half)\n  return (l[half - 1] + l[half]) / 2\n}\n\nexport default median\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('zab')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let i = 0, j = text.length - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if the string is a palindrome\n  >>> is", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  let x = n % p;\n  if (x < 0) {\n    x += p;\n  }\n  return x;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  let x = n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < numbers.length - 1) {\n    result.push(numbers[i])\n    i += 1\n    j += 1\n    if (j % delimeter === 0) {\n      result.push(delimeter)\n      j = 0\n    }\n  }\n  result.push(numbers[i])\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3, 4]\n  >>> intersperse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 4, 5]\n  >>> intersperse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode_decode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode_decode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode_encode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode_decode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode_encode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode_decode_encode = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the decoded string.\n  */\nconst decode_encode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the encoded string.\n  */\nconst encode_decode_encode_shift = (s) => {\n  return s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.char", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let newText = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) > -1) {\n      newText += text[i];\n      i++;\n    } else {\n      newText += text[i];\n      i++;\n      j++;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeVowels ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let newText = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) > -1) {\n      newText += text[i];\n      i++;\n    } else {\n      newText += text[i];\n      i++;\n      j++;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeVowels ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let newText = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) > -1) {\n      newText += text[i];\n      i++;\n    } else {\n      newText += text[i];\n      i++;\n      j++;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeVowels ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let newText = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) > -1) {\n      newText += text[i];\n      i++;\n    } else {\n      newText += text[i];\n      i++;\n      j++;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeVowels ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let newText = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) > -1) {\n      newText += text[i];\n      i++;\n    } else {\n      newText += text[i];\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold15 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold16 = (l, t) => {\n  const ld = l.reduce((a, b) => a + b, 0)\n  return ld <= t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold17 = (l, t)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th  Fib onacci number .\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*Return n-th  Fib onacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th  Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split(\"\").reverse().map(bracket => {\n    return bracket === \">\"? 1 : 0;\n  });\n  let i = 0;\n  while (i < stack.length) {\n    if (stack[i] === 0) {\n      stack.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return last > 0? sorted.every((x, i) => x === sorted[i + 1]) : sorted.every((x, i) => x === sorted[i - 1]);\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_idx = 0\n  const l2_idx = 0\n  const common_list = []\n  while (l1_idx < l1_len && l2_idx < l2_len) {\n    if (l1[l1_idx] === l2[l2_idx]) {\n      common_list.push(l1[l1_idx])\n      l1_idx++\n      l2_idx++\n    } else if (l1[l1_idx] < l2[l2_idx]) {\n      l1_idx++\n    } else {\n      l2_idx++\n    }\n  }\n  return common_list\n}\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es .\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string[paren_string_index]\n  const paren_string_char_index = 0\n  const paren_string_char_length = paren_string_char.length\n  const paren_string_char_index_end = paren_string_char_index + paren_string_char_length\n  const paren_string_char_index_end_end = paren_string_char_index_end + 1\n  const paren_string_char_index_end_end_end = paren_string_char_index_end_end + 1\n  const paren_string_char_index_end_end_end_end = paren_string_char_index_end_end_end + 1\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_index)\n      stack_length += 1\n    } else if (paren_string_char === ')') {\n      if (stack_length > 0) {\n        stack_length -= 1\n        if (stack_length === 0) {\n          return stack\n        }\n      }\n    }\n    paren_string_index += 1\n    paren_string_char_index += 1\n    if (paren_string_char_index_end >= paren_string_length) {\n      paren_string_index = stack[stack_length - 1]\n      paren_string_char_index = paren_string[paren_string_index].length\n    } else {\n      paren_string_char = paren_string[paren_string_index][paren_string_char_index]\n      paren_string_char_index += 1\n      if (paren_string_char_index_end >= paren_string_length) {\n        paren_string_index = stack[stack_length - 1]\n        paren_string_char_index = paren_string[paren_string_index].length\n      } else {\n        paren_string_char_index_end += 1\n      }\n    }\n  }\n  return []\n}\n\n/*\n  Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string[paren_string_index]\n  const paren_string_char_index = 0\n  const paren_string_char_length = paren_string_char.length\n  const paren_string_char_index_end = paren_string_char_index + paren_string_char_length\n  const paren_string_char_index_end_end = paren_string_char_index_end + 1\n  const paren_string_char_index_end_end_end = paren_string_char_index_end_end + 1\n  while (paren_string_index < paren_string_length) {\n    if (paren_string_char === '(') {\n      stack.push(paren_string_index)\n      stack_length += 1\n    } else if (paren_string_char === ')') {\n      if (stack_length > 0) {\n        stack_length -= 1\n        if (stack_length === 0) {\n          return stack\n        }\n      }\n    }\n    paren_string_index += 1\n    paren_string_char_index += 1\n    if (paren_string_char_index_end >= paren_string_length) {\n      paren_string_index = stack[stack_length - 1]\n      paren_string_char_index = paren_string[paren_string_index].length\n    } else {\n      paren_string_char = paren_string[paren_string_index][paren_string_char_index]\n      paren_string_char_index += 1\n      if (paren_string_char_index_end >= paren_string_length) {\n        paren_string_index = stack[stack_length - 1]\n        paren_string_char_index = paren_string[paren_string_index].length\n      } else {\n        paren_string_char_index_end += 1\n      }\n    }\n  }\n  return []\n}\n\nconst parseNestedParens3 = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const paren_string_length = paren_string.length\n  const paren_string_index = 0\n  const paren_string_char = paren_string[paren_string_index]\n  const paren_string_char_index = 0\n  const paren_string_char_length = paren_string_char.length\n  const paren_string_char_index_end = paren_string_char_index + paren_string_char_length\n  const paren_string_char_index_end_end = paren_string_char_index_end + 1\n  const paren_string_char_index_end_end_end = paren_string_char_index_end_end +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArr = brackets.split(\" \")\n  const bracketsArrLen = bracketsArr.length\n  let bracketsArrIndex = 0\n  let bracketsArrIndex2 = 0\n  let bracketsArrIndex3 = 0\n  let bracketsArrIndex4 = 0\n  let bracketsArrIndex5 = 0\n  let bracketsArrIndex6 = 0\n  let bracketsArrIndex7 = 0\n  let bracketsArrIndex8 = 0\n  let bracketsArrIndex9 = 0\n  let bracketsArrIndex10 = 0\n  let bracketsArrIndex11 = 0\n  let bracketsArrIndex12 = 0\n  let bracketsArrIndex13 = 0\n  let bracketsArrIndex14 = 0\n  let bracketsArrIndex15 = 0\n  let bracketsArrIndex16 = 0\n  let bracketsArrIndex17 = 0\n  let bracketsArrIndex18 = 0\n  let bracketsArrIndex19 = 0\n  let bracketsArrIndex20 = 0\n  let bracketsArrIndex21 = 0\n  let bracketsArrIndex22 = 0\n  let bracketsArrIndex23 = 0\n  let bracketsArrIndex24 = 0\n  let bracketsArrIndex25 = 0\n  let bracketsArrIndex26 = 0\n  let bracketsArrIndex27 = 0\n  let bracketsArrIndex28 = 0\n  let bracketsArrIndex29 = 0\n  let bracketsArrIndex30 = 0\n  let bracketsArrIndex31 = 0\n  let bracketsArrIndex32 = 0\n  let bracketsArrIndex33 = 0\n  let bracketsArrIndex34 = 0\n  let bracketsArrIndex35 = 0\n  let bracketsArrIndex36 = 0\n  let bracketsArrIndex37 = 0\n  let bracketsArrIndex38 = 0\n  let bracketsArrIndex39 = 0\n  let bracketsArrIndex40 = 0\n  let bracketsArrIndex41 = 0\n  let bracketsArrIndex42 = 0\n  let bracketsArrIndex43 = 0\n  let bracketsArrIndex44 = 0\n  let bracketsArrIndex45 = 0\n  let bracketsArrIndex46 = 0\n  let bracketsArrIndex47 = 0\n  let bracketsArrIndex48 = 0\n  let bracketsArrIndex49 = 0\n  let bracketsArrIndex50 = 0\n  let bracketsArrIndex51 = 0\n  let bracketsArrIndex52 = 0\n  let bracketsArrIndex53 = 0\n  let bracketsArrIndex54 = 0\n  let bracketsArrIndex55 = 0\n  let bracketsArrIndex56 = 0\n  let bracketsArrIndex57 = 0\n  let bracketsArrIndex58 = 0\n  let bracketsArrIndex59 = 0\n  let bracketsArrIndex60 = 0\n  let bracketsArrIndex61 = 0\n  let bracketsArrIndex62 = 0\n  let bracketsArrIndex63 = 0\n  let bracketsArrIndex64 = 0\n  let bracketsArrIndex65 = 0\n  let bracketsArrIndex66 = 0\n  let bracketsArrIndex67 = 0\n  let bracketsArrIndex68 = 0\n  let bracketsArrIndex69 = 0\n  let bracketsArrIndex70 = 0\n  let bracketsArrIndex71 = 0\n  let bracketsArrIndex72 = 0\n  let bracketsArrIndex73 = 0\n  let bracketsArrIndex74 = 0\n  let bracketsArrIndex75 = 0\n  let bracketsArrIndex76 = 0\n  let bracketsArrIndex77 = 0\n  let bracketsArrIndex78 = 0\n  let bracketsArrIndex79 = 0\n  let bracketsArrIndex80 = 0\n  let bracketsArrIndex81 = 0\n  let bracketsArrIndex82 = 0\n  let bracketsArrIndex83 = 0\n  let bracketsArrIndex84 = 0\n  let bracketsArrIndex85 = 0\n  let bracketsArrIndex86 = 0\n  let bracketsArrIndex87 = 0\n  let bracketsArrIndex88 = 0\n  let bracketsArrIndex89 = 0\n  let bracketsArrIndex90 = 0\n  let bracketsArrIndex91 = 0\n  let bracketsArrIndex92 = 0\n  let bracketsArrIndex93 = 0\n  let bracketsArrIndex94 = 0\n  let bracketsArrIndex95 = 0\n  let bracketsArrIndex96 = 0\n  let bracketsArrIndex97 = 0\n  let bracketsArrIndex98 = 0\n  let bracketsArrIndex99 = 0\n  let bracketsArrIndex100 = 0\n  let bracketsArrIndex101 = 0\n  let bracketsArrIndex102 = 0\n  let bracketsArrIndex103 = 0\n  let bracketsArrIndex104 = 0\n  let bracketsArrIndex105 = 0\n  let bracketsArrIndex106 = 0\n  let bracketsArrIndex107 = 0\n  let bracketsArrIndex108 = 0\n  let bracketsArrIndex109 = 0\n  let bracketsArrIndex110 = 0\n  let bracketsArrIndex111 = 0\n  let bracketsArrIndex112 = 0\n  let bracketsArrIndex113 = 0\n  let bracketsArrIndex114 = 0\n  let bracketsArrIndex115 = 0\n  let bracketsArrIndex116 = 0\n  let bracketsArrIndex117 = 0\n  let bracketsArrIndex118 = 0\n  let bracketsArrIndex119 = 0\n  let bracketsArrIndex120 = 0\n  let bracketsArrIndex121 = 0\n  let bracketsArrIndex122 = 0\n  let bracketsArrIndex123 = 0\n  let bracketsArrIndex124 = 0\n  let bracketsArrIndex125 = 0\n  let bracketsArrIndex126 = 0\n  let bracketsArrIndex127 = 0\n  let bracketsArrIndex128 = 0\n  let bracketsArrIndex129 = 0\n  let bracketsArrIndex130 = 0\n  let bracketsArrIndex131 = 0\n  let bracketsArrIndex132 = 0\n  let bracketsArrIndex133 = 0\n  let bracketsArrIndex134 = 0\n  let bracketsArrIndex135 = 0\n  let bracketsArrIndex136 = 0\n  let bracketsArrIndex137 = 0\n  let bracketsArrIndex138 = 0\n  let bracketsArrIndex139 = 0\n  let bracketsArrIndex140 = 0\n  let brackets", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 + ....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/* xs represe nt c oeffic i ents o f a po", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g .\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits , return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits, return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = x.slice()\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.pop())\n  }\n  return result.join('')\n}\n\nconst circularShift2 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift3 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift4 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift5 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift6 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift7 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift8 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift9 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift10 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift11 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift12 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift13 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift14 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift15 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift16 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.pop())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift17 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.shift())\n  }\n  return result.concat(x).join('')\n}\n\nconst circularShift18 = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const result = []\n  for (let i = 0; i < shift; i++) {\n    result.push(x.pop())\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of\n  characters in the string.\n\n  Examples:\n      countLetters(\"\") => 0\n      countLetters(\"abc\") => 3\n      countLetters(\"abcd\") => 4\n      countLetters(\"a\") => 1\n      countLetters(\"aabc\") => 4\n      countLetters(\"aabcdef\") => 7\n*/\nconst countLetters = (s) => {\n  const count = 0;\n  for (let i = 0; i < s", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\" ,120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\",120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n  let fruit = s.split(\" \")\n  let total = 0\n  for (let i = 0; i < fruit.length; i++) {\n    total += Number(fruit[i])\n  }\n  return total - n\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\nconsole.log(fruitDistribution(\"1 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arr = arr.sort((a, b) => a - b)\n  const result = []\n  let min = arr[0]\n  let index = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === arr[i]) {\n        result.push([arr[i], index])\n      } else if (min < arr[i]) {\n        min = arr[i]\n        index = i\n      }\n    }\n  }\n  return result\n}\n\nconst arr = [4, 2, 3]\nconsole.log(pluck(arr))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list .\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list.\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    let freq = 1\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j] === lst[i]) {\n        freq++\n      }\n    }\n    if (freq > maxFreq) {\n      max = lst[i]\n      maxFreq = freq\n    }\n  }\n  return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring2(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring2(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring2(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring2(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring2(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring3(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring3(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring3(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring3(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring3(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring4(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring4(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring4(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring4(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring4(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring5(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring5(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring5(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring5(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring5(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring6(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring6(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  >>> filterBySubstring6(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring6(['abc', 'bacd', 'cde', 'array'], 'd')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring6(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value ,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  for (let i = 0; i < len; i++) {\n    const min = sorted[i]\n    let j = i + 1\n    while (j < len) {\n      if (sorted[j] < min) {\n        sorted[i] = sorted[j]\n        sorted[j] = min\n        j++\n      } else {\n        j++\n      }\n    }\n  }\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangleArea18 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const s2 = (a * a + b * b + c * c) / 4\n  if (s2 > s) return -1\n  return Math.sqrt(s2 - s)\n}\n\nconst triangle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  if (q.length === 1) return q[0] <= w\n  if (q.length === 2) return q[0] + q[1] <= w\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w\n  if (q.length === 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w\n  if (q.length === 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w\n  if (q.length === 10) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w\n  if (q.length === 11) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w\n  if (q.length === 12) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] <= w\n  if (q.length === 13) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] <= w\n  if (q.length === 14) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] <= w\n  if (q.length === 15) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] <= w\n  if (q.length === 16) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] <= w\n  if (q.length === 17) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] <= w\n  if (q.length === 18) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] <= w\n  if (q.length === 19) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] <= w\n  if (q.length === 20) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let len = arr.length\n  let min = 0\n  let min_index = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n  let flag = 0\n  let temp_index = 0\n  let temp_min = 0\n  let temp_min_index = 0\n  let temp_min_flag = 0\n  let temp_min_temp = 0\n  let temp_min_temp_index = 0\n  let temp_min_temp_flag = 0\n  let temp_min_temp_min = 0\n  let temp_min_temp_min_index = 0\n  let temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_flag = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_index = 0\n  let temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_temp_min_flag = 0\n  let temp_min_temp_min_temp_min_temp_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return []\n  }\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n  const total = lst1Len + lst2Len\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n  const lst1 = lst1.slice()\n  const lst2 = lst2.slice()\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber13 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber14 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber15 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber16 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  for (let i = 2; i * i <= a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber17 = (a) => {\n  if (a < 2) {\n    return false;\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases .\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases.\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return x === 1;\n  if (n === 2) return x === 2;\n  if (n === 3) return x === 3;\n  if (n === 4) return x === 4;\n  if (n === 5) return x === 5;\n  if (n === 6) return x === 6;\n  if (n === 7) return x === 7;\n  if (n === 8) return x === 8;\n  if (n === 9) return x === 9;\n  if (n === 10) return x === 10;\n  if (n === 11) return x === 11;\n  if (n === 12) return x === 12;\n  if (n === 13) return x === 13;\n  if (n === 14) return x === 14;\n  if (n === 15) return x === 15;\n  if (n === 16) return x === 16;\n  if (n === 17) return x === 17;\n  if (n === 18) return x === 18;\n  if (n === 19) return x === 19;\n  if (n === 20) return x === 20;\n  if (n === 21) return x === 21;\n  if (n === 22) return x === 22;\n  if (n === 23) return x === 23;\n  if (n === 24) return x === 24;\n  if (n === 25) return x === 25;\n  if (n === 26) return x === 26;\n  if (n === 27) return x === 27;\n  if (n === 28) return x === 28;\n  if (n === 29) return x === 29;\n  if (n === 30) return x === 30;\n  if (n === 31) return x === 31;\n  if (n === 32) return x === 32;\n  if (n === 33) return x === 33;\n  if (n === 34) return x === 34;\n  if (n === 35) return x === 35;\n  if (n === 36) return x === 36;\n  if (n === 37) return x === 37;\n  if (n === 38) return x === 38;\n  if (n === 39) return x === 39;\n  if (n === 40) return x === 40;\n  if (n === 41) return x === 41;\n  if (n === 42) return x === 42;\n  if (n === 43) return x === 43;\n  if (n === 44) return x === 44;\n  if (n === 45) return x === 45;\n  if (n === 46) return x === 46;\n  if (n === 47) return x === 47;\n  if (n === 48) return x === 48;\n  if (n === 49) return x === 49;\n  if (n === 50) return x === 50;\n  if (n === 51) return x === 51;\n  if (n === 52) return x === 52;\n  if (n === 53) return x === 53;\n  if (n === 54) return x === 54;\n  if (n === 55) return x === 55;\n  if (n === 56) return x === 56;\n  if (n === 57) return x === 57;\n  if (n === 58) return x === 58;\n  if (n === 59) return x === 59;\n  if (n === 60) return x === 60;\n  if (n === 61) return x === 61;\n  if (n === 62) return x === 62;\n  if (n === 63) return x === 63;\n  if (n === 64) return x === 64;\n  if (n === 65) return x === 65;\n  if (n === 66) return x === 66;\n  if (n === 67) return x === 67;\n  if (n === 68) return x === 68;\n  if (n === 69) return x === 69;\n  if (n === 70) return x === 70;\n  if (n === 71) return x === 71;\n  if (n === 72) return x === 72;\n  if (n === 73) return x === 73;\n  if (n === 74) return x === 74;\n  if (n === 75) return x === 75;\n  if (n === 76) return x === 76;\n  if (n === 77) return x === 77;\n  if (n === 78) return x === 78;\n  if (n === 79) return x === 79;\n  if (n === 80) return x === 80;\n  if (n === 81) return x === 81;\n  if (n === 82) return x === 82;\n  if (n === 83) return x === 83;\n  if (n === 84) return x === 84;\n  if (n === 85) return x === 85;\n  if (n === 86) return x === 86;\n  if (n === 87) return x === 87;\n  if (n === 88) return x === 88;\n  if (n === 89) return x === 89;\n  if (n === 90) return x === 90;\n  if (n === 91) return x === 91;\n  if (n === 92) return x === 92;\n  if (n === 93) return x === 93;\n  if (n === 94) return x === 94;\n  if (n === 95) return x === 95;\n  if (n === 96) return x === 96;\n  if (n === 97) return x === 97;\n  if (n === 98) return x === 98;\n  if (n === 99) return x === 99;\n  if (n === 100) return x === 100;\n  if (n === 101) return x === 101;\n  if (n === 102) return x === 102;\n  if (n === 103) return x === 103;\n  if (n === 104) return x === 104;\n  if (n === 105) return x === 105;\n  if (n === 106) return x === 106;\n  if (n === 107)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 0;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_cube = (a) => {\n  return iscube(a);\n};\n\nconst is_cube_of_integer = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number = (a) => {\n  return is_cube(a) && a % 1 === 0;\n};\n\nconst is_cube_of_integer_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===. ..\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase .\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===...\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.split('');\n  let count = 0;\n  for (let i = 0; i < hex.length; i++) {\n    if (isPrime(parseInt(hex[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(hexKey('AB'));\nconsole.log(hexKey('1077E'));\nconsole.log(hexKey('ABED1A33'));\nconsole.log(hexKey('123456789ABCDEF0'));\nconsole.log(hexKey('2020'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number .Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db '  at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number.Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db' at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = 0;\n  let binaryLengthExtra = 0;\n  let binaryLengthExtra2 = 0;\n  let binaryLengthExtra3 = 0;\n  let binaryLengthExtra4 = 0;\n  let binaryLengthExtra5 = 0;\n  let binaryLengthExtra6 = 0;\n  let binaryLengthExtra7 = 0;\n  let binaryLengthExtra8 = 0;\n  let binaryLengthExtra9 = 0;\n  let binaryLengthExtra10 = 0;\n  let binaryLengthExtra11 = 0;\n  let binaryLengthExtra12 = 0;\n  let binaryLengthExtra13 = 0;\n  let binaryLengthExtra14 = 0;\n  let binaryLengthExtra15 = 0;\n  let binaryLengthExtra16 = 0;\n  let binaryLengthExtra17 = 0;\n  let binaryLengthExtra18 = 0;\n  let binaryLengthExtra19 = 0;\n  let binaryLengthExtra20 = 0;\n  let binaryLengthExtra21 = 0;\n  let binaryLengthExtra22 = 0;\n  let binaryLengthExtra23 = 0;\n  let binaryLengthExtra24 = 0;\n  let binaryLengthExtra25 = 0;\n  let binaryLengthExtra26 = 0;\n  let binaryLengthExtra27 = 0;\n  let binaryLengthExtra28 = 0;\n  let binaryLengthExtra29 = 0;\n  let binaryLengthExtra30 = 0;\n  let binaryLengthExtra31 = 0;\n  let binaryLengthExtra32 = 0;\n  let binaryLengthExtra33 = 0;\n  let binaryLengthExtra34 = 0;\n  let binaryLengthExtra35 = 0;\n  let binaryLengthExtra36 = 0;\n  let binaryLengthExtra37 = 0;\n  let binaryLengthExtra38 = 0;\n  let binaryLengthExtra39 = 0;\n  let binaryLengthExtra40 = 0;\n  let binaryLengthExtra41 = 0;\n  let binaryLengthExtra42 = 0;\n  let binaryLengthExtra43 = 0;\n  let binaryLengthExtra44 = 0;\n  let binaryLengthExtra45 = 0;\n  let binaryLengthExtra46 = 0;\n  let binaryLengthExtra47 = 0;\n  let binaryLengthExtra48 = 0;\n  let binaryLengthExtra49 = 0;\n  let binaryLengthExtra50 = 0;\n  let binaryLengthExtra51 = 0;\n  let binaryLengthExtra52 = 0;\n  let binaryLengthExtra53 = 0;\n  let binaryLengthExtra54 = 0;\n  let binaryLengthExtra55 = 0;\n  let binaryLengthExtra56 = 0;\n  let binaryLengthExtra57 = 0;\n  let binaryLengthExtra58 = 0;\n  let binaryLengthExtra59 = 0;\n  let binaryLengthExtra60 = 0;\n  let binaryLengthExtra61 = 0;\n  let binaryLengthExtra62 = 0;\n  let binaryLengthExtra63 = 0;\n  let binaryLengthExtra64 = 0;\n  let binaryLengthExtra65 = 0;\n  let binaryLengthExtra66 = 0;\n  let binaryLengthExtra67 = 0;\n  let binaryLengthExtra68 = 0;\n  let binaryLengthExtra69 = 0;\n  let binaryLengthExtra70 = 0;\n  let binaryLengthExtra71 = 0;\n  let binaryLengthExtra72 = 0;\n  let binaryLengthExtra73 = 0;\n  let binaryLengthExtra74 = 0;\n  let binaryLengthExtra75 = 0;\n  let binaryLengthExtra76 = 0;\n  let binaryLengthExtra77 = 0;\n  let binaryLengthExtra78 = 0;\n  let binaryLengthExtra79 = 0;\n  let binaryLengthExtra80 = 0;\n  let binaryLengthExtra81 = 0;\n  let binaryLengthExtra82 = 0;\n  let binaryLengthExtra83 = 0;\n  let binaryLengthExtra84 = 0;\n  let binaryLengthExtra85 = 0;\n  let binaryLengthExtra86 = 0;\n  let binaryLengthExtra87 = 0;\n  let binaryLengthExtra88 = 0;\n  let binaryLengthExtra89 = 0;\n  let binaryLengthExtra90 = 0;\n  let binaryLengthExtra91 = 0;\n  let binaryLengthExtra92 = 0;\n  let binaryLengthExtra93 = 0;\n  let binaryLengthExtra94 = 0;\n  let binaryLengthExtra95 = 0;\n  let binaryLengthExtra96 = 0;\n  let binaryLengthExtra97 = 0;\n  let binaryLengthExtra98 = 0;\n  let binaryLengthExtra99 = 0;\n  let binaryLengthExtra100 = 0;\n  let binaryLengthExtra101 = 0;\n  let binaryLengthExtra102 = 0;\n  let binaryLengthExtra103 = 0;\n  let binaryLengthExtra104 = 0;\n  let binaryLengthExtra105 = 0;\n  let binaryLengthExtra106 = 0;\n  let binaryLengthExtra107 = 0;\n  let binaryLengthExtra108 = 0;\n  let binaryLengthExtra109 = 0;\n  let binaryLengthExtra110 = 0;\n  let binaryLengthExtra111 = 0;\n  let binaryLengthExtra112 = 0;\n  let binaryLengthExtra113 = 0;\n  let binaryLengthExtra114 = 0;\n  let binaryLengthExtra115 = 0;\n  let binaryLengthExtra116 = 0;\n  let binaryLengthExtra117 = 0;\n  let binaryLengthExtra118 = 0;\n  let binaryLengthExtra119 = 0;\n  let binaryLengthExtra120 = 0;\n  let binaryLengthExtra121 = 0;\n  let binaryLengthExtra122 = 0;\n  let binaryLengthExtra123 = 0;\n  let binaryLengthExtra124 = 0;\n  let binaryLengthExtra125 = 0;\n  let binaryLengthExtra126 = 0;\n  let binaryLengthExtra127 = 0;\n  let binaryLengthExtra128 = 0;\n  let binaryLengthExtra129 = 0;\n  let binaryLengthExtra130 = 0;\n  let binaryLengthExtra131 = 0;\n  let binaryLengthExtra132 = 0;\n  let binaryLengthExtra133 = 0;\n  let binaryLengthExtra134 = 0;\n  let binaryLengthExtra135 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return (sum, product);\n};\n\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const product = numbers.reduce((a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let count = 0\n  let prev = 0\n  let curr = 0\n  let next = 0\n  while (i < len) {\n    curr = s[i]\n    count = 1\n    while (j < len - 1) {\n      next = s[j + 1]\n      if (curr === next) {\n        count++\n      } else {\n        break\n      }\n      j++\n    }\n    if (count >= 3) {\n      if (prev === curr) {\n        return false\n      }\n      prev = curr\n      count = 1\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map((grade) => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map((grade) => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map((grade) => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map((grade) => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return 'B+'\n    } else if (grade >= 2.7) {\n      return 'B'\n    } else if (grade >= 2.3) {\n      return 'B-'\n    } else if (grade >= 2.0) {\n      return 'C+'\n    } else if (grade >= 1.7) {\n      return 'C'\n    } else if (grade >= 1.3) {\n      return 'C-'\n    } else if (grade >= 1.0) {\n      return 'D+'\n    } else if (grade >= 0.7) {\n      return 'D'\n    } else if (grade >= 0.0) {\n      return 'D-'\n    } else if (grade >= 0.0) {\n      return 'E'\n    }\n  })\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map((grade) => {\n    if (grade >= 4.0) {\n      return 'A+'\n    } else if (grade >= 3.7) {\n      return 'A'\n    } else if (grade >= 3.3) {\n      return 'A-'\n    } else if (grade >= 3.0) {\n      return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0;\n  let prime = false;\n  while (i < string.length) {\n    if (string[i] === string[i + 1]) {\n      i++;\n    } else {\n      prime = true;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {\n    if (string[i] === s[j]) {\n      i++;\n      j++;\n    } else {\n      j = 0;\n    }\n  }\n  return j === s.length;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  contains all the characters in the string s\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'oell') == false\n  containsAll('Hello', 'Hello') == true\n  containsAll('Hello', 'Hell') == false\n  */\nconst containsAll = (string, s) => {\n  let i = 0;\n  let j = 0;\n  while (i < string.length) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let s = startsOneEnds(i)\n    if (s) {\n      count += s\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let e = endsOneStarts(i)\n    if (e) {\n      count += e\n    }\n  }\n  return count\n}\n\ncon s t endsOneStarts = (n) =>{\n  let count = 0\n  for (let i = 1; i <=", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = (N) => {\n    let sum = 0;\n    while (N > 0) {\n      sum += N % 2;\n      N = N / 2;\n    }\n    return sum;\n  };\n  return sum(N);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*Given a non -emp ty lis t  of in", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t .\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t.\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const newChar = char;\n      const ascii = char.charCodeAt(0);\n      if (ascii >= 65 && ascii <= 90) {\n        newChar = char.toUpperCase();\n      } else if (ascii >= 97 && ascii <= 122) {\n        newChar = char.toLowerCase();\n      }\n      newWord += newChar;\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however , unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2) ...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order .\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however, unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2)...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order.\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    row.push(lst[i][x]);\n  }\n  return row;\n};\n\nconst getRow = (lst, x) => {\n  let row =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  let i = 0\n  let j = len - 1\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181 = 0\n  let temp182 = 0\n  let temp183 = 0\n  let temp184 = 0\n  let temp185 = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l2 = 0;\n    let r2 = 0;\n    let s2 = '';\n    while (i < l) {\n      j = i + 1;\n      k = j + 1;\n      l2 = alphabet.indexOf(s[i]);\n      r2 = alphabet.indexOf(s[j]);\n      s2 = alphabet[(l2 + r2) % r] + s2;\n      i = k;\n    }\n    return s2;\n  };\n  return rot(s);\n};\n\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l2 = 0;\n    let r2 = 0;\n    let s2 = '';\n    while (i < l) {\n      j = i + 1;\n      k = j + 1;\n      l2 = alphabet.indexOf(s[i]);\n      r2 = alphabet.indexOf(s[j]);\n      s2 = s2 + alphabet[(l2 - r2) % r];\n      i = k;\n    }\n    return s2;\n  };\n  return rot(s);\n};\n\nconst encrypt_decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l2 = 0;\n    let r2 = 0;\n    let s2 = '';\n    while (i < l) {\n      j = i + 1;\n      k = j + 1;\n      l2 = alphabet.indexOf(s[i]);\n      r2 = alphabet.indexOf(s[j]);\n      s2 = s2 + alphabet[(l2 - r2) % r];\n      i = k;\n    }\n    return s2;\n  };\n  return rot(s);\n};\n\nconst encrypt_decrypt_rot = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l2 = 0;\n    let r2 = 0;\n    let s2 = '';\n    while (i < l) {\n      j = i + 1;\n      k = j + 1;\n      l2 = alphabet.indexOf(s[i]);\n      r2 = alphabet.indexOf(s[j]);\n      s2 = s2 + alphabet[(l2 + r2) % r];\n      i = k;\n    }\n    return s2;\n  };\n  return rot(s);\n};\n\nconst encrypt_decrypt_rot_rot = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l2 = 0;\n    let r2 = 0;\n    let s2 = '';\n    while (i < l) {\n      j = i + 1;\n      k = j + 1;\n      l2 = alphabet.indexOf(s[i]);\n      r2 = alphabet.indexOf(s[j]);\n      s2 = s2 + alphabet[(l2 + r2) % r];\n      i = k;\n    }\n    return s2;\n  };\n  return rot(s);\n};\n\nconst encrypt_decrypt_rot_rot_rot = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l2 = 0;\n    let r2 = 0;\n    let s2 = '';\n    while (i < l) {\n      j = i + 1;\n      k = j + 1;\n      l2 = alphabet.indexOf(s[i]);\n      r2 = alphabet.indexOf(s[j]);\n      s2 = s2 + alphabet[(l2 - r2) % r];\n      i = k;\n    }\n    return s2;\n  };\n  return rot(s);\n};\n\nconst encrypt_decrypt_rot_rot_rot_rot = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rot = (s) => {\n    let s = s.toUpperCase();\n    let l = s.length;\n    let r = alphabet.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1 , 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconst nextSmallest =  (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two , and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y === z && x + y === x + y;\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonant_vowel_map = {\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n   'm':'m',\n    'n': 'n',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n   's':'s',\n    't': 't',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n  }\n  const consonant_vowel_regex = new RegExp(`[${vowels.join('|')}]`, 'g')\n  const consonant_vowel_regex_map = {\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n   'm':'m',\n    'n': 'n',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n   's':'s',\n    't': 't',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n  }\n  const consonant_vowel_regex_map_replaced = {\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n   'm':'m',\n    'n': 'n',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n   's':'s',\n    't': 't',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n  }\n  const consonant_vowel_regex_map_replaced_regex = new RegExp(`[${vowels.join('|')}]`, 'g')\n  const consonant_vowel_regex_map_replaced_regex_map = {\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n   'm':'m',\n    'n': 'n',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n   's':'s',\n    't': 't',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n  }\n  const consonant_vowel_regex_map_replaced_regex_map_replaced = {\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n   'm':'m',\n    'n': 'n',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n   's':'s',\n    't': 't',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n  }\n  const consonant_vowel_regex_map_replaced_regex_map_replaced_regex = new RegExp(`[${vowels.join('|')}]`, 'g')\n  const consonant_vowel_regex_map_replaced_regex_map_replaced_regex_map = {\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n   'm':'m',\n    'n': 'n',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n   's':'s',\n    't': 't',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n  }\n  const consonant_vowel_regex_map_replaced_regex_map_replaced_regex_map_replaced = new RegExp(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr > max) {\n      max = curr;\n      max_index = i;\n    }\n    sum += curr;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const lowerCaseKeys = keys.map(key => key.toLowerCase())\n  const upperCaseKeys = keys.map(key => key.toUpperCase())\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key])\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  Examples:\n  length(\"a\") should return 1.\n  length(\"ab\") should return 2.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\") should return 4.\n  length(\"abcd\")", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits .\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply2 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply3 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply4 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply5 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply6 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply7 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply8 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply9 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return product;\n};\n\nconst multiply10 = (a, b) => {\n  let a_int = a.toString().split('').map(x => parseInt(x, 10));\n  let b_int = b.toString().split('').map(x => parseInt(x, 10));\n  let product = 0;\n  for (let i = 0; i < a_int.length; i++) {\n    for (let j = 0; j < b_int.length; j++) {\n      product += a_int[i] * b_int[j];\n    }\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in s.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro .\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFract = num - numInt;\n  const numInt2 = Math.floor(numInt + 1);\n  const numFract2 = num - numInt2;\n  if (numFract2 < numFract) {\n    return numInt2;\n  } else {\n    return numInt;\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
