{"task_id": "JavaScript/0", "prompt": "/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* cheCk if in gIVen list oF numbers, arE anY Two numbers cLoSEr tO EAcH OtheR thAN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\nexport default hasCloseElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* inpUt to tHIs fuNctIon IS a stRiNG coNTAiNIng mUltIPle grouPs of neSTed Parentheses. yOur goAl is to\n  SeparAte Those grouP inTo seParatE STrings And return THE list oF ThOSE.\n  SEParAtE grOUps Are BALaNced (Each Open BrACe iS pRopeRLy ClosEd) and nOT neSTeD wIthIN EacH OtheR\n  IgnoRe ANy SpaceS in The inPuT STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  const paren_group = [];\n  const paren_group_open = false;\n  const paren_group_close = false;\n  const paren_group_open_count = 0;\n  const paren_group_close_count = 0;\n  const paren_group_open_index = 0;\n  const paren_group_close_index = 0;\n  const paren_group_open_index_end = 0;\n  const paren_group_close_index_end = 0;\n  const paren_group_open_index_end_end = 0;\n  const paren_group_close_index_end_end = 0;\n  const paren_group_open_index_end_end_end = 0;\n  const paren_group_close_index_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_close_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  const paren_group_open_index_end_end_end_end_end_end_end_end_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* tesT if gnIVen sTriG is A PaliNdROme */\nCONsT isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find The SHortest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poStfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let l = string.length;\n  let r = string.length;\n  let i = 0;\n  let j = l - 1;\n  let str = string.split('');\n  let strReverse = str.reverse();\n  let strReverseReverse = strReverse.reverse();\n  let strReverseReverseReverse = strReverseReverse.reverse();\n  while (i < j) {\n    if (str[i]!= strReverse[j]) {\n      return string.substring(i, j + 1);\n    }\n    i++;\n    j--;\n  }\n  return string;\n}\n\n/* find The LONGest PalindROme That begins wITh a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poSTfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindromeLongest = (string) => {\n  let l = string.length;\n  let r = string.length;\n  let i = 0;\n  let j = l - 1;\n  let str = string.split('');\n  let strReverse = str.reverse();\n  let strReverseReverse = strReverse.reverse();\n  while (i < j) {\n    if (str[i]!= strReverse[j]) {\n      return string.substring(i, j + 1);\n    }\n    i++;\n    j--;\n  }\n  return string;\n}\n\n/* find The SHortest PalindROme That Ends With a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poSTfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindromeShortest = (string) => {\n  let l = string.length;\n  let r = string.length;\n  let i = 0;\n  let j = l - 1;\n  let str = string.split('');\n  let strReverse = str.reverse();\n  let strReverseReverse = strReverse.reverse();\n  while (i < j) {\n    if (str[i]!= strReverse[j]) {\n      return string.substring(i, j + 1);\n    }\n    i++;\n    j--;\n  }\n  return string;\n}\n\n/* find The LONGest PalindROme That Ends With a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poSTfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindromeLongest = (string) => {\n  let l = string.length;\n  let r = string.length;\n  let i = 0;\n  let j = l - 1;\n  let str = string.split('');\n  let strReverse = str.reverse();\n  while (i < j) {\n    if (str[i]!= strReverse[j]) {\n      return string.substring(i, j + 1);\n    }\n    i++;\n    j--;\n  }\n  return string;\n}\n\n/* find The SHortest PalindROme That Ends With a suPplied string.\n  algorIthM idea is siMplE:\n  - FinD the lONGest poSTfIX Of SUpPLIeD string ThaT iS a pALinDroME.\n  - apPend To thE end Of THe string rEvErse OF a string PrefIx that COmeS BeFoRe tHE PalINdroMic suFfIX.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindromeShortest = (string) => {\n  let l = string.length;\n  let r = string.length;\n  let i = 0;\n  let j = l - 1;\n  let str = string.split", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiRst level has n STones.\n  the numBer of StoNes in the nexT leVel iS:\n      - the nEXT odd nuMbeR IF n iS OdD.\n      - THe NExt EvEn nUMbeR if n IS EvEn.\n  ReTurn The nUmBEr oF sToneS in EaCh leVel in a list, whERe eLEmEnT at INDex\n  i REpreSents ThE NuMber oF StoneS in tHE LeveL (i+1).\n\n  ExamPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  givEn a poSItivE inTegER n, you HaVE to MAKe A Pile Of n lEVels of sTones.\n  THE fiR", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  you Will bE GiveN a sTriNG of wOrDS sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you Will bE Given a sTriNg of wOrDs sePARaTEd by ComMAs or spaCes. YouR TasK is\n  to split tHE striNg into Words And return An array of The WordS.\n  \n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*THis FunctIOn taKes Two POsitIvE NumBERs x ANd y anD reTUrns the\n  BiggesT EveN integer numBEr thaT is in the Range [x, y] IncLusive. If \n  tHerE's no Such nUMBer, theN thE FUnCTiON ShOUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const arr = Array(y + 1).fill(0);\n  for (let i = x; i <= y; i++) {\n    arr[i] = i;\n  }\n  return arr.reduce((a, b) => a + b);\n};\n\nconst chooseNum16 = (x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN two PosItiVE intEgERs n aND m, AnD Your TasK Is to comPute thE\n  AveRage of the inTEgers From n thRough m (IncLuding n and m). \n  rouNd thE answER To the nEarEST iNTeGER aND coNvErt THat To bINArY.\n  If n iS greAter ThAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*GIveN a list of pOSitiVe iNteGErs x. return a SoRTed list OF AlL \n  ElemEntS That hasN't any eVEn dIgit.\n\n  Note: RetURned list sHould bE sortEd in iNcreasing OrdEr.\n  \n  FoR examPLE:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = [];\n    for (let j = 0; j < x; j++) {\n      if (i === j) {\n        continue;\n      }\n      const num = parseInt(i + j, 10);\n      if (num > 9) {\n        continue;\n      }\n      digits.push(num);\n    }\n    if (digits.length === 1) {\n      uniqueDigits.push(digits[0]);\n    }\n  }\n  return uniqueDigits;\n};\n\n/*\n  GIVE A LIST OF ALL THE DIGITS IN A NUMBER\n  \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [10]\n  >>> uniqueDigits([15, 33, 1422, 1, 10])\n  [1, 10, 15, 33]\n  >>> uniqueDigits([15, 33, 1422, 1, 10, 15])\n  [1, 10, 15]\n  */\nconst allDigits = (x) => {\n  const allDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = [];\n    for (let j = 0; j < x; j++) {\n      if (i === j) {\n        continue;\n      }\n      const num = parseInt(i + j, 10);\n      if (num > 9) {\n        continue;\n      }\n      digits.push(num);\n    }\n    if (digits.length === 1) {\n      allDigits.push(digits[0]);\n    }\n  }\n  return allDigits;\n};\n\n/*\n  GIVE A LIST OF ALL THE DIGITS IN A NUMBER\n  \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [10]\n  >>> uniqueDigits([15, 33, 1422, 1, 10])\n  [1, 10, 15, 33]\n  >>> uniqueDigits([15, 33, 1422, 1, 10, 15])\n  [1, 10, 15]\n  */\nconst allDigits2 = (x) => {\n  const allDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = [];\n    for (let j = 0; j < x; j++) {\n      if (i === j) {\n        continue;\n      }\n      const num = parseInt(i + j, 10);\n      if (num > 9) {\n        continue;\n      }\n      digits.push(num);\n    }\n    if (digits.length === 1) {\n      allDigits.push(digits[0]);\n    }\n  }\n  return allDigits;\n};\n\n/*\n  GIVE A LIST OF ALL THE DIGITS IN A NUMBER\n  \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [10]\n  >>> uniqueDigits([15, 33, 1422, 1, 10])\n  [1, 10, 15, 33]\n  >>> uniqueDigits([15, 33, 1422, 1, 10, 15])\n  [1, 10, 15]\n  */\nconst allDigits3 = (x) => {\n  const allDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = [];\n    for (let j = 0; j < x; j++) {\n      if (i === j) {\n        continue;\n      }\n      const num = parseInt(i + j, 10);\n      if (num > 9) {\n        continue;\n      }\n      digits.push(num);\n    }\n    if (digits.length === 1) {\n      allDigits.push(digits[0]);\n    }\n  }\n  return allDigits;\n};\n\n/*\n  GIVE A LIST OF ALL THE DIGITS IN A NUMBER\n  \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [10]\n  >>> uniqueDigits([15, 33, 1422, 1, 10])\n  [1, 10, 15, 33]\n  >>> uniqueDigits([15, 33, 1422, 1, 10, 15])\n  [1, 10, 15]\n  */\nconst allDigits4 = (x) => {\n  const allDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = [];\n    for (let j = 0; j < x; j++) {\n      if (i === j) {\n        continue;\n      }\n      const num = parseInt(i + j, 10);\n      if (num > 9) {\n        continue;\n      }\n      digits.push(num);\n    }\n    if (digits.length === 1) {\n      allDigits.push(digits[0]);\n    }\n  }\n  return allDigits;\n};\n\n/*\n  GIVE A LIST OF ALL THE DIGITS IN A NUMBER\n  \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [10]\n  >>> uniqueDigits([15, 33, 1422, 1, 10])\n  [1, 10, 15, 33]\n  >>> uniqueDigits([15, 33, 1422, 1, 10, 15])\n  [1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\n/*\n  givEn an aRRay oF inTegERs, soRt THe iNTEgERs thAt aRE betweeN 1 and 9 inCLusIve,\n  reverse tHE resuLting aRray, aNd tHen replacE eaCh diGit by ITS correSpoNDInG NaME FrOM\n  \"OnE\", \"TWo\", \"THRee\", \"fouR\", \"fIvE\", \"Six\", \"seveN\", \"EigHt\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => b.length - a.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => b.length - a.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => b.length - a.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    result.push(reversedArr[i].name);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => b.length - a.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* impLemenT The fUncTioN f That TaKEs n aS A PaRAmetEr,\n  aND returnS a list of siZE n, suCh that the vaLUe of tHe elemEnt at IndEx i is the faCtoRial Of i if i iS EVen\n  or tHe sUM Of NUmBERs FRom 1 To i OthERwiSe.\n  i sTARtS froM 1.\n  the FactOrIAl oF i iS the MUlTiplIcatioN Of tHE nUmBerS FRom 1 TO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fUncTioN = (n) => {\n    return (n) => {\n      return (n) => {\n        return (n) => {\n          return (n) => {\n            return (n) => {\n              return (n) => {\n                return (n) => {\n                  return (n) => {\n                    return (n) => {\n                      return (n) => {\n                        return (n) => {\n                          return (n) => {\n                            return (n) => {\n                              return (n) => {\n                                return (n) => {\n                                  return (n) => {\n                                    return (n) => {\n                                      return (n) => {\n                                        return (n) => {\n                                          return (n) => {\n                                            return (n) => {\n                                              return (n) => {\n                                                return (n) => {\n                                                  return (n) => {\n                                                    return (n) => {\n                                                      return (n) => {\n                                                        return (n) => {\n                                                          return (n) => {\n                                                           return (n) => {\n                                                            return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                                              return (n) => {\n                                  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, return a tuple thAt HAs tHE NuMBer oF evEN and odd\n  IntegeR PalIndromes thaT Fall wIthin tHe ranGe(1, n), iNclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (n) => {\n  let str = n.toString();\n  let reversed = str.split('').reverse().join('');\n  return str === reversed;\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY OF iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY Of iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY Of iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY Of iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY Of iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  wriTe a fuNCtioN countNums whIch TAkes An ARraY Of iNTegeRs aND returnS\n  the nuMBer Of elements wHIch haS a sum oF digiTs > 0.\n  IF a number iS neGatiVe, theN ITs firsT siGNEd DIgIT WiLL be NeGatIVe:\n  e.G. -123 haS SIgNed dIgitS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2])", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2], ..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*WE haVe an aRRay 'arr' oF N iNteGErs arr[1], arr[2],..., arr[N].The\n  nUmBErs in THE aRRay wIll BE randomLy ordeREd. YOur task is to DEtermIne if\n  iT is poSsiBle to get aN arRay sOrted in NON-decreAsiNG OrDEr BY PeRForMiNg \n  tHE foLloWINg OperAtioN on tHe GIveN aRray:\n      yOu Are aLlowed TO peRFoRm RigHT ShiFT opeRatioN aNY nUmber OF timeS.\n  \n  ONE RighT shifT OPeratIon MeANs SHifTINg All elEMeNtS Of The ARray BY one\n  poSiTION in the rigHT DirECtioN. tHE lASt ElemEnt Of The aRRay WiLl BE moved tO\n  tHe sTArting poSITion in ThE ARray i.e. 0tH Index. \n\n  If It iS possIbLE to ObtAin the sorteD ARraY by PeRfOrmiNg tHe above operATIon\n  TheN return TRuE ElSe return faLSe.\n  if The given arrAY iS empty TheN return truE.\n\n  NoTe: The giVEN list is guaranteED to hAve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return true\n  }\n  const arrCopy = arr.slice()\n  const arrCopyLength = arrCopy.length\n  let i = 0\n  while (i < arrCopyLength) {\n    const j = i + 1\n    const k = j + 1\n    if (arrCopy[i] > arrCopy[j]) {\n      const temp = arrCopy[i]\n      arrCopy[i] = arrCopy[j]\n      arrCopy[j] = temp\n      i++\n    } else {\n      i++\n    }\n    if (arrCopy[i] > arrCopy[j]) {\n      const temp = arrCopy[i]\n      arrCopy[i] = arrCopy[j]\n      arrCopy[j] = temp\n      i++\n    } else {\n      i++\n    }\n  }\n  return arrCopy.every((x, i) => x === arr[i])\n}\n\nconst moveOneBallTest = () => {\n  const arr = [3, 4, 5, 1, 2]\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log(moveOneBall(arr))\n  console.log", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* inpUt are TWo stRinGs a aND b conSiSTinG ONlY Of 1s aNd 0s.\n  pErform bInary Xor on These inputs ANd return resUlt alsO as a stRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor14 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor15 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor16 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor17 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor18 = (a, b)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*IN thIs proBLem, yOu wIll IMpleMeNT a fUNCtIOn thAt tAKes two lIsts of NUmbErs,\n  and deterMInes wHether It is pOssIble to perForM an exchange oF elemENTs\n  betwEen THEm TO mAKE lst1 a list OF onLy EveN NumBerS.\n  tHeRe is No liMit oN tHE nuMbEr of EXcHangEd elemENts BEtWeEn lst1 aND lst2.\n  if iT Is poSsiblE tO exchange ElEmentS BetweEn THE lst1 and lst2 To makE\n  ALl the EleMeNTs OF lst1 to BE EvEn, return \"YES\".\n  oThErWIsE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Start = lst1.slice(0, lst1Length / 2);\n  const lst2Start = lst2.slice(0, lst2Length / 2);\n  const lst1End = lst1.slice(lst1Length / 2, lst1Length);\n  const lst2End = lst2.slice(lst2Length / 2, lst2Length);\n  const lst1Elements = lst1Start.concat(lst2Start);\n  const lst2Elements = lst1Start.concat(lst2End);\n  const lst1ElementsLength = lst1Elements.length;\n  const lst2ElementsLength = lst2Elements.length;\n  const lst1ElementsStart = lst1Elements.slice(0, lst1ElementsLength / 2);\n  const lst2ElementsStart = lst2Elements.slice(0, lst2ElementsLength / 2);\n  const lst1ElementsEnd = lst1Elements.slice(lst1ElementsLength / 2, lst1ElementsLength);\n  const lst2ElementsEnd = lst2Elements.slice(lst2ElementsLength / 2, lst2ElementsLength);\n  const lst1ElementsElements = lst1ElementsStart.concat(lst2ElementsStart);\n  const lst2ElementsElements = lst1ElementsStart.concat(lst2ElementsEnd);\n  const lst1ElementsElementsLength = lst1ElementsElements.length;\n  const lst2ElementsElementsLength = lst2ElementsElements.length;\n  const lst1ElementsElementsStart = lst1ElementsElements.slice(0, lst1ElementsElementsLength / 2);\n  const lst2ElementsElementsStart = lst2ElementsElements.slice(0, lst2ElementsElementsLength / 2);\n  const lst1ElementsElementsEnd = lst1ElementsElements.slice(lst1ElementsElementsLength / 2, lst1ElementsElementsLength);\n  const lst2ElementsElementsEnd = lst2ElementsElements.slice(lst2ElementsElementsLength / 2, lst2ElementsElementsLength);\n  const lst1ElementsElementsElements = lst1ElementsElementsStart.concat(lst2ElementsElementsStart);\n  const lst2ElementsElementsElements = lst1ElementsElementsStart.concat(lst2ElementsElementsEnd);\n  const lst1ElementsElementsElementsLength = lst1ElementsElementsElements.length;\n  const lst2ElementsElementsElementsLength = lst2ElementsElementsElements.length;\n  const lst1ElementsElementsElementsStart = lst1ElementsElementsElements.slice(0, lst1ElementsElementsElementsLength / 2);\n  const lst2ElementsElementsElementsStart = lst2ElementsElementsElements.slice(0, lst2ElementsElementsElementsLength / 2);\n  const lst1ElementsElementsElementsEnd = lst1ElementsElementsElements.slice(lst1ElementsElementsElementsLength / 2, lst1ElementsElementsElementsLength);\n  const lst2ElementsElementsElementsEnd = lst2ElementsElementsElements.slice(lst2ElementsElementsElementsLength / 2, lst2ElementsElementsElementsLength);\n  const lst1ElementsElementsElementsElements = lst1ElementsElementsElementsStart.concat(lst2ElementsElementsElementsStart);\n  const lst2ElementsElementsElementsElements = lst1ElementsElementsElementsStart.concat(lst2ElementsElementsElementsEnd);\n  const lst1ElementsElementsElementsElementsLength = lst1ElementsElementsElementsElements.length;\n  const lst2ElementsElementsElementsElementsLength = lst2ElementsElementsElementsElements.length;\n  const lst1ElementsElementsElementsElementsStart = lst1ElementsElementsElementsElements.slice(0, lst1ElementsElementsElementsElementsLength / 2);\n  const lst2ElementsElementsElementsElementsStart = lst2ElementsElementsElementsElements.slice(0, lst2ElementsElementsElementsElementsLength / 2);\n  const lst1ElementsElementsElementsElementsEnd = lst1ElementsElementsElementsElements.slice(lst1ElementsElementsElementsElementsLength / 2, lst1ElementsElementsElementsElementsLength);\n  const lst2ElementsElementsElementsElementsEnd = lst2ElementsElementsElementsElements.slice(lst2Elements", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*GIveN a striNG repResEntINg a spAcE SepARAtED lowErcASe letteRs, return a dictIOnaRy\n  of the lettER with The mosT repeTitIon and conTaiNing The coRREspondIng COUnT.\n  if SEVeRAl lEtTerS HavE thE SAmE occUrreNce, return aLl OF thEm.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.trim().toLowerCase()\n  const letters = test.split('')\n  const dict = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (dict[letters[i]] === undefined) {\n      dict[letters[i]] = 1\n    } else {\n      dict[letters[i]]++\n    }\n  }\n  return dict\n}\n\n/*\n  Given a string, return a list of all the words in the string.\n  \n  Example:\n  words('a b c') == ['a', 'b', 'c']\n  words('a b c d') == ['a', 'b', 'c', 'd']\n  words('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n  words('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\n  words('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n  words('') == []\n  \n  */\nconst words = (test) => {\n  const test = test.trim().toLowerCase()\n  const words = test.split(' ')\n  return words\n}\n\n/*\n  Given a string, return a list of all the unique words in the string.\n  \n  Example:\n  uniqueWords('a b c') == ['a', 'b', 'c']\n  uniqueWords('a b c d') == ['a', 'b', 'c', 'd']\n  uniqueWords('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n  uniqueWords('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\n  uniqueWords('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n  uniqueWords('') == []\n  \n  */\nconst uniqueWords = (test) => {\n  const test = test.trim().toLowerCase()\n  const words = test.split(' ')\n  const uniqueWords = []\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i])\n    }\n  }\n  return uniqueWords\n}\n\n/*\n  Given a string, return a list of all the unique words in the string.\n  \n  Example:\n  uniqueWords('a b c') == ['a', 'b', 'c']\n  uniqueWords('a b c d') == ['a', 'b', 'c', 'd']\n  uniqueWords('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n  uniqueWords('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\n  uniqueWords('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n  uniqueWords('') == []\n  \n  */\nconst uniqueWords = (test) => {\n  const test = test.trim().toLowerCase()\n  const words = test.split(' ')\n  const uniqueWords = []\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i])\n    }\n  }\n  return uniqueWords\n}\n\n/*\n  Given a string, return a list of all the unique words in the string.\n  \n  Example:\n  uniqueWords('a b c') == ['a', 'b', 'c']\n  uniqueWords('a b c d') == ['a', 'b', 'c', 'd']\n  uniqueWords('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n  uniqueWords('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\n  uniqueWords('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n  uniqueWords('') == []\n  \n  */\nconst uniqueWords = (test) => {\n  const test = test.trim().toLowerCase()\n  const words = test.split(' ')\n  const uniqueWords = []\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i])\n    }\n  }\n  return uniqueWords\n}\n\n/*\n  Given a string, return a list of all the unique words in the string.\n  \n  Example:\n  uniqueWords('a b c') == ['a', 'b', 'c']\n  uniqueWords('a b c d') == ['a', 'b', 'c', 'd']\n  uniqueWords('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n  uniqueWords('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\n  uniqueWords('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n  uniqueWords('') == []\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*TAsk\n  we are GIven Two StrINgs s aNd c, YOu hAVE tO DeleTed ALl the chAracteRS in s thAt are equal tO Any chAracteR in c\n  then CheCk if the reSulT strIng is PALindroMe.\n  A STRiNG iS CAlLEd pAlIndROme If iT REaDs thE samE bacKwARd aS fOrwaRD.\n  YOu shOuld return a tuple cONtaINiNg The RESulT StriNg and TrUE/fAlse fOR the cHeCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c) {\n      i++;\n    } else if (s[j] === c) {\n      j--;\n    } else {\n      result.push(s.slice(i, j + 1));\n      i = j + 1;\n    }\n  }\n  return result.concat(s.slice(i));\n};\n\nconst isPalindrome = (s) => {\n  const result = reverseDelete(s, s[s.length - 1]);\n  return result.length === 1 && result[0] === s;\n};\n\nconsole.log(isPalindrome(\"abcdef\"));\nconsole.log(isPalindrome(\"abcdedcba\"));\nconsole.log(isPalindrome(\"abcd\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*GIveN a list of sTRingS, whEre EAch sTrINg cONSiSTs of OnlY Digits, return a list.\n  each elEMenT i of the outpuT ShoulD be \"the NumbeR of Odd elemenTs in tHe\n  stRing i oF THe inpuT.\" whERE aLL tHE i's ShOUld Be RepLAceD by THE nUmbeR\n  of oDd diGiTS in thE i'th sTrinG Of The iNput.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (s) => {\n    const oddCount = (s) => {\n      const oddCount = (s) => {\n        const oddCount = (s) => {\n          const oddCount = (s) => {\n            const oddCount = (s) => {\n              const oddCount = (s) => {\n                const oddCount = (s) => {\n                  const oddCount = (s) => {\n                    const oddCount = (s) => {\n                      const oddCount = (s) => {\n                        const oddCount = (s) => {\n                          const oddCount = (s) => {\n                            const oddCount = (s) => {\n                              const oddCount = (s) => {\n                                const oddCount = (s) => {\n                                  const oddCount = (s) => {\n                                    const oddCount = (s) => {\n                                      const oddCount = (s) => {\n                                        const oddCount = (s) => {\n                                          const oddCount = (s) => {\n                                            const oddCount = (s) => {\n                                              const oddCount = (s) => {\n                                                const oddCount = (s) => {\n                                                  const oddCount = (s) => {\n                                                    const oddCount = (s) => {\n                                                      const oddCount = (s) => {\n                                                        const oddCount = (s) => {\n                                                          const oddCount = (s) => {\n                                                           const oddCount = (s) => {\n                                                            const oddCount = (s) => {\n                                                              const oddCount = (s) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return oddCount(lst)\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay oF inTegERs nums, fiNd THe mINImUM sum Of aNY non-empTy sub-aRRay\n  Of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const len = nums.length\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = sum\n  const minSumIndex = 0\n  let minSumIndexOfSubArray = 0\n  let minSumOfSubArray = 0\n  let minSumOfSubArrayIndex = 0\n  let minSumOfSubArrayIndexOfSubArray = 0\n  let minSumOfSubArrayIndexOfSubArrayOfSubArray = 0\n  let minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray = 0\n  let minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = 0\n  let minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray = 0\n  for (let i = 0; i < len; i++) {\n    const subArray = nums.slice(i, i + 1)\n    const subArraySum = subArray.reduce((a, b) => a + b, 0)\n    if (subArraySum < minSum) {\n      minSum = subArraySum\n      minSumIndex = i\n      minSumOfSubArray = subArraySum\n      minSumOfSubArrayIndex = i\n      minSumOfSubArrayIndexOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n    }\n    if (subArraySum < minSumOfSubArray) {\n      minSumOfSubArray = subArraySum\n      minSumOfSubArrayIndex = i\n      minSumOfSubArrayIndexOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n    }\n    if (subArraySum < minSumOfSubArrayOfSubArray) {\n      minSumOfSubArrayOfSubArray = subArraySum\n      minSumOfSubArrayIndexOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n    }\n    if (subArraySum < minSumOfSubArrayOfSubArrayOfSubArray) {\n      minSumOfSubArrayOfSubArrayOfSubArray = subArraySum\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n    }\n    if (subArraySum < minSumOfSubArrayOfSubArrayOfSubArrayOfSubArray) {\n      minSumOfSubArrayOfSubArrayOfSubArrayOfSubArray = subArraySum\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n    }\n    if (subArraySum < minSumOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray) {\n      minSumOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray = subArraySum\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n      minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray = i\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumOfSubArray,\n    minSumOfSubArrayIndex,\n    minSumOfSubArrayIndexOfSubArray,\n    minSumOfSubArrayIndexOfSubArrayOfSubArray,\n    minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArray,\n    minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArray,\n    minSumOfSubArrayIndexOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray,\n  }\n}\n\nexport default minSubArraySum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a rEctAngULar grid oF wELls. eACh ROw rePreSEnts a siNgle weLL,\n  anD each 1 in a row rePResenTs a sinGle unIt oF water.\n  EacH weLl haS a corRESpondiNg bUCKeT ThAT CaN Be uSeD to EXtrAct WATeR froM it, \n  aNd alL bUCkeTs Have THe Same capacity.\n  your taSK is TO uSe The BUCkeTS to eMpty tHe WElLs.\n  OutPUt the NuMBEr of Times YOU need To lOwER tHE buCKEtS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let res = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 0) {\n                res += fill(grid, i, j, capacity);\n            }\n        }\n    }\n    return res;\n};\n\nconst fill = (grid, i, j, capacity) => {\n    let res = 0;\n    for (let k = i; k < i + grid[i].length; k++) {\n        for (let l = j; l < j + grid[i][k].length; l++) {\n            if (grid[i][k][l] === 0) {\n                grid[i][k][l] = 1;\n                res += 1;\n                if (res === capacity) {\n                    return res;\n                }\n            }\n        }\n    }\n    return res;\n};\n\nconst main = () => {\n    let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n    let capacity = 1;\n    console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  in tHis KaTA, you HavE to SOrt aN aRRay OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRy repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRray OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRY repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRray OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRY repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRray OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRY repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRray OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRY repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRray OF NoN-NegaTivE IntegerS accorDIng To\n  number of oNEs in theIr binaRY repResEntation in aSceNdinG ordeR.\n  fOr simiLar NUMbER oF ONeS, SorT bAseD On dEciMAL vAlue.\n\n  it muSt be ImPLemEnTed lIKe This:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  in tHis KaTA, you HavE to SOrt aN aRray OF NoN-NegaTivE", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (i < n) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\n  GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (i < n) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\n  GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (i < n) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\n  GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (i < n) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\n  GIveN a strINg s anD a nAtuRAl nuMbER n, yoU HAvE Been TasKEd to impLement \n  A FunCtion that reTUrns a list Of all wOrds fRom String s thaT coNtaiN exacTLY \n  n consoNanTS, in OrDEr THEsE WorDs AppEAr in tHe sTRInG s.\n  If tHe stRing s Is EMptY tHen tHE fUnctIon shoULd return aN EmPtY list.\n  NoTE: You MAy asSume tHe INpUt strINg conTaINS onlY lettERS and sPacEs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a word. YoUr tAsk IS to fInD The CLOsESt voWel THat stanDs betwEEn \n  tWo consonantS From tHe righT side Of tHe word (case senSitIve).\n  \n  VOwels in THE beginNinG ANd ENdING dOEsn'T cOunT. retUrn EMPtY strIng iF you DiDN't\n  fInD any VOwEl meT the abOVe cONdItIon. \n\n  yOU maY AssuMe thaT tHE gIven sTRing cOnTAIns ENglisH LEtter OnlY.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = word.charAt(0)\n  const vowelEnd = word.charAt(wordLength - 1)\n  const vowelIndex = vowels.indexOf(vowelStart)\n  const consonantIndex = consonants.indexOf(wordEnd)\n  const vowelLength = vowelEnd - vowelStart\n  const consonantLength = consonantIndex - vowelIndex\n  const vowelDistance = vowelLength - consonantLength\n  const consonantDistance = consonantLength - vowelLength\n  const closestVowel = word.substr(vowelIndex, vowelLength)\n  const closestConsonant = word.substr(vowelIndex + vowelLength, consonantLength)\n  const closestVowelDistance = vowelDistance\n  const closestConsonantDistance = consonantDistance\n  const closestVowelIndex = vowelIndex\n  const closestConsonantIndex = consonantIndex\n  return {\n    closestVowel,\n    closestVowelDistance,\n    closestConsonant,\n    closestConsonantDistance,\n    closestVowelIndex,\n    closestConsonantIndex\n  }\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = word.charAt(0)\n  const vowelEnd = word.charAt(wordLength - 1)\n  const vowelIndex = vowels.indexOf(vowelStart)\n  const consonantIndex = consonants.indexOf(wordEnd)\n  const vowelLength = vowelEnd - vowelStart\n  const consonantLength = consonantIndex - vowelIndex\n  const vowelDistance = vowelLength - consonantLength\n  const consonantDistance = consonantLength - vowelLength\n  const closestVowel = word.substr(vowelIndex, vowelLength)\n  const closestConsonant = word.substr(vowelIndex + vowelLength, consonantLength)\n  const closestVowelDistance = vowelDistance\n  const closestConsonantDistance = consonantDistance\n  const closestVowelIndex = vowelIndex\n  const closestConsonantIndex = consonantIndex\n  return {\n    closestVowel,\n    closestVowelDistance,\n    closestConsonant,\n    closestConsonantDistance,\n    closestVowelIndex,\n    closestConsonantIndex\n  }\n}\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = word.charAt(0)\n  const vowelEnd = word.charAt(wordLength - 1)\n  const vowelIndex = vowels.indexOf(vowelStart)\n  const consonantIndex = consonants.indexOf(wordEnd)\n  const vowelLength = vowelEnd - vowelStart\n  const consonantLength = consonantIndex - vowelIndex\n  const vowelDistance = vowelLength - consonantLength\n  const consonantDistance = consonantLength - vowelLength\n  const closestVowel = word.substr(vowelIndex, vowelLength)\n  const closestConsonant = word.substr(vowelIndex + vowelLength, consonantLength)\n  const closestVowelDistance = vowelDistance\n  const closestConsonantDistance = consonantDistance\n  const closestVowelIndex = vowelIndex\n  const closestConsonantIndex = consonantIndex\n  return {\n    closest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* you Are giVEn a list oF twO stRIngs, BoTH stRINgS ConsIst OF open\n  paRentheSEs '(' oR close parenTHeses ')' Only.\n  YoUr job Is tO check if iT is PossIble tO COncateNatE THe TWo STRiNGs in\n  sOmE orDEr, tHat THE rEsulTing StriNg WIll Be Good.\n  a StRing s is conSIdeREd To Be gOOD if ANd onLy if aLl PArEntheSEs in S\n  arE bALAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  if (len === 1) return 'Yes'\n  if (lst[0] === '(' && lst[len - 1] === ')') return 'Yes'\n  if (lst[0] === ')' && lst[len - 1] === '(') return 'No'\n  return 'No'\n}\n\n/*\n  matchParens(['()', ')']) == 'No'\n  matchParens(['(()', ')']) == 'No'\n  matchParens(['(())', ')']) == 'No'\n  matchParens(['(())()', ')']) == 'No'\n  matchParens(['(())()', ')']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes'\n  matchParens(['(())()', ')()']) == 'Yes", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* out Of list of strings, return tHE longest one. retUrn THe fiRsT One in CASe OF mulTipLE\n  strings of the sAme lenGTh. REturn null in caSE the iNput list is Empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = strings[0].length;\n  strings.forEach((str, i) => {\n    if (str.length > maxLen) {\n      max = str;\n      maxLen = str.length;\n    }\n  });\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay arr oF inTegERs anD a POsiTIVe INtegEr k, return a SOrted list \n  of Length k WIth The maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length\n  const max = arr[arrLength - 1]\n  const result = []\n  for (let i = 0; i < arrLength - k + 1; i++) {\n    result.push(arr[i])\n  }\n  return result\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*GIveN a non-EMpty list Of iNteGErs, return tHe SUm oF ALl OF the Odd ELements That arE in EveN positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a noN-EmptY arRay OF intEgERs arr aND An INtegEr k, return\n  tHE sum of tHe elemENts With at most tWO digiTs from The fiRst k Elements oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, return a soRtED list thAT HaS The oDd nUMbers in coLlatz sEQueNce.\n\n  The CollaTZ conjEcture Is a coNjeCture in mathEmaTics That cONCerns a SeqUENcE DeFINeD\n  As fOlLowS: StaRt wITH aNy poSitiVe inTeGEr n. THeN eacH TeRm is ObtainED frOM tHe \n  PreVIOus TErm aS follOwS: If The prEVious TeRM Is evEn, the NEXt terM is OnE HaLF of \n  THE pRevioUS tErM. if The PReviOUs term Is ODD, The next TERm iS 3 TimeS THE pREvIous\n  TerM pLus 1. THE coNjEcTUre is thAt No mATter what VALue oF n, tHE SequeNCe will aLwaYs reaCh 1.\n\n  nOte: \n      1. colLatz(1) is [1].\n      2. returNED list soRteD in iNcReasIng Order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz2 = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz3 = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz4 = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz5 = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz6 = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz7 = (n) => {\n  const returNED = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return collatz(n / 2);\n    }\n    return [n, collatz(3 * n + 1), collatz(n * 3 + 1)];\n  };\n  const collatzN = collatz(n);\n  for (let i = 0; i < collatzN.length; i++) {\n    returNED.push(collatzN[i]);\n  }\n  return returNED;\n};\n\nconst getOddCollatz8 = (n) => {\n  const returNED = [];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*YOu hAve to WRite A fuNctIOn whIcH ValIDAtES a giVen date STring anD\n  returNS trUe if the date is vaLId othErwise False.\n  the date Is valid if All Of thE follOWIng rulEs aRE SaTIsFIEd:\n  1. tHe date sTrIng IS noT emPTY.\n  2. THe nuMber Of daYs IS noT lEss tHAn 1 Or hiGher thAN 31 daYS fOr MonTHS 1,3,5,7,8,10,12. AnD The nUmber Of DAyS is noT Less tHaN 1 OR higHer thAN 30 Days fOr mOnTHs 4,6,9,11. aNd, tHE NuMber oF DaYs IS nOt lESs thAN 1 or higHeR THAn 29 for thE MOntH 2.\n  3. the mONTHs SHoUld nOt bE lEss tHAn 1 oR hIgHEr than 12.\n  4. THe date ShoULd be in the fORMat: mM-dD-YYyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (typeof date!=='string') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default validDate;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1, ... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1,... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  givEn a stRIng oF woRds, return A list Of woRdS SplIT On WHiteSpaCE, if no whItespaCEs eXists in the texT You\n  shOuld spLit on ComMas ',' if no coMmaS exiSts yoU SHould return tHe nUMBeR Of LOWeR-CasE lEttERs wIth ODD oRder in The\n  aLphaBeT, Ord('A') = 0, oRd('b') = 1,... oRD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nconst splitWords = (txt) => {\n  const words = txt.split(/\\", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICate oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  if (len < 2) return true\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] > lst[j]) return false\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICATE oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isUnique = (lst) => {\n  const len = lst.length\n  if (len < 2) return true\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] === lst[j]) return false\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  givEn a list of NUmbeRs, return wHetHEr or NoT TheY ARe SOrteD\n  in asCEnding oRder. If list HAs mOre than 1 duplICATE oF the saMe\n  numBer, return False. AssuMe nO negAtive NUMbers aNd oNLY iNTeGERs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isUniquelySorted = (lst) => {\n  const len = lst.length\n  if (len < 2) return true\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (lst[i] === lst[j]) return false\n    i++\n    j--\n  }\n  return true\n}\n\nexport {\n  isSorted,\n  isUnique,\n  isUniquelySorted\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN two IntErvALs,\n  whErE EacH INtERval Is a PAir of inTegers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length === 1) {\n    return \"YES\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst isPrime = (number) => {\n  if (number === 1) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  const limit = Math.sqrt(number);\n  for (let i = 3; i <= limit; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst test = (interval) => {\n  const result = intersection(interval, interval);\n  if (result === \"YES\") {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n};\n\ntest((-3, -1));\ntest((-1, 1));\ntest((-5, 5));\ntest((1, 2));\ntest((2, 3));\ntest((-1, -2));\ntest((-2, -1));\ntest((-3, -2));\ntest((-2, -1));\ntest((-3, -1));\ntest((-1, -1));\ntest((-1, 0));\ntest((-1, 1));\ntest((-1, 2));\ntest((0, 1));\ntest((0, 2));\ntest((1, 2));\ntest((1, 3));\ntest((2, 3));\ntest((2, 4));\ntest((3, 4));\ntest((3, 5));\ntest((4, 5));\ntest((5, 6));\ntest((6, 7));\ntest((6, 8));\ntest((7, 8));\ntest((7, 9));\ntest((8, 9));\ntest((9, 10));\ntest((10, 11));\ntest((10, 12));\ntest((11, 12));\ntest((11, 13));\ntest((12, 13));\ntest((12, 14));\ntest((13, 14));\ntest((13, 15));\ntest((14, 15));\ntest((14, 16));\ntest((15, 16));\ntest((15, 17));\ntest((16, 17));\ntest((16, 18));\ntest((17, 18));\ntest((17, 19));\ntest((18, 19));\ntest((18, 20));\ntest((19, 20));\ntest((19, 21));\ntest((20, 21));\ntest((20, 22));\ntest((21, 22));\ntest((21, 23));\ntest((22, 23));\ntest((22, 24));\ntest((23, 24));\ntest((23, 25));\ntest((24, 25));\ntest((24, 26));\ntest((25, 26));\ntest((25, 27));\ntest((26, 27));\ntest((26, 28));\ntest((27, 28));\ntest((27, 29));\ntest((28, 29));\ntest((28, 30));\ntest((29, 30));\ntest((29, 31));\ntest((30, 31));\ntest((30, 32));\ntest((31, 32));\ntest((31, 33));\ntest((32, 33));\ntest((32, 34));\ntest((33, 34));\ntest((33, 35));\ntest((34, 35));\ntest((34, 36));\ntest((35, 36));\ntest((35, 37));\ntest((36, 37));\ntest((36, 38));\ntest((37, 38));\ntest((37, 39));\ntest((38, 39));\ntest((38, 40));\ntest((39, 40));\ntest((39, 41));\ntest((40, 41));\ntest((40, 42));\ntest((41, 42));\ntest((41, 43));\ntest((42, 43));\ntest((42, 44));\ntest((43, 44));\ntest((43, 45));\ntest((44, 45));\ntest((44, 46));\ntest((45, 46));\ntest((45, 47));\ntest((46, 47));\ntest((46, 48));\ntest((47, 48));\ntest((47, 49));\ntest((48, 49));\ntest((48, 50));\ntest((49, 50));\ntest((49, 51));\ntest((50, 51));\ntest((50, 52));\ntest((51, 52));\ntest((51, 53));\ntest((52, 53));\ntest((52, 54));\ntest((53, 54));\ntest((53, 55));\ntest((54, 55));\ntest((54, 56));\ntest((55, 56));\ntest((55, 57));\ntest((56, 57));\ntest((56, 58));\ntest((57, 58));\ntest((57, 59));\ntest((58, 59));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn an ArrAy arr oF InteGeRS anD YOu NEed tO return\n  suM Of magniTudes oF IntEgers multipLIed by ProducT of alL siGns\n  of each NumBer in tHe arrAY, RepresEntED By 1, -1 OR 0.\n  NOTE: return nULl fOr EmpTY arr.\n\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExAmpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  let sign = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a grid wiTH N roWs aNd N COlumNs (n >= 2) And A POsITive IntEGer k, \n  each Cell of THe grid cOntains a valUE. EverY integEr in the RanGe [1, N * N]\n  incluSivE appEars eXACtly onCe oN THe CElLS Of THe grid.\n\n  YOu HavE To fInd THE mInimUm paTh of LeNGth k in ThE grid. You CAn StarT\n  from aNY ceLL, aNd in EacH STep YOu caN move To ANy Of the NEighbOr CELls,\n  in oTher wORDs, you Can Go TO cELls WHIcH sharE An EdGE wIth YOu cuRRent\n  ceLl.\n  pLEAse note THAt a PAth oF LENgTH k mEans VisItIng eXActLy k CeLLs (not\n  neCeSsaRIly distiNCT).\n  You cAnnoT go oFF the grid.\n  A paTh A (Of lenGtH k) Is cOnsIdered less tHAN a pAth b (oF lEngtH k) if\n  After making THE orDerED LiSTs Of thE VaLuEs on the cellS ThAt A and b go\n  ThroUgh (Let's calL THem lst_A and lST_B), lsT_A is lexicographically leSS\n  thaN lst_b, in other Words, thERe EXist an InteGeR iNdeX i (1 <= i <= k)\n  Such ThaT lst_a[i] < Lst_B[i] aNd FOr anY j (1 <= j < i) we HAve\n  LST_A[j] = LSt_B[j].\n  IT iS gUaraNTeed ThAt thE anSwer is uNiQUe.\n  reTurn AN oRDEREd list of the valUEs oN the CelLs that thE mInimUM path Go tHrouGh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length\n  const [n, m] = [len, len]\n  const [lst_A, lst_B] = [new Array(n), new Array(n)]\n  for (let i = 0; i < n; i++) {\n    lst_A[i] = grid[i][0]\n    lst_B[i] = grid[i][0]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (lst_A[j] < lst_B[i]) {\n        lst_A[i] = lst_A[j]\n      }\n      if (lst_A[j] > lst_B[i]) {\n        lst_B[i] = lst_B[j]\n      }\n    }\n  }\n  const [lst_A_len, lst_B_len] = [lst_A.length, lst_B.length]\n  const [lst_A_min, lst_B_min] = [lst_A_len, lst_B_len]\n  const [lst_A_max, lst_B_max] = [lst_A_len, lst_B_len]\n  const [lst_A_sum, lst_B_sum] = [0, 0]\n  for (let i = 0; i < lst_A_len; i++) {\n    lst_A_sum += lst_A[i]\n  }\n  for (let i = 0; i < lst_B_len; i++) {\n    lst_B_sum += lst_B[i]\n  }\n  const [lst_A_avg, lst_B_avg] = [lst_A_sum / lst_A_len, lst_B_sum / lst_B_len]\n  const [lst_A_med, lst_B_med] = [lst_A_sum / lst_A_len, lst_B_sum / lst_B_len]\n  const [lst_A_max_med, lst_B_max_med] = [lst_A_max, lst_B_max]\n  const [lst_A_min_med, lst_B_min_med] = [lst_A_min, lst_B_min]\n  const [lst_A_max_min_med, lst_B_max_min_med] = [lst_A_max_med, lst_B_max_min_med]\n  const [lst_A_min_max_med, lst_B_min_max_med] = [lst_A_min_med, lst_B_min_max_med]\n  const [lst_A_max_min_max_med, lst_B_max_min_max_med] = [lst_A_max_min_med, lst_B_max_min_max_med]\n  const [lst_A_min_max_min_med, lst_B_min_max_min_med] = [lst_A_min_max_med, lst_B_min_max_min_med]\n  const [lst_A_min_min_max_med, lst_B_min_min_max_med] = [lst_A_min_min_med, lst_B_min_min_max_med]\n  const [lst_A_min_min_min_med, lst_B_min_min_min_med] = [lst_A_min_min_med, lst_B_min_min_min_med]\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* retUrn a grEAtesT coMmoN DiviSoR Of tWO InTEgerS a anD b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a % b, b);\n};\n\nconst gcd = greatestCommonDivisor;\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15));\n\n// const gcd = (a, b) => {\n//   if (a === 0) {\n//     return b;\n//   }\n//   if (b === 0) {\n//     return a;\n//   }\n//   if (a < b) {\n//     return gcd(b, a);\n//   }\n//   return gcd(a % b, b);\n// };\n\n// console.log(gcd(3, 5));\n// console.log(gcd(25, 15", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*EVerYone kNOws FIboNacCI seqUeNCe, iT WAs STudiEd dEEply by mAthemaTIciAns in \n  the last cOUple cEnturiEs. HowEveR, what peopLe dOn't kNow is tRIbonacCi sEQUeNCe.\n  tRIbONacCi SeqUEncE is DEFiNed bY the RecuRrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, If n Is evEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), iF n is oDd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1];\n  for (let i = 2; i <= n; i++) {\n    result.push(1 + (i / 2) + (i - 1) / 2);\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*GIveN a posITive IntEgeR n, return The pRoDUct OF ThE Odd digits.\n  REtuRN 0 if all digits aRe even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits2 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits3 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits4 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits5 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits6 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits7 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits8 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits9 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits10 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits11 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits12 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits13 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits14 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits15 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits16 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits17 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits18 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits19 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits20 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits21 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits22 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits23 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits24 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits25 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits26 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits27 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits28 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0? d.slice(0, d.length - 1) : d;\n};\n\nconst digits29 = (n) => {\n  const d = n.toString(10);\n  return d.length % 2 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  creAte a fUNctiOn tHat TAkes A string aS InpUT WhICh coNtaINs only sQuare bRAckEts.\n  The functIOn shoUld return truE if anD onLy if there Is a ValiD subsEQUence oF brACKeTS\n  wHERe AT leAsT onE BraCkeT in THe SubsEqueNce iS nESteD.\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➞ falSe\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ TruE\n  isNested('[[]][[') ➞ TrUe\n  */\nConST isNested2 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➞ tRue\n  isNested('[]]]]][[[[[]') ➞ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested3 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n  isNested('[]]]]][[[[[]') ➟ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested4 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n  isNested('[]]]]][[[[[]') ➟ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested5 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n  isNested('[]]]]][[[[[]') ➟ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested6 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n  isNested('[]]]]][[[[[]') ➟ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested7 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n  isNested('[]]]]][[[[[]') ➟ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested8 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n  isNested('[]]]]][[[[[]') ➟ fALsE\n  isNested('[][]') ➟ falSe\n  isNested('[]') ➟ falsE\n  isNested('[[][]]') ➟ TruE\n  isNested('[[]][[') ➟ TrUe\n  */\nConST isNested9 = (string) => {\n  let [start, end] = string.split(']')\n  let [start2, end2] = start.split('[')\n  return start2 === end2\n}\n\n/*\n  isNested('[[]]') ➟ tRue\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a list of NumBerS.\n  you nEeD To return tHE SuM Of sqUarED numberS in the giVEn list,\n  rOund each eleMEnt in thE list to the Upper int(Ceiling) FirSt.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return sum;\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* creAte a fUNctiOn tHat REturNs TRue IF ThE Last ChaRActer\n  of A given STriNg is an alphaBEticaL charaCter aNd iS not\n  a part Of a Word, And faLSE otherWisE.\n  nOtE: \"WoRD\" Is A GroUp Of cHAraCteRS SeParaTed bY spaCe.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true\n  }\n  return false\n}\n*/\n\n/*\n  checkIfLastCharIsALetter = (txt) => {\n  const txtLen = txt.length\n  if (txtLen === 0) {\n    return false\n  }\n  const lastChar = txt[txtLen - 1]\n  if (isAlpha(lastChar)) {\n    return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length === 0) return -1\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) min = arr[i]\n    if (arr[i] > max) max = arr[i]\n  }\n  if (min === max) return min\n  let diff = max - min\n  let mid = (max + min) / 2\n  if (mid === min) return min\n  if (mid === max) return max\n  if (mid < min) return canArrange(arr.slice(1, arr.length))\n  if (mid > max) return canArrange(arr.slice(0, arr.length - 1))\n  return mid\n}\n\n/*CReaTe a fuNCtioN whIch REturNs THe lARGeST indEx oF An elemeNt whicH\n  Is nOt greater thAN or eqUal to tHe eleMenT immediatEly PrecEding IT. if\n  no suCh eLEMeNT eXIStS TheN return -1. THe gIVen ArrAY WiLl noT conTain\n  DuPLicAtE valUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  if (arr.length === 0) return -1\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) min = arr[i]\n    if (arr[i] > max) max = arr[i]\n  }\n  if (min === max) return min\n  let diff = max - min\n  let mid = (max + min) / 2\n  if (mid === min) return min\n  if (mid === max) return max\n  if (mid < min) return canArrange2(arr.slice(1, arr.length))\n  if (mid > max) return canArrange2(arr.slice(0, arr.length - 1))\n  return mid\n}\n\nconst canArrange3 = (arr) => {\n  if (arr.length === 0) return -1\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) min = arr[i]\n    if (arr[i] > max) max = arr[i]\n  }\n  if (min === max) return min\n  let diff = max - min\n  let mid = (max + min) / 2\n  if (mid === min) return min\n  if (mid === max) return max\n  if (mid < min) return canArrange3(arr.slice(1, arr.length))\n  if (mid > max) return canArrange3(arr.slice(0, arr.length - 1))\n  return mid\n}\n\nconst canArrange4 = (arr) => {\n  if (arr.length === 0) return -1\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) min = arr[i]\n    if (arr[i] > max) max = arr[i]\n  }\n  if (min === max) return min\n  let diff = max - min\n  let mid = (max + min) / 2\n  if (mid === min) return min\n  if (mid === max) return max\n  if (mid < min) return canArrange4(arr.slice(1, arr.length))\n  if (mid > max) return canArrange4(arr.slice(0, arr.length - 1))\n  return mid\n}\n\nconst canArrange5 = (arr) => {\n  if (arr.length === 0) return -1\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) min = arr[i]\n    if (arr[i] > max) max = arr[i]\n  }\n  if (min === max) return min\n  let diff = max - min\n  let mid = (max + min) / 2\n  if (mid === min) return min\n  if (mid === max) return max\n  if (mid < min) return canArrange5(arr.slice(1, arr.length))\n  if (mid > max) return canArrange5(arr.slice(0, arr.length - 1))\n  return mid\n}\n\nconst canArrange6 = (arr) => {\n  if (arr.length === 0) return -1\n  let min = arr[0]\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) min = arr[i]\n    if (arr[i] > max) max = arr[i]\n  }\n  if (min === max) return min\n  let diff = max - min\n  let mid = (max + min) / 2\n  if (mid === min) return min\n  if (mid === max) return max\n  if (mid < min) return canArrange6(arr.slice(1, arr.length))\n  if (mid > max) return canArrange6(arr.slice(0, arr.length - 1))\n  return mid\n}\n\nconst canArrange7", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* creAte a fuNCtioN thAt rETurnS a tuple (a, b), wHEre 'a' IS\n  ThE LargEst OF negatiVe inteGErs, And 'b' is the smaLLest\n  oF positIve inTegErs in a list.\n  If therE is No neGativE OR positIve INTeGErS, return THeM As nUlL.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null)\n  }\n  let smallest = lst[0]\n  let largest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return (largest, smallest)\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  largest element first.\n  Example:\n  largestTuples([[1, 2], [3, 4], [5, 6]]) == [[5, 6], [3, 4], [1, 2]]\n  */\nconst largestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    }\n    if (a[0] < b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  smallest element first.\n  Example:\n  smallestTuples([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n  */\nconst smallestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  largest element first.\n  Example:\n  largestTuples([[1, 2], [3, 4], [5, 6]]) == [[5, 6], [3, 4], [1, 2]]\n  */\nconst largestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    }\n    if (a[0] < b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  smallest element first.\n  Example:\n  smallestTuples([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n  */\nconst smallestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  largest element first.\n  Example:\n  largestTuples([[1, 2], [3, 4], [5, 6]]) == [[5, 6], [3, 4], [1, 2]]\n  */\nconst largestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    }\n    if (a[0] < b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  smallest element first.\n  Example:\n  smallestTuples([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n  */\nconst smallestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1\n    }\n    if (a[0] > b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  largest element first.\n  Example:\n  largestTuples([[1, 2], [3, 4], [5, 6]]) == [[5, 6], [3, 4], [1, 2]]\n  */\nconst largestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1\n    }\n    if (a[0] < b[0]) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of tuples, return a list of the tuples, sorted by the\n  smallest element first.\n  Example:\n  smallestTuples([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n  */\nconst smallestTuples = (lst) => {\n  let sorted = lst.sort((a, b) => {\n    if (a[0] < b[0])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE . Or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  creAte a fuNCtioN thAt tAKes iNtEGerS, FLoATs, or StrINgs reprEsentiNG\n  reAl numbers, anD ReturNs the lArger VarIable in its gIveN varIable TYPe.\n  RetuRn nULL iF ThE VAlUEs aRe EquAL.\n  NoTe: IF a REaL numBer iS repReSEntEd As a stRInG, the FloatiNG poINt MiGht BE. Or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nULl\n  */\ncoNst compareOne = (a, b) => {\n  if (a === b) {\n    return a\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  return null\n}\n\nconst compare = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare2 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare3 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare4 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare5 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare6 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare7 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare8 = (a, b) => {\n  const aIsArray = Array.isArray(a)\n  const bIsArray = Array.isArray(b)\n  if (aIsArray && bIsArray) {\n    return a.every((x, i) => compareOne(x, b[i]))\n  }\n  if (aIsArray) {\n    return a.every((x, i) => compareOne(x, b))\n  }\n  if (bIsArray) {\n    return b.every((x, i) => compareOne(a, x))\n  }\n  return compareOne(a, b)\n}\n\nconst compare9 = (a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*EValUate wHEtheR thE giVEn nuMbER n caN BE wRItteN as THe sum of ExactlY 4 PosItive even nuMBers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0? true : false;\n};\n\n/*Evaluate the sum of all even numbers from 1 to n\n  Example\n  sumOfEvenNumbers(4) == 3\n  sumOfEvenNumbers(6) == 5\n  sumOfEvenNumbers(8) == 13\n  sumOfEvenNumbers(10) == 17\n  sumOfEvenNumbers(20) == 67\n  sumOfEvenNumbers(30) == 441\n  sumOfEvenNumbers(40) == 881\n  sumOfEvenNumbers(50) == 1251\n  sumOfEvenNumbers(60) == 2181\n  sumOfEvenNumbers(70) == 3641\n  sumOfEvenNumbers(80) == 5641\n  sumOfEvenNumbers(90) == 9061\n  sumOfEvenNumbers(100) == 14061\n  sumOfEvenNumbers(200) == 28161\n  sumOfEvenNumbers(300) == 48621\n  sumOfEvenNumbers(400) == 78821\n  sumOfEvenNumbers(500) == 118841\n  sumOfEvenNumbers(600) == 168881\n  sumOfEvenNumbers(700) == 238841\n  sumOfEvenNumbers(800) == 308881\n  sumOfEvenNumbers(900) == 398841\n  sumOfEvenNumbers(1000) == 588161\n  sumOfEvenNumbers(2000) == 898161\n  sumOfEvenNumbers(3000) == 1298161\n  sumOfEvenNumbers(4000) == 1798161\n  sumOfEvenNumbers(5000) == 2498161\n  sumOfEvenNumbers(6000) == 3198161\n  sumOfEvenNumbers(7000) == 4198161\n  sumOfEvenNumbers(8000) == 5198161\n  sumOfEvenNumbers(9000) == 6198161\n  sumOfEvenNumbers(10000) == 79816161\n  sumOfEvenNumbers(20000) == 99816161\n  sumOfEvenNumbers(30000) == 1199816161\n  sumOfEvenNumbers(40000) == 159816161\n  sumOfEvenNumbers(50000) == 239816161\n  sumOfEvenNumbers(60000) == 359816161\n  sumOfEvenNumbers(70000) == 459816161\n  sumOfEvenNumbers(80000) == 559816161\n  sumOfEvenNumbers(90000) == 659816161\n  sumOfEvenNumbers(100000) == 759816161\n  sumOfEvenNumbers(200000) == 959816161\n  sumOfEvenNumbers(300000) == 1199816161\n  sumOfEvenNumbers(400000) == 159816161\n  sumOfEvenNumbers(500000) == 239816161\n  sumOfEvenNumbers(600000) == 359816161\n  sumOfEvenNumbers(700000) == 459816161\n  sumOfEvenNumbers(800000) == 559816161\n  sumOfEvenNumbers(900000) == 659816161\n  sumOfEvenNumbers(1000000) == 759816161\n  sumOfEvenNumbers(2000000) == 959816161\n  sumOfEvenNumbers(3000000) == 1199816161\n  sumOfEvenNumbers(4000000) == 159816161\n  sumOfEvenNumbers(5000000) == 239816161\n  sumOfEvenNumbers(6000000) == 359816161\n  sumOfEvenNumbers(7000000) == 459816161\n  sumOfEvenNumbers(8000000) == 559816161\n  sumOfEvenNumbers(9000000) == 659816161\n  sumOfEvenNumbers(10000000) == 759816161\n  sumOfEvenNumbers(20000000) == 959816161\n  sumOfEvenNumbers(30000000) == 1199816161\n  sumOfEvenNumbers(40000000) == 159816161\n  sumOfEvenNumbers(50000000) == 239816161\n  sumOfEvenNumbers(60000000) == 359816161\n  sumOfEvenNumbers(70000000) == 459816161\n  sumOfEvenNumbers(80000000) == 559816161\n  sumOfEvenNumbers(90000000) == 659816161\n  sumOfEvenNumbers(100000000) == 759816161\n  sumOfEvenNumbers(200000000) == 959816161\n  sumOfEvenNumbers(300000000) == 1199816161\n  sumOfEvenNumbers(400000000) == 159816161\n  sumOfEvenNumbers(500000000) == 239816161\n  sumOfEvenNumbers(600000000) == 359816161\n  sumOfEvenNumbers(700000000) == 459816161\n  sumOfEvenNumbers(800000000) == 559816161\n  sumOfEvenNumbers(900000000) == 659816161\n  sumOfEvenNumbers(1000000000) == 759816161\n  sumOfEvenNumbers(2000000000) == 959816161\n  sumOfEvenNumbers(3000000000) == 1199816161\n  sumOfEvenNumbers(4000000000) == 159816161\n  sumOfEvenNumbers(5000000000) == 239816161\n  sumOfEvenNumbers(6000000000) == 359816161\n  sumOfEvenNumbers(7000000000) == 459816161\n  sumOfEvenNumbers(8000000000) == 559816161\n  sumOfEvenNumbers(9000000000) == 659816161\n  sumOfEvenNumbers(10000000000) == 759816161\n  sumOfEvenNumbers(20000000000) == 959816161\n  sumOfEvenNumbers(30000000000) == 1199816161\n  sumOfEvenNumbers(40000000000) == 159816161\n  sumOfEvenNumbers(50000000000) == 239816161\n  sumOfEvenNumbers(60000000000) == 359816161\n  sumOfEvenNumbers(70000000000) == 459816161\n  sumOfEvenNumbers(80000000000) == 559816161\n  sumOfEvenNumbers(90000000000) == 659816161\n  sumOfEvenNumbers(1000000000000) == 759816161\n  sumOfEvenNumbers(2000000000000) == 959816161\n  sumOfEvenNumbers(3000000000000) == 1199816161\n  sumOfEvenNumbers(4000000000000) == 159816161", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*THe BRazilIAn faCtoRiaL Is deFiNEd aS:\n  BRaZIliaN_faCTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  Where n > 0\n\n  FOR exAmple:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial20 = (n) => {\n  if (n === 0) {\n    return 1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* retUrn list of ALl prEfiXes FRom sHoRTesT TO lONgesT of THe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  while (i < string.length) {\n    ret.push(string.substring(0, i + 1));\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    ret.push(string.substring(i, string.length));\n    i--;\n  }\n  return ret;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  while (i < string.length) {\n    ret.push(string.substring(0, i + 1));\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    ret.push(string.substring(i, string.length));\n    i--;\n  }\n  return ret;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  while (i < string.length) {\n    ret.push(string.substring(0, i + 1));\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    ret.push(string.substring(i, string.length));\n    i--;\n  }\n  return ret;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  while (i < string.length) {\n    ret.push(string.substring(0, i + 1));\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    ret.push(string.substring(i, string.length));\n    i--;\n  }\n  return ret;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  while (i < string.length) {\n    ret.push(string.substring(0, i + 1));\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let i = string.length - 1;\n  while (i >= 0) {\n    ret.push(string.substring(i, string.length));\n    i--;\n  }\n  return ret;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  while (i < string.length) {\n    ret.push(string.substring(0, i + 1));\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  let i = string.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a stRIng text, rEplAce ALl spAcES in it WITh UNderScoREs, \n  and if A strinG Has More than 2 conSEcutiVe spacEs, \n  theN rePlace all cOnsEcutIve spACEs with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst getRandomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst getRandomIntInRangeWithOffset = (min, max, offset) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimit = (min, max, offset, limit) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit = (min, max, offset, limit, limit2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2 = (min, max, offset, limit, limit2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3 = (min, max, offset, limit, limit2, limit3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4 = (min, max, offset, limit, limit2, limit3, limit4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5 = (min, max, offset, limit, limit2, limit3, limit4, limit5) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8AndLimit9 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8AndLimit9AndLimit10 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9, limit10) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8AndLimit9AndLimit10AndLimit11 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9, limit10, limit11) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8AndLimit9AndLimit10AndLimit11AndLimit12 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9, limit10, limit11, limit12) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8AndLimit9AndLimit10AndLimit11AndLimit12AndLimit13 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9, limit10, limit11, limit12, limit13) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + offset\n}\n\nconst getRandomIntInRangeWithOffsetAndLimitAndLimit2AndLimit3AndLimit4AndLimit5AndLimit6AndLimit7AndLimit8AndLimit9AndLimit10AndLimit11AndLimit12AndLimit13AndLimit14 = (min, max, offset, limit, limit2, limit3, limit4, limit5, limit6, limit7, limit8, limit9, limit10,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*CReaTe a funCTion WhiCh tAKes a sTrINg rEPReSEntiNg a fILe's name, And retURns\n  'yes' if the the FIle's nAme is vAlid, aNd rEturns 'No' oTheRwisE.\n  A filE'S Name is ConSIDeREd TO Be VAliD iF anD OnlY if ALL tHe foLlowIng cOnDItiOnS \n  are MEt:\n  - therE shoulD Not BE mOrE thAN ThrEE digIts ('0'-'9') in thE fILe'S name.\n  - tHe filE's NAMe coNtainS EXactlY onE dOT '.'\n  - THE suBSTrIng beFOrE tHE dOt sHOuld NOt be emPtY, AND it starTS WitH a LettER FRoM \n  ThE latIn aLpHapeT ('a'-'z' And 'a'-'Z').\n  - thE SubstriNg AftER the dot sHOUld bE oNE Of theSE: ['txt', 'exe', 'Dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*\\.[a-zA-Z0-9._-]*$/;\n  const regex12 = /", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  thiS funcTIon wIll TakE A list of iNtEGerS. fOr ALl enTriES in the list, the FunctiON shAll square thE IntegEr entrY if itS inDex is a \n  mulTipLe of 3 And wiLL Cube thE inTEGeR EnTRY iF Its InDex IS a mUltIPLe Of 4 anD not A mulTiPLe oF 3. THe fuNCtIon wIll not \n  CHanGE tHe EntRIEs in tHE list whoSe indExES aRe not A MultiPlE OF 3 or 4. THe funCTIon shAll ThEN return tHE suM OF aLl entRIeS. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  This function will return the sum of the squares of all the elements in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a sTriNg rEPresEnTIng A sentence,\n  THe sentence COntaIns SOme wordS separATed By a space,\n  and YOu havE to return a stRing tHat Contains tHe wOrds From tHE OriginAl sentence,\n  wHOSe LEnGTHs ARe pRiMe nUMbeRs,\n  tHE OrDer oF the WordS in tHE neW sTrinG ShOuld Be the sAMe aS ThE oRigINAl oNE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  return words.slice(0, -1)\n}\n\nconst sentence = (sentence) => {\n  return wordsInSentence(sentence)\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence) => {\n  const words = sentence.split(' ')\n  return words.length === 1\n}\n\nconst isValid = (sentence", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*YOur Task iS To imPleMenT a FuncTiON thAT WiLL simplify the ExpREssion\n  x * n. THe funcTIon Returns true IF x * n evalUates tO a wholE nuMber and faLse\n  OtheRwise. bOTh x and n, aRe sTRInG RePREsENtaTiOn oF a FraCtiON, AnD havE the FollOwINg fOrMat,\n  <nUMeRatoR>/<denomINatOR> wHeRe bOTH nuMEratOr and DeNOmInatoR Are poSiTIVe whOle nuMBErs.\n\n  YoU caN aSSuME thAT x, AnD n are vALiD fRAcTioNS, and DO not haVe ZERO as denoMINatOR.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = FALsE\n  simplify(\"7/10\", \"10/2\") = FaLse\n  */\ncOnsT simplify = (x, n) => {\n  if (x === n) {\n    return true\n  }\n  if (x === 0) {\n    return false\n  }\n  if (n === 0) {\n    return false\n  }\n  if (x === 1) {\n    return true\n  }\n  if (n === 1) {\n    return true\n  }\n  if (x === n) {\n    return true\n  }\n  if (x === -1) {\n    return true\n  }\n  if (n === -1) {\n    return true\n  }\n  if (x === -n) {\n    return true\n  }\n  if (x === 2) {\n    return true\n  }\n  if (n === 2) {\n    return true\n  }\n  if (x === 3) {\n    return true\n  }\n  if (n === 3) {\n    return true\n  }\n  if (x === 4) {\n    return true\n  }\n  if (n === 4) {\n    return true\n  }\n  if (x === 5) {\n    return true\n  }\n  if (n === 5) {\n    return true\n  }\n  if (x === 6) {\n    return true\n  }\n  if (n === 6) {\n    return true\n  }\n  if (x === 7) {\n    return true\n  }\n  if (n === 7) {\n    return true\n  }\n  if (x === 8) {\n    return true\n  }\n  if (n === 8) {\n    return true\n  }\n  if (x === 9) {\n    return true\n  }\n  if (n === 9) {\n    return true\n  }\n  if (x === 10) {\n    return true\n  }\n  if (n === 10) {\n    return true\n  }\n  if (x === 11) {\n    return true\n  }\n  if (n === 11) {\n    return true\n  }\n  if (x === 12) {\n    return true\n  }\n  if (n === 12) {\n    return true\n  }\n  if (x === 13) {\n    return true\n  }\n  if (n === 13) {\n    return true\n  }\n  if (x === 14) {\n    return true\n  }\n  if (n === 14) {\n    return true\n  }\n  if (x === 15) {\n    return true\n  }\n  if (n === 15) {\n    return true\n  }\n  if (x === 16) {\n    return true\n  }\n  if (n === 16) {\n    return true\n  }\n  if (x === 17) {\n    return true\n  }\n  if (n === 17) {\n    return true\n  }\n  if (x === 18) {\n    return true\n  }\n  if (n === 18) {\n    return true\n  }\n  if (x === 19) {\n    return true\n  }\n  if (n === 19) {\n    return true\n  }\n  if (x === 20) {\n    return true\n  }\n  if (n === 20) {\n    return true\n  }\n  if (x === 21) {\n    return true\n  }\n  if (n === 21) {\n    return true\n  }\n  if (x === 22) {\n    return true\n  }\n  if (n === 22) {\n    return true\n  }\n  if (x === 23) {\n    return true\n  }\n  if (n === 23) {\n    return true\n  }\n  if (x === 24) {\n    return true\n  }\n  if (n === 24) {\n    return true\n  }\n  if (x === 25) {\n    return true\n  }\n  if (n === 25) {\n    return true\n  }\n  if (x === 26) {\n    return true\n  }\n  if (n === 26) {\n    return true\n  }\n  if (x === 27) {\n    return true\n  }\n  if (n === 27) {\n    return true\n  }\n  if (x === 28) {\n    return true\n  }\n  if (n === 28) {\n    return true\n  }\n  if (x === 29) {\n    return true\n  }\n  if (n === 29) {\n    return true\n  }\n  if (x === 30) {\n    return true\n  }\n  if (n === 30) {\n    return true\n  }\n  if (x === 31) {\n    return true\n  }\n  if (n === 31) {\n    return true\n  }\n  if (x === 32) {\n    return true\n  }\n  if (n === 32) {\n    return true\n  }\n  if (x === 33) {\n    return true\n  }\n  if (n === 33) {\n    return true\n  }\n  if (x === 34) {\n    return true\n  }\n  if (n === 34) {\n    return true\n  }\n  if (x === 35) {\n    return true\n  }\n  if (n === 35) {\n    return true\n  }\n  if (x === 36) {\n    return true\n  }\n  if (n === 36)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN whIch SOrts ThE GivEN list Of INtegErs\n  in AScendinG order ACcoRding to the sUM of thEir digIts.\n  NoTe: iF there are SevEral Items WITh simiLar SUM oF ThEIR dIGitS,\n  oRdeR TheM baSED oN theIr inDex in oRiGInaL list.\n\n  FOr exAMpLe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints19 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\nconst orderByPoints20 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT taKEs an ArRAy oF NUmBErs aS inPUt and reTurns \n  tHE nuMber of elemeNTs in the Array tHat arE grEater than 10 And Both \n  First AND last dIgiTS Of A NuMBEr ARe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let first = nums[0];\n  let last = nums[nums.length - 1];\n  let isInRange = false;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > first && nums[i] < last) {\n      isInRange = true;\n    }\n  }\n  if (isInRange) {\n    result = nums.length;\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a pOsiTivE InteGeR n. you HAVe TO creAte AN integeR array A Of lEngth n.\n      For eacH i (1 ≤ i ≤ n), The vaLue of a[I] = i * i - i + 1.\n      RetuRn tHe number oF trIpleS (a[i], a[j], A[K]) Of a wheRe i < j < k, \n  aND A[i] + A[J] + a[K] IS a MUltIpLe oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const b = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const c = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const d = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const e = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const f = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const g = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const h = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const i = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const j = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const k = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const l = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const m = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const n = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const o = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const p = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const q = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const r = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const s = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const t = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const u = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const v = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const w = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const x = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const y = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const z = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const aa = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ab = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ac = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ad = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ae = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const af = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ag = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ah = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ai = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const aj = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ak = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const al = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const am = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const an = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ao = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ap = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const aq = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const ar = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const as = Array.from({ length: n }).map((_, i) => i * i - i + 1);\n  const at = Array.from({ length: n }).map", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* theRe are EIght PlaNetS in Our sOlAR sySTEm: THe clOseRSt to the sun\n  is MERcuRy, the next onE Is VenUs, then earth, marS, Jupiter, SAtuRn,\n  UrAnus, NEPTune.\n  WrIte A FUnCTiON ThAT taKeS twO PlaNet NAMeS as sTrinGs planet1 anD planet2.\n  THE fuNcTion SHoUld return a tuple ContaiNIng ALl PlAneTS WhoSE orbIts arE\n  lOCaTed beTWeen tHe ORBit oF planet1 and tHE Orbit Of planet2, sOrTEd BY\n  thE PRoXimitY To ThE SuN.\n  ThE FuncTIon shoUlD return AN Empty tuple if planet1 OR planet2\n  Are NOt coRRECt PLaNet nAmeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase()\n  const planet2Name = planet2.toUpperCase()\n  const planet1Orbit = planet1Orbits[planet1Name]\n  const planet2Orbit = planet2Orbits[planet2Name]\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1Name)\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2Name)\n  const planet1OrbitIndexEnd = planet1OrbitIndex + planet1OrbitLength\n  const planet2OrbitIndexEnd = planet2OrbitIndex + planet2OrbitLength\n  const planet1OrbitEnd = planet1OrbitIndexEnd + 1\n  const planet2OrbitEnd = planet2OrbitIndexEnd + 1\n  const planet1OrbitLengthEnd = planet1OrbitEnd + 1\n  const planet2OrbitLengthEnd = planet2OrbitEnd + 1\n  const planet1OrbitEndIndex = planet1OrbitLengthEnd + 1\n  const planet2OrbitEndIndex = planet2OrbitLengthEnd + 1\n  const planet1OrbitEndIndexEnd = planet1OrbitEndIndex + 1\n  const planet2OrbitEndIndexEnd = planet2OrbitEndIndex + 1\n  const planet1OrbitEndIndexEndEnd = planet1OrbitEndIndexEnd + 1\n  const planet2OrbitEndIndexEndEnd = planet2OrbitEndIndexEnd + 1\n  const planet1OrbitEndIndexEndEndEnd = planet1OrbitEndIndexEndEnd + 1\n  const planet2OrbitEndIndexEndEndEnd = planet2OrbitEndIndexEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEnd = planet1OrbitEndIndexEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEnd = planet2OrbitEndIndexEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEndEndEndEndEnd = planet2OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet1OrbitEndIndexEndEndEndEndEndEndEndEnd = planet1OrbitEndIndexEndEndEndEndEndEndEndEnd + 1\n  const planet2OrbitEndIndexEndEndEndEnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs AS a paRamETer,\n  deleTes the STriNgs that have ODd lenGths frOm it,\n  aNd rEturns the ResUlteD list with A SOrted oRdeR,\n  tHe list IS aLWAyS A list of StRinGS anD neVER aN arrAy of NumbErS,\n  And It May cONtAin dUplicaTEs.\n  THE oRdEr oF THe list sHOuld Be ascEnDInG by leNGth of EaCH Word, And yoU\n  SHould return The list SoRTeD By tHAT rUle.\n  If TWo WoRDs HavE The sAMe lengTh, SORT the list alpHABetICallY.\n  tHE fUNcTion ShoUlD return a list of STriNgS in sORted ordEr.\n  you MAy assume THAt alL wORDs wilL Have the SamE lengTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length_asc = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length_desc = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return 1;\n    } else if (a.length > b.length) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length_asc_desc = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length_asc_desc_by_length = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length_asc_desc_by_length_asc = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedList;\n};\n\nconst list_sort_by_length_asc_desc_by_length_desc = (lst) => {\n  const len = lst.length;\n  let sortedList = [];\n  for (let i = 0; i < len; i++) {\n    sortedList.push(lst[i]);\n  }\n  sortedList.sort((a, b) => {\n    if (a.length < b.length) {\n      return 1;\n    } else if (a.length > b.length) {\n      return -1;\n    } else {\n      return 0;\n    }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* retUrn a sTRing ConTaiNIng sPaCE-deLIMiTEd nuMbeRS startiNg from 0 UPto n Inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(15)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += String.fromCharCode(i);\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A SimPle prOGram WhiCh sHOuld return ThE ValUE Of x IF n is \n  a PriME number And shoULd return tHe value of y otHErwisE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isNaN(n) || isNaN(x) || isNaN(y)) {\n    throw new Error('xOrY: Invalid arguments');\n  }\n  if (n < x) {\n    return y;\n  }\n  return x;\n};\n\nconst main = () => {\n  const n = parseInt(process.argv[2]);\n  const x = parseInt(process.argv[3]);\n  const y = parseInt(process.argv[4]);\n  console.log(xOrY(n, x, y));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference2 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference3 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference4 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference5 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thE inPut list iS emptY, return 0.\n  */\nCOnst doubleTheDifference6 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* givEn a list of NUmbeRs, return tHe sUM of sQuARes OF ThE NumbErs\n  in THe list that aRe odd. IGNorE numbers thaT Are neGative Or not IntEgers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I ThiNk we aLL remEmbEr tHAt feElINg wHEN tHE resUlt OF some loNg-awaiTEd\n  eVent is finalLY knowN. The feElingS anD thoughts You Have At thaT MOment aRe\n  dEFInITeLY WoRTh nOtIng DOwn And COMpArinG.\n  YouR tasK iS To dEtErmiNE iF a peRson coRRecTLy GuEssED The REsulTs of a NuMBeR of maTChes.\n  YOu ARE givEn two ARRays oF scOrES aND guESSeS of eqUAl LeNGtH, whERe eaCH index ShOWS A match. \n  RETUrn AN arrAY OF tHE sAme lEngTh DenoTIng HoW fAR off eacH guess wAs. IF They have GUEsseD cORRectlY,\n  The valuE is 0, And if NoT, The ValUe is the absoLUTe dIffErEnCe beTweEn the guess and the SCOre.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const gameArray = game.slice()\n  const guessArray = guess.slice()\n  const gameIndex = 0\n  const guessIndex = 0\n  const gameLengthDiff = gameLength - guessLength\n  const guessLengthDiff = gameLength - guessLength\n  const gameLengthDiffAbs = Math.abs(gameLengthDiff)\n  const guessLengthDiffAbs = Math.abs(guessLengthDiff)\n  const gameLengthDiffAbsMinus = gameLengthDiffAbs - 1\n  const guessLengthDiffAbsMinus = guessLengthDiffAbs - 1\n  const gameLengthDiffAbsMinusMinus = gameLengthDiffAbsMinus - 1\n  const guessLengthDiffAbsMinusMinus = guessLengthDiffAbsMinus - 1\n  const gameLengthDiffAbsMinusMinusMinus = gameLengthDiffAbsMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus - 1\n  const gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus = gameLengthDiffAbsMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinusMinus", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*YOu wIll be GIven The NamE Of a cLaSS (a sTRInG) And a list Of extensions.\n  THE extensions are to bE used tO LoaD additional CLasseS to the Class. the\n  Strength oF thE extEnsioN IS as folLowS: lEt caP BE ThE NumBeR of THe uPpeRCAsE\n  letTers in The eXtENsiOn'S namE, AnD let sM be thE NumBEr Of LowERCasE LettErs\n  in thE eXTeNsion'S Name, tHe STRengTh is gIVEn by tHe fRaCTiON CAp - sm.\n  YOu shoULd FiND tHe sTRongESt exteNsION And return a strING in thIS\n  forMAT: clASsname.strOnGesteXteNsIoNname.\n  If tHeRe aRE two or moRE extensions With ThE SAme stREngth, yoU shOuld\n  cHoOSe tHe oNe that comes FIRst in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const class_name_parts = class_name.split('.');\n  const class_name_length = class_name_parts.length;\n  const class_name_last_part = class_name_parts[class_name_length - 1];\n  const class_name_last_part_length = class_name_last_part.length;\n  const class_name_last_part_last_part = class_name_last_part.substr(0, class_name_last_part_length - 1);\n  const class_name_last_part_last_part_length = class_name_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part = class_name_last_part_last_part.substr(0, class_name_last_part_last_part_length - 1);\n  const class_name_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part = class_name_last_part_last_part_last_part.substr(0, class_name_last_part_last_part_last_part_length - 1);\n  const class_name_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part = class_name_last_part_last_part_last_part_last_part.substr(0, class_name_last_part_last_part_last_part_last_part_length - 1);\n  const class_name_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part = class_name_last_part_last_part_last_part_last_part_last_part.substr(0, class_name_last_part_last_part_last_part_last_part_last_part_length - 1);\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part = class_name_last_part_last_part_last_part_last_part_last_part_last_part.substr(0, class_name_last_part_last_part_last_part_last_part_last_part_last_part_length - 1);\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_last_part_last_part_last_part.length;\n  const class_name_last_part_last_part_last_part_last_part_last_part_last_part_last_part_length = class_name_last_part_last_part_last_part_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck = (a, b) => {\n  let a_ = a.toLowerCase();\n  let b_ = b.toLowerCase();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_idx = 0;\n  let b_idx = 0;\n  let a_char = a_.charAt(a_idx);\n  let b_char = b_.charAt(b_idx);\n  while (a_idx < a_len && b_idx < b_len) {\n    if (a_char === b_char) {\n      a_idx++;\n      b_idx++;\n      a_char = a_.charAt(a_idx);\n      b_char = b_.charAt(b_idx);\n    } else if (a_char < b_char) {\n      a_idx++;\n      a_char = a_.charAt(a_idx);\n    } else {\n      b_idx++;\n      b_char = b_.charAt(b_idx);\n    }\n  }\n  if (a_idx === a_len && b_idx === b_len) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck2 = (a, b) => {\n  let a_ = a.toLowerCase();\n  let b_ = b.toLowerCase();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_idx = 0;\n  let b_idx = 0;\n  let a_char = a_.charAt(a_idx);\n  let b_char = b_.charAt(b_idx);\n  while (a_idx < a_len && b_idx < b_len) {\n    if (a_char === b_char) {\n      a_idx++;\n      b_idx++;\n      a_char = a_.charAt(a_idx);\n      b_char = b_.charAt(b_idx);\n    } else if (a_char < b_char) {\n      a_idx++;\n      a_char = a_.charAt(a_idx);\n    } else {\n      b_idx++;\n      b_char = b_.charAt(b_idx);\n    }\n  }\n  if (a_idx === a_len && b_idx === b_len) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nCONst cycpatternCheck3 = (a, b) => {\n  let a_ = a.toLowerCase();\n  let b_ = b.toLowerCase();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_idx = 0;\n  let b_idx = 0;\n  let a_char = a_.charAt(a_idx);\n  let b_char = b_.charAt(b_idx);\n  while (a_idx < a_len && b_idx < b_len) {\n    if (a_char === b_char) {\n      a_idx++;\n      b_idx++;\n      a_char = a_.charAt(a_idx);\n      b_char = b_.charAt(b_idx);\n    } else if (a_char < b_char) {\n      a_idx++;\n      a_char = a_.charAt(a_idx);\n    } else {\n      b_idx++;\n      b_char = b_.charAt(b_idx);\n    }\n  }\n  if (a_idx === a_len && b_idx === b_len) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  YOu aRe givEN 2 worDs. YOu nEEd to return TrUE if THE sECond WorD Or any of Its rotATioNs is a substriNG in the fIrst woRd\n  cycpatternCheck(\"abcd\",\"abd\") => falSe\n  cycpatternCheck(\"hello\",\"ell\") => tRue\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => tRue\n  cycpatternCheck(\"efef\",\"eeff\") => FalsE\n  cycpatternCheck(\"himenss\",\"simen\") => true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*GIveN an inTEger. return A tuple thAt hAS the NuMBer OF EvEN and Odd DIgits reSpectiVEly.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = false;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd =!odd;\n    }\n    num = num / 2;\n  }\n  return (odd? count : count + 1);\n};\n\n/*\n   GIVE me a number. I will return a string that has the number in base 10.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.\n   If the number is negative, I will add a minus sign.\n   If the number is zero, I will add a zero.\n   If the number is one, I will add a one.\n   If the number is even, I will add a zero.\n   If the number is odd, I will add a one.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER, obtAiN Its ROMaN NumeRal EQuivaleNt as a sTRinG,\n  and return it in lowerCAse.\n  ReStrictIons: 1 <= num <= 1000\n\n  EXamPles:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const numStr = String(num);\n  const numLen = numStr.length;\n  const numDigits = numStr.split('').length;\n  const numDigitsStr = numStr.split('');\n  const numDigitsLen = numDigitsStr.length;\n  const numDigitsStrLen = numDigitsStr.length;\n  const numDigitsLenMinusOne = numDigitsLen - 1;\n  const numDigitsStrLenMinusOne = numDigitsStrLen - 1;\n  const numDigitsStrLenMinusTwo = numDigitsStrLen - 2;\n  const numDigitsStrLenMinusThree = numDigitsStrLen - 3;\n  const numDigitsStrLenMinusFour = numDigitsStrLen - 4;\n  const numDigitsStrLenMinusFive = numDigitsStrLen - 5;\n  const numDigitsStrLenMinusSix = numDigitsStrLen - 6;\n  const numDigitsStrLenMinusSeven = numDigitsStrLen - 7;\n  const numDigitsStrLenMinusEight = numDigitsStrLen - 8;\n  const numDigitsStrLenMinusNine = numDigitsStrLen - 9;\n  const numDigitsStrLenMinusTen = numDigitsStrLen - 10;\n  const numDigitsStrLenMinusEleven = numDigitsStrLen - 11;\n  const numDigitsStrLenMinusTwelve = numDigitsStrLen - 12;\n  const numDigitsStrLenMinusThirteen = numDigitsStrLen - 13;\n  const numDigitsStrLenMinusFourteen = numDigitsStrLen - 14;\n  const numDigitsStrLenMinusFifteen = numDigitsStrLen - 15;\n  const numDigitsStrLenMinusSixteen = numDigitsStrLen - 16;\n  const numDigitsStrLenMinusSeventeen = numDigitsStrLen - 17;\n  const numDigitsStrLenMinusEighteen = numDigitsStrLen - 18;\n  const numDigitsStrLenMinusNineteen = numDigitsStrLen - 19;\n  const numDigitsStrLenMinusTwenty = numDigitsStrLen - 20;\n  const numDigitsStrLenMinusTwentyOne = numDigitsStrLen - 21;\n  const numDigitsStrLenMinusTwentyTwo = numDigitsStrLen - 22;\n  const numDigitsStrLenMinusTwentyThree = numDigitsStrLen - 23;\n  const numDigitsStrLenMinusTwentyFour = numDigitsStrLen - 24;\n  const numDigitsStrLenMinusTwentyFive = numDigitsStrLen - 25;\n  const numDigitsStrLenMinusTwentySix = numDigitsStrLen - 26;\n  const numDigitsStrLenMinusTwentySeven = numDigitsStrLen - 27;\n  const numDigitsStrLenMinusTwentyEight = numDigitsStrLen - 28;\n  const numDigitsStrLenMinusTwentyNine = numDigitsStrLen - 29;\n  const numDigitsStrLenMinusThirty = numDigitsStrLen - 30;\n  const numDigitsStrLenMinusThirtyOne = numDigitsStrLen - 31;\n  const numDigitsStrLenMinusThirtyTwo = numDigitsStrLen - 32;\n  const numDigitsStrLenMinusThirtyThree = numDigitsStrLen - 33;\n  const numDigitsStrLenMinusThirtyFour = numDigitsStrLen - 34;\n  const numDigitsStrLenMinusThirtyFive = numDigitsStrLen - 35;\n  const numDigitsStrLenMinusThirtySix = numDigitsStrLen - 36;\n  const numDigitsStrLenMinusThirtySeven = numDigitsStrLen - 37;\n  const numDigitsStrLenMinusThirtyEight = numDigitsStrLen - 38;\n  const numDigitsStrLenMinusThirtyNine = numDigitsStrLen - 39;\n  const numDigitsStrLenMinusFourty = numDigitsStrLen - 40;\n  const numDigitsStrLenMinusFourtyOne = numDigitsStrLen - 41;\n  const numDigitsStrLenMinusFourtyTwo = numDigitsStrLen - 42;\n  const numDigitsStrLenMinusFourtyThree = numDigitsStrLen - 43;\n  const numDigitsStrLenMinusFourtyFour = numDigitsStrLen - 44;\n  const numDigitsStrLenMinusFourtyFive = numDigitsStrLen - 45;\n  const numDigitsStrLenMinusFourtySix = numDigitsStrLen - 46;\n  const numDigitsStrLenMinusFourtySeven = numDigitsStrLen - 47;\n  const numDigitsStrLenMinusFourtyEight = numDigitsStrLen - 48;\n  const numDigitsStrLenMinusFourtyNine = numDigitsStrLen - 49;\n  const numDigitsStrLenMinusFifty = numDigitsStrLen - 50;\n  const numDigitsStrLenMinusFiftyOne = numDigitsStrLen - 51;\n  const numDigitsStrLenMinusFiftyTwo = numDigitsStrLen - 52;\n  const numDigitsStrLenMinusFiftyThree = numDigitsStrLen - 53;\n  const numDigitsStrLenMinusFiftyFour = numDigitsStrLen - 54;\n  const numDigitsStrLenMinusFiftyFive = numDigitsStrLen - 55;\n  const numDigitsStrLenMinusFiftySix = numDigitsStrLen - 56;\n  const numDigitsStrLenMinusFiftySeven = numDigitsStrLen - 57;\n  const numDigitsStrLenMinusFiftyEight = numDigitsStrLen - 58;\n  const numDigitsStrLenMinusFiftyNine = numDigitsStrLen - 59;\n  const numDigitsStrLenMinusSixty = numDigitsStrLen - 60;\n  const numDigitsStrLenMinusSixtyOne = numDigitsStrLen - 61;\n  const num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn true If the tHRee\n  Sides form a riGHt-angLed triAngle, FalSe otherwiSe.\n  A RighT-anglED TriangLe iS a TRiANgLE in WhICh oNe AngLE is RigHT AnGle oR\n  90 degRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const l = (a + b + c) / 2;\n  const s = (a + b + c) / 2;\n  const t = (a + b + c) / 2;\n  const l2 = (a + b + c) / 2;\n  const s2 = (a + b + c) / 2;\n  const t2 = (a + b + c) / 2;\n  const l3 = (a + b + c) / 2;\n  const s3 = (a + b + c) / 2;\n  const t3 = (a + b + c) / 2;\n  const l4 = (a + b + c) / 2;\n  const s4 = (a + b + c) / 2;\n  const t4 = (a + b + c) / 2;\n  const l5 = (a + b + c) / 2;\n  const s5 = (a + b + c) / 2;\n  const t5 = (a + b + c) / 2;\n  const l6 = (a + b + c) / 2;\n  const s6 = (a + b + c) / 2;\n  const t6 = (a + b + c) / 2;\n  const l7 = (a + b + c) / 2;\n  const s7 = (a + b + c) / 2;\n  const t7 = (a + b + c) / 2;\n  const l8 = (a + b + c) / 2;\n  const s8 = (a + b + c) / 2;\n  const t8 = (a + b + c) / 2;\n  const l9 = (a + b + c) / 2;\n  const s9 = (a + b + c) / 2;\n  const t9 = (a + b + c) / 2;\n  const l10 = (a + b + c) / 2;\n  const s10 = (a + b + c) / 2;\n  const t10 = (a + b + c) / 2;\n  const l11 = (a + b + c) / 2;\n  const s11 = (a + b + c) / 2;\n  const t11 = (a + b + c) / 2;\n  const l12 = (a + b + c) / 2;\n  const s12 = (a + b + c) / 2;\n  const t12 = (a + b + c) / 2;\n  const l13 = (a + b + c) / 2;\n  const s13 = (a + b + c) / 2;\n  const t13 = (a + b + c) / 2;\n  const l14 = (a + b + c) / 2;\n  const s14 = (a + b + c) / 2;\n  const t14 = (a + b + c) / 2;\n  const l15 = (a + b + c) / 2;\n  const s15 = (a + b + c) / 2;\n  const t15 = (a + b + c) / 2;\n  const l16 = (a + b + c) / 2;\n  const s16 = (a + b + c) / 2;\n  const t16 = (a + b + c) / 2;\n  const l17 = (a + b + c) / 2;\n  const s17 = (a + b + c) / 2;\n  const t17 = (a + b + c) / 2;\n  const l18 = (a + b + c) / 2;\n  const s18 = (a + b + c) / 2;\n  const t18 = (a + b + c) / 2;\n  const l19 = (a + b + c) / 2;\n  const s19 = (a + b + c) / 2;\n  const t19 = (a + b + c) / 2;\n  const l20 = (a + b + c) / 2;\n  const s20 = (a + b + c) / 2;\n  const t20 = (a + b + c) / 2;\n  const l21 = (a + b + c) / 2;\n  const s21 = (a + b + c) / 2;\n  const t21 = (a + b + c) / 2;\n  const l22 = (a + b + c) / 2;\n  const s22 = (a + b + c) / 2;\n  const t22 = (a + b + c) / 2;\n  const l23 = (a + b + c) / 2;\n  const s23 = (a + b + c) / 2;\n  const t23 = (a + b + c) / 2;\n  const l24 = (a + b + c) / 2;\n  const s24 = (a + b + c) / 2;\n  const t24 = (a + b + c) / 2;\n  const l25 = (a + b + c) / 2;\n  const s25 = (a + b + c) / 2;\n  const t25 = (a + b + c) / 2;\n  const l26 = (a + b + c) / 2;\n  const s26 = (a + b + c) / 2;\n  const t26 = (a + b + c) / 2;\n  const l27 = (a + b + c) / 2;\n  const s27 = (a + b + c) / 2;\n  const t27 = (a + b + c) / 2;\n  const l28 = (a + b + c) / 2;\n  const s28 = (a + b + c) / 2;\n  const t28 = (a + b + c) / 2;\n  const l29 = (a + b + c) / 2;\n  const s29 = (a + b + c) / 2;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\" ,\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT acCEpts A list oF StrINGs.\n  tHe list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRings hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  THe function ThaT acCEpts A list oF StrINGs.\n  The list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRINGS hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  THe function ThaT acCEpts A list oF StrINGs.\n  The list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRINGS hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  THe function ThaT acCEpts A list oF StrINGs.\n  The list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRINGS hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  THe function ThaT acCEpts A list oF StrINGs.\n  The list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRINGS hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  THe function ThaT acCEpts A list oF StrINGs.\n  The list coNtaINs diffeRent words. ReTUrn The word with MAximuM numbeR\n  of unIquE characteRs. IF mulTiple STRINGS hAve MAXiMUm NUMbER of UnIquE\n  ChaRacTERs, return The oNe whIch cOmES fiRsT in lexICoGrapHical oRDer.\n\n  findMax([\"name\", \"OF\", \"sTrIng\"]) === \"STRinG\"\n  findMax([\"name\", \"Enam\", \"Game\"]) === \"eNaM\"\n  findMax([\"aaaaaaa\", \"Bb\",\"Cc\"]) === \"\"aaaAAaa\"\n  */\ncoNsT findMax = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  you'Re a huNGry rAbbIt, aND you AlREadY HAvE EateN a cERtain number of CarrotS,\n  But Now you need to eat morE CarroTs to coMpletE thE day's mealS.\n  yoU shoUld return an ARRay of [ tOtaL number OF eATeN CArROts AfTer YOur MeaLS,\n                                  ThE number of cArroTs leFt AFteR yOur mEAlS ]\n  if tHere arE Not ENoUgH remaining caRROts, YOu wiLl eat all remaining CaRRoTs, but WIll stIlL BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [remaining, 0];\n  }\n  return [number, need - remaining];\n}\n\nconst main = () => {\n  const [number, need] = eat(5, 6, 10);\n  console.log(number);\n  console.log(need);\n}\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* givEn a string, fiND out How ManY DistInCT chARAcTErs (rEgaRDless of Case) doES it Consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('')\n  const charArrayLength = charArray.length\n  const charArrayLengthMinusOne = charArrayLength - 1\n  const charArrayLengthMinusTwo = charArrayLength - 2\n  const charArrayLengthMinusThree = charArrayLength - 3\n  const charArrayLengthMinusFour = charArrayLength - 4\n  const charArrayLengthMinusFive = charArrayLength - 5\n  const charArrayLengthMinusSix = charArrayLength - 6\n  const charArrayLengthMinusSeven = charArrayLength - 7\n  const charArrayLengthMinusEight = charArrayLength - 8\n  const charArrayLengthMinusNine = charArrayLength - 9\n  const charArrayLengthMinusTen = charArrayLength - 10\n  const charArrayLengthMinusEleven = charArrayLength - 11\n  const charArrayLengthMinusTwelve = charArrayLength - 12\n  const charArrayLengthMinusThirteen = charArrayLength - 13\n  const charArrayLengthMinusFourteen = charArrayLength - 14\n  const charArrayLengthMinusFifteen = charArrayLength - 15\n  const charArrayLengthMinusSixteen = charArrayLength - 16\n  const charArrayLengthMinusSeventeen = charArrayLength - 17\n  const charArrayLengthMinusEighteen = charArrayLength - 18\n  const charArrayLengthMinusNineteen = charArrayLength - 19\n  const charArrayLengthMinusTwenty = charArrayLength - 20\n  const charArrayLengthMinusTwentyOne = charArrayLength - 21\n  const charArrayLengthMinusTwentyTwo = charArrayLength - 22\n  const charArrayLengthMinusTwentyThree = charArrayLength - 23\n  const charArrayLengthMinusTwentyFour = charArrayLength - 24\n  const charArrayLengthMinusTwentyFive = charArrayLength - 25\n  const charArrayLengthMinusTwentySix = charArrayLength - 26\n  const charArrayLengthMinusTwentySeven = charArrayLength - 27\n  const charArrayLengthMinusTwentyEight = charArrayLength - 28\n  const charArrayLengthMinusTwentyNine = charArrayLength - 29\n  const charArrayLengthMinusThirty = charArrayLength - 30\n  const charArrayLengthMinusThirtyOne = charArrayLength - 31\n  const charArrayLengthMinusThirtyTwo = charArrayLength - 32\n  const charArrayLengthMinusThirtyThree = charArrayLength - 33\n  const charArrayLengthMinusThirtyFour = charArrayLength - 34\n  const charArrayLengthMinusThirtyFive = charArrayLength - 35\n  const charArrayLengthMinusThirtySix = charArrayLength - 36\n  const charArrayLengthMinusThirtySeven = charArrayLength - 37\n  const charArrayLengthMinusThirtyEight = charArrayLength - 38\n  const charArrayLengthMinusThirtyNine = charArrayLength - 39\n  const charArrayLengthMinusForty = charArrayLength - 40\n  const charArrayLengthMinusFortyOne = charArrayLength - 41\n  const charArrayLengthMinusFortyTwo = charArrayLength - 42\n  const charArrayLengthMinusFortyThree = charArrayLength - 43\n  const charArrayLengthMinusFortyFour = charArrayLength - 44\n  const charArrayLengthMinusFortyFive = charArrayLength - 45\n  const charArrayLengthMinusFortySix = charArrayLength - 46\n  const charArrayLengthMinusFortySeven = charArrayLength - 47\n  const charArrayLengthMinusFortyEight = charArrayLength - 48\n  const charArrayLengthMinusFortyNine = charArrayLength - 49\n  const charArrayLengthMinusFifty = charArrayLength - 50\n  const charArrayLengthMinusFiftyOne = charArrayLength - 51\n  const charArrayLengthMinusFiftyTwo = charArrayLength - 52\n  const charArrayLengthMinusFiftyThree = charArrayLength - 53\n  const charArrayLengthMinusFiftyFour = charArrayLength - 54\n  const charArrayLengthMinusFiftyFive = charArrayLength - 55\n  const charArrayLengthMinusFiftySix = charArrayLength - 56\n  const charArrayLengthMinusFiftySeven = charArrayLength - 57\n  const charArrayLengthMinusFiftyEight = charArrayLength - 58\n  const charArrayLengthMinusFiftyNine = charArrayLength - 59\n  const charArrayLengthMinusSixty = charArrayLength - 60\n  const charArrayLengthMinusSixtyOne = charArrayLength - 61\n  const charArrayLengthMinusSixtyTwo = charArrayLength - 62\n  const charArrayLengthMinusSixtyThree = charArrayLength - 63\n  const charArrayLengthMinusSixtyFour = charArrayLength - 64\n  const charArrayLengthMinusSixtyFive = charArrayLength - 65\n  const charArrayLengthMinusSixtySix = charArrayLength - 66\n  const charArrayLengthMinusSixtySeven = charArrayLength - 67\n  const charArrayLengthMinusSixtyEight = charArrayLength - 68\n  const charArrayLengthMinusSixtyNine = charArrayLength - 69\n  const charArrayLengthMinusSeventy = charArrayLength - 70\n  const charArrayLengthMinusSeventyOne = charArrayLength - 71\n  const charArrayLengthMinusSeventyTwo = charArrayLength - 72\n  const charArrayLengthMinusSeventyThree = charArrayLength - 73\n  const charArrayLengthMinusSeventyFour = charArrayLength - 74\n  const charArrayLengthMinusSeventyFive = charArrayLength - 75\n  const charArrayLengthMinusSeventySix = charArrayLength - 76\n  const charArrayLengthMinusSeventySeven = charArrayLength - 77\n  const charArrayLengthMinusSeventyEight = charArrayLength - 78\n  const charArrayLengthMinusSeventyNine = charArrayLength - 79\n  const charArrayLengthMinusSeventyTen = charArrayLength - 80\n  const charArrayLengthMinusSeventyEleven = charArrayLength - 81\n  const charArrayLengthMinusSeventyTwelve = charArrayLength - 82\n  const charArrayLengthMinusSeventyThirteen = charArrayLength - 83\n  const charArrayLengthMinusSeventyFourteen = charArrayLength - 84\n  const charArrayLengthMinusSeventyFifteen = charArrayLength - 85\n  const charArrayLengthMinusSeventySixteen = charArrayLength - 86\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  givEn two LIsts operator, And operand. the FIrst list HaS BasIC AlGEbra OpeRAtions, aNd \n  the sEConD list is a list of integERs. Use The two Given LisTs to build The AlgeBric \n  eXPRessioN anD return THe EVaLUAtIOn oF tHis EXprEssION.\n\n  THe baSic aLgebRa OPerAtIons:\n  aDdItioN ( + ) \n  SubtrACtiON ( - ) \n  MUlTipLICatIOn ( * ) \n  FlOor diViSIoN ( // ) \n  ExpoNEntiaTiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n\n  while (i < len && j < len2) {\n    if (operator[i] === operand[j]) {\n      temp = operand[j]\n      j++\n      result += temp\n      i++\n    } else if (operator[i] === '+') {\n      result += operand[j]\n      j++\n      i++\n    } else if (operator[i] === '-') {\n      result -= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '*') {\n      result *= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '/') {\n      result /= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[j])\n      j++\n      i++\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n\n  while (i < len) {\n    if (operator[i] === '+') {\n      result += operand[j]\n      j++\n      i++\n    } else if (operator[i] === '-') {\n      result -= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '*') {\n      result *= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '/') {\n      result /= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[j])\n      j++\n      i++\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n\n  while (i < len && j < len2) {\n    if (operator[i] === operand[j]) {\n      temp = operand[j]\n      j++\n      result += temp\n      i++\n    } else if (operator[i] === '+') {\n      result += operand[j]\n      j++\n      i++\n    } else if (operator[i] === '-') {\n      result -= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '*') {\n      result *= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '/') {\n      result /= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[j])\n      j++\n      i++\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n\n  while (i < len) {\n    if (operator[i] === '+') {\n      result += operand[j]\n      j++\n      i++\n    } else if (operator[i] === '-') {\n      result -= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '*') {\n      result *= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '/') {\n      result /= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[j])\n      j++\n      i++\n    } else {\n      throw new Error('Operator not found')\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n\n  while (i < len && j < len2) {\n    if (operator[i] === operand[j]) {\n      temp = operand[j]\n      j++\n      result += temp\n      i++\n    } else if (operator[i] === '+') {\n      result += operand[j]\n      j++\n      i++\n    } else if (operator[i] === '-') {\n      result -= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '*') {\n      result *= operand[j]\n      j++\n      i++\n    } else if (operator[i] === '/') {\n      result /= operand[j]\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a stRinG s.\n  if s[i] IS a leTtER, reVERsE Its cAse FRom loweR to uppER or Vise versa, \n  otHErwisE keep iT as it Is.\n  IF the strinG coNtaiNs no lETTers, reVerSE ThE StRINg.\n  tHe fUnCtiON shOulD return THe ResuLted StriNg.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let strLen = str.length;\n  let strIndex = 0;\n  let strIndex2 = 0;\n  let strIndex3 = 0;\n  let strIndex4 = 0;\n  let strIndex5 = 0;\n  let strIndex6 = 0;\n  let strIndex7 = 0;\n  let strIndex8 = 0;\n  let strIndex9 = 0;\n  let strIndex10 = 0;\n  let strIndex11 = 0;\n  let strIndex12 = 0;\n  let strIndex13 = 0;\n  let strIndex14 = 0;\n  let strIndex15 = 0;\n  let strIndex16 = 0;\n  let strIndex17 = 0;\n  let strIndex18 = 0;\n  let strIndex19 = 0;\n  let strIndex20 = 0;\n  let strIndex21 = 0;\n  let strIndex22 = 0;\n  let strIndex23 = 0;\n  let strIndex24 = 0;\n  let strIndex25 = 0;\n  let strIndex26 = 0;\n  let strIndex27 = 0;\n  let strIndex28 = 0;\n  let strIndex29 = 0;\n  let strIndex30 = 0;\n  let strIndex31 = 0;\n  let strIndex32 = 0;\n  let strIndex33 = 0;\n  let strIndex34 = 0;\n  let strIndex35 = 0;\n  let strIndex36 = 0;\n  let strIndex37 = 0;\n  let strIndex38 = 0;\n  let strIndex39 = 0;\n  let strIndex40 = 0;\n  let strIndex41 = 0;\n  let strIndex42 = 0;\n  let strIndex43 = 0;\n  let strIndex44 = 0;\n  let strIndex45 = 0;\n  let strIndex46 = 0;\n  let strIndex47 = 0;\n  let strIndex48 = 0;\n  let strIndex49 = 0;\n  let strIndex50 = 0;\n  let strIndex51 = 0;\n  let strIndex52 = 0;\n  let strIndex53 = 0;\n  let strIndex54 = 0;\n  let strIndex55 = 0;\n  let strIndex56 = 0;\n  let strIndex57 = 0;\n  let strIndex58 = 0;\n  let strIndex59 = 0;\n  let strIndex60 = 0;\n  let strIndex61 = 0;\n  let strIndex62 = 0;\n  let strIndex63 = 0;\n  let strIndex64 = 0;\n  let strIndex65 = 0;\n  let strIndex66 = 0;\n  let strIndex67 = 0;\n  let strIndex68 = 0;\n  let strIndex69 = 0;\n  let strIndex70 = 0;\n  let strIndex71 = 0;\n  let strIndex72 = 0;\n  let strIndex73 = 0;\n  let strIndex74 = 0;\n  let strIndex75 = 0;\n  let strIndex76 = 0;\n  let strIndex77 = 0;\n  let strIndex78 = 0;\n  let strIndex79 = 0;\n  let strIndex80 = 0;\n  let strIndex81 = 0;\n  let strIndex82 = 0;\n  let strIndex83 = 0;\n  let strIndex84 = 0;\n  let strIndex85 = 0;\n  let strIndex86 = 0;\n  let strIndex87 = 0;\n  let strIndex88 = 0;\n  let strIndex89 = 0;\n  let strIndex90 = 0;\n  let strIndex91 = 0;\n  let strIndex92 = 0;\n  let strIndex93 = 0;\n  let strIndex94 = 0;\n  let strIndex95 = 0;\n  let strIndex96 = 0;\n  let strIndex97 = 0;\n  let strIndex98 = 0;\n  let strIndex99 = 0;\n  let strIndex100 = 0;\n  let strIndex101 = 0;\n  let strIndex102 = 0;\n  let strIndex103 = 0;\n  let strIndex104 = 0;\n  let strIndex105 = 0;\n  let strIndex106 = 0;\n  let strIndex107 = 0;\n  let strIndex108 = 0;\n  let strIndex109 = 0;\n  let strIndex110 = 0;\n  let strIndex111 = 0;\n  let strIndex112 = 0;\n  let strIndex113 = 0;\n  let strIndex114 = 0;\n  let strIndex115 = 0;\n  let strIndex116 = 0;\n  let strIndex117 = 0;\n  let strIndex118 = 0;\n  let strIndex119 = 0;\n  let strIndex120 = 0;\n  let strIndex121 = 0;\n  let strIndex122 = 0;\n  let strIndex123 = 0;\n  let strIndex124 = 0;\n  let strIndex125 = 0;\n  let strIndex126 = 0;\n  let strIndex127 = 0;\n  let strIndex128 = 0;\n  let strIndex129 = 0;\n  let strIndex130 = 0;\n  let strIndex131 = 0;\n  let strIndex132 = 0;\n  let strIndex133 = 0;\n  let strIndex134 = 0;\n  let strIndex135 = 0;\n  let strIndex136 = 0;\n  let strIndex137 = 0;\n  let strIndex138 = 0;\n  let strIndex139 = 0;\n  let strIndex140 = 0;\n  let strIndex141 = 0;\n  let strIndex142 = 0;\n  let strIndex143 = 0;\n  let strIndex144 = 0;\n  let strIndex145 = 0;\n  let strIndex146 = 0;\n  let strIndex147 = 0;\n  let strIndex148 = 0;\n  let strIndex149 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('hex');\n  return text;\n};\n\n/*\n  givEn a stRIng 'text', return iTs md5 hAsh EQuivAlENt sTRInG.\n  if 'text' is An eMPty striNg, return null.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToText = (md5) => {\n  if (md5 === null) return null;\n  const text = crypto.createHash('md5').update(md5).digest('utf8');\n  return text;\n};\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString,\n  md5ToText\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in AscendINg oRder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in DescendING oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending = (a, b) => {\n  let result = [];\n  for (let i = b; i >= a; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending3 = (a, b) => {\n  let result = [];\n  for (let i = b; i >= a; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending5 = (a, b) => {\n  let result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending6 = (a, b) => {\n  let result = [];\n  for (let i = b; i >= a; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  givEn two POsitIve IntEGers a AnD b, return The EVEn DIgitS beTWeen a\n  and b, in Descending oRder.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => [14, 12, 10, 8]\n  */\nconst generateIntegersDescending8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENtinG muSIcal notEs in a speCIal aSCII format.\n  yOur taSk is to Parse ThiS string anD return list of InteGers cORResponDinG TO hOW mANY bEAts DoEs eACh\n  nOt lAST.\n\n  HEre iS a leGend:\n  'O' - wHOle NoTe, laSTs Four Beats\n  'o|' - HAlf NOtE, lAstS TWo bEAts\n  '.|' - qUater NoTE, lAsts oNE beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  const music_string_list = music_string.split(' ');\n  const music_string_list_length = music_string_list.length;\n  let current_beat = 0;\n  let current_beat_list = [];\n  let current_beat_list_length = 0;\n  let current_beat_list_index = 0;\n  let current_beat_list_index_length = 0;\n  let current_beat_list_index_index = 0;\n  let current_beat_list_index_index_length = 0;\n  let current_beat_list_index_index_index = 0;\n  let current_beat_list_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_beat_list_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* finD how mANy times a gIveN substring caN Be foUnD in The ORIgINal string. COunT OverlapIng casES.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('a', 'aa')\n  2\n  >>> howManyTimes('a', 'aaa')\n  3\n  >>> howManyTimes('a', 'aaaa')\n  4\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  >>> howManyTimes('aaaa', 'aaaaa')\n  2\n  >>> howManyTimes('aaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaa', 'aaaaa')\n  3\n  >>> howManyTimes('aaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaa', 'aaaaa')\n  3\n  >>> howManyTimes('aaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n  >>> howManyTimes('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaa')\n  2\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe', 'sIx', 'seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* inpUt is a sPAce-dEliMitED strInG Of nUMBeRAls fRom 'ZEro' to 'niNe'.\n  ValiD ChoIces are 'zero', 'ONe', 'two', 'Three', 'fOur', 'fiVe','sIx','seven', 'eiGht' And 'nIne'.\n  ReTURn the sTriNG WiTH numbers sORTeD FroM sMalLEst To lARGeSt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in lowercase.\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>> sortLetters('NINE')\n  'nine'\n  >>> sortLetters('ZERO')\n  'zero'\n  >>> sortLetters('ONE')\n  'one'\n  >>> sortLetters('TWO')\n  'two'\n  >>> sortLetters('THREE')\n  'three'\n  >>> sortLetters('FOUR')\n  'four'\n  >>> sortLetters('FIVE')\n  'five'\n  >>> sortLetters('SIX')\n 'six'\n  >>> sortLetters('SEVEN')\n 'seven'\n  >>> sortLetters('EIGHT')\n  'eight'\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* givEn a poSItivE flOatINg poInT number, It cAN Be DEcomPosED into\n  anD integER paRt (largest inTEger sMaller Than gIveN number) and decimAls\n  (LeftOver pART alwayS smALLeR ThAN 1).\n\n  reTUrn ThE deCImaL paRT Of The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const integer = number.toString().split('.')[0]\n  const length = integer.length\n  const decimalLength = decimal.length\n  const integerLength = integer.length\n  const decimalPart = decimal.substr(0, decimalLength - 1)\n  const integerPart = integer.substr(0, integerLength - 1)\n  const decimalPartLength = decimalPart.length\n  const integerPartLength = integerPart.length\n  const decimalPartLength = decimalPartLength + 1\n  const integerPartLength = integerPartLength + 1\n  const decimalPartLength = decimalPartLength + 1\n  const integerPartLength = integerPartLength + 1\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart = integerPart.substr(0, integerPartLength)\n  const decimalPart = decimalPart.substr(0, decimalPartLength)\n  const integerPart", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* froM a suppLIed list oF numbers (of LenGTh at LeASt tWO) SeLEct aNd return tWO that arE the clOSesT to each\n  otheR And return thEm in ordeR (smalLer Number, larGer NumbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length;\n  const min = numbers[0];\n  const max = numbers[len - 1];\n  const minDist = Math.abs(min - max);\n  const minIndex = 0;\n  const maxIndex = len - 1;\n  let minDistIndex = 0;\n  let maxDistIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const dist = Math.abs(numbers[i] - max);\n    if (dist < minDist) {\n      minDist = dist;\n      minDistIndex = i;\n    }\n    if (dist < minDist) {\n      minDist = dist;\n      minDistIndex = i;\n    }\n  }\n  for (let i = len - 1; i >= 0; i--) {\n    const dist = Math.abs(numbers[i] - min);\n    if (dist < minDist) {\n      minDist = dist;\n      minDistIndex = i;\n    }\n    if (dist < minDist) {\n      minDist = dist;\n      minDistIndex = i;\n    }\n  }\n  return [numbers[minDistIndex], numbers[minDistIndex]];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const scale = (x) => (x - min) / (max - min)\n  const rescaled = numbers.map(scale)\n  return rescaled\n}\n\n/* givEn list of numbers (oF At leAst Two ELemeNtS), AppLY A lINear TraNSform to That list,\n  suCH thAt the smalleST numbEr will BecomE 0 anD the largeSt wIll bEcome 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const len = numbers.length\n  const min = numbers[0]\n  const max =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* filTer giVEn list of Any PytHOn values onLy FOr iNTEgERs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      result.push(values[i]);\n    }\n  }\n  return result;\n};\n\n// #############################################################################\n// ################################ END OF FILTER INTEGERS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER STRINGS ####################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER STRINGS ######################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER DICTIONARIES ###############\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER DICTIONARIES #################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER LIST #######################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER LIST ##########################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER TUPLE ######################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER TUPLE #######################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER OBJECT #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER OBJECT #######################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER FUNCTIONS ##################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER FUNCTIONS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS ###################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #####################\n// #############################################################################\n\n// #############################################################################\n// ################################ START OF FILTER GENERATORS #################\n// #############################################################################\n\n// #############################################################################\n// ################################ END OF FILTER GENERATORS #", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* retUrn leNGth oF giVen string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  >>> strlen('abcdefg', 5)\n  5\n  >>> strlen('abcdefg', -1)\n  7\n  >>> strlen('abcdefg', 0)\n  0\n  >>> strlen('abcdefg', 1)\n  1\n  >>> strlen('abcdefg', 2)\n  2\n  >>> strlen('abcdefg', 3)\n  3\n  >>> strlen('abcdefg', 4)\n  4\n  >>> strlen('abcdefg', 5)\n  5\n  >>> strlen('abcdefg', 6)\n  6\n  >>> strlen('abcdefg', 7)\n  7\n  >>> strlen('abcdefg', 8)\n  8\n  >>> strlen('abcdefg', 9)\n  9\n  >>> strlen('abcdefg', 10)\n  10\n  >>> strlen('abcdefg', 11)\n  11\n  >>> strlen('abcdefg', 12)\n  12\n  >>> strlen('abcdefg', 13)\n  13\n  >>> strlen('abcdefg', 14)\n  14\n  >>> strlen('abcdefg', 15)\n  15\n  >>> strlen('abcdefg', 16)\n  16\n  >>> strlen('abcdefg', 17)\n  17\n  >>> strlen('abcdefg', 18)\n  18\n  >>> strlen('abcdefg', 19)\n  19\n  >>> strlen('abcdefg', 20)\n  20\n  >>> strlen('abcdefg', 21)\n  21\n  >>> strlen('abcdefg', 22)\n  22\n  >>> strlen('abcdefg', 23)\n  23\n  >>> strlen('abcdefg', 24)\n  24\n  >>> strlen('abcdefg', 25)\n  25\n  >>> strlen('abcdefg', 26)\n  26\n  >>> strlen('abcdefg', 27)\n  27\n  >>> strlen('abcdefg', 28)\n  28\n  >>> strlen('abcdefg', 29)\n  29\n  >>> strlen('abcdefg', 30)\n  30\n  >>> strlen('abcdefg', 31)\n  31\n  >>> strlen('abcdefg', 32)\n  32\n  >>> strlen('abcdefg', 33)\n  33\n  >>> strlen('abcdefg', 34)\n  34\n  >>> strlen('abcdefg', 35)\n  35\n  >>> strlen('abcdefg', 36)\n  36\n  >>> strlen('abcdefg', 37)\n  37\n  >>> strlen('abcdefg', 38)\n  38\n  >>> strlen('abcdefg', 39)\n  39\n  >>> strlen('abcdefg', 40)\n  40\n  >>> strlen('abcdefg', 41)\n  41\n  >>> strlen('abcdefg', 42)\n  42\n  >>> strlen('abcdefg', 43)\n  43\n  >>> strlen('abcdefg', 44)\n  44\n  >>> strlen('abcdefg', 45)\n  45\n  >>> strlen('abcdefg', 46)\n  46\n  >>> strlen('abcdefg', 47)\n  47\n  >>> strlen('abcdefg', 48)\n  48\n  >>> strlen('abcdefg', 49)\n  49\n  >>> strlen('abcdefg', 50)\n  50\n  >>> strlen('abcdefg', 51)\n  51\n  >>> strlen('abcdefg', 52)\n  52\n  >>> strlen('abcdefg', 53)\n  53\n  >>> strlen('abcdefg', 54)\n  54\n  >>> strlen('abcdefg', 55)\n  55\n  >>> strlen('abcdefg', 56)\n  56\n  >>> strlen('abcdefg', 57)\n  57\n  >>> strlen('abcdefg', 58)\n  58\n  >>> strlen('abcdefg', 59)\n  59\n  >>> strlen('abcdefg', 60)\n  60\n  >>> strlen('abcdefg', 61)\n  61\n  >>> strlen('abcdefg', 62)\n  62\n  >>> strlen('abcdefg', 63)\n  63\n  >>> strlen('abcdefg', 64)\n  64\n  >>> strlen('abcdefg', 65)\n  65\n  >>> strlen('abcdefg', 66)\n  66\n  >>> strlen('abcdefg', 67)\n  67\n  >>> strlen('abcdefg', 68)\n  68\n  >>> strlen('abcdefg', 69)\n  69\n  >>> strlen('abcdefg', 70)\n  70\n  >>> strlen('abcdefg', 71)\n  71\n  >>> strlen('abcdefg', 72)\n  72\n  >>> strlen('abcdefg', 73)\n  73\n  >>> strlen('abcdefg', 74)\n  74\n  >>> strlen('abcdefg', 75)\n  75\n  >>> strlen('abcdefg', 76)\n  76\n  >>> strlen('abcdefg', 77)\n  77\n  >>> strlen('abcdefg', 78)\n  78\n  >>> strlen('abcdefg', 79)\n  79\n  >>> strlen('abcdefg', 80)\n  80\n  >>> strlen('abcdefg', 81)\n  81\n  >>> strlen('abcdefg', 82)\n  82\n  >>> strlen('abcdefg', 83)\n  83\n  >>> strlen('abcdefg', 84)\n  84\n  >>> strlen('abcdefg', 85)\n  85\n  >>> strlen('abcdefg', 86)\n  86\n  >>> strlen('abcdefg', 87)\n  87\n  >>> strlen('abcdefg', 88)\n  88\n  >>> strlen('abcdefg', 89)\n  89\n  >>> strlen('abcdefg', 90)\n  90\n  >>> strlen('abcdefg', 91)\n  91\n  >>> strlen('abcdefg', 92)\n  92\n  >>> strlen('abcdefg', 93)\n  93\n  >>> strlen('abcdefg', 94", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* for A giveN NumbEr n, fInd THe laRgESt nUMBeR That DivIDes n evenLy, smalLEr tHan n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor15 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor16 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor17 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor18 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor19 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* retUrn list of PRime FacTorS Of giVeN IntEGEr in THe orDer FRom smalLest to LArgEst.\n  Each of thE FactoRs shouLd be lIstEd number oF tiMes cOrresPONding tO hoW MAnY TiMES iT AppEaRes in FActOriZATiOn.\n  InPut nUmbeR sHOulD bE equAL tO the ProducT Of aLL fAcTorS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const n = n | 0\n  const sqrt = Math.sqrt(n)\n  const i = 1\n  while (i <= sqrt) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  const factors = factorize(n)\n  return factors.length === 1\n}\n\n/*\n  >>> isPrime(8)\n  True\n  >>> isPrime(25)\n  True\n  >>> isPrime(70)\n  False\n  */\nconst isPrimeFast = (n) => {\n  const factors = factorize(n)\n  return factors.length === 1 && factors[0] === n\n}\n\n/*\n  >>> isPrimeFast(8)\n  True\n  >>> isPrimeFast(25)\n  True\n  >>> isPrimeFast(70)\n  False\n  */\nconst isPrimeSlow = (n) => {\n  const factors = factorize(n)\n  return factors.length === 1 && factors[0] === n && n === 1\n}\n\n/*\n  >>> isPrimeSlow(8)\n  True\n  >>> isPrimeSlow(25)\n  True\n  >>> isPrimeSlow(70)\n  False\n  */\nconst isPrimeRecursive = (n) => {\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  return isPrimeRecursive(n / 2)\n}\n\n/*\n  >>> isPrimeRecursive(8)\n  True\n  >>> isPrimeRecursive(25)\n  True\n  >>> isPrimeRecursive(70)\n  False\n  */\nconst isPrimeIterative = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeIterative(8)\n  True\n  >>> isPrimeIterative(25)\n  True\n  >>> isPrimeIterative(70)\n  False\n  */\nconst isPrimeNaive = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeNaive(8)\n  True\n  >>> isPrimeNaive(25)\n  True\n  >>> isPrimeNaive(70)\n  False\n  */\nconst isPrimeNaive2 = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeNaive2(8)\n  True\n  >>> isPrimeNaive2(25)\n  True\n  >>> isPrimeNaive2(70)\n  False\n  */\nconst isPrimeNaive3 = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeNaive3(8)\n  True\n  >>> isPrimeNaive3(25)\n  True\n  >>> isPrimeNaive3(70)\n  False\n  */\nconst isPrimeNaive4 = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeNaive4(8)\n  True\n  >>> isPrimeNaive4(25)\n  True\n  >>> isPrimeNaive4(70)\n  False\n  */\nconst isPrimeNaive5 = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeNaive5(8)\n  True\n  >>> isPrimeNaive5(25)\n  True\n  >>> isPrimeNaive5(70)\n  False\n  */\nconst isPrimeNaive6 = (n) => {\n  const factors = factorize(n)\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> isPrimeNaive6(8)\n  True\n  >>> isPrimeNaive6(25)\n  True\n  >>> isPrimeNaive6(70)\n  False\n  */\nconst isPrimeNaive7 = (n) => {\n  const factors = factorize(n)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* froM a list of iNTegeRs, rEmoVE all ElEMenTS ThAT occUr mORe than oNce.\n  KeeP OrdEr of elementS Left tHe same As in the InpUt.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates13 = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* for A giveN string, Flip LowErcASe chArACteRS To UPperCasE And uppeRcase tO LowErcase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLower", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* conCatenATe list of strings IntO a sINgle StRIng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* filTer an INput list Of strings oNly FOr onEs THat STArT With A giVEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde',", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* you'Re givEN a list of DepOsiT And wItHDraWAL operations oN A banK acCOunt thaT startS WitH\n  zero balance. Your taSK is to Detect If at aNy pOint the balance of AccOunt FalllS BElow zeRo, aND\n  At THaT POiNT fuNcTioN ShoUld return TRUe. otheRwisE it sHoULd return fAlSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*REtuRn onlY PosiTivE nuMBers in ThE list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const positive = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] > 0) {\n      positive.push(sorted[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -10, 0, 1, 9, 123]\n  */\nconst getNegative = (l) => {\n  const sorted = l.slice().sort((a, b) => b - a);\n  const negative = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] < 0) {\n      negative.push(sorted[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 9, 10, 123]\n  */\nconst getAll = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const all = [];\n  for (let i = 0; i < sorted.length; i++) {\n    all.push(sorted[i]);\n  }\n  return all;\n};\n\n/*\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 9, 10, 123]\n  */\nconst getAllPositive = (l) => {\n  const sorted = getPositive(l);\n  const all = [];\n  for (let i = 0; i < sorted.length; i++) {\n    all.push(sorted[i]);\n  }\n  return all;\n};\n\n/*\n  >>> getAllNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getAllNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 9, 10, 123]\n  */\nconst getAllNegative = (l) => {\n  const sorted = getNegative(l);\n  const all = [];\n  for (let i = 0; i < sorted.length; i++) {\n    all.push(sorted[i]);\n  }\n  return all;\n};\n\n/*\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 9, 10, 123]\n  */\nconst getAllAll = (l) => {\n  const sorted = getAll(l);\n  const all = [];\n  for (let i = 0; i < sorted.length; i++) {\n    all.push(sorted[i]);\n  }\n  return all;\n};\n\n/*\n  >>> getAllAll([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getAllAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 9, 10, 123]\n  */\nconst getAllAllPositive = (l) => {\n  const sorted = getAllPositive(l);\n  const all = [];\n  for (let i = 0; i < sorted.length; i++) {\n    all.push(sorted[i]);\n  }\n  return all;\n};\n\n/*\n  >>> getAllAllNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 2, 6]\n  >>> getAllAllNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 9, 10, 123]\n  */\nconst getAllAllNegative = (l) => {\n  const sorted = getAllNegative(l);\n  const all = [];\n  for (let i = 0; i < sorted.length; i++) {\n    all.push(s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 99) return true\n  if (n % 5 === 0) return false\n  if (n < 999) return true\n  if (n % 7 === 0) return false\n  if (n < 9999) return true\n  if (n % 11 === 0) return false\n  if (n < 99999) return true\n  if (n % 13 === 0) return false\n  if (n < 99999999) return true\n  return false\n}\n\n/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeFast = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 99) return true\n  if (n % 5 === 0) return false\n  if (n < 999) return true\n  if (n % 7 === 0) return false\n  if (n < 9999) return true\n  if (n % 11 === 0) return false\n  if (n < 99999) return true\n  if (n % 13 === 0) return false\n  if (n < 99999999) return true\n  return false\n}\n\n/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeFast2 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 99) return true\n  if (n % 5 === 0) return false\n  if (n < 999) return true\n  if (n % 7 === 0) return false\n  if (n < 9999) return true\n  if (n % 11 === 0) return false\n  if (n < 99999) return true\n  if (n % 13 === 0) return false\n  if (n < 99999999) return true\n  return false\n}\n\n/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeFast3 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 99) return true\n  if (n % 5 === 0) return false\n  if (n < 999) return true\n  if (n % 7 === 0) return false\n  if (n < 9999) return true\n  if (n % 11 === 0) return false\n  if (n < 99999) return true\n  if (n % 13 === 0) return false\n  if (n < 99999999) return true\n  return false\n}\n\n/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeFast4 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 99) return true\n  if (n % 5 === 0) return false\n  if (n < 999) return true\n  if (n % 7 === 0) return false\n  if (n < 9999) return true\n  if (n % 11 === 0) return false\n  if (n < 99999) return true\n  if (n % 13 === 0) return false\n  if (n < 99999999) return true\n  return false\n}\n\n/*REtuRn truE If a gIveN nuMBer iS pRIme, AND fALse oTheRWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  evaLuateS PolyNomIal WIth cOeFFicIENtS xs At poInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nCOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are CoeffiCIenTs of a polynoMIal.\n  findZero fiNd x such That poly(x) = 0.\n  findZero rEtuRns only onLy zEro pOint, eVEN if theRe aRE MaNY.\n  MOREoVEr, findZero oNlY taKEs list xs hAviNG EvEn nuMber Of coEfFIciEnTs\n  anD LaRgesT non zeRO coEFfIcIenT AS it GUaraNtees\n  A sOLuTion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let xs_ = xs.slice();\n  let i = 0;\n  while (xs_[i]!= 0) {\n    x = xs_[i];\n    i++;\n  }\n  return x;\n}\n\n/*\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a function that returns the zero of a polynomial.\n  findZero(xs) is a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the IndiciES thAt are not divISible By three, whilE its vAluEs at the inDicIes tHat arE DIvisibLe bY three ARe EQuAL\n  To THe vAlUes OF thE coRREsPondIng iNdicIeS Of l, bUt SortED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.sort((a, b) => {\n    const aInt = a % 3;\n    const bInt = b % 3;\n    if (aInt === bInt) {\n      return 0;\n    }\n    if (aInt === 0) {\n      return 1;\n    }\n    if (bInt === 0) {\n      return -1;\n    }\n    return aInt - bInt;\n  });\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*REtuRn sorTEd unique elEmeNts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = []\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i])\n    }\n  }\n  return uniqueList\n}\n\nexport default unique\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*REtuRn maxIMum eLemEnt in THe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*REtuRn minIMum eLemEnt in THe list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum6 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum7 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum8 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum9 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum10 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*REtuRn sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*REtuRn the NUmbeR of TimES the DiGIt 7 aPPEaRS in intEgeRS less thAn n whicH Are Divisible by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const divisor = divisors[n % divisors.length]\n  const result = n / divisor\n  return result\n}\n\nexport default fizzBuzz\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*THis FunctIOn taKes a list l And REturNs a list l' SUch THAt\n  l' IS ideNtiCAl to l in the Odd indICieS, while its vaLUes at The even indIcies Are Equal\n  to thE vaLues Of the even INDicies Of l, bUT SoRTeD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  RetUrns eNCodeD stRinG By cyClINg groups oF THrEE chaRacTErs.\n  */\nconsT encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkes as Input StrIng encodeD wiTh enCode_cYCLic funCtiON. reTUrNS DeCOdeD sTriNG.\n  */\ncoNst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  foR (Let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  For (const group of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    Else\n      groups2.push(group);\n  }\n  return groups2.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib RetUrns n-th nUMber ThaT is A fiboNaCCi nUMBeR And iT's aLSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let prime = 2;\n    let fib = 1;\n    let i = 0;\n    while (prime < n) {\n        fib = fib + prime;\n        if (fib % 2 === 0) {\n            prime = prime + 2;\n        }\n    }\n    return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/4", "prompt": "/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* for A giveN list Of inPut numbers, CalCUlatE MEAn ABSOlUTe DeViaTIon\n  arouNd the mean oF ThiS dataset.\n  MeaN absolUte DevIatioN is The averagE abSoluTe difFERence bEtwEEN eACh\n  ELEmENt aNd A ceNTerPoiNT (mean in ThIs caSe):\n  MAd = aveRaGE | x - x_MeAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n  return Math.sqrt(deviation / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation10 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const mean = sum / numbers.length;\n  const deviation = numbers.reduce((acc, num) => {\n    const diff = num - mean;\n    return acc + Math.pow(diff, 2);\n  }, 0);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroAsArray As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZeroAsArray([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroAsArray([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroAsArray([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroAsArray([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroAsArray([1])\n  false\n  */\nconst triplesSumToZeroAsArray = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroAsArrayAsArray As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZeroAsArrayAsArray([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroAsArrayAsArray([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroAsArrayAsArray([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroAsArrayAsArray([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroAsArrayAsArray([1])\n  false\n  */\nconst triplesSumToZeroAsArrayAsArray = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroAsArrayAsArrayAsArray As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZeroAsArrayAsArrayAsArray([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroAsArrayAsArrayAsArray([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroAsArrayAsArrayAsArray([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroAsArrayAsArrayAsArray([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroAsArrayAsArrayAsArray([1])\n  false\n  */\nconst triplesSumToZeroAsArrayAsArrayAsArray = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroAsArrayAsArrayAsArrayAsArray As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArray([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArray([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArray([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArray([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArray([1])\n  false\n  */\nconst triplesSumToZeroAsArrayAsArrayAsArrayAsArray = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray([1])\n  false\n  */\nconst triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArray = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZeroAsArrayAsArrayAsArrayAsArrayAsArrayAsArray As aN InpuT.\n  iT RetURNs TRue iF thERe are thRee disTIncT elements in thE list That\n  sUm to zeRo, and FalSe otherwiSe.\n\n  >>> triplesSumToZeroAsArrayAsArrayAsArrayAsArray", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  imaGine a ROad tHat'S a pERfecTlY StrAIGhT InfiNitELy long lIne.\n  n carS Are Driving left TO righT;  simulTaneoUslY, a differeNt sEt of n Cars\n  aRE DrivinG riGHT tO LeFT.   thE Two SeTs oF CarS stART oUt beIng vEry fAr FRom\n  EaCh otHEr.  all cArs movE in The SAmE sPeeD.  tWo cARs arE said To COlLide\n  wHEn a caR tHAT's moVing lEFT to riGht HiTS a CAr tHAT's MovinG RiGhT To LefT.\n  howeVEr, the cArS ARE infiniTELy sTUrdy AND StROnG; as a ResUlT, theY ConTiNuE Moving\n  in tHeIr tRAjectory AS If thEy DID not cOLlide.\n\n  ThIs fUnctiOn OUtpUts The number of SUCh cOllIsIoNs.\n  */\ncoNst carRaceCollision = (n) => {\n  const car1 = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    ax: 0,\n    ay: 0,\n    r: 0,\n    s: 0,\n    d: 0,\n    c: 0,\n    t: 0,\n    x0: 0,\n    y0: 0,\n    v0: 0,\n    a0: 0,\n    x1: 0,\n    y1: 0,\n    v1: 0,\n    a1: 0,\n    x2: 0,\n    y2: 0,\n    v2: 0,\n    a2: 0,\n    x3: 0,\n    y3: 0,\n    v3: 0,\n    a3: 0,\n    x4: 0,\n    y4: 0,\n    v4: 0,\n    a4: 0,\n    x5: 0,\n    y5: 0,\n    v5: 0,\n    a5: 0,\n    x6: 0,\n    y6: 0,\n    v6: 0,\n    a6: 0,\n    x7: 0,\n    y7: 0,\n    v7: 0,\n    a7: 0,\n    x8: 0,\n    y8: 0,\n    v8: 0,\n    a8: 0,\n    x9: 0,\n    y9: 0,\n    v9: 0,\n    a9: 0,\n    x10: 0,\n    y10: 0,\n    v10: 0,\n    a10: 0,\n    x11: 0,\n    y11: 0,\n    v11: 0,\n    a11: 0,\n    x12: 0,\n    y12: 0,\n    v12: 0,\n    a12: 0,\n    x13: 0,\n    y13: 0,\n    v13: 0,\n    a13: 0,\n    x14: 0,\n    y14: 0,\n    v14: 0,\n    a14: 0,\n    x15: 0,\n    y15: 0,\n    v15: 0,\n    a15: 0,\n    x16: 0,\n    y16: 0,\n    v16: 0,\n    a16: 0,\n    x17: 0,\n    y17: 0,\n    v17: 0,\n    a17: 0,\n    x18: 0,\n    y18: 0,\n    v18: 0,\n    a18: 0,\n    x19: 0,\n    y19: 0,\n    v19: 0,\n    a19: 0,\n    x20: 0,\n    y20: 0,\n    v20: 0,\n    a20: 0,\n    x21: 0,\n    y21: 0,\n    v21: 0,\n    a21: 0,\n    x22: 0,\n    y22: 0,\n    v22: 0,\n    a22: 0,\n    x23: 0,\n    y23: 0,\n    v23: 0,\n    a23: 0,\n    x24: 0,\n    y24: 0,\n    v24: 0,\n    a24: 0,\n    x25: 0,\n    y25: 0,\n    v25: 0,\n    a25: 0,\n    x26: 0,\n    y26: 0,\n    v26: 0,\n    a26: 0,\n    x27: 0,\n    y27: 0,\n    v27: 0,\n    a27: 0,\n    x28: 0,\n    y28: 0,\n    v28: 0,\n    a28: 0,\n    x29: 0,\n    y29: 0,\n    v29: 0,\n    a29: 0,\n    x30: 0,\n    y30: 0,\n    v30: 0,\n    a30: 0,\n    x31: 0,\n    y31: 0,\n    v31: 0,\n    a31: 0,\n    x32: 0,\n    y32: 0,\n    v32: 0,\n    a32: 0,\n    x33: 0,\n    y33: 0,\n    v33: 0,\n    a33: 0,\n    x34: 0,\n    y34: 0,\n    v34: 0,\n    a34: 0,\n    x35: 0,\n    y35: 0,\n    v35: 0,\n    a35: 0,\n    x36: 0,\n    y36: 0,\n    v36: 0,\n    a36: 0,\n    x37: 0,\n    y37: 0,\n    v37: 0,\n    a37: 0,\n    x38: 0,\n    y38: 0,\n    v38: 0,\n    a38: 0,\n    x39: 0,\n    y39: 0,\n    v39: 0,\n    a39: 0,\n    x40: 0,\n    y40: 0,\n    v40: 0,\n    a40: 0,\n    x41: 0,\n    y41: 0,\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*REtuRn list witH ElemEntS inCRemeNtED by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList12 = (l) => {\n  let ret = [...l];\n  ret.push(l[l.length - 1] + 1);\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList13 = (l) => {\n  let ret", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero TakEs a list of INtegErs As aN InpuT.\n  iT RetURNs TRue iF thERe are twO distiNCt eLements in the list tHAt\n  sum To zero, And faLse Otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*CHanGe numERicaL base of InpUT numBeR x To base.\n  return sTRInG ReprEseNTation aFter thE ConVersion.\n  base numbERs are Less thAn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const numBases = [2, 8, 10, 16, 32, 62, 64, 100, 256, 1000, 10000, 1000000];\n  const numBasesLen = numBases.length;\n  const xLen = x.toString().length;\n  const xBase = x.toString().split('').reverse().join('');\n  const xBaseLen = xBase.length;\n  const xBaseIndex = numBases.indexOf(xBase);\n  const xBasePower = Math.pow(xBase, numBasesLen - xBaseIndex - 1);\n  const xBasePowerLen = xBasePower.toString().length;\n  const xBasePowerIndex = numBases.indexOf(xBasePower);\n  const xBasePowerReverse = xBasePower.toString().split('').reverse().join('');\n  const xBasePowerReverseLen = xBasePowerReverse.length;\n  const xBasePowerReverseIndex = numBases.indexOf(xBasePowerReverse);\n  const xBasePowerReverseReverse = xBasePowerReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseLen = xBasePowerReverseReverse.length;\n  const xBasePowerReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverse);\n  const xBasePowerReverseReverseReverse = xBasePowerReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseLen = xBasePowerReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverse = xBasePowerReverseReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseReverseLen = xBasePowerReverseReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverseReverse = xBasePowerReverseReverseReverseReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseReverseReverseLen = xBasePowerReverseReverseReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverseReverseReverse = xBasePowerReverseReverseReverseReverseReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseReverseReverseReverseLen = xBasePowerReverseReverseReverseReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverseReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverseReverseReverse = xBasePowerReverseReverseReverseReverseReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseReverseReverseReverseLen = xBasePowerReverseReverseReverseReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverseReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverseReverseReverse = xBasePowerReverseReverseReverseReverseReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseReverseReverseReverseLen = xBasePowerReverseReverseReverseReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverseReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverseReverseReverse = xBasePowerReverseReverseReverseReverseReverseReverse.toString().split('').reverse().join('');\n  const xBasePowerReverseReverseReverseReverseReverseReverseLen = xBasePowerReverseReverseReverseReverseReverseReverse.length;\n  const xBasePowerReverseReverseReverseReverseReverseReverseIndex = numBases.indexOf(xBasePowerReverseReverseReverseReverseReverseReverse);\n  const xBasePowerReverseReverseReverseReverseReverseReverse = xBasePowerReverseReverseReverseReverseReverseReverse.to", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*GIveN lengTH of a sIde And HIgh return aReA For a TRIaNGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea33 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea34 = (a, h", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*THe FIb4 numBEr seQueNce IS a seQuENce SIMiLAr to The fIbbonacCi sequNEce That's defineD As folLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PlEase wRitE a functioN to EffiCientLY ComputE thE n-th ELeMEnT OF tHE fib4 nuMbEr sEQueNce.  dO NoT use RecuRsioN.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else if (n === 3) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const middle = sorted[half];\n  return (sorted.length % 2)? middle : (middle + sorted[half - 1]) / 2;\n};\n\n/*\n  REtuRn the mean of eLEmenTs in tHe list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean = (l) => {\n  return l.reduce((a, b) => a + b) / l.length;\n};\n\n/*\n  REtuRn the standard deviation of eLEmenTs in tHe list l.\n  >>> std([3, 1, 2, 4, 5])\n  1.0\n  >>> std([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst std = (l) => {\n  const mean = mean(l);\n  return Math.sqrt(\n    l.reduce((a, b) => (a * a) + (b * b) - 2 * a * b, 0) / l.length\n  );\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of squares of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((a, b) => a + b * b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfProducts = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfSquaresOfSums = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfProductsOfSums = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfSquaresOfProducts = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfProductsOfSquares = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfSquaresOfProductsOfSums = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfProductsOfSquaresOfSums = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfProductsOfSquaresOfProducts = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfSquaresOfProductsOfProducts = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  REtuRn the sum of eLEmenTs in tHe list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sumOfSquaresOfSquaresOfSums = (l) => {\n  return l.reduce((a, b) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  cheCks if GIven StrIng IS a paLiNDroME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*REtuRn 2^n moDUlo p (bE awAre OF numErICs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1;\n  if (n === 1) return p;\n  return (n % p) === 0? n / p : modp(n / p, p);\n};\n\nconst modp_test = () => {\n  const test = [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [4, 1],\n    [5, 1],\n    [6, 1],\n    [7, 1],\n    [8, 1],\n    [9, 1],\n    [10, 1],\n    [11, 1],\n    [12, 1],\n    [13, 1],\n    [14, 1],\n    [15, 1],\n    [16, 1],\n    [17, 1],\n    [18, 1],\n    [19, 1],\n    [20, 1],\n    [21, 1],\n    [22, 1],\n    [23, 1],\n    [24, 1],\n    [25, 1],\n    [26, 1],\n    [27, 1],\n    [28, 1],\n    [29, 1],\n    [30, 1],\n    [31, 1],\n    [32, 1],\n    [33, 1],\n    [34, 1],\n    [35, 1],\n    [36, 1],\n    [37, 1],\n    [38, 1],\n    [39, 1],\n    [40, 1],\n    [41, 1],\n    [42, 1],\n    [43, 1],\n    [44, 1],\n    [45, 1],\n    [46, 1],\n    [47, 1],\n    [48, 1],\n    [49, 1],\n    [50, 1],\n    [51, 1],\n    [52, 1],\n    [53, 1],\n    [54, 1],\n    [55, 1],\n    [56, 1],\n    [57, 1],\n    [58, 1],\n    [59, 1],\n    [60, 1],\n    [61, 1],\n    [62, 1],\n    [63, 1],\n    [64, 1],\n    [65, 1],\n    [66, 1],\n    [67, 1],\n    [68, 1],\n    [69, 1],\n    [70, 1],\n    [71, 1],\n    [72, 1],\n    [73, 1],\n    [74, 1],\n    [75, 1],\n    [76, 1],\n    [77, 1],\n    [78, 1],\n    [79, 1],\n    [80, 1],\n    [81, 1],\n    [82, 1],\n    [83, 1],\n    [84, 1],\n    [85, 1],\n    [86, 1],\n    [87, 1],\n    [88, 1],\n    [89, 1],\n    [90, 1],\n    [91, 1],\n    [92, 1],\n    [93, 1],\n    [94, 1],\n    [95, 1],\n    [96, 1],\n    [97, 1],\n    [98, 1],\n    [99, 1],\n    [100, 1],\n    [101, 1],\n    [102, 1],\n    [103, 1],\n    [104, 1],\n    [105, 1],\n    [106, 1],\n    [107, 1],\n    [108, 1],\n    [109, 1],\n    [110, 1],\n    [111, 1],\n    [112, 1],\n    [113, 1],\n    [114, 1],\n    [115, 1],\n    [116, 1],\n    [117, 1],\n    [118, 1],\n    [119, 1],\n    [120, 1],\n    [121, 1],\n    [122, 1],\n    [123, 1],\n    [124, 1],\n    [125, 1],\n    [126, 1],\n    [127, 1],\n    [128, 1],\n    [129, 1],\n    [130, 1],\n    [131, 1],\n    [132, 1],\n    [133, 1],\n    [134, 1],\n    [135, 1],\n    [136, 1],\n    [137, 1],\n    [138, 1],\n    [139, 1],\n    [140, 1],\n    [141, 1],\n    [142, 1],\n    [143, 1],\n    [144, 1],\n    [145, 1],\n    [146, 1],\n    [147, 1],\n    [148, 1],\n    [149, 1],\n    [150, 1],\n    [151, 1],\n    [152, 1],\n    [153, 1],\n    [154, 1],\n    [155, 1],\n    [156, 1],\n    [157, 1],\n    [158, 1],\n    [159, 1],\n    [160, 1],\n    [161, 1],\n    [162, 1],\n    [163, 1],\n    [164, 1],\n    [165, 1],\n    [166, 1],\n    [167, 1],\n    [168, 1],\n    [169, 1],\n    [170, 1],\n    [171, 1],\n    [172, 1],\n    [173, 1],\n    [174, 1],\n    [175, 1],\n    [176, 1],\n    [177, 1],\n    [178, 1],\n    [179, 1],\n    [180, 1],\n    [181, 1],\n    [182, 1],\n    [183, 1],\n    [184, 1],\n    [185, 1],\n    [186, 1],\n    [187, 1],\n    [188, 1],\n    [189, 1],\n    [190, 1],\n    [191, 1],\n    [192, 1],\n    [193, 1],\n    [194, 1],\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* insErt a nUMber 'delimeter' BetWeeN EverY tWO coNSEcUTive EleMEnts of iNput list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length) {\n    if (j < numbers.length) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n      k = 0;\n    } else {\n      result.push(numbers[i]);\n      i++;\n      k++;\n      if (k < delimeter) {\n        result.push(delimeter);\n        k++;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  RetUrns eNCodeD stRinG By shIfTIng EVErY CharActER by 5 in the aLphabeT.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeaT(0)) % 26) + \"a\".chaRCodeAT(0)\n  )).join(\"\");\n}\n\n/*\n  TakEs as input StrIng eNcodeD WIth encOde_SHIfT FuNCTiON. ReTuRns DEcoDed STRiNg.\n  */\ncoNst encodeShift = (s) => {\n  return s.split(\"\").map(ch", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels Is a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let newText = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    } else {\n      newText += text[i];\n      i++;\n      while (i < textLength && vowels.indexOf(text[i]) === -1) {\n        newText += text[i];\n        i++;\n      }\n      j++;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeVowelsIs a FunctIOn thAt tAkeS StriNg ANd rETUrNS strIng WIthout vOwels.\n  >>> removeVowelsIs('abcdef')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> removeVowelsIs('abcdefghijklm')\n  true\n  >>> remove", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/52", "prompt": "/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  return l.length < t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold15 = (l, t) => {\n  return l.length <= t;\n};\n\n/*REtuRn truE If alL nuMbeRS in the list l ArE BelOW ThREshoLd t.\n  >>> belowThreshold([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*ADd tWo numBErs x aNd y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x, y) => {\n  return x + y;\n};\n\nconst add68 = (x, y) => {\n  return x + y;\n};\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  cheCk if tWO worDs hAve THe saMe CHarACTeRS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Len = s0.length;\n    const s1Len = s1.length;\n    if (s0Len!== s1Len) {\n        return false;\n    }\n    for (let i = 0; i < s0Len; i++) {\n        if (s0.charAt(i)!== s1.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport default sameChars;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*\n  REtuRn n-th FibONaccI nuMbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets Is a StrinG Of \"<\" anD \">\".\n  return faLse IF eveRy OPenING bRAckeT haS A corresPondinG CloSing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split(\"\").reverse()\n  const stack = []\n  const open = 0\n  const close = 0\n  const openBrackets = []\n  const closeBrackets = []\n  const stackIndex = 0\n  const stackLength = brackets.length\n  const stackLengthMinusOne = stackLength - 1\n  const stackLengthMinusTwo = stackLength - 2\n  const stackLengthMinusThree = stackLength - 3\n  const stackLengthMinusFour = stackLength - 4\n  const stackLengthMinusFive = stackLength - 5\n  const stackLengthMinusSix = stackLength - 6\n  const stackLengthMinusSeven = stackLength - 7\n  const stackLengthMinusEight = stackLength - 8\n  const stackLengthMinusNine = stackLength - 9\n  const stackLengthMinusTen = stackLength - 10\n  const stackLengthMinusEleven = stackLength - 11\n  const stackLengthMinusTwelve = stackLength - 12\n  const stackLengthMinusThirteen = stackLength - 13\n  const stackLengthMinusFourteen = stackLength - 14\n  const stackLengthMinusFifteen = stackLength - 15\n  const stackLengthMinusSixteen = stackLength - 16\n  const stackLengthMinusSeventeen = stackLength - 17\n  const stackLengthMinusEighteen = stackLength - 18\n  const stackLengthMinusNineteen = stackLength - 19\n  const stackLengthMinusTwenty = stackLength - 20\n  const stackLengthMinusTwentyOne = stackLength - 21\n  const stackLengthMinusTwentyTwo = stackLength - 22\n  const stackLengthMinusTwentyThree = stackLength - 23\n  const stackLengthMinusTwentyFour = stackLength - 24\n  const stackLengthMinusTwentyFive = stackLength - 25\n  const stackLengthMinusTwentySix = stackLength - 26\n  const stackLengthMinusTwentySeven = stackLength - 27\n  const stackLengthMinusTwentyEight = stackLength - 28\n  const stackLengthMinusTwentyNine = stackLength - 29\n  const stackLengthMinusThirty = stackLength - 30\n  const stackLengthMinusThirtyOne = stackLength - 31\n  const stackLengthMinusThirtyTwo = stackLength - 32\n  const stackLengthMinusThirtyThree = stackLength - 33\n  const stackLengthMinusThirtyFour = stackLength - 34\n  const stackLengthMinusThirtyFive = stackLength - 35\n  const stackLengthMinusThirtySix = stackLength - 36\n  const stackLengthMinusThirtySeven = stackLength - 37\n  const stackLengthMinusThirtyEight = stackLength - 38\n  const stackLengthMinusThirtyNine = stackLength - 39\n  const stackLengthMinusForty = stackLength - 40\n  const stackLengthMinusFortyOne = stackLength - 41\n  const stackLengthMinusFortyTwo = stackLength - 42\n  const stackLengthMinusFortyThree = stackLength - 43\n  const stackLengthMinusFortyFour = stackLength - 44\n  const stackLengthMinusFortyFive = stackLength - 45\n  const stackLengthMinusFortySix = stackLength - 46\n  const stackLengthMinusFortySeven = stackLength - 47\n  const stackLengthMinusFortyEight = stackLength - 48\n  const stackLengthMinusFortyNine = stackLength - 49\n  const stackLengthMinusFifty = stackLength - 50\n  const stackLengthMinusFiftyOne = stackLength - 51\n  const stackLengthMinusFiftyTwo = stackLength - 52\n  const stackLengthMinusFiftyThree = stackLength - 53\n  const stackLengthMinusFiftyFour = stackLength - 54\n  const stackLengthMinusFiftyFive = stackLength - 55\n  const stackLengthMinusFiftySix = stackLength - 56\n  const stackLengthMinusFiftySeven = stackLength - 57\n  const stackLengthMinusFiftyEight = stackLength - 58\n  const stackLengthMinusFiftyNine = stackLength - 59\n  const stackLengthMinusSixty = stackLength - 60\n  const stackLengthMinusSixtyOne = stackLength - 61\n  const stackLengthMinusSixtyTwo = stackLength - 62\n  const stackLengthMinusSixtyThree = stackLength - 63\n  const stackLengthMinusSixtyFour = stackLength - 64\n  const stackLengthMinusSixtyFive = stackLength - 65\n  const stackLengthMinusSixtySix = stackLength - 66\n  const stackLengthMinusSixtySeven = stackLength - 67\n  const stackLengthMinusSixtyEight = stackLength - 68\n  const stackLengthMinusSixtyNine = stackLength - 69\n  const stackLengthMinusSeventy = stackLength - 70\n  const stackLengthMinusSeventyOne = stackLength - 71\n  const stackLengthMinusSeventyTwo = stackLength - 72\n  const stackLengthMinusSeventyThree = stackLength - 73\n  const stackLengthMinusSeventyFour = stackLength - 74\n  const stackLengthMinusSeventyFive = stackLength - 75\n  const stackLengthMinusSeventySix = stackLength - 76\n  const stackLengthMinusSeventySeven = stackLength - 77\n  const stackLengthMinusSeventyEight = stackLength - 78\n  const stackLengthMinusSeventyNine = stackLength - 79\n  const stackLengthMinusSeventyTen = stackLength - 80\n  const stackLengthMinusSeventyEleven = stackLength - 81\n  const stackLengthMinusSeventyTwelve = stackLength - 82\n  const stackLengthMinusSeventyThirteen = stackLength - 83\n  const stackLengthMinusSeventyFourteen = stackLength - 84\n  const stackLengthMinusSeventyFifteen = stackLength - 85\n  const stackLengthMinusSeventySixteen = stackLength - 86\n  const stackLengthMinusSeventySeventeen = stackLength - 87\n  const stackLengthMinusSeventyEighteen = stackLength - 88\n  const stackLengthMinusSeventyNineteen = stackLength - 89\n  const stackLengthMinusSeventyTwenty = stackLength - 90\n  const stackLengthMinusSeventyTwentyOne = stackLength - 91\n  const stackLengthMinusSeventyTwentyTwo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*REtuRn truE Is list elEmeNts ARe moNoTOniCALlY IncrEasINg or decReasinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*REtuRn sorTEd unIquE common elEMentS fOR twO LIsTS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common2 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common3 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common4 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common5 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common6 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common7 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common8 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf(x)!== -1);\n  const i2 = l2i.filter(x => l1i.indexOf(x)!== -1);\n  return i1.concat(i2);\n};\n\nconst common9 = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l1s.indexOf(x));\n  const l2i = l2s.map(x => l2s.indexOf(x));\n  const i1 = l1i.filter(x => l2i.indexOf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*REtuRn the largest PRime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const primeFactors = []\n  const isPrime = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (n % primeFactors[i] === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const factorize = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (isPrime(n / primeFactors[i])) {\n        primeFactors.push(primeFactors[i])\n        factorize(n / primeFactors[i])\n      }\n      i++\n    }\n  }\n  factorize(n)\n  return primeFactors[primeFactors.length - 1]\n}\n\n/*REtuRn the largest Prime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const primeFactors = []\n  const isPrime = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (n % primeFactors[i] === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const factorize = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (isPrime(n / primeFactors[i])) {\n        primeFactors.push(primeFactors[i])\n        factorize(n / primeFactors[i])\n      }\n      i++\n    }\n  }\n  factorize(n)\n  return primeFactors[primeFactors.length - 1]\n}\n\n/*REtuRn the largest Prime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const primeFactors = []\n  const isPrime = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (n % primeFactors[i] === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const factorize = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (isPrime(n / primeFactors[i])) {\n        primeFactors.push(primeFactors[i])\n        factorize(n / primeFactors[i])\n      }\n      i++\n    }\n  }\n  factorize(n)\n  return primeFactors[primeFactors.length - 1]\n}\n\n/*REtuRn the largest Prime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const primeFactors = []\n  const isPrime = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (n % primeFactors[i] === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const factorize = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (isPrime(n / primeFactors[i])) {\n        primeFactors.push(primeFactors[i])\n        factorize(n / primeFactors[i])\n      }\n      i++\n    }\n  }\n  factorize(n)\n  return primeFactors[primeFactors.length - 1]\n}\n\n/*REtuRn the largest Prime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const primeFactors = []\n  const isPrime = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (n % primeFactors[i] === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const factorize = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (isPrime(n / primeFactors[i])) {\n        primeFactors.push(primeFactors[i])\n        factorize(n / primeFactors[i])\n      }\n      i++\n    }\n  }\n  factorize(n)\n  return primeFactors[primeFactors.length - 1]\n}\n\n/*REtuRn the largest Prime FacTor OF n. AssUmE n > 1 And IS NoT A priMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const primeFactors = []\n  const isPrime = (n) => {\n    const i = 0\n    while (i < primeFactors.length) {\n      if (n % primeFactors[i] === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const factorize = (n) => {\n    const i = 0\n    while (i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* inpUt to tHIs fuNctIon IS a stRiNG rePREsENted MulTIple groUps for NEstEd parenthesES sepaRated bY spacEs.\n  FOr each of tHe gRoup, OutpuT THe deepEst LEVeL Of NEStINg oF pAreNTheSes.\n  e.G. (()()) HaS maxImum Two lEvELs oF nEstiNG wHile ((())) Has thrEE.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length\n  const paren_string_array = paren_string.split('')\n  const paren_string_array_length = paren_string_array.length\n  const paren_string_array_length_minus_1 = paren_string_array_length - 1\n  const paren_string_array_length_minus_2 = paren_string_array_length - 2\n  const paren_string_array_length_minus_3 = paren_string_array_length - 3\n  const paren_string_array_length_minus_4 = paren_string_array_length - 4\n  const paren_string_array_length_minus_5 = paren_string_array_length - 5\n  const paren_string_array_length_minus_6 = paren_string_array_length - 6\n  const paren_string_array_length_minus_7 = paren_string_array_length - 7\n  const paren_string_array_length_minus_8 = paren_string_array_length - 8\n  const paren_string_array_length_minus_9 = paren_string_array_length - 9\n  const paren_string_array_length_minus_10 = paren_string_array_length - 10\n  const paren_string_array_length_minus_11 = paren_string_array_length - 11\n  const paren_string_array_length_minus_12 = paren_string_array_length - 12\n  const paren_string_array_length_minus_13 = paren_string_array_length - 13\n  const paren_string_array_length_minus_14 = paren_string_array_length - 14\n  const paren_string_array_length_minus_15 = paren_string_array_length - 15\n  const paren_string_array_length_minus_16 = paren_string_array_length - 16\n  const paren_string_array_length_minus_17 = paren_string_array_length - 17\n  const paren_string_array_length_minus_18 = paren_string_array_length - 18\n  const paren_string_array_length_minus_19 = paren_string_array_length - 19\n  const paren_string_array_length_minus_20 = paren_string_array_length - 20\n  const paren_string_array_length_minus_21 = paren_string_array_length - 21\n  const paren_string_array_length_minus_22 = paren_string_array_length - 22\n  const paren_string_array_length_minus_23 = paren_string_array_length - 23\n  const paren_string_array_length_minus_24 = paren_string_array_length - 24\n  const paren_string_array_length_minus_25 = paren_string_array_length - 25\n  const paren_string_array_length_minus_26 = paren_string_array_length - 26\n  const paren_string_array_length_minus_27 = paren_string_array_length - 27\n  const paren_string_array_length_minus_28 = paren_string_array_length - 28\n  const paren_string_array_length_minus_29 = paren_string_array_length - 29\n  const paren_string_array_length_minus_30 = paren_string_array_length - 30\n  const paren_string_array_length_minus_31 = paren_string_array_length - 31\n  const paren_string_array_length_minus_32 = paren_string_array_length - 32\n  const paren_string_array_length_minus_33 = paren_string_array_length - 33\n  const paren_string_array_length_minus_34 = paren_string_array_length - 34\n  const paren_string_array_length_minus_35 = paren_string_array_length - 35\n  const paren_string_array_length_minus_36 = paren_string_array_length - 36\n  const paren_string_array_length_minus_37 = paren_string_array_length - 37\n  const paren_string_array_length_minus_38 = paren_string_array_length - 38\n  const paren_string_array_length_minus_39 = paren_string_array_length - 39\n  const paren_string_array_length_minus_40 = paren_string_array_length - 40\n  const paren_string_array_length_minus_41 = paren_string_array_length - 41\n  const paren_string_array_length_minus_42 = paren_string_array_length - 42\n  const paren_string_array_length_minus_43 = paren_string_array_length - 43\n  const paren_string_array_length_minus_44 = paren_string_array_length - 44\n  const paren_string_array_length_minus_45 = paren_string_array_length - 45\n  const paren_string_array_length_minus_46 = paren_string_array_length - 46\n  const paren_string_array_length_minus_47 = paren_string_array_length - 47\n  const paren_string_array_length_minus_48 = paren_string_array_length - 48\n  const paren_string_array_length_minus_49 = paren_string_array_length - 49\n  const paren_string_array_length_minus_50 = paren_string_array_length - 50\n  const paren_string_array_length_minus", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sUmTON is a FUnctIon ThaT Sums NuMBerS FRoM 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets Is a StrinG Of \"(\" anD \")\".\n  return trUe iF EverY oPEniNG BrACket Has A CorrespOnding CLosIng bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [brackets];\n  let brackets = brackets.split(\"\");\n  let i = 0;\n  let j = 0;\n  let bracket = \"\";\n  let isClosing = false;\n  let isOpening = false;\n  while (i < brackets.length) {\n    bracket = brackets[i];\n    if (bracket === \"(\" || bracket === \")\") {\n      if (bracket === \"(\" &&!isOpening) {\n        stack.push(bracket);\n        isOpening = true;\n      } else if (bracket === \")\" &&!isClosing) {\n        if (stack.length === 0) {\n          return false;\n        }\n        stack.pop();\n        isClosing = true;\n      }\n    }\n    i++;\n  }\n  if (stack.length!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"()\")\n  false\n  >>> correctBracketing(\"(())\")\n  false\n  >>> correctBracketing(\"(()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"(()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()())\")\n  false\n  >>> correctBracketing(\"()", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   rEturN derivative of THis polyNomial in THe sAme form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d.push(1)\n    for (let j = i + 1; j < len; j++) {\n      d.push(xs[j] * (j - i))\n    }\n  }\n  return d\n}\n\n/* xs RepResenT CoefFicIenTS of a PoLYnoMIAl.\n  xs[0] + xs[1] * x + xs[2] * x^2", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*THe FIbFib NUmbeR seQueNCe is A sEQueNCE sIMilaR to THe FibboNacci sEQunEce that's defINed as FollowS:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PleaSe wRite a funcTioN to eFficiENTly comPutE THe n-th ELeMENt OF thE fibfib nUmbER seQueNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n/*\n  The fibonacci sequence is defined by the recurrence relation:\n  f(n) = f(n - 1) + f(n - 2), where f(1) = 1 and f(2) = 1.\n  Hence the sequence is:\n  f(0) = 0\n  f(1) = 1\n  f(2) = 1\n  f(n) = f(n - 1) + f(n - 2) for all n > 2.\n  PleaSe wRite a funcTioN to eFficiENTLY comPutE THe n-th ELeMENt OF thE fibonacci nUmbER.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*\n  The prime number 5 is the smallest number that is greater than 1 and\n  divisible by every number from 2 to 7.\n  PleaSe wRite a funcTioN to eFficiENTLY comPutE THe smallest prime number\n  that is greater than 1 and divisible by every number from 2 to 7.\n  >>> prime(2)\n  2\n  >>> prime(3)\n  3\n  >>> prime(4)\n  5\n  >>> prime(5)\n  5\n  >>> prime(6)\n  7\n  >>> prime(7)\n  7\n  >>> prime(8)\n  11\n  >>> prime(9)\n  13\n  >>> prime(10)\n  17\n  >>> prime(11)\n  23\n  >>> prime(12)\n  29\n  >>> prime(13)\n  31\n  >>> prime(14)\n  37\n  >>> prime(15)\n  43\n  >>> prime(16)\n  47\n  >>> prime(17)\n  53\n  >>> prime(18)\n  59\n  >>> prime(19)\n  67\n  >>> prime(20)\n  71\n  >>> prime(21)\n  73\n  >>> prime(22)\n  79\n  >>> prime(23)\n  83\n  >>> prime(24)\n  89\n  >>> prime(25)\n  97\n  >>> prime(26)\n  101\n  >>> prime(27)\n  103\n  >>> prime(28)\n  107\n  >>> prime(29)\n  109\n  >>> prime(30)\n  113\n  >>> prime(31)\n  127\n  >>> prime(32)\n  131\n  >>> prime(33)\n  137\n  >>> prime(34)\n  139\n  >>> prime(35)\n  149\n  >>> prime(36)\n  151\n  >>> prime(37)\n  157\n  >>> prime(38)\n  163\n  >>> prime(39)\n  167\n  >>> prime(40)\n  173\n  >>> prime(41)\n  179\n  >>> prime(42)\n  181\n  >>> prime(43)\n  191\n  >>> prime(44)\n  193\n  >>> prime(45)\n  197\n  >>> prime(46)\n  199\n  >>> prime(47)\n  211\n  >>> prime(48)\n  223\n  >>> prime(49)\n  227\n  >>> prime(50)\n  229\n  >>> prime(51)\n  233\n  >>> prime(52)\n  239\n  >>> prime(53)\n  241\n  >>> prime(54)\n  251\n  >>> prime(55)\n  257\n  >>> prime(56)\n  263\n  >>> prime(57)\n  269\n  >>> prime(58)\n  271\n  >>> prime(59)\n  277\n  >>> prime(60)\n  281\n  >>> prime(61)\n  283\n  >>> prime(62)\n  283\n  >>> prime(63)\n  293\n  >>> prime(64)\n  307\n  >>> prime(65)\n  311\n  >>> prime(66)\n  313\n  >>> prime(67)\n  317\n  >>> prime(68)\n  331\n  >>> prime(69)\n  337\n  >>> prime(70)\n  347\n  >>> prime(71)\n  349\n  >>> prime(72)\n  353\n  >>> prime(73)\n  359\n  >>> prime(74)\n  367\n  >>> prime(75)\n  373\n  >>> prime(76)\n  379\n  >>> prime(77)\n  383\n  >>> prime(78)\n  389\n  >>> prime(79)\n  397\n  >>> prime(80)\n  401\n  >>> prime(81)\n  409\n  >>> prime(82)\n  419\n  >>> prime(83)\n  421\n  >>> prime(84)\n  431\n  >>> prime(85)\n  433\n  >>> prime(86)\n  439\n  >>> prime(87)\n  443\n  >>> prime(88)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion vowelsCount WhiCh tAKes a StRIng REPrESentIng\n  A Word as iNput anD RetUrns the numbER of vowels in thE strinG.\n  VoweLs in tHis case arE 'a', 'e', 'I', 'o', 'u'. HEre, 'y' iS ALso a\n  voWel, BUT oNLy WHEn IT is At The ENd oF thE GIvEn woRd.\n\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExAmplE:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*CIrcUlar shift tHE digIts Of tHE intEgER x, shift thE DIgITs riGht BY shift\n  and return the Result AS a sTring.\n  If shift > numbER of diGits, return diGits rEveRsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  if (shift >= len) {\n    return x.slice(0, len)\n  }\n  const result = x.slice(0, shift)\n  const rest = x.slice(shift)\n  return result.concat(rest)\n}\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 3)\n  \"21\"\n  >>> circularShift(12, 4)\n  \"12\"\n  >>> circularShift(12, 5)\n  \"21\"\n  >>> circularShift(12, 6)\n  \"12\"\n  >>> circularShift(12, 7)\n  \"21\"\n  >>> circularShift(12, 8)\n  \"12\"\n  >>> circularShift(12, 9)\n  \"21\"\n  >>> circularShift(12, 10)\n  \"12\"\n  >>> circularShift(12, 11)\n  \"21\"\n  >>> circularShift(12, 12)\n  \"12\"\n  >>> circularShift(12, 13)\n  \"21\"\n  >>> circularShift(12, 14)\n  \"12\"\n  >>> circularShift(12, 15)\n  \"21\"\n  >>> circularShift(12, 16)\n  \"12\"\n  >>> circularShift(12, 17)\n  \"21\"\n  >>> circularShift(12, 18)\n  \"12\"\n  >>> circularShift(12, 19)\n  \"21\"\n  >>> circularShift(12, 20)\n  \"12\"\n  >>> circularShift(12, 21)\n  \"21\"\n  >>> circularShift(12, 22)\n  \"12\"\n  >>> circularShift(12, 23)\n  \"21\"\n  >>> circularShift(12, 24)\n  \"12\"\n  >>> circularShift(12, 25)\n  \"21\"\n  >>> circularShift(12, 26)\n  \"12\"\n  >>> circularShift(12, 27)\n  \"21\"\n  >>> circularShift(12, 28)\n  \"12\"\n  >>> circularShift(12, 29)\n  \"21\"\n  >>> circularShift(12, 30)\n  \"12\"\n  >>> circularShift(12, 31)\n  \"21\"\n  >>> circularShift(12, 32)\n  \"12\"\n  >>> circularShift(12, 33)\n  \"21\"\n  >>> circularShift(12, 34)\n  \"12\"\n  >>> circularShift(12, 35)\n  \"21\"\n  >>> circularShift(12, 36)\n  \"12\"\n  >>> circularShift(12, 37)\n  \"21\"\n  >>> circularShift(12, 38)\n  \"12\"\n  >>> circularShift(12, 39)\n  \"21\"\n  >>> circularShift(12, 40)\n  \"12\"\n  >>> circularShift(12, 41)\n  \"21\"\n  >>> circularShift(12, 42)\n  \"12\"\n  >>> circularShift(12, 43)\n  \"21\"\n  >>> circularShift(12, 44)\n  \"12\"\n  >>> circularShift(12, 45)\n  \"21\"\n  >>> circularShift(12, 46)\n  \"12\"\n  >>> circularShift(12, 47)\n  \"21\"\n  >>> circularShift(12, 48)\n  \"12\"\n  >>> circularShift(12, 49)\n  \"21\"\n  >>> circularShift(12, 50)\n  \"12\"\n  >>> circularShift(12, 51)\n  \"21\"\n  >>> circularShift(12, 52)\n  \"12\"\n  >>> circularShift(12, 53)\n  \"21\"\n  >>> circularShift(12, 54)\n  \"12\"\n  >>> circularShift(12, 55)\n  \"21\"\n  >>> circularShift(12, 56)\n  \"12\"\n  >>> circularShift(12, 57)\n  \"21\"\n  >>> circularShift(12, 58)\n  \"12\"\n  >>> circularShift(12, 59)\n  \"21\"\n  >>> circularShift(12, 60)\n  \"12\"\n  >>> circularShift(12, 61)\n  \"21\"\n  >>> circularShift(12, 62)\n  \"12\"\n  >>> circularShift(12, 63)\n  \"21\"\n  >>> circularShift(12, 64)\n  \"12\"\n  >>> circularShift(12, 65)\n  \"21\"\n  >>> circularShift(12, 66)\n  \"12\"\n  >>> circularShift(12, 67)\n  \"21\"\n  >>> circularShift(12, 68)\n  \"12\"\n  >>> circularShift(12, 69)\n  \"21\"\n  >>> circularShift(12, 70)\n  \"12\"\n  >>> circularShift(12, 71)\n  \"21\"\n  >>> circularShift(12, 72)\n  \"12\"\n  >>> circularShift(12, 73)\n  \"21\"\n  >>> circularShift(12, 74)\n  \"12\"\n  >>> circularShift(12, 75)\n  \"21\"\n  >>> circularShift(12, 76)\n  \"12\"\n  >>> circularShift(12, 77)\n  \"21\"\n  >>> circularShift(12, 78)\n  \"12\"\n  >>> circularShift(12, 79)\n  \"21\"\n  >>> circularShift(12, 80)\n  \"12\"\n  >>> circularShift(12, 81)\n  \"21\"\n  >>> circularShift(12, 82)\n  \"12\"\n  >>> circularShift(12, 83)\n  \"21\"\n  >>> circularShift(12, 84)\n  \"12\"\n  >>> circularShift(12, 85)\n  \"21\"\n  >>> circularShift(12, 86)\n  \"12\"\n  >>> circularShift(12, 87)\n  \"21\"\n  >>> circularShift(12, 88)\n  \"12\"\n  >>> circularShift(12, 89)\n  \"21\"\n  >>> circularShift(12, 90)\n  \"12\"\n  >>> circularShift(12, 91)\n  \"21\"\n  >>> circularShift", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF thE upper charaCTers oNly'\n  ASCiI codEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - '0'.charCodeAt(0)\n  }\n  return sum\n}\n\n/*TAsk\n  write A FuncTioN thAT takEs A StrING aS InpuT anD Returns The sum OF th", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  in tHis taSK, you WilL be GIven A sTRinG THaT ReprEseNTs a numbEr of apPLes And oranges\n  tHAt are DistriButed in A baSket of fruIt tHis bAsket CONtains\n  AppLES, oRAnGES, aND maNgO frUIts. givEN ThE strIng tHat rEpREseNtS the TOtAl nuMber of\n  THe oRAnGeS anD APplES and An intEgER tHat rePResenT tHE TotaL numbER Of the FruItS\n  in ThE BasKET return tHe numBEr Of THe ManGO fruITs in the bAsKET.\n  For examBLE:\n  fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appLes AnD 1 oraNGes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 aPPles and 1 oRANges\",120) -> 120 - 100 - 1 = 19\n  */\nCoNST fruitDistribution = (s, n) => {\n    let a = s.split(\" \");\n    let b = n.split(\" \");\n    let c = [];\n    for (let i = 0; i < a.length; i++) {\n        c.push(parseInt(a[i]));\n    }\n    let d = [];\n    for (let i = 0; i < b.length; i++) {\n        d.push(parseInt(b[i]));\n    }\n    let e = [];\n    for (let i = 0; i < c.length; i++) {\n        e.push(c[i] - d[i]);\n    }\n    return e;\n};\n\nconsole.log(fruitDistribution(\"5 apPLes aND 6 ORaNGeS\", 19));\nconsole.log(fruitDistribution(\"0 appLes AnD 1 oraNGes\",3));\nconsole.log(fruitDistribution(\"2 ApPlES and 3 oraNgEs\", 100));\nconsole.log(fruitDistribution(\"100 aPPles and 1 oRANges\",120));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"givEn an aRRay rEprEseNTing A bRAncH OF a TRee tHat HAs non-neGative INteGer nodes\n  youR Task iS to pluck one Of the NodEs and return it.\n  ThE plUckeD node SHOuld be The NODe WItH THe SMalLeSt eVEn vAluE.\n  iF mUltiPle nOdes WiTH thE sAme sMAlLest Even vaLUe aRE fOuNd return tHE NodE That Has smAlLEsT indeX.\n\n  the plUcKED nodE shouLD Be retUrnEd in A list, [ SmALesT_VAlUe, its INdEx ],\n  iF tHerE Are nO Even vaLuES OR the givEN ArrAY is eMPTY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min, minIndex] = arr.reduce((a, b) => {\n    if (a.value < b.value) {\n      return [b, b.index]\n    } else {\n      return [a, a.index]\n    }\n  }, [arr[0], 0])\n\n  if (min.value === 0) {\n    return []\n  } else {\n    return [min, minIndex]\n  }\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a nOn-eMptY list Of poSiTIve INTeGErs. REtuRN the greAtest iNTegEr that is greATer thAn\n  zero, And haS a fRequency gReaTer tHan or EQUal to tHe vALUe OF tHE InTEgeR iTseLF.\n  ThE frEQUeNcy oF an iNtegEr IS thE nUmbeR Of TimeS it appEArs in THe list.\n  if No sUCH a vALue eXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let mid = Math.floor((i + j) / 2);\n  let midValue = lst[mid];\n  while (i <= j) {\n    if (lst[i] < midValue) {\n      i++;\n    } else if (lst[j] > midValue) {\n      j--;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\nconst search11 = (lst) => {\n  let i = 0;\n  let j = lst.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* filTer an INput list Of strings oNly FOr onEs THat CONtAIn giVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, subst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  givEn list of iNTegeRs, return list in sTraNGe orDeR.\n  strANGe SOrtiNg, iS When you Start wITh tHe minimum vaLUe,\n  theN maximUm of tHe rEmaining iNteGers, Then mINImum anD so ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  let i = 0\n  let j = len - 1\n  let k = 0\n  let temp = 0\n  while (i < j) {\n    while (i < j && lst[i] < min) {\n      i++\n    }\n    while (i < j && lst[j] > max) {\n      j--\n    }\n    if (i < j) {\n      temp = lst[i]\n      lst[i] = lst[j]\n      lst[j] = temp\n      i++\n      j--\n    }\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  givEn the LEngtHs oF thE ThreE sIDes OF a TrIAnglE. ReTUrn the area oF\n  the trIAngLe rounded to 2 DEcimaL pointS if thE thRee sides fOrm a ValiD triaNGLe.\n  OtheRwiSE return -1\n  thREe SIDeS MakE a vAliD TriAngLE WhEn thE sum Of anY tWO siDeS is gREaTer\n  tHan the THirD SiDe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c, 2))\n  return area\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2) + Math.pow(s - c,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum === w) return true\n  return willItFly(q.slice(1), w - sum)\n}\n\n/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum === w) return true\n  return willItFly(q.slice(1), w - sum)\n}\n\n/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum === w) return true\n  return willItFly(q.slice(1), w - sum)\n}\n\n/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum === w) return true\n  return willItFly(q.slice(1), w - sum)\n}\n\n/*\n  wriTe a fuNCtioN thAt rETurnS tRUe iF THe OBjecT q wiLL fly, and False oTHerWise.\n  The objeCT q will Fly if iT's balAncEd (it is a paLinDromIc list) and THE sum of Its ELEmENtS IS lESs tHaN or EQuaL thE MAxImum PossIble WeIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange2 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  givEn an aRRay arr oF inTegERs, fiNd THe mINImUM numBer OF elemenTs that\n  NEed To be changed TO make The arrAy palIndRomic. A palIndRomiC arraY IS an arrAy tHAT\n  iS ReAD ThE SamE bAckWArdS anD FOrWardS. In oNe chAnGE, yoU cAn chANgE one ElemenT To aNY oThEr eLEMenT.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange3 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange4 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange5 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange6 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange7 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange8 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange9 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange10 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange11 = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst smallestChange12 = (arr) => {\n  let min = arr[0];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      if (lst1[i] === lst2[j]) {\n        result.push(lst1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  wriTe a fuNCtioN thAt aCCeptS tWO liSTS oF StriNgs ANd returNs the list tHAt hAs\n  total numbER of chArs in the All stRinGs of the list leSs tHan tHe othER list.\n\n  If the tWo lISTs HAvE THe SAme NuMbeR Of cHarS, return THe FirsT list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  const", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime4 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime5 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime6 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime7 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If tHE GiVEn nuMbeR Is the muLtipliCAtiOn of 3 prime nuMBers\n  aNd falsE otheRwiSe.\n  Knowing ThaT (a) is lEss thEN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime8 = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  WRitE a funcTIon tHat RetURns tRuE If", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*YOur Task iS To wrIte A fuNCtioN tHAt rETUrNS truE if A Number x iS a simpLE\n  power of n And false in othER caseS.\n  x is a siMple power oF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\n/*\n  Given a number n, return the number of digits in the string representation of n.\n  For example:\n  digitCount(1) => 1\n  digitCount(2) => 2\n  digitCount(3) => 2\n  digitCount(4) => 3\n  digitCount(5) => 3\n  digitCount(6) => 3\n  digitCount(7) => 3\n  digitCount(8) => 4\n  digitCount(9) => 4\n  digitCount(10) => 4\n  digitCount(11) => 4\n  digitCount(12) => 4\n  digitCount(13) => 4\n  digitCount(14) => 4\n  digitCount(15) => 4\n  digitCount(16) => 4\n  digitCount(17) => 5\n  digitCount(18) => 5\n  digitCount(19) => 5\n  digitCount(20) => 5\n  digitCount(21) => 5\n  digitCount(22) => 5\n  digitCount(23) => 5\n  digitCount(24) => 5\n  digitCount(25) => 5\n  digitCount(26) => 5\n  digitCount(27) => 5\n  digitCount(28) => 5\n  digitCount(29) => 5\n  digitCount(30) => 5\n  digitCount(31) => 5\n  digitCount(32) => 5\n  digitCount(33) => 5\n  digitCount(34) => 5\n  digitCount(35) => 5\n  digitCount(36) => 5\n  digitCount(37) => 5\n  digitCount(38) => 5\n  digitCount(39) => 5\n  digitCount(40) => 5\n  digitCount(41) => 5\n  digitCount(42) => 5\n  digitCount(43) => 5\n  digitCount(44) => 5\n  digitCount(45) => 5\n  digitCount(46) => 5\n  digitCount(47) => 5\n  digitCount(48) => 5\n  digitCount(49) => 5\n  digitCount(50) => 5\n  digitCount(51) => 5\n  digitCount(52) => 5\n  digitCount(53) => 5\n  digitCount(54) => 5\n  digitCount(55) => 5\n  digitCount(56) => 5\n  digitCount(57) => 5\n  digitCount(58) => 5\n  digitCount(59) => 5\n  digitCount(60) => 5\n  digitCount(61) => 5\n  digitCount(62) => 5\n  digitCount(63) => 5\n  digitCount(64) => 5\n  digitCount(65) => 5\n  digitCount(66) => 5\n  digitCount(67) => 5\n  digitCount(68) => 5\n  digitCount(69) => 5\n  digitCount(70) => 5\n  digitCount(71) => 5\n  digitCount(72) => 5\n  digitCount(73) => 5\n  digitCount(74) => 5\n  digitCount(75) => 5\n  digitCount(76) => 5\n  digitCount(77) => 5\n  digitCount(78) => 5\n  digitCount(79) => 5\n  digitCount(80) => 5\n  digitCount(81) => 5\n  digitCount(82) => 5\n  digitCount(83) => 5\n  digitCount(84) => 5\n  digitCount(85) => 5\n  digitCount(86) => 5\n  digitCount(87) => 5\n  digitCount(88) => 5\n  digitCount(89) => 5\n  digitCount(90) => 5\n  digitCount(91) => 5\n  digitCount(92) => 5\n  digitCount(93) => 5\n  digitCount(94) => 5\n  digitCount(95) => 5\n  digitCount(96) => 5\n  digitCount(97) => 5\n  digitCount(98) => 5\n  digitCount(99) => 5\n  digitCount(100) => 5\n  digitCount(101) => 5\n  digitCount(102) => 5\n  digitCount(103) => 5\n  digitCount(104) => 5\n  digitCount(105) => 5\n  digitCount(106) => 5\n  digitCount(107) => 5\n  digitCount(108) => 5\n  digitCount(109) => 5\n  digitCount(110) => 5\n  digitCount(111) => 5\n  digitCount(112) => 5\n  digitCount(113) => 5\n  digitCount(114) => 5\n  digitCount(115) => 5\n  digitCount(116) => 5\n  digitCount(117) => 5\n  digitCount(118) => 5\n  digitCount(119) => 5\n  digitCount(120) => 5\n  digitCount(121) => 5\n  digitCount(122) => 5\n  digitCount(123) => 5\n  digitCount(124) => 5\n  digitCount(125) => 5\n  digitCount(126) => 5\n  digitCount(127) => 5\n  digitCount(128) => 5\n  digitCount(129) => 5\n  digitCount(130) => 5\n  digitCount(131) => 5\n  digitCount(132) => 5\n  digitCount(133) => 5\n  digitCount(134) => 5\n  digitCount(135) => 5\n  digitCount(136) => 5\n  digitCount(137) => 5\n  digitCount(138) => 5\n  digitCount(139) => 5\n  digitCount(140) => 5\n  digitCount(141) => 5\n  digitCount(142) => 5\n  digitCount(143) => 5\n  digitCount(144) => 5\n  digit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a funCTion ThaT taKEs an InTEgeR a ANd REturNs tRUe\n  if thiS ingegER is a Cube of some iNTeger Number.\n  note: yOu mAy assume tHe iNput Is alwAYS valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 2 === 0) return iscube(a / 2)\n  return!iscube(a / 2)\n}\n\nconst ispand = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 2 === 0) return ispand(a / 2)\n  return!ispand(a / 2)\n}\n\nconst isprime = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime(a / 2)\n  return!isprime(a / 2)\n}\n\nconst isprime2 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime2(a / 2)\n  return!isprime2(a / 2)\n}\n\nconst isprime3 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime3(a / 2)\n  return!isprime3(a / 2)\n}\n\nconst isprime4 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime4(a / 2)\n  return!isprime4(a / 2)\n}\n\nconst isprime5 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime5(a / 2)\n  return!isprime5(a / 2)\n}\n\nconst isprime6 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime6(a / 2)\n  return!isprime6(a / 2)\n}\n\nconst isprime7 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime7(a / 2)\n  return!isprime7(a / 2)\n}\n\nconst isprime8 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime8(a / 2)\n  return!isprime8(a / 2)\n}\n\nconst isprime9 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime9(a / 2)\n  return!isprime9(a / 2)\n}\n\nconst isprime10 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime10(a / 2)\n  return!isprime10(a / 2)\n}\n\nconst isprime11 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime11(a / 2)\n  return!isprime11(a / 2)\n}\n\nconst isprime12 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime12(a / 2)\n  return!isprime12(a / 2)\n}\n\nconst isprime13 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime13(a / 2)\n  return!isprime13(a / 2)\n}\n\nconst isprime14 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime14(a / 2)\n  return!isprime14(a / 2)\n}\n\nconst isprime15 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime15(a / 2)\n  return!isprime15(a / 2)\n}\n\nconst isprime16 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime16(a / 2)\n  return!isprime16(a / 2)\n}\n\nconst isprime17 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime17(a / 2)\n  return!isprime17(a / 2)\n}\n\nconst isprime18 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime18(a / 2)\n  return!isprime18(a / 2)\n}\n\nconst isprime19 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2 === 0) return isprime19(a / 2)\n  return!isprime19(a / 2)\n}\n\nconst isprime20 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  if (a % 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*YOu hAve beEN tasKed To wRIte a FuNCtiON ThAT recEivES\n  a hexadEcimal NUmbEr as a string ANd couNts the NumbeR of HexadecimAl\n  dIgitS that ARE primes (prime NumBER=== oR A pRIMe=== IS a nAtUraL NumBer\n  GREaTer tHan 1 tHat iS nOT a pRoDuct OF tWo smAller nATurAL nUmBerS).\n  hExaDEcimAl digItS ArE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  PrimE nUMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So YOU have To dEtERmINe a NUMbEr of tHE fOlLOwIng DIgitS: 2=== 3=== 5=== 7===\n  b (=decimAl 11)=== d (=DECimal 13).\n  NoTE: You MAy asSUME tHE iNput Is aLwAys cORreCt Or EMpty strInG===\n  anD Symbols A===b===c===d===E===F aRe ALWays uPPercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hex = num.toString(16);\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n  return hex;\n};\n\nconst getPrime = (num) => {\n  let prime = 1;\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      prime = 0;\n      break;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst getPrimeNumbers = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(i);\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimal = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(i);\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(i) === 1) {\n      primeNumbers.push(hexKey(i));\n    }\n    i++;\n  }\n  return primeNumbers;\n};\n\nconst getPrimeNumbersDecimalHex = (num) => {\n  let primeNumbers = [];\n  let i = 2;\n  while (i <= num) {\n    if (getPrime(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*YOu wIll be GIven A nuMbeR in decimal Form AnD YouR TAsK Is to ConVErt it to\n  Binary FOrmAt. The functiON shouLd return a strIng, wiTh eAch characTer ReprEsentING a binaRy\n  nUMBeR. eaCH ChARacTeR in thE StrIng WILl Be '0' or '1'.\n\n  therE wilL bE An eXtRa coUPlE of cHaractERs 'dB' At ThE beGINniNG and At the EnD Of The stRIng.\n  ThE eXTRa chAractERS are tHerE tO HeLP wiTH ThE formAT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0'\n  }\n  return binary\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* for A giveN list Of inTegErs, return A tuple ConsIsTIng OF A sUM and A prODuct of aLl the iNTegErs in a list.\n  Empty suM ShoulD be equAl to 0 aNd eMpty produCt sHoulD be eqUAL to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return sum, product\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  (30, 720)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (45, 2880)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  (70, 5040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  (105, 60480)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  (135, 62720)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135])\n  (165, 68760)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165])\n  (195, 86400)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a stRinG s.\n  YoUR tasK iS To cHECk IF the StrINg is hapPy or noT.\n  a stRing is happy IF its lEngth iS at leAst 3 And every 3 cOnsEcutIve leTTErs are DisTINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let sum = 0\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < len) {\n    sum += s[i]\n    i++\n  }\n  while (j < len) {\n    if (sum % s[j] === 0) {\n      count++\n    }\n    j++\n  }\n  return count === 2\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*IT is The laST weeK of The SEmesTeR And THE tEAcheR haS To give tHe grades\n  to stUDenTs. The teacheR Has beEn makiNg her Own Algorithm For GradIng.\n  ThE ONly proBleM IS, sHE hAS LoST thE cOde SHe uSed FOR gRadiNg.\n  ShE has GiVEn yOu A list of Gpas For sOme stuDEntS AnD yOu hAVE to WRite\n  A funcTiON tHat caN OutpuT a list OF LettEr grades usiNG The foLloWiNG tABle:\n           gpa       |    LEtter GRaDe\n            4.0                a+\n          > 3.7                a\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                c+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeNumber = letterGrade.slice(1);\n    const letterGradeLetterNumber = letterGradeNumber.charAt(0);\n    const letterGradeLetterNumberNumber = letterGradeNumber.slice(1);\n\n    return letterGradeLetterNumberNumber + letterGradeLetterNumber + letterGradeLetter;\n  });\n\n  return letterGrade;\n};\n\nexport default numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0\n  let prime = true\n  while (i < string.length) {\n    if (string[i] === string[i + 1]) {\n      i++\n    } else {\n      prime = false\n      break\n    }\n  }\n  return prime\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let i = 0\n  let prime = true\n  while (i < string.length) {\n    if (string[i] === string[i + 1]) {\n      i++\n    } else {\n      prime = false\n      break\n    }\n  }\n  return prime\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  WRitE a funCTion ThaT taKEs a string aNd REtuRNS tRUe if The string\n  LEngth is A prime NUmbEr or false otHErwisE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  while (i < j) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst endsOneEnds = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds2 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst endsOneEnds2 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds3 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst endsOneEnds3 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds4 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst endsOneEnds4 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds5 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst endsOneEnds5 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds6 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst endsOneEnds6 = (n) => {\n  let result = 0\n  let i = 1\n  while (i <= n) {\n    result += Math.pow(10, i - 1)\n    i++\n  }\n  return result\n}\n\n/*\n  givEn a poSItivE inTegER n, return the CoUNt oF THe NUmbeRs oF n-digit\n  PositivE integERs tHat start or eND with 1.\n  */\nConst startsOneEnds7 = (n) => {\n  let result = 0\n  let i = 1\n  while (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digIts in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve2 = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve3 = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve4 = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve5 = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve6 = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve7 = (N) => {\n  const binary = (N).toString(2);\n  const sum = binary.reduce((a, b) => a + b, 0);\n  return `${sum}`;\n};\n\n/*\n  GIveN a posITive IntEgeR N, return The tOtAL suM OF iTS digITS in BInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve8 = (N) => {\n  const binary = (N).toString", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*GIveN a non-EMpty list Of iNteGErs lst. add tHe EVen ELEmENts tHat ARe at odd IndiceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add19 = (lst) => {\n  let sum = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt tAKes a StRIng AND rETurnS an ORdered vErsion OF it.\n  ordered versIOn of sTring, iS a strIng Where all wOrdS (sepArateD BY space)\n  Are REPlACeD BY a NEw wOrD whERe aLl tHE ChAracTers ArraNgED in\n  asCeNdinG OrDer bAsed on ASciI VaLuE.\n  NoTE: you SHoulD keep ThE OrDer of WOrds aNd BLAnk sPaces in THE sentEncE.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < chars.length) {\n    shuffled[k] = chars[i]\n    k++\n    i++\n  }\n  while (j < chars.length) {\n    shuffled[k] = chars[j]\n    k++\n    j++\n  }\n  return shuffled.join('')\n}\n\nconst shuffle = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle2 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle3 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle4 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle5 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle6 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle7 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle8 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle9 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle10 = (s) => {\n  const chars = s.split('')\n  let i = 0\n  let j = 0\n  while (i < chars.length) {\n    const r = Math.floor(Math.random() * (chars.length - i))\n    const t = chars[i]\n    chars[i] = chars[r + i]\n    chars[r + i] = t\n    i++\n  }\n  return chars.join('')\n}\n\nconst shuffle11 = (s) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2) ...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a 2 dImeNsiONal dAtA, As a NEStED lisTs,\n  wHIch is siMilar tO MatRix, however, uNLike mAtriceS,\n  each Row May contaiN a dIffeRent nUMBer of cOluMNS.\n  GIVeN lst, ANd INteGeR x, fiND inTegERS x in tHe list,\n  anD return list of tUpleS, [(x1, Y1), (X2, y2)...] sUcH thaT\n  EaCh tuple is A coordINatE - (RoW, cOluMNS), stARtinG with 0.\n  soRT cOordiNAtes iNiTIAlly By rowS in AScendIng OrDEr.\n  aLso, SORt CoordINaTeS Of The ROw by COlumns in DeSCENding orDER.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinates = (lst, x, y) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRow = (lst, x, y) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByColumn = (lst, x, y) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumn = (lst, x, y) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumnAndCoordinates = (lst, x, y, x2, y2) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, x2, y2, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumnAndCoordinatesByRow = (lst, x, y, x2, y2) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, x2, y2, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumnAndCoordinatesByColumn = (lst, x, y, x2, y2) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, x2, y2, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumnAndCoordinatesByRowAndColumn = (lst, x, y, x2, y2) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, x2, y2, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumnAndCoordinatesByRowAndColumnAndCoordinates = (lst, x, y, x2, y2) => {\n  let ret = []\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    for (let j = 0; j < row.length; j++) {\n      ret.push((x, y, x2, y2, row[j]))\n    }\n  }\n  return ret\n}\n\nconst getRowByCoordinatesByRowAndColumnAndCoordinatesByRowAndColumnAndCoordinatesByRow = (lst, x, y, x2, y2) => {\n  let ret = []\n  for (let i = 0; i < l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  givEn an array oF Non-nEgaTivE InteGeRS, return a cOPY oF The gIveN array After soRting,\n  yOU wiLl sort the giVEn array in ascEnding Order If tHe sum( firsT inDex vAlue, lAST index ValUE) Is ODd,\n  OR SoRT it in DeSceNDinG orDER iF the Sum( fIrst InDEx vAlUe, laST iNdex Value) iS EveN.\n\n  noTe:\n  * Don'T CHanGE the Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  let i = 0\n  let j = 0\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = alphabet.indexOf(c);\n    encrypted += alphabet[(index + (Math.floor(Math.random() * 26) + 1) % 26)];\n  }\n  return encrypted;\n};\n\n/*\n  CReaTe a fuNCtioN decrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = alphabet.indexOf(c);\n    decrypted += alphabet[(index - (Math.floor(Math.random() * 26) + 1) % 26)];\n  }\n  return decrypted;\n};\n\n/*\n  CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = alphabet.indexOf(c);\n    encrypted += alphabet[(index + (Math.floor(Math.random() * 26) + 1) % 26)];\n  }\n  return encrypted;\n};\n\n/*\n  CReaTe a fuNCtioN decrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = alphabet.indexOf(c);\n    decrypted += alphabet[(index - (Math.floor(Math.random() * 26) + 1) % 26)];\n  }\n  return decrypted;\n};\n\n/*\n  CReaTe a fuNCtioN encrypt thAt tAKes a StRIng AS An ARgumEnt ANd\n  returNs a strINg eNcrypted witH The alPhabet Being RotAted. \n  The alPhaBet sHould BE RotateD in a mANNeR SuCH ThAT thE lEttERs \n  sHifT DOwN by tWo muLtipLiED to TwO plaCEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = alphabet.indexOf(c);\n    encrypted += alphabet[(index + (Math.floor(Math.random() * 26) + 1) % 26)];\n  }\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* froM a givEN list of iNteGerS, GeneRaTE a list oF ROlLIng mAxiMUm elemeNt founD UntIl given momeNT\n  in the sEquencE.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON nextSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == NulL\n  */\nconSt nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON prevSmallest() thaT reTUrns the 2Nd smallest elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  prevSmallest([1, 2, 3, 4, 5]) == 5\n  prevSmallest([5, 1, 4, 3, 2]) == 5\n  prevSmallest([]) == null\n  prevSmallest([1, 1]) == NulL\n  */\nconSt prevSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON first() thaT reTUrns the first elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  first([1, 2, 3, 4, 5]) == 1\n  first([5, 1, 4, 3, 2]) == 1\n  first([]) == NulL\n  first([1, 1]) == 1\n  */\nconSt first = (lst) => {\n  if (lst.length === 0) return null\n  return lst[0]\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON last() thaT reTUrns the last elemENt oF the list.\n  Return nULl if tHere is No sucH elEment.\n  \n  last([1, 2, 3, 4, 5]) == 5\n  last([5, 1, 4, 3, 2]) == 5\n  last([]) == NulL\n  last([1, 1]) == 1\n  */\nconSt last = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 1]\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON indexOf(elemENt) thaT reTUrns the index of elemENt in the list.\n  Return -1 if tHere is no sucH elEment.\n  \n  indexOf(1) == 0\n  indexOf(2) == 1\n  indexOf(3) == 2\n  indexOf(4) == 3\n  indexOf(5) == 4\n  indexOf(6) == -1\n  */\nconSt indexOf = (elemENt) => {\n  let index = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === elemENt) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON indexOf(elemENt) thaT reTUrns the index of elemENt in the list.\n  Return -1 if tHere is no sucH elEment.\n  \n  indexOf(1) == 0\n  indexOf(2) == 1\n  indexOf(3) == 2\n  indexOf(4) == 3\n  indexOf(5) == 4\n  indexOf(6) == -1\n  */\nconSt indexOf = (elemENt) => {\n  let index = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === elemENt) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON indexOf(elemENt) thaT reTUrns the index of elemENt in the list.\n  Return -1 if tHere is no sucH elEment.\n  \n  indexOf(1) == 0\n  indexOf(2) == 1\n  indexOf(3) == 2\n  indexOf(4) == 3\n  indexOf(5) == 4\n  indexOf(6) == -1\n  */\nconSt indexOf = (elemENt) => {\n  let index = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === elemENt) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/*\n  you Are giVEn a list oF inTegERs.\n  WrItE A fuNCTiON indexOf(elemENt) thaT reTUrns the index of elemENt in the list.\n  Return -1 if tHere is no sucH elEment.\n  \n  indexOf(1) == 0\n  indexOf(2) == 1\n  indexOf(3) == 2\n  indexOf(4", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASk is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASK is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASK is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASK is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASK is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASK is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIVen a StrIng OF worDs, ANd yOUR tASK is To cOUnt the nUmber\n  oF BorEdoms. A boredOM is a sEntencE that StaRts with thE woRd \"I\".\n  SEntenCES are deLimITEd BY '.', '?' oR '!'.\n \n  fOr EXamPlE:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  const isBored = s.match(/^(?=.*\\.)(?=.*\\?|.*\\!)[^.]*$/)\n  return isBored? len : 0\n}\n\n/*\n  you'Ll be gIV", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* creAte a fUNctiOn tHat TAkes 3 NuMBerS.\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};\n\n/*\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};\n\n/*\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};\n\n/*\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};\n\n/*\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};\n\n/*\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};\n\n/*\n  rEtURns tRue IF one of tHe numbERs iS equal to the SUm of tHe otheR two, aNd aLl numbers Are InteGers.\n  RETUrns faLse in ANY oTHeR CAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y) {\n    return x === z;\n  }\n  if (x === z) {\n    return x === y;\n  }\n  if (y === z) {\n    return x === y;\n  }\n  return false;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    encoded += String.fromCharCode(index);\n  }\n  return encoded;\n};\n\n/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD DecODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> decode('TGST')\n  'test'\n  >>> decode('THKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    decoded += String.fromCharCode(index);\n  }\n  return decoded;\n};\n\n/*\n  wriTe a fuNCtioN thAt tAKes a message, AnD EncODEs in SUch a \n  Way THat it swAps casE Of aLl letters, rePLaces All vowEls in \n  thE message wiTh the lettEr tHat aPpearS 2 PLaces aHeaD OF tHAt \n  VOWeL in The EnGliSH alPhaBET. \n  ASsumE onlY letTeRS. \n  \n  ExAmPles:\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  >>> encode('This is a message')\n  'tHKS KS", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*YOu aRe givEN a list of IntEgeRS.\n  You NeED to FINd THe laRgeST prime vAlue anD return The Sum of its digITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 0;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (prime(lst[i])) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst test = (lst) => {\n  console.log(skjkasdkd(lst));\n};\n\ntest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]);\ntest([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([0,724,32,71,99,32,6,0,5,91,83,0,5,6]);\ntest([0,81,12,3,1,21]);\ntest([0,8,1,2,1,7]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a diCTionAry, return TruE If alL kEYs aRE StRIngs in LowER \n  case or All keyS Are Strings in uppeR Case, eLse return falSe.\n  The FunCtion shouLd return fAlse Is the GIVen dicTioNARy IS eMPTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let len = keys.length\n  let i = 0\n  let key = keys[i]\n  let value = dict[key]\n  let isString = typeof value === \"string\"\n  let isNumber = typeof value === \"number\"\n  let isBoolean = typeof value === \"boolean\"\n  let isObject = typeof value === \"object\"\n  let isArray = Array.isArray(value)\n  let isFunction = typeof value === \"function\"\n  let isEmpty = value === \"\"\n  let isEmptyArray = Array.isArray(value) && value.length === 0\n  let isEmptyObject = Object.keys(value).length === 0\n  let isEmptyFunction = typeof value === \"function\" && value.toString().indexOf(\"function\") === -1\n  let isEmptyObject = Object.keys(value).length === 0\n  let isEmptyArray = Array.isArray(value) && value.length === 0\n  let isEmpty = isEmptyArray || isEmptyObject || isEmptyFunction || isEmptyArray || isEmptyObject || isEmptyFunction || isEmptyObject || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray || isEmptyArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  IMplEment A FuncTioN thAT takEs AN noN-NEgATive IntEGer and rEturns AN arRay of the firST n\n  inteGers thAt are PriMe numbers And Less Than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo3 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo4 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo5 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo6 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo7 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo8 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo9 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo10 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo11 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo12 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo13 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo14 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo15 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo16 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo17 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo18 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo19 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo20 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo21 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo22 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUpTo23 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst countUp", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*COmpLete tHE funCtiOn tHAt taKeS Two INTeGErs aNd rETurns \n  thE produCT of Their unit diGIts.\n  AsSume thE inpuT is Always valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  const result_unit = result.toString().split('.').pop();\n  return result + '.' + result_unit;\n};\n\nconst multiply_unit = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_2 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_3 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_4 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_5 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_6 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_7 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_8 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_9 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\nconst multiply_unit_10 = (a, b) => {\n  const a_unit = a.toString().split('.').pop();\n  const b_unit = b.toString().split('.').pop();\n  const a_int = parseInt(a.toString().split('.').pop());\n  const b_int = parseInt(b.toString().split('.').pop());\n  const result = a_int * b_int;\n  return result + '.' + a_unit +'' + b_unit;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Odd indIces.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      if (i % 2 === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Odd indIces.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      if (i % 2 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      if (i % 2 === 0) {\n        count++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Odd indIces.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      if (i % 2 === 1) {\n        count++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countEvenOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      if (i % 2 === 0) {\n        count++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Odd indIces.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      if (i % 2 === 1) {\n        count++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  givEn a stRIng s, cOunT thE NumbEr OF upPERcASe voWelS in Even indIces.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countEvenOddOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      if (i % 2 === 0) {\n        count++;\n      } else {\n        ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* creAte a fUNctiOn tHat TAkes A value (sTRinG) REpREsenTinG A number\n  And retURns The closest iNTeger To it. If The nuMbeR is equidiStaNt\n  frOm two INTegers, RouND It AWaY FRoM ZerO.\n  EXamPLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const numberAbs = Math.abs(number);\n  const numberAbsFloor = Math.floor(numberAbs);\n  const numberAbsCeil = Math.ceil(numberAbs);\n  const numberAbsDiff = numberAbsCeil - numberAbsFloor;\n  const numberAbsDiffAbs = Math.abs(numberAbsDiff);\n  const numberAbsDiffFloor = Math.floor(numberAbsDiff);\n  const numberAbsDiffCeil = Math.ceil(numberAbsDiff);\n  const numberAbsDiffDiff = numberAbsDiffCeil - numberAbsDiffFloor;\n  const numberAbsDiffDiffAbs = Math.abs(numberAbsDiffDiff);\n  const numberAbsDiffDiffFloor = Math.floor(numberAbsDiffDiff);\n  const numberAbsDiffDiffCeil = Math.ceil(numberAbsDiffDiff);\n  const numberAbsDiffDiffDiff = numberAbsDiffDiffCeil - numberAbsDiffDiffFloor;\n  const numberAbsDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiff);\n  const numberAbsDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiff);\n  const numberAbsDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiff = numberAbsDiffDiffDiffCeil - numberAbsDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffCeil - numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffFloor;\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffAbs = Math.abs(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffFloor = Math.floor(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffCeil = Math.ceil(numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff);\n  const numberAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = numberAbsDiffDiffDiffDiffDiff", "passed": 0, "run_status": 2}
