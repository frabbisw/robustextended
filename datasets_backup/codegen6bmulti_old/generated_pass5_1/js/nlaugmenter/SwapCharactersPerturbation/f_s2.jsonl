{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  if (len < 2) {\n    return false;\n  }\n\n  const sorted = numbers.sort((a, b) => a - b);\n  const diff = sorted[1] - sorted[0];\n  return diff < threshold || diff > (1 - threshold);\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(');\n  const paren_list_length = paren_list.length;\n  const paren_list_length_minus_one = paren_list_length - 1;\n  const paren_list_length_minus_two = paren_list_length - 2;\n  const paren_list_length_minus_three = paren_list_length - 3;\n  const paren_list_length_minus_four = paren_list_length - 4;\n  const paren_list_length_minus_five = paren_list_length - 5;\n  const paren_list_length_minus_six = paren_list_length - 6;\n  const paren_list_length_minus_seven = paren_list_length - 7;\n  const paren_list_length_minus_eight = paren_list_length - 8;\n  const paren_list_length_minus_nine = paren_list_length - 9;\n  const paren_list_length_minus_ten = paren_list_length - 10;\n  const paren_list_length_minus_eleven = paren_list_length - 11;\n  const paren_list_length_minus_twelve = paren_list_length - 12;\n  const paren_list_length_minus_thirteen = paren_list_length - 13;\n  const paren_list_length_minus_fourteen = paren_list_length - 14;\n  const paren_list_length_minus_fifteen = paren_list_length - 15;\n  const paren_list_length_minus_sixteen = paren_list_length - 16;\n  const paren_list_length_minus_seventeen = paren_list_length - 17;\n  const paren_list_length_minus_eighteen = paren_list_length - 18;\n  const paren_list_length_minus_nineteen = paren_list_length - 19;\n  const paren_list_length_minus_twenty = paren_list_length - 20;\n  const paren_list_length_minus_twenty_one = paren_list_length - 21;\n  const paren_list_length_minus_twenty_two = paren_list_length - 22;\n  const paren_list_length_minus_twenty_three = paren_list_length - 23;\n  const paren_list_length_minus_twenty_four = paren_list_length - 24;\n  const paren_list_length_minus_twenty_five = paren_list_length - 25;\n  const paren_list_length_minus_twenty_six = paren_list_length - 26;\n  const paren_list_length_minus_twenty_seven = paren_list_length - 27;\n  const paren_list_length_minus_twenty_eight = paren_list_length - 28;\n  const paren_list_length_minus_twenty_nine = paren_list_length - 29;\n  const paren_list_length_minus_thirty = paren_list_length - 30;\n  const paren_list_length_minus_thirty_one = paren_list_length - 31;\n  const paren_list_length_minus_thirty_two = paren_list_length - 32;\n  const paren_list_length_minus_thirty_three = paren_list_length - 33;\n  const paren_list_length_minus_thirty_four = paren_list_length - 34;\n  const paren_list_length_minus_thirty_five = paren_list_length - 35;\n  const paren_list_length_minus_thirty_six = paren_list_length - 36;\n  const paren_list_length_minus_thirty_seven = paren_list_length - 37;\n  const paren_list_length_minus_thirty_eight = paren_list_length - 38;\n  const paren_list_length_minus_thirty_nine = paren_list_length - 39;\n  const paren_list_length_minus_thirty_ten = paren_list_length - 40;\n  const paren_list_length_minus_thirty_eleven = paren_list_length - 41;\n  const paren_list_length_minus_thirty_twelve = paren_list_length - 42;\n  const paren_list_length_minus_thirty_thirteen = paren_list_length - 43;\n  const paren_list_length_minus_thirty_fourteen = paren_list_length - 44;\n  const paren_list_length_minus_thirty_fifteen = paren_list_length - 45;\n  const paren_list_length_minus_thirty_sixteen = paren_list_length - 46;\n  const paren_list_length_minus_thirty_seventeen = paren_list_length - 47;\n  const paren_list_length_minus_thirty_eighteen = paren_list_length - 48;\n  const paren_list_length_minus_thirty_nineteen = paren_list_length - 49;\n  const paren_list_length_minus_thirty_twenty = paren_list_length - 50;\n  const paren_list_length_minus_thirty_twenty_one = paren_list_length - 51;\n  const paren_list_length_minus_thirty_twenty_two = paren_list_length - 52;\n  const paren_list_length_minus_thirty_twenty_three = paren_list_length - 53;\n  const paren_list_length_minus_thirty_twenty_four = paren_list_length - 54;\n  const paren", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome.length);\n  const postfix = string.slice(longestPalindrome.length);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = prefix + reversed;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome.length);\n  const postfix = string.slice(longestPalindrome.length);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = prefix + reversed;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome.length);\n  const postfix = string.slice(longestPalindrome.length);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = prefix + reversed;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome.length);\n  const postfix = string.slice(longestPalindrome.length);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = prefix + reversed;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome.length);\n  const postfix = string.slice(longestPalindrome.length);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = prefix + reversed;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const prefix = string.slice(0, longestPalindrome.length);\n  const postfix = string.slice(longestPalindrome.length);\n  const reversed = postfix.split('').reverse().join('');\n  const palindrome = prefix + reversed;\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst longestPalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n  }\n  return stones\n}\n\nconst makeAPile2 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n  }\n  return stones\n}\n\nconst makeAPile3 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n    if (i % 3 === 0) {\n      stones.push(i)\n    }\n  }\n  return stones\n}\n\nconst makeAPile4 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n    if (i % 3 === 0) {\n      stones.push(i)\n    }\n    if (i % 5 === 0) {\n      stones.push(i)\n    }\n  }\n  return stones\n}\n\nconst makeAPile5 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n    if (i % 3 === 0) {\n      stones.push(i)\n    }\n    if (i % 5 === 0) {\n      stones.push(i)\n    }\n    if (i % 7 === 0) {\n      stones.push(i)\n    }\n  }\n  return stones\n}\n\nconst makeAPile6 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n    if (i % 3 === 0) {\n      stones.push(i)\n    }\n    if (i % 5 === 0) {\n      stones.push(i)\n    }\n    if (i % 7 === 0) {\n      stones.push(i)\n    }\n    if (i % 11 === 0) {\n      stones.push(i)\n    }\n  }\n  return stones\n}\n\nconst makeAPile7 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n    if (i % 3 === 0) {\n      stones.push(i)\n    }\n    if (i % 5 === 0) {\n      stones.push(i)\n    }\n    if (i % 7 === 0) {\n      stones.push(i)\n    }\n    if (i % 11 === 0) {\n      stones.push(i)\n    }\n    if (i % 13 === 0) {\n      stones.push(i)\n    }\n    if (i % 17 === 0) {\n      stones.push(i)\n    }\n  }\n  return stones\n}\n\nconst makeAPile8 = (n) => {\n  const stones = []\n  for (let i = 1; i <= n; i++) {\n    stones.push(i)\n    if (i % 2 === 0) {\n      stones.push(i)\n    }\n    if (i % 3 === 0) {\n      stones.push(i)\n    }\n    if (i % 5 === 0) {\n      stones.push(i)\n    }\n    if (i % 7 === 0) {\n      stones.push(i)\n    }\n    if (i % 11 === 0) {\n      stones.push(i)\n    }\n    if (i % 13 === 0) {\n      stones.push(i)\n    }\n    if (i % 17 === 0) {\n      stones.push(i)\n    }\n    if (i % 19 === 0) {\n      stones.push(i)\n    }\n    if (i % 23 === 0) {\n      stones.push(i)\n    }\n    if (i % 29 === 0) {\n      stones.push(i)\n    }\n    if (i % 31 === 0) {\n      stones.push(i)\n    }\n    if (i % 37 === 0) {\n      stones.push(i)\n    }\n    if (i % 41 === 0) {\n      stones.push(i)\n    }\n    if (i % 43 === 0) {\n      stones.push(i)\n    }\n    if (i % 47 === 0) {\n      stones.push(i)\n    }\n    if (i % 53 === 0) {\n      stones.push(i)\n    }\n    if (i % 59 === 0) {\n      stones.push(i)\n    }\n    if (i % 61 === 0) {\n      stones.push(i)\n    }\n    if (i % 67 === 0) {\n      stones.push(i)\n    }\n    if (i % 71 === 0) {\n      stones.push(i)\n    }\n    if (i % 73 === 0) {\n      stones.push(i)\n    }\n    if (i % 79 === 0) {\n      stones.push(i)\n    }\n    if (i % 83 === 0) {\n      stones.push(i)\n    }\n    if (i % 89 === 0) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < 0) {\n    return -1;\n  }\n  if (right > y) {\n    return -1;\n  }\n  return (left + right) / 2;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let sorted = x.sort();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let digit = sorted[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength12 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength13 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const result = reversed.map(x => names[x]);\n  return result;\n};\n\nconst byLength14 = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(Math.pow(i, i));\n    } else {\n      result.push(Math.pow(i, i - 1) * i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let result = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    let isEven = (i % 2 === 0);\n    if (isEven) {\n      result[0] += 1;\n    } else {\n      result[1] += 1;\n    }\n  }\n  return result;\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 1, 2, 3]));\nconsole.log(countNums([-1, 1, 2, 3, 4]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x === arr[i]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input rae two strings a and b consisting only of 1s and 0s.\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  const lst = [];\n  for (let i = 0; i < lst1.length; i++) {\n    lst.push(lst1[i]);\n    lst.push(lst2[i]);\n  }\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2!== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n};\n\nexpect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toBe(\"YES\");\nexpect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toBe(\"NO\");\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  \n  Example:\n  count('a b c') == 3\n  count('a b c a b') == 2\n  count('a b c a b a') == 1\n  count('a b c a b a b') == 0\n  count('') == 0\n  \n  */\nconst count = (test) => {\n  const count = {}\n  const letters = test.split('')\n  for (let i = 0; i < letters.length; i++) {\n    if (count[letters[i]] === undefined) {\n      count[letters[i]] = 1\n    } else {\n      count[letters[i]]++\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const cton = s.split('').reverse().join('');\n  const ctonReverse = c.split('').reverse().join('');\n  if (cton === ctonReverse) {\n    return [cton, true];\n  }\n  return [cton, false];\n};\n\nconst reverseDeleteTest = [\n  [\"abcde\", \"ae\"],\n  [\"abcdef\", \"b\"],\n  [\"abcdedcba\", \"ab\"],\n];\n\nmodule.exports = reverseDelete;\nmodule.exports.reverseDeleteTest = reverseDeleteTest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const out = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const len = str.length;\n    let count = 0;\n    for (let j = 0; j < len; j++) {\n      if (str[j] % 2 === 1) {\n        count++;\n      }\n    }\n    out.push(`the number of odd elements ${count} of the ${i}th string of the ${lst.length} input.`);\n  }\n  return out;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum > 0 && sum < minSum) {\n      minSum = sum;\n      minSumIndex = i;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0];\n  const [row_len, col_len] = row.length;\n  const [row_cap, col_cap] = capacity;\n  const [row_fill, col_fill] = 0;\n  const [row_used, col_used] = 0;\n  const [row_used_cap, col_used_cap] = 0;\n  const [row_used_fill, col_used_fill] = 0;\n  const [row_used_used, col_used_used] = 0;\n  const [row_used_used_cap, col_used_used_cap] = 0;\n  const [row_used_used_fill, col_used_used_fill] = 0;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        row_fill++;\n        col_fill++;\n        row_used++;\n        col_used++;\n        row_used_cap++;\n        col_used_cap++;\n        row_used_fill++;\n        col_used_fill++;\n        row_used_used++;\n        col_used_used++;\n        row_used_used_cap++;\n        col_used_used_cap++;\n        row_used_used_fill++;\n        col_used_used_fill++;\n      }\n    }\n  }\n\n  const [row_used_used_fill_cap, col_used_used_fill_cap] = row_used_used_fill;\n  const [row_used_used_fill_cap_cap, col_used_used_fill_cap_cap] = row_used_used_fill_cap;\n\n  const [row_used_used_fill_fill, col_used_used_fill_fill] = row_used_used_fill;\n  const [row_used_used_fill_fill_cap, col_used_used_fill_fill_cap] = row_used_used_fill_fill;\n\n  const [row_used_used_fill_fill_fill, col_used_used_fill_fill_fill] = row_used_used_fill_fill;\n  const [row_used_used_fill_fill_fill_cap, col_used_used_fill_fill_fill_cap] = row_used_used_fill_fill_fill;\n\n  const [row_used_used_fill_fill_fill_fill, col_used_used_fill_fill_fill_fill] = row_used_used_fill_fill_fill;\n  const [row_used_used_fill_fill_fill_fill_cap, col_used_used_fill_fill_fill_fill_cap] = row_used_used_fill_fill_fill_fill;\n\n  const [row_used_used_fill_fill_fill_fill_fill, col_used_used_fill_fill_fill_fill_fill] = row_used_used_fill_fill_fill_fill;\n  const [row_used_used_fill_fill_fill_fill_fill_cap, col_used_used_fill_fill_fill_fill_fill_cap] = row_used_used_fill_fill_fill_fill_fill;\n\n  const [row_used_used_fill_fill_fill_fill_fill_fill, col_used_used_fill_fill_fill_fill_fill_fill] = row_used_used_fill_fill_fill_fill_fill;\n  const [row_used_used_fill_fill_fill_fill_fill_fill_cap, col_used_used_fill_fill_fill_fill_fill_fill_cap] = row_used_used_fill_fill_fill_fill_fill_fill;\n\n  const [row_used_used_fill_fill_fill_fill_fill_fill_fill, col_used_used_fill_fill_fill_fill_fill_fill_fill] = row_used_used_fill_fill_fill_fill_fill_fill;\n  const [row_used_used_fill_fill_fill_fill_fill_fill_fill_cap, col_used_used_fill_fill_fill_fill_fill_fill_fill_cap] = row_used_used_fill_fill_fill_fill_fill_fill_fill;\n\n  const [row_used_used_fill_fill_fill_fill_fill_fill_fill_fill, col_used_used_fill_fill_fill_fill_fill_fill_fill_fill] = row_used_used_fill_fill_fill_fill_fill_fill_fill;\n  const [row_used_used_fill_fill_fill_fill_fill_fill_fill_fill_cap, col_used_used_fill_fill_fill_fill_fill_fill_fill_fill_cap] = row_used_used_fill_fill_fill_fill_fill_fill_fill_fill;\n\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords2 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords3 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords4 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords5 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords6 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords7 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords8 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords9 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords10 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords11 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords12 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords13 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords14 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst selectWords15 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestVowelIndex = 0;\n  const closestVowelDistance = 0;\n  const closestVowelDistanceIndex = 0;\n  const closestVowelDistanceIndex2 = 0;\n  const closestVowelDistance2 = 0;\n  const closestVowelDistance2Index = 0;\n  const closestVowelDistance2Index2 = 0;\n  const closestVowelDistance3 = 0;\n  const closestVowelDistance3Index = 0;\n  const closestVowelDistance3Index2 = 0;\n  const closestVowelDistance3Index3 = 0;\n  const closestVowelDistance4 = 0;\n  const closestVowelDistance4Index = 0;\n  const closestVowelDistance4Index2 = 0;\n  const closestVowelDistance4Index3 = 0;\n  const closestVowelDistance4Index4 = 0;\n  const closestVowelDistance5 = 0;\n  const closestVowelDistance5Index = 0;\n  const closestVowelDistance5Index2 = 0;\n  const closestVowelDistance5Index3 = 0;\n  const closestVowelDistance5Index4 = 0;\n  const closestVowelDistance5Index5 = 0;\n  const closestVowelDistance6 = 0;\n  const closestVowelDistance6Index = 0;\n  const closestVowelDistance6Index2 = 0;\n  const closestVowelDistance6Index3 = 0;\n  const closestVowelDistance6Index4 = 0;\n  const closestVowelDistance6Index5 = 0;\n  const closestVowelDistance6Index6 = 0;\n  const closestVowelDistance7 = 0;\n  const closestVowelDistance7Index = 0;\n  const closestVowelDistance7Index2 = 0;\n  const closestVowelDistance7Index3 = 0;\n  const closestVowelDistance7Index4 = 0;\n  const closestVowelDistance7Index5 = 0;\n  const closestVowelDistance7Index6 = 0;\n  const closestVowelDistance7Index7 = 0;\n  const closestVowelDistance8 = 0;\n  const closestVowelDistance8Index = 0;\n  const closestVowelDistance8Index2 = 0;\n  const closestVowelDistance8Index3 = 0;\n  const closestVowelDistance8Index4 = 0;\n  const closestVowelDistance8Index5 = 0;\n  const closestVowelDistance8Index6 = 0;\n  const closestVowelDistance8Index7 = 0;\n  const closestVowelDistance8Index8 = 0;\n  const closestVowelDistance9 = 0;\n  const closestVowelDistance9Index = 0;\n  const closestVowelDistance9Index2 = 0;\n  const closestVowelDistance9Index3 = 0;\n  const closestVowelDistance9Index4 = 0;\n  const closestVowelDistance9Index5 = 0;\n  const closestVowelDistance9Index6 = 0;\n  const closestVowelDistance9Index7 = 0;\n  const closestVowelDistance9Index8 = 0;\n  const closestVowelDistance9Index9 = 0;\n  const closestVowelDistance10 = 0;\n  const closestVowelDistance10Index = 0;\n  const closestVowelDistance10Index2 = 0;\n  const closestVowelDistance10Index3 = 0;\n  const closestVowelDistance10Index4 = 0;\n  const closestVowelDistance10Index5 = 0;\n  const closestVowelDistance10Index6 = 0;\n  const closestVowelDistance10Index7 = 0;\n  const closestVowelDistance10Index8 = 0;\n  const closestVowelDistance10Index9 = 0;\n  const closestVowelDistance10Index10 = 0;\n  const closestVowelDistance11 = 0;\n  const closestVowelDistance11Index = 0;\n  const closestVowelDistance11Index2 = 0;\n  const closestVowelDistance11Index3 = 0;\n  const closestVowelDistance11Index4 = 0;\n  const closestVowelDistance11Index5 = 0;\n  const closestVowelDistance11Index6 = 0;\n  const closestVowelDistance11Index7 = 0;\n  const closestVowelDistance11Index8 = 0;\n  const closestVowelDistance11Index9 = 0;\n  const closestVowelDistance11Index10 = 0;\n  const closestVowelDistance11Index11 = 0;\n  const closestVowelDistance12 = 0;\n  const closestVowelDistance12Index = 0;\n  const closestVowelDistance12Index2 = 0;\n  const closestVowelDistance12Index3 = 0;\n  const closestVowelDistance12Index4 = 0;\n  const closestVowelDistance12Index5 = 0;\n  const closestVowelDistance12Index6 = 0;\n  const closestVowelDistance12Index7 = 0;\n  const closestVowelDistance12Index8 = 0;\n  const closestVowelDistance12Index9 = 0;\n  const closestVowelDistance12Index10 = 0;\n  const closestVowelDistance12Index11 = 0;\n  const closestVowelDistance12Index12 = 0;\n  const closestV", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  strings.forEach((s) => {\n    if (s.length > longest.length) {\n      longest = s\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0];\n  const maxIndex = 0;\n  const maxCount = 1;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n      maxCount = 1;\n    } else if (arr[i] === max) {\n      maxCount++;\n    }\n  }\n  return [...new Array(maxCount), max, maxIndex];\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz11 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz12 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLengthMin = 1;\n  const dateArrayLengthMax = 31;\n  const dateArrayLengthMonth = [1, 3, 5, 7, 8, 10, 12];\n  const dateArrayLengthDay = [1, 3, 5, 7, 8, 10, 12];\n  const dateArrayLengthMaxDay = 30;\n  const dateArrayLengthMonthMax = 12;\n  const dateArrayLengthMonthMin = 1;\n  const dateArrayLengthYear = [2000, 2004, 2008, 2012, 2016];\n  const dateArrayLengthYearMax = 2040;\n  const dateArrayLengthYearMin = 2000;\n  const dateArrayLength = dateArrayLengthMin;\n  const dateArrayLengthMonth = dateArrayLengthMonthMin;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYearMin;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  const dateArrayLength = dateArrayLength;\n  const dateArrayLengthMonth = dateArrayLengthMonth;\n  const dateArrayLengthDay = dateArrayLengthDay;\n  const dateArrayLengthYear = dateArrayLengthYear;\n  const dateArrayLengthMonthMax = dateArrayLengthMonthMax;\n  const dateArrayLengthDayMax = dateArrayLengthDayMax;\n  const dateArrayLengthYearMax = dateArrayLengthYearMax;\n  const dateArrayLengthYearMin = dateArrayLengthYearMin;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.replace(/\\W/g, '');\n  });\n};\n\nconst splitWords22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted3 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted4 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted5 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted6 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted7 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted8 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted9 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted10 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted11 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted12 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted13 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isSorted14 = (lst) => {\n  let i = 0\n  let j = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.min(start1, start2);\n  const end = Math.max(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      if (n === 1) {\n        return false;\n      }\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.min(start1, start2);\n  const end = Math.max(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      if (n === 1) {\n        return false;\n      }\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.min(start1, start2);\n  const end = Math.max(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      if (n === 1) {\n        return false;\n      }\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.min(start1, start2);\n  const end = Math.max(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      if (n === 1) {\n        return false;\n      }\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.min(start1, start2);\n  const end = Math.max(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      if (n === 1) {\n        return false;\n      }\n      for (let i = 2; i <= Math.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (num) => {\n    if (num === 0) return 0\n    if (num > 0) return 1\n    if (num < 0) return -1\n  }\n  const prod = (num1, num2) => {\n    if (num1 === 0) return num2\n    if (num2 === 0) return num1\n    if (num1 > 0 && num2 > 0) return num1 * num2\n    if (num1 < 0 && num2 < 0) return -num1 * num2\n    if (num1 < 0 && num2 > 0) return -num1 * num2\n    if (num1 > 0 && num2 < 0) return num1 * num2\n  }\n  const sum = (num1, num2) => {\n    return num1 + num2\n  }\n  const sumSigns = (arr) => {\n    return arr.reduce((sum, num) => {\n      return sum + sign(num)\n    }, 0)\n  }\n  const prodSigns = (arr) => {\n    return arr.reduce((prod, num) => {\n      return prod + sign(num) * prod(num, sign(num))\n    }, 0)\n  }\n  return arr.length === 0? null : sumSigns(arr) * prodSigns(arr)\n}\n\nmodule.exports = prodSigns\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m).fill(0);\n  const visited = new Array(n * m).fill(false);\n  const dp_index = new Array(n * m).fill(0);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      dp[i * m + j] = 1;\n      dp_index[i * m + j] = 1;\n      visited[i * m + j] = true;\n      const neighbors = getNeighbors(i, j);\n      for (let k = 0; k < neighbors.length; k++) {\n        const neighbor = neighbors[k];\n        if (neighbor === null) {\n          continue;\n        }\n        if (visited[neighbor.x * m + neighbor.y]) {\n          continue;\n        }\n        dp[neighbor.x * m + neighbor.y] = dp[i * m + j] + 1;\n        dp_index[neighbor.x * m + neighbor.y] = dp_index[i * m + j] + 1;\n        visited[neighbor.x * m + neighbor.y] = true;\n      }\n    }\n  }\n\n  const path = [];\n  let current = 0;\n  let current_index = 0;\n  while (current_index < k) {\n    const index = dp_index[current_index];\n    if (index === 0) {\n      break;\n    }\n    path.push(grid[current][dp[current_index]]);\n    current_index++;\n    current++;\n  }\n\n  return path;\n};\n\nconst getNeighbors = (x, y) => {\n  const neighbors = [];\n  if (x === 0) {\n    neighbors.push(null);\n  } else {\n    neighbors.push({ x: x - 1, y: y });\n  }\n  if (y === 0) {\n    neighbors.push(null);\n  } else {\n    neighbors.push({ x: x, y: y - 1 });\n  }\n  if (x === grid.length - 1) {\n    neighbors.push(null);\n  } else {\n    neighbors.push({ x: x + 1, y: y });\n  }\n  if (y === grid[0].length - 1) {\n    neighbors.push(null);\n  } else {\n    neighbors.push({ x: x, y: y + 1 });\n  }\n  return neighbors;\n};\n\nconst test = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n  const k = 3;\n  const path = minPath(grid, k);\n  console.log(path);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  const d = Math.floor(Math.sqrt(a * b));\n  return a > b? a : b;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nexport default tri;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result *= n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === '[') {\n      stack.push(i)\n      i++\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === i - 1) {\n        stack.pop()\n        i++\n      } else {\n        return false\n      }\n    } else {\n      i++\n    }\n  }\n  if (stack.length === 0) {\n    return true\n  }\n  return false\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst testSumSquares = () => {\n  const lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let max = -1;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given a sorted array, return the index of the first element which is not\n  greater than or equal to the element immediately preceding it. If no such\n  element exists, return -1.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange3 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange4 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange5 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange6 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange7 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange8 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange9 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) / 2;\n    if (arr[k] >= arr[k + 1]) {\n      j = k;\n    } else {\n      i = k + 1;\n    }\n  }\n  if (arr[j] >= arr[i]) {\n    return j;\n  } else {\n    return -1;\n  }\n};\n\nconst canArrange10 = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    k = (i + j) /", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const lst = lst.slice();\n  const max = lst.reduce((a, b) => Math.max(a, b), 0);\n  const min = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (min === 0) {\n    return (null, null);\n  }\n  const neg = lst.filter((n) => n < 0);\n  if (neg.length === 0) {\n    return (null, max);\n  }\n  const pos = lst.filter((n) => n > 0);\n  if (pos.length === 0) {\n    return (min, null);\n  }\n  return (min, max);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare = (a, b) => {\n  if (a === null) {\n    return b === null? null : -1;\n  } else if (b === null) {\n    return 1;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else {\n    return null;\n  }\n};\n\nconst compare2 = (a, b) => {\n  if (a === null) {\n    return b === null? null : -1;\n  } else if (b === null) {\n    return 1;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else {\n    return null;\n  }\n};\n\nconst compare3 = (a, b) => {\n  if (a === null) {\n    return b === null? null : -1;\n  } else if (b === null) {\n    return 1;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else {\n    return null;\n  }\n};\n\nconst compare4 = (a, b) => {\n  if (a === null) {\n    return b === null? null : -1;\n  } else if (b === null) {\n    return 1;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else {\n    return null;\n  }\n};\n\nconst compare5 = (a, b) => {\n  if (a === null) {\n    return b === null? null : -1;\n  } else if (b === null) {\n    return 1;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1;\n  } else {\n    return null;\n  }\n};\n\nconst compare6 = (a, b) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd nmubers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even and odd nmubers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 || sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even and odd nmubers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd2 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven2 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven3 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even and odd nmubers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd3 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even and odd nmubers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd4 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven4 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven5 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven6 = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd and even nmubers\n  Example\n  is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": false, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo longest to shortest of the inupt string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse2 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse3 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse4 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse5 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse6 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse7 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse8 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesReverse9 = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i]\n    while (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n      prefix = prefix + string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', '", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const text = text.replace(/\\s+/g, '_');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g, '-');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces = (text) => {\n  const text = text.replace(/-/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/-/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces2 = (text) => {\n  const text = text.replace(/\\s+/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces3 = (text) => {\n  const text = text.replace(/\\s+/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces4 = (text) => {\n  const text = text.replace(/\\s+/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces5 = (text) => {\n  const text = text.replace(/\\s+/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces6 = (text) => {\n  const text = text.replace(/\\s+/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces7 = (text) => {\n  const text = text.replace(/\\s+/g,'');\n  if (text.length > 2) {\n    const text = text.replace(/\\s+/g,'');\n  }\n  return text;\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecuivte underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  if (file_name.match(/[0-9]/)) {\n    return 'No';\n  }\n  if (file_name.match(/\\./)) {\n    return 'No';\n  }\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\n/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileName", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] *", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    while (true) {\n      let newLength = Math.pow(word.length, 2)\n      if (newLength > word.length) {\n        newWord = word +''\n        break\n      } else {\n        newWord = word\n        break\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = x.split('/')[0];\n  const x_den = x.split('/')[1];\n  const n_num = n.split('/')[0];\n  const n_den = n.split('/')[1];\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their first character.\n  Noet: if there are several items with similar length of their first character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their last character.\n  Noet: if there are several items with similar length of their last character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their last character.\n  Noet: if there are several items with similar length of their last character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their last character.\n  Noet: if there are several items with similar length of their last character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their last character.\n  Noet: if there are several items with similar length of their last character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their last character.\n  Noet: if there are several items with similar length of their last character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths([]) == []\n  */\nconst orderByLengths6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function hwihc sotrs the given list of strings\n  in ascedning order according to the length of their last character.\n  Noet: if there are several items with similar length of their last character,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByLengths([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByLengths", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(num => num > 10)\n  const odd = arr.filter(num => num % 2 === 1)\n  const even = arr.filter(num => num % 2 === 0)\n  return odd.length + even.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples2 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples3 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples4 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples5 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples6 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples7 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples8 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples9 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase();\n  const planet2Name = planet2.toUpperCase();\n  const planet1Orbit = getOrbit(planet1Name);\n  const planet2Orbit = getOrbit(planet2Name);\n  const planet1OrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet2Name);\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet1Name, \"Sun\");\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitDistance = getDistance(planet2Name, \"Sun\");\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = getOrbit(planet1Name);\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_desc = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_desc_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_reverse_desc = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_desc_reverse_desc = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    const prev = sorted[i - 1]\n    if (cur.length!== prev.length) {\n      sorted.push(cur)\n    } else {\n      const j = i\n      while (j < len - 1 && lst[j + 1].length === cur.length) {\n        j++\n      }\n      sorted.splice(i, j - i + 1, cur)\n    }\n  }\n  return sorted\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start) => {\n  let result = '';\n  for (let i = start; i < n; i++) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end) => {\n  let result = '';\n  for (let i = start; i < end; i++) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step) => {\n  let result = '';\n  for (let i = start; i < end; i += step) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step, start2) => {\n  let result = '';\n  for (let i = start; i < end; i += step) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step, start2, end2) => {\n  let result = '';\n  for (let i = start; i < end; i += step) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step, start2, end2, step2) => {\n  let result = '';\n  for (let i = start; i < end; i += step) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step, start2, end2, step2, start3) => {\n  let result = '';\n  for (let i = start; i < end; i += step) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step, start2, end2, step2, start3, end3) => {\n  let result = '';\n  for (let i = start; i < end; i += step) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0,'')\n  '0'\n  >>> stringSequence(5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator, start, end, step, start2, end2, step2, start3, end3, step3) => {\n  let result = '';\n  for (let i = start; i < end; i += step", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nconst doubleTheDifference", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare12 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare13 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare14 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = game[i] - guess[i]\n    diffs.push(diff)\n  }\n  return diffs\n}\n\nconst compare15 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diffs = []\n  for (let i = 0; i < gameLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const strength_of_ext = strength[cap] || 0;\n    strength[cap] = strength_of_ext + (cap.length - ext.length);\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  const a_substr = a.substr(0, b_length);\n  const b_substr = b.substr(0, a_length);\n  if (a_substr === b_substr) {\n    return true;\n  }\n  const a_substr_rev = a.substr(a_length - b_length, b_length);\n  const b_substr_rev = b.substr(b_length - a_length, a_length);\n  if (a_substr_rev === b_substr_rev) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given the string \"code\", the longest palindromic substring is \"cod\".\n  Given the string \"abcd\", the longest palindromic substring is \"bcd\".\n  Given the string \"abcd\", the longest palindromic substring is \"abc\".\n  */\nconst longestPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  let max_len = 0;\n  let max_index = 0;\n  while (i < len) {\n    while (j < len && s[i] === s[j]) {\n      j++;\n    }\n    if (j - i > max_len) {\n      max_len = j - i;\n      max_index = i;\n    }\n    i++;\n    j = i;\n  }\n  return s.substr(max_index, max_len);\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given the string \"code\", the longest palindromic substring is \"cod\".\n  Given the string \"abcd\", the longest palindromic substring is \"bcd\".\n  Given the string \"abcd\", the longest palindromic substring is \"abc\".\n  */\nconst longestPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  let max_len = 0;\n  let max_index = 0;\n  while (i < len) {\n    while (j < len && s[i] === s[j]) {\n      j++;\n    }\n    if (j - i > max_len) {\n      max_len = j - i;\n      max_index = i;\n    }\n    i++;\n    j = i;\n  }\n  return s.substr(max_index, max_len);\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given the string \"code\", the longest palindromic substring is \"cod\".\n  Given the string \"abcd\", the longest palindromic substring is \"bcd\".\n  Given the string \"abcd\", the longest palindromic substring is \"abc\".\n  */\nconst longestPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  let max_len = 0;\n  let max_index = 0;\n  while (i < len) {\n    while (j < len && s[i] === s[j]) {\n      j++;\n    }\n    if (j - i > max_len) {\n      max_len = j - i;\n      max_index = i;\n    }\n    i++;\n    j = i;\n  }\n  return s.substr(max_index, max_len);\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given the string \"code\", the longest palindromic substring is \"cod\".\n  Given the string \"abcd\", the longest palindromic substring is \"bcd\".\n  Given the string \"abcd\", the longest palindromic substring is \"abc\".\n  */\nconst longestPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  let max_len = 0;\n  let max_index = 0;\n  while (i < len) {\n    while (j < len && s[i] === s[j]) {\n      j++;\n    }\n    if (j - i > max_len) {\n      max_len = j - i;\n      max_index = i;\n    }\n    i++;\n    j = i;\n  }\n  return s.substr(max_index, max_len);\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest string that is a palindrome.\n  For example, given the string \"code\", the longest palindromic substring is \"cod\".\n  Given the string \"abcd\", the longest palindromic substring is \"bcd\".\n  Given the string \"abcd\", the longest palindromic substring is \"abc\".\n  */\nconst longestPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  let max_len = 0;\n  let max_index", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": false, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n      number--;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map();\n  for (const word of words) {\n    const [key, value] = map.get(word);\n    if (key === undefined) {\n      map.set(word, [word, 1]);\n    } else {\n      map.set(word, [key, value + 1]);\n    }\n  }\n  const max = words[0];\n  for (const [key, value] of map) {\n    if (value > map.get(max)[1]) {\n      max = key;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"agme\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else if (remaining === 0) {\n    return [number, 0];\n  } else {\n    return [number, remaining];\n  }\n}\n\n/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else if (remaining === 0) {\n    return [number, 0];\n  } else {\n    return [number, remaining];\n  }\n}\n\n/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else if (remaining === 0) {\n    return [number, 0];\n  } else {\n    return [number, remaining];\n  }\n}\n\n/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else if (remaining === 0) {\n    return [number, 0];\n  } else {\n    return [number, remaining];\n  }\n}\n\n/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences2 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences3 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences4 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences5 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences6 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences7 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> countOccurrences('xyzXYZ', 'xyz')\n  2\n  >>> countOccurrences('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countOccurrences('xyzXYZ', 'xyzXYZXYZ')\n  3\n  */\nconst countOccurrences8 = (string, substring) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find out how many times does it appear in the string\n  >>> count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let m = 0;\n  let nOperand = 0;\n  let mOperand = 0;\n  let nOperator = 0;\n  let mOperator = 0;\n  let nOperatorList = 0;\n  let mOperatorList = 0;\n  let nOperandList = 0;\n  let mOperandList = 0;\n  let nOperatorListLength = 0;\n  let mOperatorListLength = 0;\n  let nOperandListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let mOperandListLength = 0;\n  let nOperatorListLength = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = \"\";\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i];\n    } else {\n      result += s[i].toUpperCase();\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": false, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i].length === 1) {\n      beats.push(4);\n    } else if (notes[i].length === 2) {\n      beats.push(2);\n    } else if (notes[i].length === 3) {\n      beats.push(1);\n    } else if (notes[i].length === 4) {\n      beats.push(4);\n    } else if (notes[i].length === 5) {\n      beats.push(4);\n    } else if (notes[i].length === 6) {\n      beats.push(4);\n    } else if (notes[i].length === 7) {\n      beats.push(4);\n    } else if (notes[i].length === 8) {\n      beats.push(4);\n    } else if (notes[i].length === 9) {\n      beats.push(4);\n    } else if (notes[i].length === 10) {\n      beats.push(4);\n    } else if (notes[i].length === 11) {\n      beats.push(4);\n    } else if (notes[i].length === 12) {\n      beats.push(4);\n    } else if (notes[i].length === 13) {\n      beats.push(4);\n    } else if (notes[i].length === 14) {\n      beats.push(4);\n    } else if (notes[i].length === 15) {\n      beats.push(4);\n    } else if (notes[i].length === 16) {\n      beats.push(4);\n    } else if (notes[i].length === 17) {\n      beats.push(4);\n    } else if (notes[i].length === 18) {\n      beats.push(4);\n    } else if (notes[i].length === 19) {\n      beats.push(4);\n    } else if (notes[i].length === 20) {\n      beats.push(4);\n    } else if (notes[i].length === 21) {\n      beats.push(4);\n    } else if (notes[i].length === 22) {\n      beats.push(4);\n    } else if (notes[i].length === 23) {\n      beats.push(4);\n    } else if (notes[i].length === 24) {\n      beats.push(4);\n    } else if (notes[i].length === 25) {\n      beats.push(4);\n    } else if (notes[i].length === 26) {\n      beats.push(4);\n    } else if (notes[i].length === 27) {\n      beats.push(4);\n    } else if (notes[i].length === 28) {\n      beats.push(4);\n    } else if (notes[i].length === 29) {\n      beats.push(4);\n    } else if (notes[i].length === 30) {\n      beats.push(4);\n    } else if (notes[i].length === 31) {\n      beats.push(4);\n    } else if (notes[i].length === 32) {\n      beats.push(4);\n    } else if (notes[i].length === 33) {\n      beats.push(4);\n    } else if (notes[i].length === 34) {\n      beats.push(4);\n    } else if (notes[i].length === 35) {\n      beats.push(4);\n    } else if (notes[i].length === 36) {\n      beats.push(4);\n    } else if (notes[i].length === 37) {\n      beats.push(4);\n    } else if (notes[i].length === 38) {\n      beats.push(4);\n    } else if (notes[i].length === 39) {\n      beats.push(4);\n    } else if (notes[i].length === 40) {\n      beats.push(4);\n    } else if (notes[i].length === 41) {\n      beats.push(4);\n    } else if (notes[i].length === 42) {\n      beats.push(4);\n    } else if (notes[i].length === 43) {\n      beats.push(4);\n    } else if (notes[i].length === 44) {\n      beats.push(4);\n    } else if (notes[i].length === 45) {\n      beats.push(4);\n    } else if (notes[i].length === 46) {\n      beats.push(4);\n    } else if (notes[i].length === 47) {\n      beats.push(4);\n    } else if (notes[i].length === 48) {\n      beats.push(4);\n    } else if (notes[i].length === 49) {\n      beats.push(4);\n    } else if (notes[i].length === 50) {\n      beats.push(4);\n    } else if (notes[i].length === 51) {\n      beats.push(4);\n    } else if (notes[i].length === 52) {\n      beats.push(4);\n    } else if (notes[i].length === 53) {\n      beats.push(4);\n    } else if (notes[i].length === 54) {\n      beats.push(4);\n    } else if (notes[i].length === 55) {\n      beats.push(4);\n    } else if (notes[i].length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      let j = i;\n      while (j < string.length && string[j] === substring[0]) {\n        j++;\n      }\n      count += j - i;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that contains all the characters in the given string.\n  >>> longestSubstring('abcdefg', 'ab')\n  'ab'\n  >>> longestSubstring('abcdefg', 'abcd')\n  'abcd'\n  >>> longestSubstring('abcdefg', 'abc')\n  'abc'\n  >>> longestSubstring('abcdefg', 'abcdef')\n  'abcdef'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers('one two three')\n  'three two one'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers3('one two three')\n  'three two one'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers4('one two three')\n  'three two one'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers5('one two three')\n  'three two one'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers6('one two three')\n  'three two one'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers7('one two three')\n  'three two one'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i])\n    sortedArray.push(number)\n  }\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (a < b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimted string of numbers from 1 to 9.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbers8('one two three')\n  'three two one'\n  */\nconst sortNumbers8 = (numbers) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToString = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToStringWithDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString();\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToStringWithDecimalAndTruncate = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString().substring(0, 2);\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToStringWithDecimalAndTruncate2 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString().substring(0, 3);\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToStringWithDecimalAndTruncate3 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString().substring(0, 4);\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToStringWithDecimalAndTruncate4 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString().substring(0, 5);\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-3'\n  >>> truncateNumber(0)\n  '0'\n  */\nconst truncateNumberToStringWithDecimalAndTruncate5 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart.toString() + '.' + decimalPart.toString().substring(0, 6);\n};\n\n/* Given a number, it can be converted to a string.\n  Return the string representation of the number.\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(3)\n  '3'\n  >>> truncateNumber(0)\n  '0'\n  >>> truncateNumber(-3.5)\n  '-3.5'\n  >>> truncateNumber(-3)\n  '-", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  const thirdClosest = sorted[2];\n  return [closest, secondClosest, thirdClosest];\n};\n\n/*\n  From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  const thirdClosest = sorted[2];\n  const fourthClosest = sorted[3];\n  return [closest, secondClosest, thirdClosest, fourthClosest];\n};\n\n/*\n  From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  const thirdClosest = sorted[2];\n  const fourthClosest = sorted[3];\n  const fifthClosest = sorted[4];\n  return [closest, secondClosest, thirdClosest, fourthClosest, fifthClosest];\n};\n\n/*\n  From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  const thirdClosest = sorted[2];\n  const fourthClosest = sorted[3];\n  const fifthClosest = sorted[4];\n  const sixthClosest = sorted[5];\n  return [closest, secondClosest, thirdClosest, fourthClosest, fifthClosest, sixthClosest];\n};\n\n/*\n  From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = sorted[0];\n  const secondClosest = sorted[1];\n  const thirdClosest = sorted[2];\n  const fourthClosest = sorted[3];\n  const fifthClosest = sorted[4];\n  const sixthClosest = sorted[5];\n  const seventhClosest = sorted[6];\n  return [closest, secondClosest, thirdClosest, fourthClosest, fifthClosest, sixthClosest, seventhClosest];\n};\n\n/*\n  From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers, return the sum of those numbers */\nconst sum = (numbers) => {\n  return numbers.reduce((a, b) => a + b)\n}\n\n/* Given a list of numbers, return the mean of those numbers */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length\n}\n\n/* Given a list of numbers, return the median of those numbers */\nconst median = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  return sorted[half]\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode2 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode3 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode4 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode5 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode6 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode7 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode8 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode9 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode10 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode11 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const i = half\n  while (sorted[i] === mode) {\n    count++\n    i++\n  }\n  return mode\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode12 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(numbers.length / 2)\n  const mode = sorted[half]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterStrings([1, 2, 3, 'abc', {}, []])\n  * ['abc', {}]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterBooleans([1, 2, 3, 'abc', {}, []])\n  * [true, false, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterObjects([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterLists([1, 2, 3, 'abc', {}, []])\n  * [[], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && typeof v.keys === 'function');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterDictionaries2 = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && typeof v.keys === 'function' && typeof v.values === 'function');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterDictionaries3 = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && typeof v.keys === 'function' && typeof v.values === 'function' && typeof v.entries === 'function');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterDictionaries4 = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && typeof v.keys === 'function' && typeof v.values === 'function' && typeof v.entries === 'function' && typeof v.forEach === 'function');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterDictionaries5 = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && typeof v.keys === 'function' && typeof v.values === 'function' && typeof v.entries === 'function' && typeof v.forEach === 'function' && typeof v.map === 'function');\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  * @example\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * [{}, []]\n  */\nconst filterDictionaries6 = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && typeof v.keys === 'function' && typeof v.values === 'function' && typeof v.entries === 'function' && typeof v.forEach === 'function' && typeof v.map === 'function' && typeof v.filter === 'function');\n};\n\n/**\n  * Filter given list of any", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen20 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen21 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen22 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen23 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen24 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen25 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen26 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen27 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen28 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen29 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen30 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen31 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen32 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen33 = (string) => {\n  return string.length;\n};\n\n/* eRturn lentgh of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen34 = (string) => {\n  return string.length;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  7\n  >>> largestDivisor(18)\n  2\n  >>> largestDivisor(19)\n  3\n  >>> largestDivisor(20)\n  2\n  >>> largestDivisor(21)\n  3\n  >>> largestDivisor(22)\n  3\n  >>> largestDivisor(23)\n  5\n  >>> largestDivisor(24)\n  2\n  >>> largestDivisor(25)\n  5\n  >>> largestDivisor(26)\n  3\n  >>> largestDivisor(27)\n  3\n  >>> largestDivisor(28)\n  7\n  >>> largestDivisor(29)\n  3\n  >>> largestDivisor(30)\n  5\n  >>> largestDivisor(31)\n  3\n  >>> largestDivisor(32)\n  5\n  >>> largestDivisor(33)\n  5\n  >>> largestDivisor(34)\n  7\n  >>> largestDivisor(35)\n  7\n  >>> largestDivisor(36)\n  2\n  >>> largestDivisor(37)\n  7\n  >>> largestDivisor(38)\n  3\n  >>> largestDivisor(39)\n  5\n  >>> largestDivisor(40)\n  3\n  >>> largestDivisor(41)\n  5\n  >>> largestDivisor(42)\n  7\n  >>> largestDivisor(43)\n  3\n  >>> largestDivisor(44)\n  7\n  >>> largestDivisor(45)\n  3\n  >>> largestDivisor(46)\n  7\n  >>> largestDivisor(47)\n  7\n  >>> largestDivisor(48)\n  2\n  >>> largestDivisor(49)\n  3\n  >>> largestDivisor(50)\n  7\n  >>> largestDivisor(51)\n  3\n  >>> largestDivisor(52)\n  7\n  >>> largestDivisor(53)\n  3\n  >>> largestDivisor(54)\n  7\n  >>> largestDivisor(55)\n  7\n  >>> largestDivisor(56)\n  2\n  >>> largestDivisor(57)\n  7\n  >>> largestDivisor(58)\n  3\n  >>> largestDivisor(59)\n  3\n  >>> largestDivisor(60)\n  7\n  >>> largestDivisor(61)\n  3\n  >>> largestDivisor(62)\n  7\n  >>> largestDivisor(63)\n  7\n  >>> largestDivisor(64)\n  2\n  >>> largestDivisor(65)\n  7\n  >>> largestDivisor(66)\n  3\n  >>> largestDivisor(67)\n  3\n  >>> largestDivisor(68)\n  7\n  >>> largestDivisor(69)\n  3\n  >>> largestDivisor(70)\n  7\n  >>> largestDivisor(71)\n  7\n  >>> largestDivisor(72)\n  2\n  >>> largestDivisor(73)\n  7\n  >>> largestDivisor(74)\n  3\n  >>> largestDivisor(75)\n  3\n  >>> largestDivisor(76)\n  7\n  >>> largestDivisor(77)\n  3\n  >>> largestDivisor(78)\n  7\n  >>> largestDivisor(79)\n  3\n  >>> largestDivisor(80)\n  7\n  >>> largestDivisor(81)\n  7\n  >>> largestDivisor(82)\n  2\n  >>> largestDivisor(83)\n  7\n  >>> largestDivisor(84)\n  3\n  >>> largestDivisor(85)\n  3\n  >>> largestDivisor(86)\n  7\n  >>> largestDivisor(87)\n  3\n  >>> largestDivisor(88)\n  7\n  >>> largestDivisor(89)\n  3\n  >>> largestDivisor(90)\n  7\n  >>> largestDivisor(91)\n  3\n  >>> largestDivisor(92)\n  7\n  >>> largestDivisor(93)\n  3\n  >>> largestDivisor(94)\n  7\n  >>> largestDivisor(95)\n  3\n  >>> largestDivisor(96)\n  7\n  >>> largestDivisor(97)\n  3\n  >>> largestDivisor(98)\n  7\n  >>> largestDivisor(99)\n  3\n  >>> largestDivisor(100)\n  7\n  >>> largestDivisor(101)\n  3\n  >>> largestDivisor(102)\n  7\n  >>> largestDivisor(103)\n  3\n  >>> largestDivisor(104)\n  7\n  >>> largestDivisor(105)\n  3\n  >>> largestDivisor(106)\n  7\n  >>> largestDivisor(107)\n  3\n  >>> largestDivisor(108)\n  7\n  >>> largestDivisor(109)\n  3\n  >>> largestDivisor(110)\n  7\n  >>> largestDivisor(111)\n  3\n  >>> largestDivisor(112)\n  7\n  >>> largestDivisor(113)\n  3\n  >>> largestDivisor(114)\n  7\n  >>> largestDivisor(115)\n  3\n  >>> largestDivisor(116)\n  7\n  >>> largestDivisor(117)\n  3\n  >>> largestDivisor(118)\n  7\n  >>> largestDivisor(119)\n  3\n  >>> largestDivisor(120)\n  7\n  >>> largestDivisor(121)\n  3\n  >>> largestDivisor(122)\n  7\n  >>> largestDivisor(123)\n  3\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factorsize = (n) => {\n    let i = 2\n    while (i <= n) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      } else {\n        i++\n      }\n    }\n  }\n  factorsize(n)\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  const i = 5\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 6\n  }\n  return true\n}\n\n/*\n  >>> isPrime(8)\n  True\n  >>> isPrime(25)\n  True\n  >>> isPrime(70)\n  True\n  */\nconst isPrimeFactor = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrime(f))\n}\n\n/*\n  >>> isPrimeFactor(8)\n  True\n  >>> isPrimeFactor(25)\n  True\n  >>> isPrimeFactor(70)\n  True\n  */\nconst isPrimeFactorzation = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactor(f))\n}\n\n/*\n  >>> isPrimeFactorzation(8)\n  True\n  >>> isPrimeFactorzation(25)\n  True\n  >>> isPrimeFactorzation(70)\n  True\n  */\nconst isPrimeFactorzation2 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation(f))\n}\n\n/*\n  >>> isPrimeFactorzation2(8)\n  True\n  >>> isPrimeFactorzation2(25)\n  True\n  >>> isPrimeFactorzation2(70)\n  True\n  */\nconst isPrimeFactorzation3 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation2(f))\n}\n\n/*\n  >>> isPrimeFactorzation3(8)\n  True\n  >>> isPrimeFactorzation3(25)\n  True\n  >>> isPrimeFactorzation3(70)\n  True\n  */\nconst isPrimeFactorzation4 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation3(f))\n}\n\n/*\n  >>> isPrimeFactorzation4(8)\n  True\n  >>> isPrimeFactorzation4(25)\n  True\n  >>> isPrimeFactorzation4(70)\n  True\n  */\nconst isPrimeFactorzation5 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation4(f))\n}\n\n/*\n  >>> isPrimeFactorzation5(8)\n  True\n  >>> isPrimeFactorzation5(25)\n  True\n  >>> isPrimeFactorzation5(70)\n  True\n  */\nconst isPrimeFactorzation6 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation5(f))\n}\n\n/*\n  >>> isPrimeFactorzation6(8)\n  True\n  >>> isPrimeFactorzation6(25)\n  True\n  >>> isPrimeFactorzation6(70)\n  True\n  */\nconst isPrimeFactorzation7 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation6(f))\n}\n\n/*\n  >>> isPrimeFactorzation7(8)\n  True\n  >>> isPrimeFactorzation7(25)\n  True\n  >>> isPrimeFactorzation7(70)\n  True\n  */\nconst isPrimeFactorzation8 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation7(f))\n}\n\n/*\n  >>> isPrimeFactorzation8(8)\n  True\n  >>> isPrimeFactorzation8(25)\n  True\n  >>> isPrimeFactorzation8(70)\n  True\n  */\nconst isPrimeFactorzation9 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation8(f))\n}\n\n/*\n  >>> isPrimeFactorzation9(8)\n  True\n  >>> isPrimeFactorzation9(25)\n  True\n  >>> isPrimeFactorzation9(70)\n  True\n  */\nconst isPrimeFactorzation10 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation9(f))\n}\n\n/*\n  >>> isPrimeFactorzation10(8)\n  True\n  >>> isPrimeFactorzation10(25)\n  True\n  >>> isPrimeFactorzation10(70)\n  True\n  */\nconst isPrimeFactorzation11 = (n) => {\n  const factors = factorize(n)\n  return factors.every((f) => isPrimeFactorzation10(f))\n}\n\n/*\n  >>> isPrimeFactorzation11(8)\n  True\n  >>> isPrimeFactorzation11(25)\n  True\n  >>> isPrimeFactorzation11(70)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      unique.push(numbers[i]);\n      seen[n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('Hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> toUpperCase('HELLO')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list.\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b'])\n  ['c']\n  >>> filterOut(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  */\nconst filterOut = (strings, excluded) => {\n  return strings.filter(s => excluded.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst filterIn = (strings, included) => {\n  return strings.filter(s => included.indexOf(s) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list.\n  >>> filterIn(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> filter", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((acc, curr) => {\n    if (acc === 0) {\n      return curr;\n    }\n    return acc - curr;\n  }, 0);\n  return result < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n < 99) return false\n  if (n < 999) return true\n  if (n < 9999) return false\n  if (n < 99999) return true\n  if (n < 999999) return false\n  if (n < 9999999) return true\n  if (n < 99999999) return false\n  if (n < 999999999) return true\n  if (n < 9999999999) return false\n  if (n < 99999999999) return true\n  if (n < 999999999999) return false\n  if (n < 9999999999999) return true\n  if (n < 99999999999999) return false\n  if (n < 999999999999999) return true\n  if (n < 9999999999999999) return false\n  if (n < 99999999999999999) return true\n  return false\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  1\n  >>> divisors(101)\n  4\n  >>> divisors(11)\n  1\n  >>> divisors(13441)\n  8\n  >>> divisors(61)\n  1\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 1\n  if (n === 5) return 2\n  if (n === 6) return 1\n  if (n === 7) return 2\n  if (n === 8) return 1\n  if (n === 9) return 3\n  if (n === 10) return 2\n  if (n === 11) return 3\n  if (n === 12) return 2\n  if (n === 13) return 3\n  if (n === 14) return 2\n  if (n === 15) return 3\n  if (n === 16) return 2\n  if (n === 17) return 3\n  if (n === 18) return 2\n  if (n === 19) return 3\n  if (n === 20) return 2\n  if (n === 21) return 3\n  if (n === 22) return 2\n  if (n === 23) return 3\n  if (n === 24) return 2\n  if (n === 25) return 3\n  if (n === 26) return 2\n  if (n === 27) return 3\n  if (n === 28) return 2\n  if (n === 29) return 3\n  if (n === 30) return 2\n  if (n === 31) return 3\n  if (n === 32) return 2\n  if (n === 33) return 3\n  if (n === 34) return 2\n  if (n === 35) return 3\n  if (n === 36) return 2\n  if (n === 37) return 3\n  if (n === 38) return 2\n  if (n === 39) return 3\n  if (n === 40) return 2\n  if (n === 41) return 3\n  if (n === 42) return 2\n  if (n === 43) return 3\n  if (n === 44) return 2\n  if (n === 45) return 3\n  if (n === 46) return 2\n  if (n === 47) return 3\n  if (n === 48) return 2\n  if (n === 49) return 3\n  if (n === 50) return 2\n  if (n === 51) return 3\n  if (n === 52) return 2\n  if (n === 53) return 3\n  if (n === 54) return 2\n  if (n === 55) return 3\n  if (n === 56) return 2\n  if (n === 57) return 3\n  if (n === 58) return 2\n  if (n === 59) return 3\n  if (n === 60) return 2\n  if (n === 61) return 3\n  if (n === 62) return 2\n  if (n === 63) return 3\n  if (n === 64) return 2\n  if (n === 65) return 3\n  if (n === 66) return 2\n  if (n === 67) return 3\n  if (n === 68) return 2\n  if (n === 69) return 3\n  if (n === 70) return 2\n  if (n === 71) return 3\n  if (n === 72) return 2\n  if (n === 73) return 3\n  if (n === 74) return 2\n  if (n === 75) return 3\n  if (n === 76) return 2\n  if (n === 77) return 3\n  if (n === 78) return 2\n  if (n === 79) return 3\n  if (n === 80) return 2\n  if (n === 81) return 3\n  if (n === 82) return 2\n  if (n === 83) return 3\n  if (n === 84) return 2\n  if (n === 85) return 3\n  if (n === 86) return 2\n  if (n === 87) return 3\n  if (n === 88) return 2\n  if (n === 89) return 3\n  if (n === 90) return 2\n  if (n === 91) return 3\n  if (n === 92) return 2\n  if (n === 93) return 3\n  if (n === 94) return 2\n  if (n === 95) return 3\n  if (n === 96) return 2\n  if (n === 97) return 3\n  if (n === 98) return 2\n  if (n === 99) return 3\n  if (n === 100) return 2\n  if (n === 101) return 3\n  if (n === 102) return 2\n  if (n === 103) return 3\n  if (n === 104) return 2\n  if (n === 105) return 3\n  if (n === 106) return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let xs0 = xs.slice(0, n/2);\n  let xs1 = xs.slice(n/2, n);\n  let xs2 = xs.slice(n/2, n);\n  let xs3 = xs.slice(n/2, n);\n  let xs4 = xs.slice(n/2, n);\n  let xs5 = xs.slice(n/2, n);\n  let xs6 = xs.slice(n/2, n);\n  let xs7 = xs.slice(n/2, n);\n  let xs8 = xs.slice(n/2, n);\n  let xs9 = xs.slice(n/2, n);\n  let xs10 = xs.slice(n/2, n);\n  let xs11 = xs.slice(n/2, n);\n  let xs12 = xs.slice(n/2, n);\n  let xs13 = xs.slice(n/2, n);\n  let xs14 = xs.slice(n/2, n);\n  let xs15 = xs.slice(n/2, n);\n  let xs16 = xs.slice(n/2, n);\n  let xs17 = xs.slice(n/2, n);\n  let xs18 = xs.slice(n/2, n);\n  let xs19 = xs.slice(n/2, n);\n  let xs20 = xs.slice(n/2, n);\n  let xs21 = xs.slice(n/2, n);\n  let xs22 = xs.slice(n/2, n);\n  let xs23 = xs.slice(n/2, n);\n  let xs24 = xs.slice(n/2, n);\n  let xs25 = xs.slice(n/2, n);\n  let xs26 = xs.slice(n/2, n);\n  let xs27 = xs.slice(n/2, n);\n  let xs28 = xs.slice(n/2, n);\n  let xs29 = xs.slice(n/2, n);\n  let xs30 = xs.slice(n/2, n);\n  let xs31 = xs.slice(n/2, n);\n  let xs32 = xs.slice(n/2, n);\n  let xs33 = xs.slice(n/2, n);\n  let xs34 = xs.slice(n/2, n);\n  let xs35 = xs.slice(n/2, n);\n  let xs36 = xs.slice(n/2, n);\n  let xs37 = xs.slice(n/2, n);\n  let xs38 = xs.slice(n/2, n);\n  let xs39 = xs.slice(n/2, n);\n  let xs40 = xs.slice(n/2, n);\n  let xs41 = xs.slice(n/2, n);\n  let xs42 = xs.slice(n/2, n);\n  let xs43 = xs.slice(n/2, n);\n  let xs44 = xs.slice(n/2, n);\n  let xs45 = xs.slice(n/2, n);\n  let xs46 = xs.slice(n/2, n);\n  let xs47 = xs.slice(n/2, n);\n  let xs48 = xs.slice(n/2, n);\n  let xs49 = xs.slice(n/2, n);\n  let xs50 = xs.slice(n/2, n);\n  let xs51 = xs.slice(n/2, n);\n  let xs52 = xs.slice(n/2, n);\n  let xs53 = xs.slice(n/2, n);\n  let xs54 = xs.slice(n/2, n);\n  let xs55 = xs.slice(n/2, n);\n  let xs56 = xs.slice(n/2, n);\n  let xs57 = xs.slice(n/2, n);\n  let xs58 = xs.slice(n/2, n);\n  let xs59 = xs.slice(n/2, n);\n  let xs60 = xs.slice(n/2, n);\n  let xs61 = xs.slice(n/2, n);\n  let xs62 = xs.slice(n/2, n);\n  let xs63 = xs.slice(n/2, n);\n  let xs64 = xs.slice(n/2, n);\n  let xs65 = xs.slice(n/2, n);\n  let xs66 = xs.slice(n/2, n);\n  let xs67 = xs.slice(n/2, n);\n  let xs68 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sorted2 = [...l].sort((a, b) => b - a);\n  const sorted3 = [...l].sort((a, b) => a - b);\n  const sorted4 = [...l].sort((a, b) => b - a);\n  const sorted5 = [...l].sort((a, b) => a - b);\n  const sorted6 = [...l].sort((a, b) => b - a);\n  const sorted7 = [...l].sort((a, b) => a - b);\n  const sorted8 = [...l].sort((a, b) => b - a);\n  const sorted9 = [...l].sort((a, b) => a - b);\n  const sorted10 = [...l].sort((a, b) => b - a);\n  const sorted11 = [...l].sort((a, b) => a - b);\n  const sorted12 = [...l].sort((a, b) => b - a);\n  const sorted13 = [...l].sort((a, b) => a - b);\n  const sorted14 = [...l].sort((a, b) => b - a);\n  const sorted15 = [...l].sort((a, b) => a - b);\n  const sorted16 = [...l].sort((a, b) => b - a);\n  const sorted17 = [...l].sort((a, b) => a - b);\n  const sorted18 = [...l].sort((a, b) => b - a);\n  const sorted19 = [...l].sort((a, b) => a - b);\n  const sorted20 = [...l].sort((a, b) => b - a);\n  const sorted21 = [...l].sort((a, b) => a - b);\n  const sorted22 = [...l].sort((a, b) => b - a);\n  const sorted23 = [...l].sort((a, b) => a - b);\n  const sorted24 = [...l].sort((a, b) => b - a);\n  const sorted25 = [...l].sort((a, b) => a - b);\n  const sorted26 = [...l].sort((a, b) => b - a);\n  const sorted27 = [...l].sort((a, b) => a - b);\n  const sorted28 = [...l].sort((a, b) => b - a);\n  const sorted29 = [...l].sort((a, b) => a - b);\n  const sorted30 = [...l].sort((a, b) => b - a);\n  const sorted31 = [...l].sort((a, b) => a - b);\n  const sorted32 = [...l].sort((a, b) => b - a);\n  const sorted33 = [...l].sort((a, b) => a - b);\n  const sorted34 = [...l].sort((a, b) => b - a);\n  const sorted35 = [...l].sort((a, b) => a - b);\n  const sorted36 = [...l].sort((a, b) => b - a);\n  const sorted37 = [...l].sort((a, b) => a - b);\n  const sorted38 = [...l].sort((a, b) => b - a);\n  const sorted39 = [...l].sort((a, b) => a - b);\n  const sorted40 = [...l].sort((a, b) => b - a);\n  const sorted41 = [...l].sort((a, b) => a - b);\n  const sorted42 = [...l].sort((a, b) => b - a);\n  const sorted43 = [...l].sort((a, b) => a - b);\n  const sorted44 = [...l].sort((a, b) => b - a);\n  const sorted45 = [...l].sort((a, b) => a - b);\n  const sorted46 = [...l].sort((a, b) => b - a);\n  const sorted47 = [...l].sort((a, b) => a - b);\n  const sorted48 = [...l].sort((a, b) => b - a);\n  const sorted49 = [...l].sort((a, b) => a - b);\n  const sorted50 = [...l].sort((a, b) => b - a);\n  const sorted51 = [...l].sort((a, b) => a - b);\n  const sorted52 = [...l].sort((a, b) => b - a);\n  const sorted53 = [...l].sort((a, b) => a - b);\n  const sorted54 = [...l].sort((a, b) => b - a);\n  const sorted55 = [...l].sort((a, b) => a - b);\n  const sorted56 = [...l].sort((a, b) => b - a);\n  const sorted57 = [...l].sort((a, b) => a - b);\n  const sorted58 = [...l].sort((a, b) => b - a);\n  const sorted59 = [...l].sort((a, b) => a - b);\n  const sorted60 = [...l].sort((a, b) => b - a);\n  const sorted61 = [...l].sort((a, b) => a - b);\n  const sorted62 = [...l].sort((a, b) => b - a);\n  const sorted63 = [...l].sort((a, b) => a - b);\n  const sorted64 = [...l].sort((a, b) => b - a);\n  const sorted65 = [...l].sort((a, b) => a - b);\n  const sorted66 = [...l].sort((a, b) => b - a);\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter((x) => seen.add(x));\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique2 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique3 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique4 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique5 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique6 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique7 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique8 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique9 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique10 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique11 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique12 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique13 = (l) => {\n  return l.reduce((acc, x) => {\n    if (acc.indexOf(x) === -1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique14 = (l) => {\n  return l.reduce", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...even,...odd].sort();\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": false, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 1\n  let fib = 1\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = fib\n    }\n  }\n  return fib\n}\n\nconsole.log(primeFib(1))\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const mean = sum / numbers.length\n  const deviation = numbers.map(num => Math.abs(num - mean))\n  return deviation.reduce((acc, num) => acc + num, 0) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_men", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n    let collisions = 0;\n    let cars = [];\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0, 0, 0, 0));\n    cars.push(new Car(0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero3 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero4 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero5 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero6 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero7 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero8 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero9 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero10 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero11 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero12 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero13 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero14 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero15 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero16 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst pairsSumToZero17 = (l) => {\n    let sum = 0;\n    for (let i = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBase = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToDecimal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += index;\n  }\n  return result;\n};\n\nconst convertBaseToHexadecimal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToOctal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToBinary = (x, base) => {\n  const baseDigits = ['0', '1'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToHexadecimal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToOctal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToBinary = (x, base) => {\n  const baseDigits = ['0', '1'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += baseDigits[index];\n  }\n  return result;\n};\n\nconst convertBaseToDecimal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split('');\n  const result = '';\n  for (let i = 0; i < xDigits.length; i++) {\n    const digit = xDigits[i];\n    const index = baseDigits.indexOf(digit);\n    result += index;\n  }\n  return result;\n};\n\nconst convertBaseToHexadecimal = (x, base) => {\n  const baseDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const xDigits = x.toString(base).split(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangle", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 2;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort();\n  let half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let textLength = text.length\n    let i = 0\n    let j = textLength - 1\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    return modp(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  if (n < 0) {\n    return modp2(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  if (n < 0) {\n    return modp3(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  if (n < 0) {\n    return modp4(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  if (n < 0) {\n    return modp5(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  if (n < 0) {\n    return modp6(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp6(3, 5)\n  3\n  >>> modp6(1101, 101)\n  2\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  if (n < 0) {\n    return modp7(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp7(3, 5)\n  3\n  >>> modp7(1101, 101)\n  2\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  if (n < 0) {\n    return modp8(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp8(3, 5)\n  3\n  >>> modp8(1101, 101)\n  2\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  if (n < 0) {\n    return modp9(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp9(3, 5)\n  3\n  >>> modp9(1101, 101)\n  2\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  if (n < 0) {\n    return modp10(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp10(3, 5)\n  3\n  >>> modp10(1101, 101)\n  2\n  >>> modp10(0, 101)\n  1\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  if (n < 0) {\n    return modp11(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp11(3, 5)\n  3\n  >>> modp11(1101, 101)\n  2\n  >>> modp11(0, 101)\n  1\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  if (n < 0) {\n    return modp12(-n, p)\n  }\n  return (n % p + p) % p\n}\n\n/*\n  >>> modp12(3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    j++;\n    if (j % delimeter === 0) {\n      result.push(delimeter);\n      j = 0;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa1 = 0\n  let bb1 = 0\n  let cc1 = 0\n  let dd1 = 0\n  let ee1 = 0\n  let ff1 = 0\n  let gg1 = 0\n  let hh1 = 0\n  let ii1 = 0\n  let jj1 = 0\n  let kk1 = 0\n  let ll1 = 0\n  let mm1 = 0\n  let nn1 = 0\n  let oo1 = 0\n  let pp1 = 0\n  let qq1 = 0\n  let rr1 = 0\n  let ss1 = 0\n  let tt1 = 0\n  let uu1 = 0\n  let vv1 = 0\n  let ww1 = 0\n  let xx1 = 0\n  let yy1 = 0\n  let zz1 = 0\n  let aa2 = 0\n  let bb2 = 0\n  let cc2 = 0\n  let dd2 = 0\n  let ee2 = 0\n  let ff2 = 0\n  let gg2 = 0\n  let hh2 = 0\n  let ii2 = 0\n  let jj2 = 0\n  let kk2 = 0\n  let ll2 = 0\n  let mm2 = 0\n  let nn2 = 0\n  let oo2 = 0\n  let pp2 = 0\n  let qq2 = 0\n  let rr2 = 0\n  let ss2 = 0\n  let tt2 = 0\n  let uu2 = 0\n  let vv2 = 0\n  let ww2 = 0\n  let xx2 = 0\n  let yy2 = 0\n  let zz2 = 0\n  while (i < textLength) {\n    if (text[i] === vowels[0]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[1]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[2]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[3]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[4]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[5]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[6]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[7]) {\n      if (i === 0) {\n        text = text.substring(1)\n      } else {\n        text = text.substring(0, i) + text.substring(i + 1)\n      }\n      i = i + vowelsLength\n    }\n    if (text[i] === vowels[8]) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBelow = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndAbove = (l, t1, t2) => {\n  return aboveThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetween = (l, t1, t2) => {\n  return betweenThresholds(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetweenAndBelow = (l, t1, t2) => {\n  return betweenThresholdsAndBelow(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetweenAndAbove = (l, t1, t2) => {\n  return betweenThresholdsAndAbove(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetweenAndBetween = (l, t1, t2) => {\n  return betweenThresholdsAndBetween(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetweenAndBetweenAndBelow = (l, t1, t2) => {\n  return betweenThresholdsAndBetweenAndBelow(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetweenAndBetweenAndAbove = (l, t1, t2) => {\n  return betweenThresholdsAndBetweenAndAbove(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholdsAndBetweenAndBetweenAndBetween = (l, t1, t2) => {\n  return betweenThresholdsAndBetweenAndBetween(l, t1, t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholds", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('abcd', 'abcd')\n  true\n  >>> same('abcd', 'abce')\n  false\n  >>> same('abcd', 'abcdzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> same('abcd', 'abcdzz", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split(\"<>\")\n  const open = brackets.filter(bracket => bracket === \"<\")\n  const close = brackets.filter(bracket => bracket === \">\")\n  return open.length === close.length\n}\n\n/*\n  Given a string, return the number of brackets in the string.\n  The brackets must be \"<<>\" and \">>\".\n\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<<>>\")\n  2\n  >>> numberOfBrackets(\"<><>\")\n  2\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1\n  >>> numberOfBrackets(\"<>\")\n  1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common_set = new Set();\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      for (let j = 0; j < l2_len; j++) {\n        if (l2_set.has(l2[j])) {\n          common_set.add(l1[i]);\n          break;\n        }\n      }\n    }\n  }\n  return [...common_set];\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let primeFactor = 2\n  while (primeFactor * primeFactor < n) {\n    if (n % primeFactor === 0) {\n      return primeFactor\n    }\n    primeFactor++\n  }\n  return n\n}\n\n/*Return the smallest", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let i = 0;\n  let j = 0;\n  let deepest_level = 0;\n  while (i < paren_string_length) {\n    if (paren_string_array[i] === '(') {\n      j = 0;\n      deepest_level++;\n    } else if (paren_string_array[i] === ')') {\n      j--;\n      if (j === 0) {\n        deepest_level--;\n      }\n    }\n    i++;\n  }\n  paren_string_array_deepest_level = paren_string_array_deepest_level.concat(deepest_level);\n  return paren_string_array_deepest_level;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_2 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let i = 0;\n  let j = 0;\n  let deepest_level = 0;\n  while (i < paren_string_length) {\n    if (paren_string_array[i] === '(') {\n      j = 0;\n      deepest_level++;\n    } else if (paren_string_array[i] === ')') {\n      j--;\n      if (j === 0) {\n        deepest_level--;\n      }\n    }\n    i++;\n  }\n  paren_string_array_deepest_level = paren_string_array_deepest_level.concat(deepest_level);\n  return paren_string_array_deepest_level;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_3 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let i = 0;\n  let j = 0;\n  let deepest_level = 0;\n  while (i < paren_string_length) {\n    if (paren_string_array[i] === '(') {\n      j = 0;\n      deepest_level++;\n    } else if (paren_string_array[i] === ')') {\n      j--;\n      if (j === 0) {\n        deepest_level--;\n      }\n    }\n    i++;\n  }\n  paren_string_array_deepest_level = paren_string_array_deepest_level.concat(deepest_level);\n  return paren_string_array_deepest_level;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_4 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = [];\n  let i = 0;\n  let j = 0;\n  let deepest_level = 0;\n  while (i < paren_string_length) {\n    if (paren_string_array[i] === '(') {\n      j = 0;\n      deepest_level++;\n    } else if (paren_string_array[i] === ')') {\n      j--;\n      if (j === 0) {\n        deepest_level--;\n      }\n    }\n    i++;\n  }\n  paren_string_array_deepest_level = paren_string_array_deepest_level.concat(deepest_level);\n  return paren_string_array_deepest_level;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((()", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"(\" || bracket === \")\") {\n      stack.push(bracket);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack.pop()!== bracket) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n  if (brackets.length === 0) {\n    return true;\n  }\n  const correct = correctBracketing(brackets);\n  return correct;\n};\n\nconst isValid = (brackets) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  49\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  63\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  70\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  77\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  84\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  91\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  98\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  105\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  112\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  119\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  133\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  140\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  147\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  154\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  161\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  168\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  175\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  182\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  189\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  196\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  203\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nexport default vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const shift = shift % len\n  const reversed = x.slice()\n  reversed.reverse()\n  return reversed.join('')\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 65\n      digitSum(\"abcCd\") => 97\n      digitSum(\"helloE\") => 97\n      digitSum(\"woArBld\") => 97\n      digitSum(\"aAaaaXa\") => 97\n  */\nconst lowerDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst upperDigitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sumDigits = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sumLowerDigits = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sumUpperDigits = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sumLowerUpperDigits = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sumUpperLowerDigits = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sumLowerUpperLowerDigits = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let arr = s.split(\" \")\n  let count = 0\n  let total = 0\n  let i = 0\n  while (i < arr.length) {\n    if (arr[i] === \"apples\") {\n      count += 1\n    } else if (arr[i] === \"oranges\") {\n      count += 1\n    } else if (arr[i] === \"mango\") {\n      count += 1\n    }\n    total += count\n    count = 0\n    i += 1\n  }\n  return total - total / n\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\nconsole.log(fruitDistribution(\"100 apples nad 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n  const arrLenEven = arr.filter(x => x % 2 === 0)\n  if (arrLenEven.length === 0) {\n    return []\n  }\n  const min = arrLenEven[0]\n  const minIndex = arr.indexOf(min)\n  return [min, minIndex]\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = len - 1\n  let k = 0\n  let max = 0\n  let max_i = 0\n  let max_j = 0\n  let max_k = 0\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] > lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] > lst[j]) {\n    return -1\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    } else {\n      i = k + 1\n    }\n  }\n  if (lst[i] === lst[j]) {\n    return i\n  }\n  while (i < j) {\n    k = (i + j) / 2\n    if (lst[k] === lst[i]) {\n      j = k - 1\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return sorted.concat(reversed);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) * (a - c) / 2);\n  }\n  return -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return ((a + b) * (c - b) / 2) + ((a + c) * (b - c) / 2) + ((b + c) *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && sum >= 0;\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const total = lst1.reduce((acc, val, index) => {\n    if (lst2.indexOf(val) === -1) {\n      return acc + val.length;\n    }\n    return acc;\n  }, 0);\n  return lst1.length < lst2.length? lst1 : lst2;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  while (i < 100) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast2 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast3 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast4 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast5 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast6 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast7 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast8 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast9 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast10 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast11 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast12 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast13 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast14 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast15 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast16 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast17 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast18 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast19 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast20 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast21 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFast22 = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower2(x / n, n)\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower3(x / n, n)\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower4(x / n, n)\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower5(x / n, n)\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower6(x / n, n)\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower7(x / n, n)\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower8(x / n, n)\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower9(x / n, n)\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower10(x / n, n)\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower11(x / n, n)\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower12(x / n, n)\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower13(x / n, n)\n}\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower14(x / n, n)\n}\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower15(x / n, n)\n}\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower16(x / n, n)\n}\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower17(x / n, n)\n}\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower18(x / n, n)\n}\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower19(x / n, n)\n}\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower20(x / n, n)\n}\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower21(x / n, n)\n}\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower22(x / n, n)\n}\n\nconst isSimplePower23 = (x, n) => {\n  if (x === 1) return true\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a % 2 === 0) return false\n  return iscube(a / 2)\n}\n\nconst ispandigital = (n) => {\n  if (n === 0) return false\n  if (n === 1) return true\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return true\n  if (n === 5) return true\n  if (n === 6) return true\n  if (n === 7) return true\n  if (n === 8) return true\n  if (n === 9) return true\n  if (n === 10) return true\n  if (n === 11) return true\n  if (n === 12) return true\n  if (n === 13) return true\n  if (n === 14) return true\n  if (n === 15) return true\n  if (n === 16) return true\n  if (n === 17) return true\n  if (n === 18) return true\n  if (n === 19) return true\n  if (n === 20) return true\n  if (n === 21) return true\n  if (n === 22) return true\n  if (n === 23) return true\n  if (n === 24) return true\n  if (n === 25) return true\n  if (n === 26) return true\n  if (n === 27) return true\n  if (n === 28) return true\n  if (n === 29) return true\n  if (n === 30) return true\n  if (n === 31) return true\n  if (n === 32) return true\n  if (n === 33) return true\n  if (n === 34) return true\n  if (n === 35) return true\n  if (n === 36) return true\n  if (n === 37) return true\n  if (n === 38) return true\n  if (n === 39) return true\n  if (n === 40) return true\n  if (n === 41) return true\n  if (n === 42) return true\n  if (n === 43) return true\n  if (n === 44) return true\n  if (n === 45) return true\n  if (n === 46) return true\n  if (n === 47) return true\n  if (n === 48) return true\n  if (n === 49) return true\n  if (n === 50) return true\n  if (n === 51) return true\n  if (n === 52) return true\n  if (n === 53) return true\n  if (n === 54) return true\n  if (n === 55) return true\n  if (n === 56) return true\n  if (n === 57) return true\n  if (n === 58) return true\n  if (n === 59) return true\n  if (n === 60) return true\n  if (n === 61) return true\n  if (n === 62) return true\n  if (n === 63) return true\n  if (n === 64) return true\n  if (n === 65) return true\n  if (n === 66) return true\n  if (n === 67) return true\n  if (n === 68) return true\n  if (n === 69) return true\n  if (n === 70) return true\n  if (n === 71) return true\n  if (n === 72) return true\n  if (n === 73) return true\n  if (n === 74) return true\n  if (n === 75) return true\n  if (n === 76) return true\n  if (n === 77) return true\n  if (n === 78) return true\n  if (n === 79) return true\n  if (n === 80) return true\n  if (n === 81) return true\n  if (n === 82) return true\n  if (n === 83) return true\n  if (n === 84) return true\n  if (n === 85) return true\n  if (n === 86) return true\n  if (n === 87) return true\n  if (n === 88) return true\n  if (n === 89) return true\n  if (n === 90) return true\n  if (n === 91) return true\n  if (n === 92) return true\n  if (n === 93) return true\n  if (n === 94) return true\n  if (n === 95) return true\n  if (n === 96) return true\n  if (n === 97) return true\n  if (n === 98) return true\n  if (n === 99) return true\n  if (n === 100) return true\n  if (n === 101) return true\n  if (n === 102) return true\n  if (n === 103) return true\n  if (n === 104) return true\n  if (n === 105) return true\n  if (n === 106) return true\n  if (n === 107) return true\n  if (n === 108) return true\n  if (n === 109) return true\n  if (n === 110) return true\n  if (n === 111) return true\n  if (n === 112) return true\n  if (n === 113) return true\n  if (n === 114) return true\n  if (n === 115) return true\n  if (n === 116) return true\n  if (n === 117) return true\n  if (n === 118) return true\n  if (n === 119) return true\n  if (n === 120) return true\n  if (n === 121) return true\n  if (n === 122) return true\n  if (n === 123) return true\n  if (n === 124) return true\n  if (n === 125) return true\n  if (n === 126) return true\n  if (n === 127) return true\n  if (n === 128) return true\n  if (n === 129) return true\n  if (n === 130) return true\n  if (n === 131) return true\n  if (n === 132) return true\n  if (n === 133) return true\n  if (n === 134) return true\n  if (n === 135) return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  while (i < num.length) {\n    let digit = num[i];\n    if (digit === 'A') {\n      digit = '0';\n    } else if (digit === 'B') {\n      digit = '1';\n    } else if (digit === 'C') {\n      digit = '2';\n    } else if (digit === 'D') {\n      digit = '3';\n    } else if (digit === 'E') {\n      digit = '4';\n    } else if (digit === 'F') {\n      digit = '5';\n    }\n    result += parseInt(digit, 16);\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber13 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber14 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber15 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber16 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let binaryLength = 0\n  let binaryLengthMax = 0\n  let binaryLengthMin = 0\n  let binaryLengthMax = 0\n  let binaryLengthMin = 0\n  let binaryLength = 0\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary = ''\n  let binary =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < len) {\n    count = 0\n    while (j < len && s[i] === s[j]) {\n      count++\n      j++\n    }\n    if (count >= 3) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return number > 1 && prime.test(number);\n  };\n  const length = string.length;\n  let i = 1;\n  while (i < length) {\n    if (!isPrime(string.charAt(i))) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  const arr2 = []\n  for (let i = 1; i <= n; i++) {\n    arr2.push(i)\n  }\n  const arr3 = []\n  for (let i = 1; i <= n; i++) {\n    arr3.push(i)\n  }\n  const arr4 = []\n  for (let i = 1; i <= n; i++) {\n    arr4.push(i)\n  }\n  const arr5 = []\n  for (let i = 1; i <= n; i++) {\n    arr5.push(i)\n  }\n  const arr6 = []\n  for (let i = 1; i <= n; i++) {\n    arr6.push(i)\n  }\n  const arr7 = []\n  for (let i = 1; i <= n; i++) {\n    arr7.push(i)\n  }\n  const arr8 = []\n  for (let i = 1; i <= n; i++) {\n    arr8.push(i)\n  }\n  const arr9 = []\n  for (let i = 1; i <= n; i++) {\n    arr9.push(i)\n  }\n  const arr10 = []\n  for (let i = 1; i <= n; i++) {\n    arr10.push(i)\n  }\n  const arr11 = []\n  for (let i = 1; i <= n; i++) {\n    arr11.push(i)\n  }\n  const arr12 = []\n  for (let i = 1; i <= n; i++) {\n    arr12.push(i)\n  }\n  const arr13 = []\n  for (let i = 1; i <= n; i++) {\n    arr13.push(i)\n  }\n  const arr14 = []\n  for (let i = 1; i <= n; i++) {\n    arr14.push(i)\n  }\n  const arr15 = []\n  for (let i = 1; i <= n; i++) {\n    arr15.push(i)\n  }\n  const arr16 = []\n  for (let i = 1; i <= n; i++) {\n    arr16.push(i)\n  }\n  const arr17 = []\n  for (let i = 1; i <= n; i++) {\n    arr17.push(i)\n  }\n  const arr18 = []\n  for (let i = 1; i <= n; i++) {\n    arr18.push(i)\n  }\n  const arr19 = []\n  for (let i = 1; i <= n; i++) {\n    arr19.push(i)\n  }\n  const arr20 = []\n  for (let i = 1; i <= n; i++) {\n    arr20.push(i)\n  }\n  const arr21 = []\n  for (let i = 1; i <= n; i++) {\n    arr21.push(i)\n  }\n  const arr22 = []\n  for (let i = 1; i <= n; i++) {\n    arr22.push(i)\n  }\n  const arr23 = []\n  for (let i = 1; i <= n; i++) {\n    arr23.push(i)\n  }\n  const arr24 = []\n  for (let i = 1; i <= n; i++) {\n    arr24.push(i)\n  }\n  const arr25 = []\n  for (let i = 1; i <= n; i++) {\n    arr25.push(i)\n  }\n  const arr26 = []\n  for (let i = 1; i <= n; i++) {\n    arr26.push(i)\n  }\n  const arr27 = []\n  for (let i = 1; i <= n; i++) {\n    arr27.push(i)\n  }\n  const arr28 = []\n  for (let i = 1; i <= n; i++) {\n    arr28.push(i)\n  }\n  const arr29 = []\n  for (let i = 1; i <= n; i++) {\n    arr29.push(i)\n  }\n  const arr30 = []\n  for (let i = 1; i <= n; i++) {\n    arr30.push(i)\n  }\n  const arr31 = []\n  for (let i = 1; i <= n; i++) {\n    arr31.push(i)\n  }\n  const arr32 = []\n  for (let i = 1; i <= n; i++) {\n    arr32.push(i)\n  }\n  const arr33 = []\n  for (let i = 1; i <= n; i++) {\n    arr33.push(i)\n  }\n  const arr34 = []\n  for (let i = 1; i <= n; i++) {\n    arr34.push(i)\n  }\n  const arr35 = []\n  for (let i = 1; i <= n; i++) {\n    arr35.push(i)\n  }\n  const arr36 = []\n  for (let i = 1; i <= n; i++) {\n    arr36.push(i)\n  }\n  const arr37 = []\n  for (let i = 1; i <= n; i++) {\n    arr37.push(i)\n  }\n  const arr38 = []\n  for (let i = 1; i <= n; i++) {\n    arr38.push(i)\n  }\n  const arr39 = []\n  for (let i = 1; i <= n; i++) {\n    arr39.push(i)\n  }\n  const arr40 = []\n  for (let i = 1; i <= n; i++) {\n    arr40.push(i)\n  }\n  const arr41 = []\n  for (let i = 1; i <= n; i++) {\n    arr41.push(i)\n  }\n  const arr42 = []\n  for (let i = 1; i <= n; i++) {\n    arr42.push(i)\n  }\n  const arr43 = []\n  for (let i = 1; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  let arr3 = []\n  let arr4 = []\n  let arr5 = []\n  let arr6 = []\n  let arr7 = []\n  let arr8 = []\n  let arr9 = []\n  let arr10 = []\n  let arr11 = []\n  let arr12 = []\n  let arr13 = []\n  let arr14 = []\n  let arr15 = []\n  let arr16 = []\n  let arr17 = []\n  let arr18 = []\n  let arr19 = []\n  let arr20 = []\n  let arr21 = []\n  let arr22 = []\n  let arr23 = []\n  let arr24 = []\n  let arr25 = []\n  let arr26 = []\n  let arr27 = []\n  let arr28 = []\n  let arr29 = []\n  let arr30 = []\n  let arr31 = []\n  let arr32 = []\n  let arr33 = []\n  let arr34 = []\n  let arr35 = []\n  let arr36 = []\n  let arr37 = []\n  let arr38 = []\n  let arr39 = []\n  let arr40 = []\n  let arr41 = []\n  let arr42 = []\n  let arr43 = []\n  let arr44 = []\n  let arr45 = []\n  let arr46 = []\n  let arr47 = []\n  let arr48 = []\n  let arr49 = []\n  let arr50 = []\n  let arr51 = []\n  let arr52 = []\n  let arr53 = []\n  let arr54 = []\n  let arr55 = []\n  let arr56 = []\n  let arr57 = []\n  let arr58 = []\n  let arr59 = []\n  let arr60 = []\n  let arr61 = []\n  let arr62 = []\n  let arr63 = []\n  let arr64 = []\n  let arr65 = []\n  let arr66 = []\n  let arr67 = []\n  let arr68 = []\n  let arr69 = []\n  let arr70 = []\n  let arr71 = []\n  let arr72 = []\n  let arr73 = []\n  let arr74 = []\n  let arr75 = []\n  let arr76 = []\n  let arr77 = []\n  let arr78 = []\n  let arr79 = []\n  let arr80 = []\n  let arr81 = []\n  let arr82 = []\n  let arr83 = []\n  let arr84 = []\n  let arr85 = []\n  let arr86 = []\n  let arr87 = []\n  let arr88 = []\n  let arr89 = []\n  let arr90 = []\n  let arr91 = []\n  let arr92 = []\n  let arr93 = []\n  let arr94 = []\n  let arr95 = []\n  let arr96 = []\n  let arr97 = []\n  let arr98 = []\n  let arr99 = []\n  let arr100 = []\n  let arr101 = []\n  let arr102 = []\n  let arr103 = []\n  let arr104 = []\n  let arr105 = []\n  let arr106 = []\n  let arr107 = []\n  let arr108 = []\n  let arr109 = []\n  let arr110 = []\n  let arr111 = []\n  let arr112 = []\n  let arr113 = []\n  let arr114 = []\n  let arr115 = []\n  let arr116 = []\n  let arr117 = []\n  let arr118 = []\n  let arr119 = []\n  let arr120 = []\n  let arr121 = []\n  let arr122 = []\n  let arr123 = []\n  let arr124 = []\n  let arr125 = []\n  let arr126 = []\n  let arr127 = []\n  let arr128 = []\n  let arr129 = []\n  let arr130 = []\n  let arr131 = []\n  let arr132 = []\n  let arr133 = []\n  let arr134 = []\n  let arr135 = []\n  let arr136 = []\n  let arr137 = []\n  let arr138 = []\n  let arr139 = []\n  let arr140 = []\n  let arr141 = []\n  let arr142 = []\n  let arr143 = []\n  let arr144 = []\n  let arr145 = []\n  let arr146 = []\n  let arr147 = []\n  let arr148 = []\n  let arr149 = []\n  let arr150 = []\n  let arr151 = []\n  let arr152 = []\n  let arr153 = []\n  let arr154 = []\n  let arr155 = []\n  let arr156 = []\n  let arr157 = []\n  let arr158 = []\n  let arr159 = []\n  let arr160 = []\n  let arr161 = []\n  let arr162 = []\n  let arr163 = []\n  let arr164 = []\n  let arr165 = []\n  let arr166 = []\n  let arr167 = []\n  let arr168 = []\n  let arr169 = []\n  let arr170 = []\n  let arr171 = []\n  let arr172 = []\n  let arr173 = []\n  let arr174 = []\n  let arr175 = []\n  let arr176 = []\n  let arr177 = []\n  let arr178 = []\n  let arr179 = []\n  let arr180 = []\n  let arr181 = []\n  let arr182 = []\n  let arr183 = []\n  let arr184 = []\n  let arr185 = []\n  let arr186 = []\n  let arr187 = []\n  let arr188 = []\n  let arr189 = []\n  let arr190 = []\n  let arr191 = []\n  let arr192 = []\n  let arr193 = []\n  let arr194 = []\n  let arr195 = []\n  let arr196", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow2 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow3 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow4 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow5 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow6 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow7 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow8 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push((i, row[x]))\n  }\n  return result\n}\n\nconst getRow9 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    const aSum = a + b;\n    const bSum = a - b;\n    if (aSum % 2 === 1) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, -2);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, -2);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, -2);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, -2);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, -2);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return newArray.join('');\n  };\n  return rotate(s, 2);\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rotate = (s, n) => {\n    const l = alphabet.length;\n    const r = s.split('');\n    const newArray = [];\n    for (let i = 0; i < l; i++) {\n      newArray.push(r[(i + n) % l]);\n    }\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const boredoms = words.filter((word) => word.startsWith('I'))\n  return boredoms.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence thta starts with the\n  word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(' ')\n  const boring = words.filter((word) => word.startsWith('I'))\n  return boring.length\n}\n\n/*\n  oYu'll be", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true\n  }\n  if (x === y - z) {\n    return true\n  }\n  if (x === z + y) {\n    return true\n  }\n  if (x === z - y) {\n    return true\n  }\n  if (x === y * z) {\n    return true\n  }\n  if (x === y / z) {\n    return true\n  }\n  if (x === z * y) {\n    return true\n  }\n  if (x === z / y) {\n    return true\n  }\n  if (x === y % z) {\n    return true\n  }\n  if (x === z % y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }\n  if (x === y ** z) {\n    return true\n  }\n  if (x === z ** y) {\n    return true\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const vowels = 'AEIOU'\n  const consonants = 'BCDFGHJKLMNPQRSTVWXYZ'\n  const vowels_index = vowels.indexOf(message.charAt(0))\n  const consonants_index = consonants.indexOf(message.charAt(0))\n  const vowel_index = vowels.indexOf(message.charAt(1))\n  const consonant_index = consonants.indexOf(message.charAt(1))\n  const swap_index = consonants_index - vowels_index\n  const swap_char = alphabet[swap_index]\n  const swap_char_index = vowels.indexOf(swap_char)\n  const swap_char_index_index = consonants.indexOf(swap_char)\n  const swap_char_index_index_index = vowels.indexOf(swap_char_index)\n  const swap_char_index_index_index_index = consonants.indexOf(swap_char_index_index)\n  const swap_char_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index)\n  const swap_char_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = consonants.indexOf(swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index)\n  const swap_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = vowels.indexOf(swap_char_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    let prime = isPrime(num);\n    if (prime) {\n      max = num;\n    }\n  }\n  return max;\n};\n\nconst isPrime = (num) => {\n  let prime = true;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      prime = false;\n    }\n  }\n  return prime;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string, return true if the string is a valid number, \n  false otherwise.\n  Examples:\n  isNumber(\"123\") should return true.\n  isNumber(\"a\") should return false.\n  isNumber(\"123a\") should return false.\n  isNumber(\"a123\") should return false.\n  isNumber(\"123a123\") should return true.\n  */\nconst isNumber = (str) => {\n  const reg = /^\\d+$/\n  return reg.test(str)\n}\n\n/*\n  Given a string, return true if the string is a valid email address, \n  false otherwise.\n  Examples:\n  isEmail(\"john@example.com\") should return true.\n  isEmail(\"john\") should return false.\n  isEmail(\"john@example\") should return false.\n  isEmail(\"john@example.com.com\") should return false.\n  isEmail(\"john@example.com\") should return true.\n  */\nconst isEmail = (str) => {\n  const reg = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\n  return reg.test(str)\n}\n\n/*\n  Given a string, return true if the string is a valid URL, \n  false otherwise.\n  Examples:\n  isUrl(\"http://www.example.com\") should return true.\n  isUrl(\"www.example.com\") should return false.\n  isUrl(\"www.example.com/\") should return false.\n  isUrl(\"www.example.com/index.html\") should return true.\n  isUrl(\"www.example.com/index.html?a=b\") should return true.\n  isUrl(\"www.example.com/index.html?a=b&c=d\") should return true.\n  */\nconst isUrl = (str) => {\n  const reg = /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/\n  return reg.test(str)\n}\n\n/*\n  Given a string, return true if the string is a valid IP address, \n  false otherwise.\n  Examples:\n  isIp(\"192.168.1.1\") should return true.\n  isIp(\"192.168.1\") should return false.\n  isIp(\"192.168.1.1.1\") should return false.\n  isIp(\"192.168.1.1.1.1\") should return false.\n  isIp(\"192.168.1.1.1.1.1\") should return true.\n  */\nconst isIp = (str) => {\n  const reg = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n  return reg.test(str)\n}\n\n/*\n  Given a string, return true if the string is a valid phone number, \n  false otherwise.\n  Examples:\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"2125551212\") should return true.\n  isPhone(\"+1-212-555-1212\") should return true.\n  isPhone(\"212-555-1212\") should return true.\n  isPhone(\"212", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 15\n  sumArray([2,3,5,7,11,13,17,19]) => 40\n  sumArray([2,3,5,7,11,13,17]) => 40\n  sumArray([2,3,5,7]) => 7\n  sumArray([2,3,5]) => 5\n  sumArray([2]) => 2\n  sumArray([]) => 0\n  */\nconst sumArray = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the squares of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 25\n  sumArray([2,3,5,7,11,13,17,19]) => 575\n  sumArray([2,3,5,7,11,13,17]) => 575\n  sumArray([2,3,5,7]) => 49\n  sumArray([2,3,5]) => 25\n  sumArray([2]) => 4\n  sumArray([]) => 0\n  */\nconst sumArraySquared = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the products of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 35\n  sumArray([2,3,5,7,11,13,17,19]) => 1701\n  sumArray([2,3,5,7,11,13,17]) => 1701\n  sumArray([2,3,5,7]) => 49\n  sumArray([2,3,5]) => 25\n  sumArray([2]) => 4\n  sumArray([]) => 0\n  */\nconst sumArrayProduct = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the squares of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 25\n  sumArray([2,3,5,7,11,13,17,19]) => 575\n  sumArray([2,3,5,7,11,13,17]) => 575\n  sumArray([2,3,5,7]) => 49\n  sumArray([2,3,5]) => 25\n  sumArray([2]) => 4\n  sumArray([]) => 0\n  */\nconst sumArrayProductSquared = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the products of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 35\n  sumArray([2,3,5,7,11,13,17,19]) => 1701\n  sumArray([2,3,5,7,11,13,17]) => 1701\n  sumArray([2,3,5,7]) => 49\n  sumArray([2,3,5]) => 25\n  sumArray([2]) => 4\n  sumArray([]) => 0\n  */\nconst sumArrayProductProduct = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the squares of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 25\n  sumArray([2,3,5,7,11,13,17,19]) => 575\n  sumArray([2,3,5,7,11,13,17]) => 575\n  sumArray([2,3,5,7]) => 49\n  sumArray([2,3,5]) => 25\n  sumArray([2]) => 4\n  sumArray([]) => 0\n  */\nconst sumArrayProductSquaredProduct = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i]\n  }\n  return sum\n}\n\n/*\n  Implements a function that takes an array of numbers and returns the sum of the products of the numbers in the array.\n  for example:\n  sumArray([2,3,5,7]) => 35\n  sumArray([2,3,5,7,11,13,17,19]) => 1701\n  sumArray([2,3,5,7,11,13,17]) => 1701\n  sumArray([2,3,5,7]) => 49\n  sumArray([2,3,5]) => 25", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let carry = 0;\n  let i = 0;\n  let j = 0;\n  while (i < a.length || j < b.length) {\n    let temp = 0;\n    if (i < a.length) {\n      temp = a[i] * b[j] + carry;\n      carry = temp / 10;\n      temp = temp % 10;\n      result = result + temp;\n      i++;\n    } else if (j < b.length) {\n      temp = a[i] * b[j] + carry;\n      carry = temp / 10;\n      temp = temp % 10;\n      result = result + temp;\n      j++;\n    } else {\n      carry = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes a string and returns the reverse of it.\n  Assume the input is always valid.\n  Examples:\n  reverse(\"abc\") should return \"cba\".\n  reverse(\"abcdef\") should return \"fedcba\".\n  reverse(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverse = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result = result + s[i];\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"abcdef\") should return \"fedcba\".\n  reverseInPlace(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverseInPlace = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    let temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"abcdef\") should return \"fedcba\".\n  reverseInPlace(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverseInPlace2 = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    let temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"abcdef\") should return \"fedcba\".\n  reverseInPlace(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverseInPlace3 = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    let temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"abcdef\") should return \"fedcba\".\n  reverseInPlace(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverseInPlace4 = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    let temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"abcdef\") should return \"fedcba\".\n  reverseInPlace(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverseInPlace5 = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    let temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"abcdef\") should return \"fedcba\".\n  reverseInPlace(\"abcdefg\") should return \"gfedcba\".\n  */\nconst reverseInPlace6 = (s) => {\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    let temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n  return s;\n};\n\n/*\n  Complete the function that takes a string and returns the string reversed\n  in place.\n  Assume the input is always valid.\n  Examples:\n  reverseInPlace(\"abc\") should return \"cba\".\n  reverseInPlace(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in evne idncies.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of vowels in evne idncies.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants in evne idncies.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels2 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels3 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels4 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels5 = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in evne idncies.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countCons", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let min = ints[0];\n  let max = ints[ints.length - 1];\n  let minDist = Math.abs(num - min);\n  let maxDist = Math.abs(num - max);\n  let closest = min;\n  if (minDist < maxDist) {\n    closest = min;\n  } else {\n    closest = max;\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
