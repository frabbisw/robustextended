[
  {
    "task_id": "JavaScript/62",
    "perturbed_prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n",
    "nominal_prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n",
    "aug_method_name": "EnglishInflectionalVariation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#0"
  },
  {
    "task_id": "JavaScript/70",
    "perturbed_prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(res2) => {\n  var res = [ ], sw = true;\n  while (res2.length) {\n    res.push(sw ? Math.min(... res2) : Math.max(... res2));\n    res2.splice(res2.indexOf(res.at( - 1)), 1);\n   \n",
    "nominal_prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n",
    "aug_method_name": "VarRenamerCB",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#1"
  },
  {
    "task_id": "JavaScript/13",
    "perturbed_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n",
    "nominal_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#2"
  },
  {
    "task_id": "JavaScript/152",
    "perturbed_prompt": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n",
    "nominal_prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n",
    "aug_method_name": "doc2comments",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#3"
  },
  {
    "task_id": "JavaScript/128",
    "perturbed_prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0;\nfor (let _i_2 = 0; _i_2 > 0; _i_2++) {\n    if (arr [ i ] < 0) {\n      n = - n; s-=2 * arr [ i ]}\n    }\n  i < arr.length; i++) {\n    s+=arr [ i ]\n   \n",
    "nominal_prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n",
    "aug_method_name": "DeadCodeInserter",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#4"
  },
  {
    "task_id": "JavaScript/69",
    "perturbed_prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i2 of lst)\n      frq [ i2 ]+=1;\n      var ans = - 1;\n     \n",
    "nominal_prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n",
    "aug_method_name": "VarRenamerCB",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#5"
  },
  {
    "task_id": "JavaScript/144",
    "perturbed_prompt": "/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n",
    "nominal_prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n",
    "aug_method_name": "SwapCharactersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#6"
  },
  {
    "task_id": "JavaScript/129",
    "perturbed_prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n",
    "nominal_prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n",
    "aug_method_name": "TenseTransformationFuture",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#7"
  },
  {
    "task_id": "JavaScript/112",
    "perturbed_prompt": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n",
    "nominal_prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n",
    "aug_method_name": "tab_indent",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#8"
  },
  {
    "task_id": "JavaScript/28",
    "perturbed_prompt": "/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n",
    "nominal_prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n",
    "aug_method_name": "SwapCharactersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#9"
  },
  {
    "task_id": "JavaScript/125",
    "perturbed_prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n\n",
    "nominal_prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n",
    "aug_method_name": "new_line_aftercode",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#10"
  },
  {
    "task_id": "JavaScript/148",
    "perturbed_prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n",
    "nominal_prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n",
    "aug_method_name": "SynonymInsertion",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#11"
  },
  {
    "task_id": "JavaScript/150",
    "perturbed_prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let x2 = n\n  if (x2 == 1 || x2 == 0) {\n    return y}\n  for (let i = 2; i * i <= x2; i++) {\n   \n",
    "nominal_prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n",
    "aug_method_name": "VarRenamerCB",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#12"
  },
  {
    "task_id": "JavaScript/53",
    "perturbed_prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n",
    "nominal_prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n",
    "aug_method_name": "EnglishInflectionalVariation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#13"
  },
  {
    "task_id": "JavaScript/155",
    "perturbed_prompt": "/*Given an integer. return a tuple that has the number of even and odd digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n",
    "nominal_prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n",
    "aug_method_name": "SynonymSubstitution",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#14"
  },
  {
    "task_id": "JavaScript/88",
    "perturbed_prompt": "/*\n  Given an array of non - negative integers, return a transcript of the given array after classify, \n   you will sort the given array in rise order if the sum (beginning index value, final index value) is odd, \n   or sort it in derive holy order if the sum (first index value, last exponent value) cost even. \n\n   Note: \n   * don't transfer the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n",
    "nominal_prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n",
    "aug_method_name": "SynonymSubstitution",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#15"
  },
  {
    "task_id": "JavaScript/23",
    "perturbed_prompt": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n",
    "nominal_prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n",
    "aug_method_name": "tab_indent",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#16"
  },
  {
    "task_id": "JavaScript/130",
    "perturbed_prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n",
    "nominal_prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#17"
  },
  {
    "task_id": "JavaScript/73",
    "perturbed_prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ] != arr.at( - i - 1))\n   \n",
    "nominal_prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#18"
  },
  {
    "task_id": "JavaScript/80",
    "perturbed_prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0;  \\\n  i < s.length - 2; i++)\n",
    "nominal_prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#19"
  },
  {
    "task_id": "JavaScript/52",
    "perturbed_prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n",
    "nominal_prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#20"
  },
  {
    "task_id": "JavaScript/151",
    "perturbed_prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n",
    "nominal_prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n",
    "aug_method_name": "TenseTransformationFuture",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#21"
  },
  {
    "task_id": "JavaScript/52",
    "perturbed_prompt": "/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n",
    "nominal_prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n",
    "aug_method_name": "SynonymInsertion",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#22"
  },
  {
    "task_id": "JavaScript/127",
    "perturbed_prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n",
    "nominal_prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n",
    "aug_method_name": "EnglishInflectionalVariation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#23"
  },
  {
    "task_id": "JavaScript/31",
    "perturbed_prompt": "/*Return true if a givet number is prnme, and false jtherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n",
    "nominal_prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n",
    "aug_method_name": "ButterFingersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#24"
  },
  {
    "task_id": "JavaScript/126",
    "perturbed_prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n",
    "nominal_prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n",
    "aug_method_name": "TenseTransformationFuture",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#25"
  },
  {
    "task_id": "JavaScript/130",
    "perturbed_prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let A = 2; A <= n; A++) {\n    if (A % 2 == 0) {\n      p.push(1 + A / 2)\n     \n",
    "nominal_prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n",
    "aug_method_name": "VarRenamerRN",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#26"
  },
  {
    "task_id": "JavaScript/137",
    "perturbed_prompt": "/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n",
    "nominal_prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n",
    "aug_method_name": "SynonymInsertion",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#27"
  },
  {
    "task_id": "JavaScript/64",
    "perturbed_prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n",
    "nominal_prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#28"
  },
  {
    "task_id": "JavaScript/85",
    "perturbed_prompt": "/*Given a non-empty list of integers lst. lend the even elements that are at odd indices..\n\n\n  Examples:\n      lend([4, 2, 6, 7]) ==> 2 \n  */\nconst lend = (lst) => {\n",
    "nominal_prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n",
    "aug_method_name": "FuncRenameSynonymSub",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#29"
  },
  {
    "task_id": "JavaScript/6",
    "perturbed_prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n",
    "nominal_prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n",
    "aug_method_name": "FuncRenameSwapChar",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#30"
  },
  {
    "task_id": "JavaScript/13",
    "perturbed_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> capitalCoarseDivisor(3, 5)\n  1\n  >>> capitalCoarseDivisor(25, 15)\n  5\n  */\nconst capitalCoarseDivisor = (a, b) => {\n",
    "nominal_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n",
    "aug_method_name": "FuncRenameSynonymSub",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#31"
  },
  {
    "task_id": "JavaScript/13",
    "perturbed_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n\n",
    "nominal_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n",
    "aug_method_name": "new_line_aftercode",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#32"
  },
  {
    "task_id": "JavaScript/13",
    "perturbed_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b2) => {\n  while (b2 != 0) {\n    let temp = a;\n    a = b2;\n   \n",
    "nominal_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n",
    "aug_method_name": "VarRenamerCB",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#33"
  },
  {
    "task_id": "JavaScript/86",
    "perturbed_prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n",
    "nominal_prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n",
    "aug_method_name": "FuncRenameSnakeCase",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#34"
  },
  {
    "task_id": "JavaScript/3",
    "perturbed_prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    for (let _i_0 = 0; _i_0 > 0; _i_0++) {\n      return false;\n      }\n    balance+=op;\n    if (balance < 0) {\n     \n",
    "nominal_prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n",
    "aug_method_name": "DeadCodeInserter",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#35"
  },
  {
    "task_id": "JavaScript/8",
    "perturbed_prompt": "/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n",
    "nominal_prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n",
    "aug_method_name": "SwapCharactersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#36"
  },
  {
    "task_id": "JavaScript/74",
    "perturbed_prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n",
    "nominal_prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#37"
  },
  {
    "task_id": "JavaScript/132",
    "perturbed_prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n",
    "nominal_prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n",
    "aug_method_name": "FuncRenameChangeChar",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#38"
  },
  {
    "task_id": "JavaScript/47",
    "perturbed_prompt": "/*REtuRn median of eLEmenTs in tHe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n",
    "nominal_prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n",
    "aug_method_name": "ChangeCharCase",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#39"
  },
  {
    "task_id": "JavaScript/36",
    "perturbed_prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let l = 0; l < n; l++)\n  if (l % 11 == 0 || l % 13 == 0)\n  ns.push(l);\n \n",
    "nominal_prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n",
    "aug_method_name": "VarRenamerRN",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#40"
  },
  {
    "task_id": "JavaScript/87",
    "perturbed_prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n",
    "nominal_prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n",
    "aug_method_name": "FuncRenameInflectionalVariation",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#41"
  },
  {
    "task_id": "JavaScript/86",
    "perturbed_prompt": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n",
    "nominal_prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n",
    "aug_method_name": "doc2comments",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#42"
  },
  {
    "task_id": "JavaScript/52",
    "perturbed_prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n",
    "nominal_prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#43"
  },
  {
    "task_id": "JavaScript/11",
    "perturbed_prompt": "/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n",
    "nominal_prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n",
    "aug_method_name": "ButterFingersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#44"
  },
  {
    "task_id": "JavaScript/162",
    "perturbed_prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n",
    "nominal_prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#45"
  },
  {
    "task_id": "JavaScript/151",
    "perturbed_prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n",
    "nominal_prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#46"
  },
  {
    "task_id": "JavaScript/95",
    "perturbed_prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0;  \\\n  i < key.length; i++) {\n",
    "nominal_prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#47"
  },
  {
    "task_id": "JavaScript/87",
    "perturbed_prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n",
    "nominal_prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#48"
  },
  {
    "task_id": "JavaScript/87",
    "perturbed_prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n",
    "nominal_prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#49"
  },
  {
    "task_id": "JavaScript/92",
    "perturbed_prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n",
    "nominal_prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n",
    "aug_method_name": "FuncRenameInflectionalVariation",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#50"
  },
  {
    "task_id": "JavaScript/119",
    "perturbed_prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let u2 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      u2++}\n    else {\n      u2--}\n    if (u2 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && u2 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n",
    "nominal_prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n",
    "aug_method_name": "VarRenamerCB",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#51"
  },
  {
    "task_id": "JavaScript/120",
    "perturbed_prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n",
    "nominal_prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#52"
  },
  {
    "task_id": "JavaScript/69",
    "perturbed_prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n",
    "nominal_prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#53"
  },
  {
    "task_id": "JavaScript/112",
    "perturbed_prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n",
    "nominal_prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#54"
  },
  {
    "task_id": "JavaScript/147",
    "perturbed_prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n",
    "nominal_prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n",
    "aug_method_name": "FuncRenameInflectionalVariation",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#55"
  },
  {
    "task_id": "JavaScript/88",
    "perturbed_prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n",
    "nominal_prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#56"
  },
  {
    "task_id": "JavaScript/83",
    "perturbed_prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n",
    "nominal_prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#57"
  },
  {
    "task_id": "JavaScript/32",
    "perturbed_prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item,  \\\n  index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n",
    "nominal_prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#58"
  },
  {
    "task_id": "JavaScript/22",
    "perturbed_prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(VAR_0) => {\n  return VAR_0.filter(x => Number.isInteger(x));\n \n",
    "nominal_prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n",
    "aug_method_name": "VarRenamerNaive",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#59"
  },
  {
    "task_id": "JavaScript/13",
    "perturbed_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n\n  while (b != 0) {\n    let temp = a;\n    a = b;\n",
    "nominal_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n",
    "aug_method_name": "new_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#60"
  },
  {
    "task_id": "JavaScript/135",
    "perturbed_prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length -  \\\n  1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n",
    "nominal_prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#61"
  },
  {
    "task_id": "JavaScript/2",
    "perturbed_prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(r56qDO) => {\n  return r56qDO % 1.0;\n \n",
    "nominal_prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n",
    "aug_method_name": "VarRenamerRN",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#62"
  },
  {
    "task_id": "JavaScript/136",
    "perturbed_prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i]  \\\n  < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n",
    "nominal_prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#63"
  },
  {
    "task_id": "JavaScript/90",
    "perturbed_prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n",
    "nominal_prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#64"
  },
  {
    "task_id": "JavaScript/100",
    "perturbed_prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n",
    "nominal_prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n",
    "aug_method_name": "FuncRenameSwapChar",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#65"
  },
  {
    "task_id": "JavaScript/61",
    "perturbed_prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n",
    "nominal_prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n",
    "aug_method_name": "OperandSwap",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#66"
  },
  {
    "task_id": "JavaScript/77",
    "perturbed_prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\n\nconst iscube = (a) => {\n  a = Math.abs(a);\n",
    "nominal_prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n",
    "aug_method_name": "new_line_afterdoc",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#67"
  },
  {
    "task_id": "JavaScript/9",
    "perturbed_prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n",
    "nominal_prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#68"
  },
  {
    "task_id": "JavaScript/129",
    "perturbed_prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n",
    "nominal_prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n",
    "aug_method_name": "SynonymInsertion",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#69"
  },
  {
    "task_id": "JavaScript/76",
    "perturbed_prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n",
    "nominal_prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n",
    "aug_method_name": "BackTranslation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#70"
  },
  {
    "task_id": "JavaScript/120",
    "perturbed_prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j +  \\\n  1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n",
    "nominal_prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#71"
  },
  {
    "task_id": "JavaScript/40",
    "perturbed_prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n",
    "nominal_prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#72"
  },
  {
    "task_id": "JavaScript/46",
    "perturbed_prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n",
    "nominal_prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n",
    "aug_method_name": "tab_indent",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#73"
  },
  {
    "task_id": "JavaScript/118",
    "perturbed_prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let i2 = word.length - 2; i2 > 0; i2--) {\n    if (\n     !(word [ i2 ] != 'a' && word [ i2 ] != 'e' && word [ i2 ] != 'i' && word [ i2 ] != 'o' && word [ i2 ] != 'u' && word [ i2 ] != 'A' &&\n    word [ i2 ] != 'U' && word [ i2 ] != 'O' && word [ i2 ] != 'I' && word [ i2 ] != 'E')\n     &&\n    (word [ i2 + 1 ] != 'a' && word [ i2 + 1 ] != 'e' && word [ i2 + 1 ] != 'i' && word [ i2 + 1 ] != 'o' && word [ i2 + 1 ] != 'u' && word [ i2 + 1 ] != 'A' &&\n    word [ i2 + 1 ] != 'U' && word [ i2 + 1 ] != 'O' && word [ i2 + 1 ] != 'I' && word [ i2 + 1 ] != 'E')\n     &&\n   \n",
    "nominal_prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n",
    "aug_method_name": "VarRenamerCB",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#74"
  },
  {
    "task_id": "JavaScript/117",
    "perturbed_prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n",
    "nominal_prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n",
    "aug_method_name": "EnglishInflectionalVariation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#75"
  },
  {
    "task_id": "JavaScript/58",
    "perturbed_prompt": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n",
    "nominal_prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n",
    "aug_method_name": "WhitespacePerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#76"
  },
  {
    "task_id": "JavaScript/48",
    "perturbed_prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n",
    "nominal_prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n",
    "aug_method_name": "TenseTransformationPast",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#77"
  },
  {
    "task_id": "JavaScript/22",
    "perturbed_prompt": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n",
    "nominal_prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n",
    "aug_method_name": "doc2comments",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#78"
  },
  {
    "task_id": "JavaScript/13",
    "perturbed_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b != 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n",
    "nominal_prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n",
    "aug_method_name": "ForWhileTransformer",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#79"
  },
  {
    "task_id": "JavaScript/59",
    "perturbed_prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n",
    "nominal_prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n",
    "aug_method_name": "TenseTransformationFuture",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#80"
  },
  {
    "task_id": "JavaScript/80",
    "perturbed_prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(VAR_0) => {\n  if (VAR_0.length < 3)\n  return false;\n  for (let i = 0; i < VAR_0.length - 2; i++)\n \n",
    "nominal_prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n",
    "aug_method_name": "VarRenamerNaive",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#81"
  },
  {
    "task_id": "JavaScript/28",
    "perturbed_prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return  \\\n  strings.join('');\n",
    "nominal_prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n",
    "aug_method_name": "split_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#82"
  },
  {
    "task_id": "JavaScript/156",
    "perturbed_prompt": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n",
    "nominal_prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n",
    "aug_method_name": "WhitespacePerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#83"
  },
  {
    "task_id": "JavaScript/6",
    "perturbed_prompt": "/* iNpUT to thIs FUNCtion IS a strIng rEpReseNted multiPLe GRoUps FoR nEsTed ParENTheSES sEparatED by spacES.\n  FOr eACH Of tHE grOUP, OuTPuT tHe deepEsT lEvel OF NEStINg of parentHEses.\n  e.g. (()()) has maxImuM two LeVelS Of nesTInG wHile ((())) haS tHree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n",
    "nominal_prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n",
    "aug_method_name": "ChangeCharCase",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#84"
  },
  {
    "task_id": "JavaScript/155",
    "perturbed_prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(VAR_0) => {\n      let o = 0\n      let e = 0\n      if (VAR_0 < 0) {\n            VAR_0 = - VAR_0}\n      while (VAR_0 > 0) {\n            if (VAR_0 % 2 == 0) {\n                  e++}\n           \n",
    "nominal_prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n",
    "aug_method_name": "VarRenamerNaive",
    "method_name": "natgen",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#85"
  },
  {
    "task_id": "JavaScript/49",
    "perturbed_prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n",
    "nominal_prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n",
    "aug_method_name": "FuncRenameSwapChar",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#86"
  },
  {
    "task_id": "JavaScript/49",
    "perturbed_prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n",
    "nominal_prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n",
    "aug_method_name": "TenseTransformationFuture",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#87"
  },
  {
    "task_id": "JavaScript/15",
    "perturbed_prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n",
    "nominal_prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n",
    "aug_method_name": "FuncRenameChangeChar",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#88"
  },
  {
    "task_id": "JavaScript/162",
    "perturbed_prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n",
    "nominal_prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n",
    "aug_method_name": "FuncRenameButterFinger",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#89"
  },
  {
    "task_id": "JavaScript/69",
    "perturbed_prompt": "/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n",
    "nominal_prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n",
    "aug_method_name": "SwapCharactersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#90"
  },
  {
    "task_id": "JavaScript/155",
    "perturbed_prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n",
    "nominal_prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n",
    "aug_method_name": "FuncRenameSynonymSub",
    "method_name": "func_name",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#91"
  },
  {
    "task_id": "JavaScript/143",
    "perturbed_prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n",
    "nominal_prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n",
    "aug_method_name": "EnglishInflectionalVariation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#92"
  },
  {
    "task_id": "JavaScript/161",
    "perturbed_prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n",
    "nominal_prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n",
    "aug_method_name": "BackTranslation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#93"
  },
  {
    "task_id": "JavaScript/102",
    "perturbed_prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n\n  for (let i = y; i >= x; i--) {\n\n    if (i % 2 == 0) {return i }\n",
    "nominal_prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n",
    "aug_method_name": "new_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#94"
  },
  {
    "task_id": "JavaScript/108",
    "perturbed_prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n\n    if (h > 0) {\n      p++;\n      continue;\n\n    }\n\n    let k = 0\n\n    h = -h\n\n",
    "nominal_prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n",
    "aug_method_name": "new_lines",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#95"
  },
  {
    "task_id": "JavaScript/102",
    "perturbed_prompt": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n",
    "nominal_prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n",
    "aug_method_name": "SwapCharactersPerturbation",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#96"
  },
  {
    "task_id": "JavaScript/118",
    "perturbed_prompt": "/*You are give a word. Your task is to recover the close vowel that stands between \n   two consonant from the right side of the word (case sensible). \n  \n   Vowels in the beginning and end doesn't reckon. fall empty drawstring if you didn't \n   detect any vowel met the above condition. \n\n   You may assume that the give chain contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n",
    "nominal_prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n",
    "aug_method_name": "SynonymSubstitution",
    "method_name": "nlaugmenter",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#97"
  },
  {
    "task_id": "JavaScript/157",
    "perturbed_prompt": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n",
    "nominal_prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n",
    "aug_method_name": "doc2comments",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#98"
  },
  {
    "task_id": "JavaScript/121",
    "perturbed_prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n",
    "nominal_prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n",
    "aug_method_name": "tab_indent",
    "method_name": "format",
    "naturalness_nominal": -1,
    "naturalness_perturbed": -1,
    "semantic": -1,
    "unique_id": "js#99"
  }
]