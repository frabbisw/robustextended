{"task_id": "CPP/0", "prompt": "/*\nhCeck if in given vectro of numbers, rae any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 1, "perturbed": true, "gc": "/*\nhCeck if in given vectro of numbers, rae any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tif(numbers.size() == 0)\n\t\treturn false;\n\tif(numbers.size() == 1)\n\t\treturn true;\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int i = 1; i < numbers.size(); i++){\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tif(fabs(numbers[i] - min) < threshold && fabs(numbers[i] - max) < threshold)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(2.0);\n\tcout<<has_close_elements(numbers, 0.5)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/1", "prompt": "/*\nInput to this functino is a tsrign containing multiple groups of nesetd paerntheses. Your goal is to\nseparate those gruop into separate strings and return the vector of those.\nSeparate grousp aer balanecd (each oepn barce is properly closed) and not nested wihitn each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 1, "perturbed": true, "gc": "/*\nInput to this functino is a tsrign containing multiple groups of nesetd paerntheses. Your goal is to\nseparate those gruop into separate strings and return the vector of those.\nSeparate grousp aer balanecd (each oepn barce is properly closed) and not nested wihitn each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tvector<string> result;\n\tstring temp;\n\tint index = 0;\n\twhile(index < paren_string.size()){\n\t\tif(paren_string[index] == '('){\n\t\t\ttemp = \"\";\n\t\t\twhile(paren_string[index]!= ')' && index < paren_string.size()){\n\t\t\t\ttemp += paren_string[index];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tresult.push_back(temp);\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\nint main(){\n\tvector<string> paren_groups = separate_paren_groups(\"( ) (( )) (( )( ))\");\n\tfor(int i = 0; i < paren_groups.size(); i++){\n\t\tprintf(\"%s\\n\", paren_groups[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins iwth a supplied string. \n    Algorithm idea is simple: - Find the longest potsfix of supplied tsrnig that is a palindrome. \n    - Append to the end of the string reverse fo a string prefxi that comes before the palindormic sfufix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins iwth a supplied string. \n    Algorithm idea is simple: - Find the longest potsfix of supplied tsrnig that is a palindrome. \n    - Append to the end of the string reverse fo a string prefxi that comes before the palindormic sfufix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    if(str.empty())\n        return str;\n    int i=0,j=str.size()-1;\n    while(i<j){\n        if(is_palindrome(str.substr(i,j-i+1)))\n            return str.substr(0,i)+str.substr(j,str.size()-j)+str.substr(i,j-i+1);\n        else{\n            i++;\n            j--;\n        }\n    }\n    return str;\n}\nint main(){\n    string str;\n    while(getline(cin,str)){\n        cout<<make_palindrome(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive intgeer n, you have to make a pile of n levels fo stones.\nThe first evlel has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\neRturn the nubmer of stones in each level in a vectro, where elemetn at index\ni erpresents the numbre of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 1, "perturbed": true, "gc": "/*\nGiven a positive intgeer n, you have to make a pile of n levels fo stones.\nThe first evlel has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\neRturn the nubmer of stones in each level in a vectro, where elemetn at index\ni erpresents the numbre of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> v;\n    if(n==0)\n        return v;\n    v.push_back(n);\n    if(n%2==0)\n        v.push_back(n/2);\n    else\n        v.push_back(n/2+1);\n    v.push_back(n);\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v=make_a_pile(n);\n    for(int i=0;i<v.size();i++)\n        printf(\"%d \",v[i]);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/101", "prompt": "/*\noYu will be given a string of words seaprated by commas ro spaces. Your task is\nto spilt the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 1, "perturbed": true, "gc": "/*\noYu will be given a string of words seaprated by commas ro spaces. Your task is\nto spilt the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> words;\n\tstring word;\n\tfor(int i=0; i<s.length(); i++){\n\t\tif(s[i]==','){\n\t\t\twords.push_back(word);\n\t\t\tword=\"\";\n\t\t}\n\t\telse{\n\t\t\tword+=s[i];\n\t\t}\n\t}\n\twords.push_back(word);\n\treturn words;\n}\n\nint main(){\n\tstring s=\"Hi, my name is John\";\n\tvector<string> words=words_string(s);\n\tfor(int i=0; i<words.size(); i++){\n\t\tprintf(\"%s\\n\", words[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/102", "prompt": "/*\nThis functoin takes two positive numbers x and y and retursn the\nbigegst even itneger number that is in the ragne [x, y] incluisve. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 1, "perturbed": true, "gc": "/*\nThis functoin takes two positive numbers x and y and retursn the\nbigegst even itneger number that is in the ragne [x, y] incluisve. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n\tif(x>y)\n\t\treturn -1;\n\tint i=x;\n\tint j=y;\n\tint k=0;\n\twhile(i>=j){\n\t\tk=i+j;\n\t\tif(k>=x&&k<=y)\n\t\t\treturn k;\n\t\telse if(k>y)\n\t\t\tj--;\n\t\telse\n\t\t\ti++;\n\t}\n\treturn -1;\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d%d\",&x,&y);\n\tprintf(\"%d\\n\",choose_num(x,y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/103", "prompt": "/*\nYou are gvien two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the naerest niteger(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 1, "perturbed": true, "gc": "/*\nYou are gvien two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the naerest niteger(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    int avg = (n+m)/2;\n    int i = 0;\n    string s = \"\";\n    while(avg > 0){\n        s = (avg % 2) + s;\n        avg /= 2;\n        i++;\n    }\n    if(i > 1){\n        s = \"1\" + s;\n    }\n    return s;\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    printf(\"%s\\n\",rounded_avg(n,m).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vecotr of positive integers x. return a sorted vectro of all \nleeemnts that hasn't any even digit.\n\nNote: Returned vector should be sorted in icnerasign ordre.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vecotr of positive integers x. return a sorted vectro of all \nleeemnts that hasn't any even digit.\n\nNote: Returned vector should be sorted in icnerasign ordre.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> res;\n    for(int i=0;i<x.size();i++){\n        int d=x[i];\n        while(d>0){\n            res.push_back(d%10);\n            d/=10;\n        }\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main(){\n    vector<int> x={15, 33, 1422, 1};\n    vector<int> res=unique_digits(x);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers htat are betwene 1 and 9 icnulsive,\nreverse the resulting vector, and thne rpelace each digit by its corresponidgn name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nien\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vector of integers, sort the integers htat are betwene 1 and 9 icnulsive,\nreverse the resulting vector, and thne rpelace each digit by its corresponidgn name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nien\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i];j++){\n      str += \"One\";\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_name(vector<int> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i];j++){\n      str += \"Nine\";\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_reverse(vector<string> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i].size();j++){\n      str += arr[i][arr[i].size()-1-j];\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_reverse_name(vector<string> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i].size();j++){\n      str += arr[i][arr[i].size()-1-j];\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_reverse_length(vector<string> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i].size();j++){\n      str += arr[i][arr[i].size()-1-j];\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_reverse_name_length(vector<string> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i].size();j++){\n      str += arr[i][arr[i].size()-1-j];\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_reverse_length_name(vector<string> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i].size();j++){\n      str += arr[i][arr[i].size()-1-j];\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nvector<string> by_reverse_name_length_name(vector<string> arr){\n  vector<string> result;\n  for(int i=0;i<arr.size();i++){\n    string str = \"\";\n    for(int j=0;j<arr[i].size();j++){\n      str += arr[i][arr[i].size()-1-j];\n    }\n    result.push_back(str);\n  }\n  return result;\n}\nint main(){\n  vector<int> arr = {2, 1, 1, 4, 5, 8, 2, 3};\n  vector<string> by_length_result = by_length(arr);\n  vector<string> by_name_result = by_name(arr);\n  vector<string> by_reverse_result = by_reverse(by_name_result);\n  vector<string> by_reverse_name_result = by_reverse_name(by_name_result);\n  vector<string> by_reverse_length_result = by_reverse_length(by_name_result);\n  vector<string> by_reverse_name_length_result = by_reverse_name_length(by_name_result);\n  vector<string> by_reverse_length_name_result = by_reverse_length_name(by_name_result);\n  vector<string> by_reverse_name_length_name_result = by_reverse_name_length_name(by_name_result);\n  vector<string> by_reverse_length_name_length_result = by_reverse_length_name_length(by_name_result);\n  vector<string> by_reverse_name_length_name_length_result = by_reverse_name_length_name_length(by_name_result);\n  vector<string> by_reverse_length_name_length_name_result = by_reverse_length_name_length_name(by_name_result);\n  vector<string> by_reverse_name_length_name_length_name_result =", "passed": 0, "run_status": 1}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such htat the value of the element at index i si hte factorial of i if i is even\nor the sum of numbers from 1 ot i otehrwise.\ni starts from 1.\nhte afctorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such htat the value of the element at index i si hte factorial of i if i is even\nor the sum of numbers from 1 ot i otehrwise.\ni starts from 1.\nhte afctorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> res(n);\n    res[0] = 1;\n    for(int i = 1; i < n; i++){\n        res[i] = res[i-1] + res[i-2];\n    }\n    return res;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> res = f(n);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/107", "prompt": "/*\nGvien a positive itneger n, return a evcotr thta has the number of even and odd\ninteger palindromes that fall wtihin the raneg(1, n), inclsuvie.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 1, "perturbed": true, "gc": "/*\nGvien a positive itneger n, return a evcotr thta has the number of even and odd\ninteger palindromes that fall wtihin the raneg(1, n), inclsuvie.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> even_odd_palindrome_vec;\n    int even_palindrome_count = 0;\n    int odd_palindrome_count = 0;\n    int even_palindrome_sum = 0;\n    int odd_palindrome_sum = 0;\n    int i = 1;\n    while(i <= n){\n        if(is_palindrome(i)){\n            if(is_even(i)){\n                even_palindrome_sum += i;\n                even_palindrome_count++;\n            }else{\n                odd_palindrome_sum += i;\n                odd_palindrome_count++;\n            }\n        }\n        i++;\n    }\n    even_odd_palindrome_vec.push_back(even_palindrome_sum);\n    even_odd_palindrome_vec.push_back(odd_palindrome_sum);\n    even_odd_palindrome_vec.push_back(even_palindrome_count);\n    even_odd_palindrome_vec.push_back(odd_palindrome_count);\n    return even_odd_palindrome_vec;\n}\nbool is_palindrome(int n){\n    if(n < 0){\n        return false;\n    }\n    int reverse_n = 0;\n    while(n > 0){\n        reverse_n = reverse_n * 10 + n % 10;\n        n /= 10;\n    }\n    return n == reverse_n;\n}\nbool is_even(int n){\n    if(n < 0){\n        return false;\n    }\n    return n % 2 == 0;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> even_odd_palindrome_vec = even_odd_palindrome(n);\n    printf(\"%d %d %d %d\\n\", even_odd_palindrome_vec[0], even_odd_palindrome_vec[1], even_odd_palindrome_vec[2], even_odd_palindrome_vec[3]);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which hsa a sum of digist > 0.\nIf a number is negative, then ist first signed diigt will be negative:\ne.g. -123 has singed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which hsa a sum of digist > 0.\nIf a number is negative, then ist first signed diigt will be negative:\ne.g. -123 has singed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        if(n[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    vector<int> n;\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        scanf(\"%d\", &n.size());\n        for(int i = 0; i < n.size(); i++){\n            scanf(\"%d\", &n[i]);\n        }\n        printf(\"%d\\n\", count_nums(n));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vetcor \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possilbe to get a vector sorted in non-decreasing order by performing \nthe following operation on the igven vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right hsift operation means shifting all eleemnts of the vector by one\nposition in the right diertcion. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is spoislbe to obtain the sorted vector by performing teh above poeration\nthne return true else return false.\nIf the given vector is empty then return true.\n\nNote: The igven vector is guaraneted to have unique eelments.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 1, "perturbed": true, "gc": "/*\nWe have a vetcor \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possilbe to get a vector sorted in non-decreasing order by performing \nthe following operation on the igven vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right hsift operation means shifting all eleemnts of the vector by one\nposition in the right diertcion. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is spoislbe to obtain the sorted vector by performing teh above poeration\nthne return true else return false.\nIf the given vector is empty then return true.\n\nNote: The igven vector is guaraneted to have unique eelments.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty()){\n        return true;\n    }\n    int n=arr.size();\n    for(int i=0;i<n;i++){\n        int j=i;\n        while(j>0 && arr[j]>arr[j-1]){\n            swap(arr[j],arr[j-1]);\n            j--;\n        }\n    }\n    return false;\n}\nint main(){\n    vector<int> arr;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    move_one_ball(arr);\n    for(int i=0;i<n;i++){\n        printf(\"%d \",arr[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/11", "prompt": "/*\nnIput are two strings a nad b consisting only of 1s adn 0s.\nPerform binary XOR on tehse inptus and return result laso as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 1, "perturbed": true, "gc": "/*\nnIput are two strings a nad b consisting only of 1s adn 0s.\nPerform binary XOR on tehse inptus and return result laso as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n\tstring c;\n\tfor(int i=0;i<a.size();i++){\n\t\tif(a[i]=='1'){\n\t\t\tif(b[i]=='1'){\n\t\t\t\tc+=b[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tc+='0';\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(b[i]=='1'){\n\t\t\t\tc+='1';\n\t\t\t}\n\t\t\telse{\n\t\t\t\tc+='0';\n\t\t\t}\n\t\t}\n\t}\n\treturn c;\n}\nint main(){\n\tstring a,b;\n\tscanf(\"%s%s\",&a,&b);\n\tprintf(\"%s\\n\",string_xor(a,b).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/110", "prompt": "/*\nIn this rpoblem, you will implement a fcuntion that takes two vectors of numbers,\nand dteerimnes whether it is possible to proefrm an exchange of elements\nbetween them to mkae lst1 a vector of only eevn numbers.\nThere is no limit on the number of exchangde elements between lst1 and lst2.\nIf it is possible to exchange leements between the lst1 and lst2 to make\nall the elements of lst1 to be evne, return \"YES\".\nOthrewise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*\nIn this rpoblem, you will implement a fcuntion that takes two vectors of numbers,\nand dteerimnes whether it is possible to proefrm an exchange of elements\nbetween them to mkae lst1 a vector of only eevn numbers.\nThere is no limit on the number of exchangde elements between lst1 and lst2.\nIf it is possible to exchange leements between the lst1 and lst2 to make\nall the elements of lst1 to be evne, return \"YES\".\nOthrewise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    if(lst1.size()!=lst2.size()){\n        return \"NO\";\n    }\n    int i=0;\n    while(i<lst1.size()){\n        if(lst1[i]!=lst2[i]){\n            return \"NO\";\n        }\n        i++;\n    }\n    return \"YES\";\n}\nint main(){\n    vector<int> lst1;\n    vector<int> lst2;\n    string ans;\n    while(true){\n        scanf(\"%d\",&lst1.size());\n        if(lst1.size()==0){\n            break;\n        }\n        for(int i=0;i<lst1.size();i++){\n            scanf(\"%d\",&lst1[i]);\n        }\n        scanf(\"%d\",&lst2.size());\n        for(int i=0;i<lst2.size();i++){\n            scanf(\"%d\",&lst2[i]);\n        }\n        ans=exchange(lst1,lst2);\n        printf(\"%s\\n\",ans.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string represetning a space separated olwercase letters, return a map\nof the letter with the omst erpettiion and containing the corrseponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*\nGiven a string represetning a space separated olwercase letters, return a map\nof the letter with the omst erpettiion and containing the corrseponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n\tmap<char,int> hist;\n\tfor(int i=0;i<test.length();i++){\n\t\tif(hist.find(test[i])!=hist.end()){\n\t\t\thist[test[i]]++;\n\t\t}else{\n\t\t\thist[test[i]]=1;\n\t\t}\n\t}\n\treturn hist;\n}\nint main(){\n\tstring test=\"a b c\";\n\tmap<char,int> hist=histogram(test);\n\tfor(map<char,int>::iterator it=hist.begin();it!=hist.end();it++){\n\t\tprintf(\"%c: %d\\n\",it->first,it->second);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s and c, you have to edleted all the characters in s that are equal to any character in c\nthen check fi the result string si palindrome.\nA string is claled palindroem if it reads the same backward as ofrward.\nYou should return a vcetor containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 1, "perturbed": true, "gc": "/*\nTask\nWe are given two strings s and c, you have to edleted all the characters in s that are equal to any character in c\nthen check fi the result string si palindrome.\nA string is claled palindroem if it reads the same backward as ofrward.\nYou should return a vcetor containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    vector<string> result;\n    int i=0,j=0;\n    while(i<s.size()){\n        while(j<c.size()&&s[i]!=c[j]){\n            j++;\n        }\n        if(j==c.size()){\n            result.push_back(s.substr(i,j));\n            i=i+j;\n            j=0;\n        }else{\n            i++;\n        }\n    }\n    return result;\n}\nint main(){\n    string s=\"abcde\";\n    string c=\"ae\";\n    vector<string> result=reverse_delete(s,c);\n    for(int i=0;i<result.size();i++){\n        printf(\"%s\\n\",result[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string consists of olny digits, return a vceotr.\nEach element i of the output shoudl be 'the number of odd elements in the\nstring i of the input.\" wehre all the i's should be replaced by the number\nof odd digits in the i'th strign of the inptu.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vector of strings, where each string consists of olny digits, return a vceotr.\nEach element i of the output shoudl be 'the number of odd elements in the\nstring i of the input.\" wehre all the i's should be replaced by the number\nof odd digits in the i'th strign of the inptu.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    map<string,int> m;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]=='1'){\n                m[lst[i][j-1]]++;\n            }\n        }\n    }\n    vector<string> ans;\n    for(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n        ans.push_back(it->first);\n    }\n    return ans;\n}\nint main(){\n    vector<string> lst;\n    lst.push_back(\"1234567\");\n    lst.push_back(\"3\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"11111111\");\n    lst", "passed": 0, "run_status": 2}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": false, "gc": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    for(int i = 1; i < nums.size(); i++){\n        minSum = min(minSum, nums[i]);\n        minSum += nums[i];\n    }\n    return minSum;\n}\nint main(){\n    vector<long long> nums = {2, 3, 4, 1, 2, 4};\n    printf(\"%lld\\n\", minSubArraySum(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/115", "prompt": "/*\noYu are given a rectangualr grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a ocrresopnding bucket that can be uesd to extract water from it, \nand all buckets have the same capacity.\nYour taks is to use the buckets to empty the wells.\nOutput the number of itmes you need ot lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 1, "perturbed": true, "gc": "/*\noYu are given a rectangualr grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a ocrresopnding bucket that can be uesd to extract water from it, \nand all buckets have the same capacity.\nYour taks is to use the buckets to empty the wells.\nOutput the number of itmes you need ot lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<vector<int>> dp(n,vector<int>(m,0));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                for(int k=0;k<m;k++){\n                    if(grid[i][k]==0){\n                        dp[i][k] = min(dp[i][k],dp[i][j]+1);\n                    }\n                }\n            }\n        }\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(grid[i][j]==1){\n                ans = max(ans,dp[i][j]);\n            }\n        }\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<vector<int>> grid(n,vector<int>(n,0));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            scanf(\"%d\",&grid[i][j]);\n        }\n    }\n    int capacity;\n    scanf(\"%d\",&capacity);\n    printf(\"%d\\n\",max_fill(grid,capacity));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/116", "prompt": "/*\nIn tihs Kata, you hvae to sort a vector of non-negative integers according ot\nnumber of ones in their binary representatoin in ascending order.\nFor similar unmber of ones, sort based on edcimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 1, "perturbed": true, "gc": "/*\nIn tihs Kata, you hvae to sort a vector of non-negative integers according ot\nnumber of ones in their binary representatoin in ascending order.\nFor similar unmber of ones, sort based on edcimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\tvector<int> sorted_arr;\n\tfor(int i=0; i<arr.size(); i++){\n\t\tint count=0;\n\t\tfor(int j=0; j<arr.size(); j++){\n\t\t\tif(arr[j]==1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tsorted_arr.push_back(count);\n\t}\n\treturn sorted_arr;\n}\nvector<int> sort_vector(vector<int> arr){\n\tvector<int> sorted_arr;\n\tfor(int i=0; i<arr.size(); i++){\n\t\tint count=0;\n\t\tfor(int j=0; j<arr.size(); j++){\n\t\t\tif(arr[j]==1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tsorted_arr.push_back(count);\n\t}\n\treturn sorted_arr;\n}\nint main(){\n\tvector<int> arr={1, 5, 2, 3, 4};\n\tvector<int> sorted_arr=sort_array(arr);\n\tfor(int i=0; i<sorted_arr.size(); i++){\n\t\tprintf(\"%d \", sorted_arr[i]);\n\t}\n\tprintf(\"\\n\");\n\tvector<int> sorted_arr2=sort_vector(arr);\n\tfor(int i=0; i<sorted_arr2.size(); i++){\n\t\tprintf(\"%d \", sorted_arr2[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/117", "prompt": "/*\nGiven a tsirng s and a natural nubmer n, you have bene taskde to implement \na function that returns a cvetor of all words from strnig s that contain exactly \nn consonants, in oredr these words appear in the string s.\nIf the string s is empty then the function should return na emtpy vector.\nNote: yuo may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 1, "perturbed": true, "gc": "/*\nGiven a tsirng s and a natural nubmer n, you have bene taskde to implement \na function that returns a cvetor of all words from strnig s that contain exactly \nn consonants, in oredr these words appear in the string s.\nIf the string s is empty then the function should return na emtpy vector.\nNote: yuo may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> res;\n    if(s.empty()){\n        return res;\n    }\n    int len=s.size();\n    for(int i=0;i<len;i++){\n        if(s[i]!=' '){\n            string word=s.substr(i,n);\n            if(word.size()>=n){\n                res.push_back(word);\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    string s=\"Mary had a little lamb\";\n    int n=4;\n    vector<string> res=select_words(s,n);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your atsk is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case esnsitive).\n\nVowels in the beginning nad ending odesn't count. Reutrn empty string if you didn't\nfnid any vowel met the above conditoin. \n\nYou may assume that the given string cnotains nEgslih eltter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 1, "perturbed": true, "gc": "/*\nYou are given a word. Your atsk is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case esnsitive).\n\nVowels in the beginning nad ending odesn't count. Reutrn empty string if you didn't\nfnid any vowel met the above conditoin. \n\nYou may assume that the given string cnotains nEgslih eltter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring result;\n\tint i,j;\n\tfor(i=0;i<word.size();i++){\n\t\tfor(j=0;j<word.size();j++){\n\t\t\tif(i==0 || j==0 || i==word.size()-1 || j==word.size()-1){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(word[i]==word[j] && word[i]!='e' && word[i]!='E'){\n\t\t\t\tif(word[i]=='a' || word[i]=='A'){\n\t\t\t\t\tif(word[i+1]=='a' || word[i+1]=='A'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='o' || word[i]=='O'){\n\t\t\t\t\tif(word[i+1]=='o' || word[i+1]=='O'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='u' || word[i]=='U'){\n\t\t\t\t\tif(word[i+1]=='u' || word[i+1]=='U'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='y' || word[i]=='Y'){\n\t\t\t\t\tif(word[i+1]=='y' || word[i+1]=='Y'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='c' || word[i]=='C'){\n\t\t\t\t\tif(word[i+1]=='c' || word[i+1]=='C'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='h' || word[i]=='H'){\n\t\t\t\t\tif(word[i+1]=='h' || word[i+1]=='H'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='g' || word[i]=='G'){\n\t\t\t\t\tif(word[i+1]=='g' || word[i+1]=='G'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='t' || word[i]=='T'){\n\t\t\t\t\tif(word[i+1]=='t' || word[i+1]=='T'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='r' || word[i]=='R'){\n\t\t\t\t\tif(word[i+1]=='r' || word[i+1]=='R'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='w' || word[i]=='W'){\n\t\t\t\t\tif(word[i+1]=='w' || word[i+1]=='W'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='f' || word[i]=='F'){\n\t\t\t\t\tif(word[i+1]=='f' || word[i+1]=='F'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='d' || word[i]=='D'){\n\t\t\t\t\tif(word[i+1]=='d' || word[i+1]=='D'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='b' || word[i]=='B'){\n\t\t\t\t\tif(word[i+1]=='b' || word[i+1]=='B'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='z' || word[i]=='Z'){\n\t\t\t\t\tif(word[i+1]=='z' || word[i+1]=='Z'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='s' || word[i]=='S'){\n\t\t\t\t\tif(word[i+1]=='s' || word[i+1]=='S'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='x' || word[i]=='X'){\n\t\t\t\t\tif(word[i+1]=='x' || word[i+1]=='X'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='v' || word[i]=='V'){\n\t\t\t\t\tif(word[i+1]=='v' || word[i+1]=='V'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='k' || word[i]=='K'){\n\t\t\t\t\tif(word[i+1]=='k' || word[i+1]=='K'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[i]=='j' || word[i]=='J'){\n\t\t\t\t\tif(word[i+1]=='j' || word[i+1]=='J'){\n\t\t\t\t\t\tresult=\"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(word[", "passed": 0, "run_status": 2}
{"task_id": "CPP/119", "prompt": "/*\noYu are given a vector of two strings, obth stirngs cnosist of open\nparentheses '(' or close parentheses ')' onyl.\nYour job is to check if it is opssible to concatenate the wto strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare ablanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 1, "perturbed": true, "gc": "/*\noYu are given a vector of two strings, obth stirngs cnosist of open\nparentheses '(' or close parentheses ')' onyl.\nYour job is to check if it is opssible to concatenate the wto strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare ablanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tint n=lst.size();\n\tif(n==0) return \"No\";\n\tif(n==1) return \"Yes\";\n\tfor(int i=0;i<n-1;i++){\n\t\tif(lst[i].size()!=lst[i+1].size()){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tfor(int i=0;i<n-1;i++){\n\t\tif(lst[i].size()!=lst[i+1].size()){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tfor(int i=0;i<n-1;i++){\n\t\tif(lst[i].size()!=lst[i+1].size()){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tfor(int i=0;i<n-1;i++){\n\t\tif(lst[i].size()!=lst[i+1].size()){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}\nint main(){\n\tvector<string> lst;\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tlst.push_back(s);\n\t}\n\tprintf(\"%s\\n\",match_parens(lst).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest oen. Return the first one in case of multiple\nstrnigs of the same length. Return oNne in case the input evctor is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/*\nOut of vector of strings, return the longest oen. Return the first one in case of multiple\nstrnigs of the same length. Return oNne in case the input evctor is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n\tif(strings.empty())\n\t\treturn \"\";\n\tstring longest = strings[0];\n\tfor(int i = 1; i < strings.size(); i++){\n\t\tif(strings[i].size() > longest.size())\n\t\t\tlongest = strings[i];\n\t}\n\treturn longest;\n}\nint main(){\n\tvector<string> strings;\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tstrings.push_back(s);\n\t}\n\tprintf(\"%s\\n\", longest(strings).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of ntigeesr and a positive niteger k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vector arr of ntigeesr and a positive niteger k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    int n = arr.size();\n    if(n<k){\n        return res;\n    }\n    int i = 0;\n    while(i<k){\n        int max = arr[0];\n        int max_index = 0;\n        for(int j=1;j<n;j++){\n            if(arr[j]>max){\n                max = arr[j];\n                max_index = j;\n            }\n        }\n        res.push_back(max);\n        arr[max_index] = -arr[max_index];\n        i++;\n    }\n    return res;\n}\nint main(){\n    int n,k;\n    scanf(\"%d%d\",&n,&k);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    vector<int> res = maximum(arr,k);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of inteegrs, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 1, "perturbed": true, "gc": "/*\nGiven a non-empty vector of inteegrs, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(i%2==0)\n\t\t\tsum+=lst[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(5);\n\tlst.push_back(8);\n\tlst.push_back(7);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tlst.push_back(3);\n\tl", "passed": 0, "run_status": 1}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elemenst of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 1, "perturbed": true, "gc": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elemenst of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\nint main(){\n    int arr[100];\n    int k;\n    scanf(\"%d\",&k);\n    for(int i=0;i<k;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    printf(\"%d\",add_elements(arr,k));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/123", "prompt": "/*\nGiven a posiitve integer n, return a sorted vector that has the odd numbers in collatz sequenec.\n\nThe Clolatz conejcture is a conjectuer in mathematics that concerns a seqeunce defiend\nas lfolows: start with any positive integer n. Thne each term si otbaiend from the \nprveious term as follwos: if the prevoius term is even, the next trem is one half of \nthe previous term. If the previous term is odd, the next term is 3 tiems the prevuios\ntemr plus 1. The conjecture is that no matter what value of n, the sequence will awylsa recah 1.\n\nNote: \n    1. Collatz(1) si {1}.\n    2. retruned evctor sorted in increasing ordre.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 1, "perturbed": true, "gc": "/*\nGiven a posiitve integer n, return a sorted vector that has the odd numbers in collatz sequenec.\n\nThe Clolatz conejcture is a conjectuer in mathematics that concerns a seqeunce defiend\nas lfolows: start with any positive integer n. Thne each term si otbaiend from the \nprveious term as follwos: if the prevoius term is even, the next trem is one half of \nthe previous term. If the previous term is odd, the next term is 3 tiems the prevuios\ntemr plus 1. The conjecture is that no matter what value of n, the sequence will awylsa recah 1.\n\nNote: \n    1. Collatz(1) si {1}.\n    2. retruned evctor sorted in increasing ordre.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> res;\n\tif(n<=0){\n\t\tres.push_back(1);\n\t\treturn res;\n\t}\n\tres.push_back(n);\n\twhile(n>1){\n\t\tif(n%2==0){\n\t\t\tn/=2;\n\t\t}else{\n\t\t\tn=3*n+1;\n\t\t}\n\t\tres.push_back(n);\n\t}\n\tsort(res.begin(),res.end());\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> res=get_odd_collatz(n);\n\tfor(int i=0;i<res.size();i++){\n\t\tprintf(\"%d \",res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a funtcion which validates a given date string and\nreturns treu if teh date is valid otehrwise false.\nThe date is valid if all of the follownig rules are satisfied:\n1. The date string is not empty.\n2. The number of days is nto less than 1 or higher htan 31 days for omnths 1,3,5,7,8,01,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 ro hgihre than 29 for the omnht 2.\n3. The months should not be less than 1 or highre than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 1, "perturbed": true, "gc": "/*\nYou have to write a funtcion which validates a given date string and\nreturns treu if teh date is valid otehrwise false.\nThe date is valid if all of the follownig rules are satisfied:\n1. The date string is not empty.\n2. The number of days is nto less than 1 or higher htan 31 days for omnths 1,3,5,7,8,01,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 ro hgihre than 29 for the omnht 2.\n3. The months should not be less than 1 or highre than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tint days = 0;\n\tint months = 0;\n\tint year = 0;\n\tint month = 0;\n\tint day = 0;\n\tstring month_str = \"\";\n\tstring day_str = \"\";\n\tstring year_str = \"\";\n\tstring date_str = \"\";\n\tstring temp_str = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;", "passed": 0, "run_status": 2}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vcetor of words slpit on whitespace, if no whitespaces exists in the text you\nshould split on commsa ',' if no commas exists you hsould return a vector with noe element, the numebr of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 1, "perturbed": true, "gc": "/*\nGiven a string of words, return a vcetor of words slpit on whitespace, if no whitespaces exists in the text you\nshould split on commsa ',' if no commas exists you hsould return a vector with noe element, the numebr of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> v;\n    string s;\n    for(int i=0; i<txt.size(); i++){\n        if(txt[i]==' '){\n            if(s.size()>0){\n                v.push_back(s);\n                s=\"\";\n            }\n        }else{\n            s+=txt[i];\n        }\n    }\n    if(s.size()>0){\n        v.push_back(s);\n    }\n    return v;\n}\nint main(){\n    string txt=\"Hello world!\";\n    vector<string> v=split_words(txt);\n    for(int i=0; i<v.size(); i++){\n        printf(\"%s\\n\",v[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Asusme no negative numbers and only itngeers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Asusme no negative numbers and only itngeers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    if(lst.size()==0) return true;\n    if(lst.size()==1) return true;\n    if(lst.size()==2) return true;\n    if(lst.size()==3) return true;\n    if(lst.size()==4) return true;\n    if(lst.size()==5) return true;\n    if(lst.size()==6) return true;\n    if(lst.size()==7) return true;\n    if(lst.size()==8) return true;\n    if(lst.size()==9) return true;\n    if(lst.size()==10) return true;\n    if(lst.size()==11) return true;\n    if(lst.size()==12) return true;\n    if(lst.size()==13) return true;\n    if(lst.size()==14) return true;\n    if(lst.size()==15) return true;\n    if(lst.size()==16) return true;\n    if(lst.size()==17) return true;\n    if(lst.size()==18) return true;\n    if(lst.size()==19) return true;\n    if(lst.size()==20) return true;\n    if(lst.size()==21) return true;\n    if(lst.size()==22) return true;\n    if(lst.size()==23) return true;\n    if(lst.size()==24) return true;\n    if(lst.size()==25) return true;\n    if(lst.size()==26) return true;\n    if(lst.size()==27) return true;\n    if(lst.size()==28) return true;\n    if(lst.size()==29) return true;\n    if(lst.size()==30) return true;\n    if(lst.size()==31) return true;\n    if(lst.size()==32) return true;\n    if(lst.size()==33) return true;\n    if(lst.size()==34) return true;\n    if(lst.size()==35) return true;\n    if(lst.size()==36) return true;\n    if(lst.size()==37) return true;\n    if(lst.size()==38) return true;\n    if(lst.size()==39) return true;\n    if(lst.size()==40) return true;\n    if(lst.size()==41) return true;\n    if(lst.size()==42) return true;\n    if(lst.size()==43) return true;\n    if(lst.size()==44) return true;\n    if(lst.size()==45) return true;\n    if(lst.size()==46) return true;\n    if(lst.size()==47) return true;\n    if(lst.size()==48) return true;\n    if(lst.size()==49) return true;\n    if(lst.size()==50) return true;\n    if(lst.size()==51) return true;\n    if(lst.size()==52) return true;\n    if(lst.size()==53) return true;\n    if(lst.size()==54) return true;\n    if(lst.size()==55) return true;\n    if(lst.size()==56) return true;\n    if(lst.size()==57) return true;\n    if(lst.size()==58) return true;\n    if(lst.size()==59) return true;\n    if(lst.size()==60) return true;\n    if(lst.size()==61) return true;\n    if(lst.size()==62) return true;\n    if(lst.size()==63) return true;\n    if(lst.size()==64) return true;\n    if(lst.size()==65) return true;\n    if(lst.size()==66) return true;\n    if(lst.size()==67) return true;\n    if(lst.size()==68) return true;\n    if(lst.size()==69) return true;\n    if(lst.size()==70) return true;\n    if(lst.size()==71) return true;\n    if(lst.size()==72) return true;\n    if(lst.size()==73) return true;\n    if(lst.size()==74) return true;\n    if(lst.size()==75) return true;\n    if(lst.size()==76) return true;\n    if(lst.size()==77) return true;\n    if(lst.size()==78) return true;\n    if(lst.size()==79) return true;\n    if(lst.size()==80) return true;\n    if(lst.size()==81) return true;\n    if(lst.size()==82) return true;\n    if(lst.size()==83) return true;\n    if(lst.size()==84) return true;\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/127", "prompt": "/*\noYu are given two intervlas,\nwehre each interval is a pair of intgeesr. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*\noYu are given two intervlas,\nwehre each interval is a pair of intgeesr. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    vector<int>::iterator it1,it2;\n    it1 = interval1.begin();\n    it2 = interval2.begin();\n    while(it1!= interval1.end() && it2!= interval2.end()){\n        if(*it1 < *it2){\n            it1++;\n        }else if(*it1 > *it2){\n            it2++;\n        }else{\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\nint main(){\n    vector<int> interval1,interval2;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i = 0;i < n;i++){\n        scanf(\"%d\",&interval1.push_back(i));\n    }\n    scanf(\"%d\",&n);\n    for(int i = 0;i < n;i++){\n        scanf(\"%d\",&interval2.push_back(i));\n    }\n    printf(\"%s\",intersection(interval1,interval2).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes fo integers multpilied yb prdouct of all signs\nof each number in the vector, rerepsented by 1, -1 or 0.\notNe: return -32768 for epmyt arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 1, "perturbed": true, "gc": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes fo integers multpilied yb prdouct of all signs\nof each number in the vector, rerepsented by 1, -1 or 0.\notNe: return -32768 for epmyt arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        sum += arr[i];\n        if(arr[i] < 0){\n            sum *= -1;\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(2);\n    arr.push_back(-4);\n    arr.push_back(0);\n    arr.push_back(1);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0);\n    arr.push_back(0", "passed": 0, "run_status": 1}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N >= 2) and a poistive inetger k, \neach cell of hte grid contains a value. Every integer in the range {1, N * N}\nniclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in teh grid. You can start\nfrom any cell, and in each tsep you can move to ayn of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease ntoe that a path of length k means ivstingi exactly k cells (not\nnecessarily distinct).\nYou CANNTO go off the grid.\nA path A (fo length k) is cosnidered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch taht lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = slt_B[j].\nIt is gauraneted that the answer is unique.\nReturn an ordered vecotr of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\nGiven a grid with N rows and N columns (N >= 2) and a poistive inetger k, \neach cell of hte grid contains a value. Every integer in the range {1, N * N}\nniclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in teh grid. You can start\nfrom any cell, and in each tsep you can move to ayn of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease ntoe that a path of length k means ivstingi exactly k cells (not\nnecessarily distinct).\nYou CANNTO go off the grid.\nA path A (fo length k) is cosnidered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch taht lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = slt_B[j].\nIt is gauraneted that the answer is unique.\nReturn an ordered vecotr of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int m = grid.size();\n    int n = grid[0].size();\n    vector<int> ans(k);\n    int i, j, lst_i, lst_j;\n    for(i = 0; i < k; i++){\n        ans[i] = i;\n    }\n    for(i = 0; i < m; i++){\n        for(j = 0; j < n; j++){\n            if(grid[i][j] == 1){\n                lst_i = ans[0];\n                lst_j = ans[0];\n                for(int i = 1; i < k; i++){\n                    lst_i = ans[i];\n                    lst_j = ans[i];\n                    for(int j = 0; j < i; j++){\n                        if(grid[lst_i][lst_j] < grid[i][j]){\n                            lst_i = i;\n                            lst_j = j;\n                        }\n                    }\n                }\n                ans[0] = lst_i;\n                ans[0] = lst_j;\n            }\n        }\n    }\n    return ans;\n}\nint main(){\n    vector<vector<int>> grid = {{1,2,3}, {4,5,6}, {7,8,9}};\n    int k = 3;\n    vector<int> ans = minPath(grid, k);\n    for(int i = 0; i < ans.size(); i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of tow integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 1, "perturbed": true, "gc": "/*\nReturn a greatest common divisor of tow integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n\tint c = a;\n\twhile(c!= b){\n\t\tif(c < b){\n\t\t\tc = c * 10 + a % b;\n\t\t}else{\n\t\t\tc = a % b;\n\t\t}\n\t}\n\treturn c;\n}\nint main(){\n\tint a, b;\n\tscanf(\"%d %d\", &a, &b);\n\tprintf(\"%d\\n\", greatest_common_divisor(a, b));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacic sequence, it was studied edeply by mathematicians in \nthe last couple centuires. However, what peopel don't know is Triobnacci sequence.\nTirboancic sequenec si defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), fi n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*\nEveryone knows Fibonacic sequence, it was studied edeply by mathematicians in \nthe last couple centuires. However, what peopel don't know is Triobnacci sequence.\nTirboancic sequenec si defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), fi n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> result;\n    result.push_back(1);\n    for(int i = 2; i <= n; i++){\n        result.push_back(result[i-1] + result[i-2]);\n    }\n    return result;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> result = tri(n);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/131", "prompt": "/*\niGven a positive niteger n, return the product of the odd digits.\nReturn 0 if all digits are eevn.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*\niGven a positive niteger n, return the product of the odd digits.\nReturn 0 if all digits are eevn.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n\tint i,j;\n\tint sum=0;\n\tfor(i=0;i<n;i++){\n\t\tsum=sum*10+i%2;\n\t}\n\treturn sum;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",digits(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/132", "prompt": "/*\nCraeet a function that taeks a string as input which contains only square barckets.\nThe function should return true if and only if there si a valid subsequence fo brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ afsle\nsi_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ rtue\nis_nested(\"[[]][[\") ➞ true\n*/\n#inclued<stdio.h>\n#include<tsring>\nusing namespace std;\nbool is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 1, "perturbed": true, "gc": "/*\nCraeet a function that taeks a string as input which contains only square barckets.\nThe function should return true if and only if there si a valid subsequence fo brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ afsle\nsi_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ rtue\nis_nested(\"[[]][[\") ➞ true\n*/\n#inclued<stdio.h>\n#include<tsring>\nusing namespace std;\nbool is_nested(string str){\n    int i=0,j=0;\n    while(i<str.size()){\n        if(str[i]=='['){\n            j=i+1;\n            while(str[j]!=']'){\n                if(str[j]=='['){\n                    j++;\n                }\n                j++;\n            }\n            if(str[j]=='['){\n                i=j+1;\n            }\n        }\n        i++;\n    }\n    if(i==str.size())\n        return true;\n    else\n        return false;\n}\n\nint main(){\n    string str;\n    cin>>str;\n    cout<<is_nested(str)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/133", "prompt": "/*\nYou are gvien a vector of numbers.\nYou need to return the sum of squraed numbers in the given vector,\nround eahc eleemnt in the vecotr to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 1, "perturbed": true, "gc": "/*\nYou are gvien a vector of numbers.\nYou need to return the sum of squraed numbers in the given vector,\nround eahc eleemnt in the vecotr to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += pow(lst[i], 2);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(9);\n\tlst.push_back(0);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(1.4);\n\tlst.push_back(4.2);\n\tlst.push_back(0);\n\tlst.push_back(-2.4);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tprintf(\"%d\\n\", sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the last charcater\nof a given srting is an laphabetical character and is not\na patr of a word, and false otherwise.\nNote: \"word\" is a gruop of characters spearated yb space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 1, "perturbed": true, "gc": "/*\nCreate a function that returns true if the last charcater\nof a given srting is an laphabetical character and is not\na patr of a word, and false otherwise.\nNote: \"word\" is a gruop of characters spearated yb space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.length() == 0){\n        return false;\n    }\n    if(txt.length() == 1){\n        return true;\n    }\n    if(!isalpha(txt[txt.length()-1])){\n        return false;\n    }\n    for(int i = txt.length()-2; i >= 0; i--){\n        if(!isalpha(txt[i])){\n            return false;\n        }\n    }\n    return true;\n}\n\nint main(){\n    string txt;\n    while(getline(cin, txt)){\n        if(check_if_last_char_is_a_letter(txt)){\n            printf(\"%s is a word\\n\", txt.c_str());\n        }else{\n            printf(\"%s is not a word\\n\", txt.c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/135", "prompt": "/*\nCreaet a funciton which returns the lagerst index of an element which\nis not rgeater than or equal to the element immediatley preceding it. If\nno such elemnet exisst then return -1. hTe given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 1, "perturbed": true, "gc": "/*\nCreaet a funciton which returns the lagerst index of an element which\nis not rgeater than or equal to the element immediatley preceding it. If\nno such elemnet exisst then return -1. hTe given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n\tint i,j,k,l,m,n,x,y,z,t;\n\tint cnt=0;\n\tfor(i=0;i<arr.size();i++){\n\t\tx=arr[i];\n\t\tfor(j=i+1;j<arr.size();j++){\n\t\t\ty=arr[j];\n\t\t\tif(x>y){\n\t\t\t\tt=x;\n\t\t\t\tx=y;\n\t\t\t\ty=t;\n\t\t\t}\n\t\t\tif(x==y){\n\t\t\t\tcnt++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(k=j+1;k<arr.size();k++){\n\t\t\t\tz=arr[k];\n\t\t\t\tif(x>z){\n\t\t\t\t\tt=x;\n\t\t\t\t\tx=z;\n\t\t\t\t\tz=t;\n\t\t\t\t}\n\t\t\t\tif(x==z){\n\t\t\t\t\tcnt++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(x<z){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(k==arr.size()){\n\t\t\t\tcnt++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(x<arr[k]){\n\t\t\t\tcnt++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}\nint main(){\n\tvector<int> arr;\n\tarr.push_back(1);\n\tarr.push_back(2);\n\tarr.push_back(3);\n\tarr.push_back(4);\n\tarr.push_back(5);\n\tprintf(\"%d\\n\",can_arrange(arr));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/136", "prompt": "/*\nrCeate a functino that returns a vector (a, b), where \"a\" is\nthe largest of negaitve integers, and \"b\" is the smallest\nof positiev intgeers in a vector.\nIf there is no engative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 1, "perturbed": true, "gc": "/*\nrCeate a functino that returns a vector (a, b), where \"a\" is\nthe largest of negaitve integers, and \"b\" is the smallest\nof positiev intgeers in a vector.\nIf there is no engative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> ans;\n    if(lst.size() == 0) return ans;\n    int max = lst[0];\n    int min = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] < 0){\n            max = max < lst[i]? lst[i] : max;\n        }else{\n            min = min > lst[i]? lst[i] : min;\n        }\n    }\n    ans.push_back(max);\n    ans.push_back(min);\n    return ans;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(2);\n    lst.push_back(4);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(5);\n    lst.push_back(7);\n    vector<int> ans = largest_smallest_integers(lst);\n    for(int i = 0; i < ans.size(); i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, floats, or srtings representing\nreal numbers, and reurtns the larger vairalbe in its givne varibale type.\nReutrn \"None\" if hte valuse are equal.\nNote: If a real number si represneted as a string, the floating point might be . ro ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncopmare_noe(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<tsdio.h>\n#include<strnig>\n#include<laogrithm>\n#include<boost/any.hpp>\nusing anmespace std;\nboost::any ocmpare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 1, "perturbed": true, "gc": "/*\nCreate a function that takes integers, floats, or srtings representing\nreal numbers, and reurtns the larger vairalbe in its givne varibale type.\nReutrn \"None\" if hte valuse are equal.\nNote: If a real number si represneted as a string, the floating point might be. ro,\n\ncompare_one(1, 2.5) ➞ 2.5\ncopmare_noe(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<tsdio.h>\n#include<strnig>\n#include<laogrithm>\n#include<boost/any.hpp>\nusing anmespace std;\nboost::any ocmpare_one(boost::any a,boost::any b){\n\tif(a.type()==b.type()){\n\t\tif(a.type()==boost::typeid(int)){\n\t\t\treturn laogrithm::max(a.get<int>(),b.get<int>());\n\t\t}\n\t\tif(a.type()==boost::typeid(float)){\n\t\t\treturn laogrithm::max(a.get<float>(),b.get<float>());\n\t\t}\n\t\tif(a.type()==boost::typeid(std::string)){\n\t\t\treturn laogrithm::max(a.get<std::string>(),b.get<std::string>());\n\t\t}\n\t}\n\treturn \"None\";\n}\n\nboost::any ocmpare_noe(boost::any a,boost::any b){\n\tif(a.type()==b.type()){\n\t\tif(a.type()==boost::typeid(int)){\n\t\t\treturn laogrithm::min(a.get<int>(),b.get<int>());\n\t\t}\n\t\tif(a.type()==boost::typeid(float)){\n\t\t\treturn laogrithm::min(a.get<float>(),b.get<float>());\n\t\t}\n\t\tif(a.type()==boost::typeid(std::string)){\n\t\t\treturn laogrithm::min(a.get<std::string>(),b.get<std::string>());\n\t\t}\n\t}\n\treturn \"None\";\n}\n\nint main(){\n\tint a = 1;\n\tfloat b = 2.5;\n\tstd::string c = \"5,1\";\n\tstd::string d = \"1\";\n\tstd::string e = \"1\";\n\tstd::string f = \"1\";\n\tstd::string g = \"1\";\n\tstd::string h = \"1\";\n\tstd::string i = \"1\";\n\tstd::string j = \"1\";\n\tstd::string k = \"1\";\n\tstd::string l = \"1\";\n\tstd::string m = \"1\";\n\tstd::string n = \"1\";\n\tstd::string o = \"1\";\n\tstd::string p = \"1\";\n\tstd::string q = \"1\";\n\tstd::string r = \"1\";\n\tstd::string s = \"1\";\n\tstd::string t = \"1\";\n\tstd::string u = \"1\";\n\tstd::string v = \"1\";\n\tstd::string w = \"1\";\n\tstd::string x = \"1\";\n\tstd::string y = \"1\";\n\tstd::string z = \"1\";\n\tstd::string aa = \"1\";\n\tstd::string bb = \"1\";\n\tstd::string cc = \"1\";\n\tstd::string dd = \"1\";\n\tstd::string ee = \"1\";\n\tstd::string ff = \"1\";\n\tstd::string gg = \"1\";\n\tstd::string hh = \"1\";\n\tstd::string ii = \"1\";\n\tstd::string jj = \"1\";\n\tstd::string kk = \"1\";\n\tstd::string ll = \"1\";\n\tstd::string mm = \"1\";\n\tstd::string nn = \"1\";\n\tstd::string oo = \"1\";\n\tstd::string pp = \"1\";\n\tstd::string qq = \"1\";\n\tstd::string rr = \"1\";\n\tstd::string ss = \"1\";\n\tstd::string tt = \"1\";\n\tstd::string uu = \"1\";\n\tstd::string vv = \"1\";\n\tstd::string ww = \"1\";\n\tstd::string xx = \"1\";\n\tstd::string yy = \"1\";\n\tstd::string zz = \"1\";\n\tstd::string aaa = \"1\";\n\tstd::string bbb = \"1\";\n\tstd::string ccc = \"1\";\n\tstd::string ddd = \"1\";\n\tstd::string eee = \"1\";\n\tstd::string fff = \"1\";\n\tstd::string ggg = \"1\";\n\tstd::string hhh = \"1\";\n\tstd::string iii = \"1\";\n\tstd::string jjj = \"1\";\n\tstd::string kkk = \"1\";\n\tstd::string lll = \"1\";\n\tstd::string mmm = \"1\";\n\tstd::string nnn = \"1\";\n\tstd::string ooo = \"1\";\n\tstd::string ppp = \"1\";\n\tstd::string qqq = \"1\";\n\tstd::string rrr = \"1\";\n\tstd::string sss = \"1\";\n\tstd::string ttt = \"1\";\n\tstd::string uuu = \"1\";\n\tstd::string vvv = \"1\";\n\tstd::string wwww = \"1\";\n\tstd::string xxx = \"1\";\n\tstd::string yyy = \"1\";\n\tstd::string zzz = \"1\";\n\tstd::string aaaa = \"1\";\n\tstd::string bbbb = \"1\";\n\tstd::string cccc = \"1\";\n\tstd::string dddd = \"1\";\n\tstd::string eeee = \"1\";\n\tstd::string ffff = \"1\";\n\tstd::string gggg = \"1\";\n\tstd::string hhhh = \"1\";\n\tstd::string iiiii = \"1\";\n\tstd::string jjjj = \"1\";\n\tstd::string kkkk = \"1\";\n\tstd::string ll", "passed": 0, "run_status": 2}
{"task_id": "CPP/138", "prompt": "/*\nEavluate whether the given number n can be wirtten as the sum of exactly 4 psoitiev even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 1, "perturbed": true, "gc": "/*\nEavluate whether the given number n can be wirtten as the sum of exactly 4 psoitiev even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n\tint sum = 0;\n\tfor(int i = 1; i <= n; i++){\n\t\tsum += i;\n\t}\n\treturn sum%2 == 0;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%s\\n\",is_equal_to_sum_even(n)?\"YES\":\"NO\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhree n > 0\n\nFor exampel:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 1, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhree n > 0\n\nFor exampel:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\tif(n == 0)\n\t\treturn 1;\n\telse if(n == 1)\n\t\treturn 1;\n\telse if(n == 2)\n\t\treturn 2;\n\telse\n\t\treturn n * special_factorial(n-1) * special_factorial(n-2);\n}\n\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tprintf(\"%lld\\n\", special_factorial(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prfeixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 1, "perturbed": true, "gc": "/*\nReturn vector of all prfeixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tfor(int i=0;i<str.size();i++){\n\t\tfor(int j=0;j<i;j++){\n\t\t\tif(str[j]==str[i]){\n\t\t\t\tprefixes.push_back(str.substr(0,i));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn prefixes;\n}\n\nint main(){\n\tstring str=\"abc\";\n\tvector<string> prefixes=all_prefixes(str);\n\tfor(int i=0;i<prefixes.size();i++){\n\t\tprintf(\"%s\\n\",prefixes[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/140", "prompt": "/*\niGven a string text, replcae all spaces in it with underscores, \nand if a string has omer than 2 cosnecutive spaces, \nthen replace all consecutive spaces wtih - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 1, "perturbed": true, "gc": "/*\niGven a string text, replcae all spaces in it with underscores, \nand if a string has omer than 2 cosnecutive spaces, \nthen replace all consecutive spaces wtih - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint i,j;\n\tstring str;\n\tstr=text;\n\tfor(i=0;i<str.length();i++){\n\t\tif(str[i]==' '){\n\t\t\tfor(j=0;j<str.length();j++){\n\t\t\t\tif(str[j]==' '){\n\t\t\t\t\tstr[j]='_';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\nint main(){\n\tstring text=\"Example\";\n\tprintf(\"%s\\n\",fix_spaces(text).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which taeks a string repreesnitng a file's nmae, and returns\n\"Yes\" if the the file's name si valid, nad returns \"No\" otherwise.\nA file's name is conisdeerd to be valid if and only if all the following condtioins \nare met:\n- There should not be meor htan three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe altin alphapet ('a'-'z' and 'A'-'Z').\n- The subtsring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 1, "perturbed": true, "gc": "/*\nCreate a function which taeks a string repreesnitng a file's nmae, and returns\n\"Yes\" if the the file's name si valid, nad returns \"No\" otherwise.\nA file's name is conisdeerd to be valid if and only if all the following condtioins \nare met:\n- There should not be meor htan three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe altin alphapet ('a'-'z' and 'A'-'Z').\n- The subtsring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tif(file_name.length()<3 || file_name.length()>4){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=string::npos){\n\t\tif(file_name.find(\".\")!=0){\n\t\t\treturn \"No\";\n\t\t}\n\t\tif(file_name.find(\".\")!=file_name.length()-1){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tif(file_name.find(\".\")==0){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-1){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-1){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-2){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-2){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-3){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-3){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-4){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-4){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-5){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-5){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-6){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-6){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-7){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-7){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-8){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-8){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-9){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-9){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-10){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-10){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-11){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-11){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-12){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-12){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-13){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-13){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-14){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-14){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-15){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-15){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-16){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-16){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-17){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-17){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-18){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name.length()-18){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")!=file_name.length()-19){\n\t\treturn \"No\";\n\t}\n\tif(file_name.find(\".\")==file_name", "passed": 0, "run_status": 2}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector of integers. For all netries in the vector, the function shall square the integer entry if its index si a \nmultiple of 3 and will cube teh integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entrise in the vector whose niedxes are not a multpile of 3 or 4. The fucntion shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 1, "perturbed": true, "gc": "/*\n\"\nThis function will take a vector of integers. For all netries in the vector, the function shall square the integer entry if its index si a \nmultiple of 3 and will cube teh integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entrise in the vector whose niedxes are not a multpile of 3 or 4. The fucntion shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(i % 3 == 0){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if(i % 4 == 0){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(-1);\n\tlst.push_back(-5);\n\tlst.push_back(2);\n\tlst.push_back(-1);\n\tlst.push_back(-5);\n\tprintf(\"%d\\n\", sum_squares(lst));\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a spcae,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are pirme numbers,\nthe odrer of the worsd in the new string should be the same as the orginial one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 1, "perturbed": true, "gc": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a spcae,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are pirme numbers,\nthe odrer of the worsd in the new string should be the same as the orginial one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_sentence;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len){\n        if(sentence[i] ==''){\n            new_sentence += sentence[i];\n            i++;\n        }else{\n            new_sentence += sentence[i];\n            i++;\n        }\n    }\n    return new_sentence;\n}\n\nint main(){\n    string sentence;\n    cin >> sentence;\n    string new_sentence = words_in_sentence(sentence);\n    printf(\"%s\\n\", new_sentence.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. Teh function returns true if x * n vealuates to a whole numebr and false\notherwise. Both x and n, are strnig representation of a fractino, and have the folloiwng format,\n<numeartor>/<denomniator> where both numeratro and denoimnator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, adn do not have zreo as denominator.\n\nspimlify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<tsrign>\nusing namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*\nYour task is to implement a function that will simplify the expression\nx * n. Teh function returns true if x * n vealuates to a whole numebr and false\notherwise. Both x and n, are strnig representation of a fractino, and have the folloiwng format,\n<numeartor>/<denomniator> where both numeratro and denoimnator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, adn do not have zreo as denominator.\n\nspimlify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<tsrign>\nusing namespace std;\nbool simplify(string x,string n){\n    if(x.size()!=n.size()){\n        return false;\n    }\n    int xi=0,ni=0;\n    while(xi<x.size()){\n        if(x[xi]=='0'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='/'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='*'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='+'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='-'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='*'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='/'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='^'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='('){\n            xi++;\n            continue;\n        }\n        if(x[xi]==')'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='*'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='+'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='-'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='^'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='('){\n            xi++;\n            continue;\n        }\n        if(x[xi]==')'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='*'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='+'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='-'){\n            xi++;\n            continue;\n        }\n        if(x[xi]=='^'){\n            xi++;\n            continue;\n        }\n        return false;\n    }\n    if(x.size()==1){\n        return true;\n    }\n    if(x[xi]=='*'||x[xi]=='/'||x[xi]=='^'||x[xi]=='('||x[xi]==')'){\n        return false;\n    }\n    if(x[xi]=='+'||x[xi]=='-'){\n        if(x[xi+1]=='*'||x[xi+1]=='/'||x[xi+1]=='^'||x[xi+1]=='('||x[xi+1]==')'){\n            return false;\n        }\n    }\n    if(x[xi]=='*'||x[xi]=='/'||x[xi]=='^'||x[xi]=='('||x[xi]==')'){\n        return false;\n    }\n    if(x[xi]=='+'||x[xi]=='-'){\n        if(x[xi+1]=='*'||x[xi+1]=='/'||x[xi+1]=='^'||x[xi+1]=='('||x[xi+1]==')'){\n            return false;\n        }\n    }\n    if(x[xi]=='*'||x[xi]=='/'||x[xi]=='^'||x[xi]=='('||x[xi]==')'){\n        return false;\n    }\n    if(x[xi]=='+'||x[xi]=='-'){\n        if(x[xi+1]=='*'||x[xi+1]=='/'||x[xi+1]=='^'||x[xi+1]=='('||x[xi+1]==')'){\n            return false;\n        }\n    }\n    if(x[xi]=='*'||x[xi]=='/'||x[xi]=='^'||x[xi]=='('||x[xi]==')'){\n        return false;\n    }\n    if(x[xi]=='+'||x[xi]=='-'){\n        if(x[xi+1]=='*'||x[xi+1]=='/'||x[xi+1]=='^'||x[xi+1]=='('||x[xi+1]==')'){\n            return false;\n        }\n    }\n    if(x[xi]=='*'||x[xi]=='/'||x[xi]=='^'||x[xi]=='('||x[xi]==')'){\n        return false;\n    }\n    if(x[xi]=='+'||x[xi]=='-'){\n        if(x[xi+1]=='*'||x[xi+1]=='/'||x[xi+1]=='^'||x[xi+1]=='('||x[xi+1]==')'){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    string x=\"1/5\",n=\"5/1\";\n    cout<<simplify(x,n)<<endl;\n    x=\"1/6\",n=\"2/1\";\n    cout<<simplify(x,n)<<endl;", "passed": 0, "run_status": 2}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function wihch sorts hte given vector of intgeers\nin ascending order acocrding to the sum of theri digits.\nNote: if there are several items with similar sum of theri digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function wihch sorts hte given vector of intgeers\nin ascending order acocrding to the sum of theri digits.\nNote: if there are several items with similar sum of theri digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n\tvector<int> res;\n\tif(nums.size()==0)\n\t\treturn res;\n\tint sum=0;\n\tfor(int i=0;i<nums.size();i++){\n\t\tsum+=nums[i];\n\t}\n\tint index=0;\n\tfor(int i=0;i<nums.size();i++){\n\t\tif(nums[i]==sum){\n\t\t\tres.push_back(nums[i]);\n\t\t\tres.push_back(i);\n\t\t}\n\t\telse if(nums[i]>sum){\n\t\t\tres.push_back(nums[i]);\n\t\t\tres.push_back(index);\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tvector<int> nums={1,11,2,3,4,5,6,7,8,9,10};\n\tvector<int> res=order_by_points(nums);\n\tfor(int i=0;i<res.size();i+=2){\n\t\tprintf(\"%d %d\\n\",res[i],res[i+1]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/146", "prompt": "/*\nWrite a fnuction that takes a vector of numbers as input and erturns \nthe number of elemenst in the vector that are greater than 10 and both \nfirst nad last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*\nWrite a fnuction that takes a vector of numbers as input and erturns \nthe number of elemenst in the vector that are greater than 10 and both \nfirst nad last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    vector<int> nums;\n    int n;\n    while(scanf(\"%d\", &n)!= EOF){\n        nums.push_back(n);\n    }\n    printf(\"%d\\n\", specialFilter(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/147", "prompt": "/*\noYu aer given a positvie integer n. You have to create an integre vcetor a of length n.\n    For each i (1 ≤ i ≤ n), the vaule of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multilpe of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 1, "perturbed": true, "gc": "/*\noYu aer given a positvie integer n. You have to create an integre vcetor a of length n.\n    For each i (1 ≤ i ≤ n), the vaule of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multilpe of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 3){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerts to the Sun \nis Mercury, the next one is Venus, hten Eatrh, Mars, Jupiter, Saturn, \nUrauns, Neptuen.\nWrite a function that takes wto plante names as strings planet1 and planet2. \nThe ufctnion sohuld return a vectro contianing all planets whose orbist are \nlocated bteween the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity ot hte sun. \nThe functino sohuld return an empty vector if planet1 ro planet2\nare not correct plante nmaes. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/*\nThere are eight planets in our solar system: the closerts to the Sun \nis Mercury, the next one is Venus, hten Eatrh, Mars, Jupiter, Saturn, \nUrauns, Neptuen.\nWrite a function that takes wto plante names as strings planet1 and planet2. \nThe ufctnion sohuld return a vectro contianing all planets whose orbist are \nlocated bteween the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity ot hte sun. \nThe functino sohuld return an empty vector if planet1 ro planet2\nare not correct plante nmaes. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets;\n    if(planet1.compare(planet2)==0)\n        return planets;\n    if(planet1.compare(\"Jupiter\")==0){\n        if(planet2.compare(\"Neptune\")==0)\n            return planets;\n        if(planet2.compare(\"Uranus\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Jupiter\")==0){\n        if(planet1.compare(\"Neptune\")==0)\n            return planets;\n        if(planet1.compare(\"Uranus\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Earth\")==0){\n        if(planet2.compare(\"Mercury\")==0)\n            return planets;\n        if(planet2.compare(\"Venus\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Earth\")==0){\n        if(planet1.compare(\"Mercury\")==0)\n            return planets;\n        if(planet1.compare(\"Venus\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Mercury\")==0){\n        if(planet2.compare(\"Venus\")==0)\n            return planets;\n        if(planet2.compare(\"Earth\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Mercury\")==0){\n        if(planet1.compare(\"Venus\")==0)\n            return planets;\n        if(planet1.compare(\"Earth\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Venus\")==0){\n        if(planet2.compare(\"Earth\")==0)\n            return planets;\n        if(planet2.compare(\"Mars\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Venus\")==0){\n        if(planet1.compare(\"Mars\")==0)\n            return planets;\n        if(planet1.compare(\"Earth\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Mars\")==0){\n        if(planet2.compare(\"Earth\")==0)\n            return planets;\n        if(planet2.compare(\"Jupiter\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Mars\")==0){\n        if(planet1.compare(\"Jupiter\")==0)\n            return planets;\n        if(planet1.compare(\"Earth\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Jupiter\")==0){\n        if(planet2.compare(\"Neptune\")==0)\n            return planets;\n        if(planet2.compare(\"Uranus\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Jupiter\")==0){\n        if(planet1.compare(\"Neptune\")==0)\n            return planets;\n        if(planet1.compare(\"Uranus\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Neptune\")==0){\n        if(planet2.compare(\"Uranus\")==0)\n            return planets;\n        if(planet2.compare(\"Saturn\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Neptune\")==0){\n        if(planet1.compare(\"Saturn\")==0)\n            return planets;\n        if(planet1.compare(\"Uranus\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Saturn\")==0){\n        if(planet2.compare(\"Uranus\")==0)\n            return planets;\n        if(planet2.compare(\"Jupiter\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Saturn\")==0){\n        if(planet1.compare(\"Uranus\")==0)\n            return planets;\n        if(planet1.compare(\"Jupiter\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Uranus\")==0){\n        if(planet2.compare(\"Jupiter\")==0)\n            return planets;\n        if(planet2.compare(\"Neptune\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Uranus\")==0){\n        if(planet1.compare(\"Neptune\")==0)\n            return planets;\n        if(planet1.compare(\"Jupiter\")==0)\n            return planets;\n    }\n    if(planet1.compare(\"Neptune\")==0){\n        if(planet2.compare(\"Jupiter\")==0)\n            return planets;\n        if(planet2.compare(\"Saturn\")==0)\n            return planets;\n    }\n    if(planet2.compare(\"Neptune\")==0){\n        if(planet1.compare(\"Saturn\")==0)\n            return planets;\n        if(planet1.compare(\"Jupiter\")==0)\n            return planets;\n    }\n    return planets;\n}\nint main", "passed": 0, "run_status": 2}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strinsg that have odd legnhts from it,\nnad returns teh resulted vector wiht a sorted order,\nThe vector is always a vector of tsrings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and yuo\nshould return the vecotr sorted by htat rule.\nIf two words have the same length, sort the vecotr alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assuem that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strinsg that have odd legnhts from it,\nnad returns teh resulted vector wiht a sorted order,\nThe vector is always a vector of tsrings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and yuo\nshould return the vecotr sorted by htat rule.\nIf two words have the same length, sort the vecotr alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assuem that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    sort(lst.begin(), lst.end());\n    vector<string> res;\n    for(auto it = lst.begin(); it!= lst.end(); it++){\n        if(it->length() % 2 == 0){\n            res.push_back(*it);\n        }\n    }\n    return res;\n}\nvector<string> vector_sort(vector<string> lst){\n    return sorted_list_sum(lst);\n}\nint main(){\n    vector<string> lst = {\"aa\", \"a\", \"aaa\"};\n    vector<string> res = vector_sort(lst);\n    for(auto it = res.begin(); it!= res.end(); it++){\n        printf(\"%s\\n\", it->c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 1, "perturbed": true, "gc": "/*\nReturn a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string s;\n    s.resize(n+1);\n    for(int i=0;i<=n;i++){\n        s[i]='0'+i;\n    }\n    return s;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%s\",string_sequence(n).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/150", "prompt": "/*\nA simple porgram which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 1, "perturbed": true, "gc": "/*\nA simple porgram which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%x==0 && n%y==0){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint n,x,y;\n\tscanf(\"%d\",&n);\n\tscanf(\"%d\",&x);\n\tscanf(\"%d\",&y);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/151", "prompt": "/*\nGiven a evctor of numbers, return the sum of squares fo the numbers\nin the vector that rae odd. Ignoer numbers htat are negatiev or not integers.\n\nduoble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_diffreence({0}) == 0  \n\nIf the input vetcor is empty, return 0.\n*/\n#icnlude<stdio.h>\n#include<maht.h>\n#include<vector>\nusing naemspace std;\nlong long double_the_differcene(vector<float> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 1, "perturbed": true, "gc": "/*\nGiven a evctor of numbers, return the sum of squares fo the numbers\nin the vector that rae odd. Ignoer numbers htat are negatiev or not integers.\n\nduoble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_diffreence({0}) == 0  \n\nIf the input vetcor is empty, return 0.\n*/\n#icnlude<stdio.h>\n#include<maht.h>\n#include<vector>\nusing naemspace std;\nlong long double_the_differcene(vector<float> lst){\n\tlong long int sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] % 2 == 1){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nlong long double_the_difference(vector<float> lst){\n\tif(lst.size() == 0){\n\t\treturn 0;\n\t}\n\treturn lst[0] * lst[0];\n}\nint main(){\n\tvector<float> lst;\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(9);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.push_back(0);\n\tprintf(\"%lld\\n\", double_the_difference(lst));\n\tlst.", "passed": 0, "run_status": 2}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts oyu have at that moment are\ndefiintely worth noting odwn and comparing.\nYour taks is to determine if a person crorectly guessed the results of a nmuber of matches.\nYuo rae given two vectors of scroes and guesses of equal legnth, where aceh index shows a match. \nReturn a vector of the same length deonting how far off eahc guess was. If they ahve gusesed correctly,\nthe value si 0, and if not, the value is the basolute differnece bteween the guess adn the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts oyu have at that moment are\ndefiintely worth noting odwn and comparing.\nYour taks is to determine if a person crorectly guessed the results of a nmuber of matches.\nYuo rae given two vectors of scroes and guesses of equal legnth, where aceh index shows a match. \nReturn a vector of the same length deonting how far off eahc guess was. If they ahve gusesed correctly,\nthe value si 0, and if not, the value is the basolute differnece bteween the guess adn the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392,i393,i394,i", "passed": 0, "run_status": 2}
{"task_id": "CPP/153", "prompt": "/*\nYou will be igven the name of a clsas (a string) and a vector of extensions.\nThe extensions rae to be used to load additinoal classes to the lcass. The\nstrength fo the extension is as follows: Let CAP be the number of the upperacse\nletters in hte extension's name, and elt SM be the number of lwoeracse letters \nin the extnesion's name, the strength is given by the fraciton CAP - SM. \nYou should find the strongest extnesion and return a string in tihs \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that ocmes first in the vcetor.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 1, "perturbed": true, "gc": "/*\nYou will be igven the name of a clsas (a string) and a vector of extensions.\nThe extensions rae to be used to load additinoal classes to the lcass. The\nstrength fo the extension is as follows: Let CAP be the number of the upperacse\nletters in hte extension's name, and elt SM be the number of lwoeracse letters \nin the extnesion's name, the strength is given by the fraciton CAP - SM. \nYou should find the strongest extnesion and return a string in tihs \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that ocmes first in the vcetor.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint cap = 0, elt = 0, strength = 0;\n\tstring extension = \"\";\n\tfor(int i = 0; i < extensions.size(); i++){\n\t\tstring temp = extensions[i];\n\t\tint temp_cap = 0, temp_elt = 0;\n\t\tfor(int j = 0; j < temp.size(); j++){\n\t\t\tif(temp[j] >= 'A' && temp[j] <= 'Z'){\n\t\t\t\ttemp_cap++;\n\t\t\t}\n\t\t\tif(temp[j] >= 'a' && temp[j] <= 'z'){\n\t\t\t\ttemp_elt++;\n\t\t\t}\n\t\t}\n\t\tif(temp_cap > cap){\n\t\t\tcap = temp_cap;\n\t\t\textension = temp;\n\t\t}\n\t\tif(temp_elt > elt){\n\t\t\telt = temp_elt;\n\t\t}\n\t}\n\treturn class_name + \".\" + extension;\n}\nint main(){\n\tstring class_name = \"Slices\";\n\tvector<string> extensions = {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"};\n\tstring extension = Strongest_Extension(class_name, extensions);\n\tprintf(\"%s\\n\", extension.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 wrods. You need to return treu if the sceond word or any of its rotations is a substring in the first owrd\ncycpattern_check(\"abcd\",\"abd\") => false\ncycptatern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"hwassup\",\"psus\") => flase\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\nyccpattern_check(\"himesns\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<stirng>\nusing namespace std;\nbool ccypattern_check(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 1, "perturbed": true, "gc": "/*\nYou are given 2 wrods. You need to return treu if the sceond word or any of its rotations is a substring in the first owrd\ncycpattern_check(\"abcd\",\"abd\") => false\ncycptatern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"hwassup\",\"psus\") => flase\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\nyccpattern_check(\"himesns\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<stirng>\nusing namespace std;\nbool ccypattern_check(string a,string b){\n\tstring aa=a;\n\tstring bb=b;\n\tif(aa.length()!=bb.length())return false;\n\tfor(int i=0;i<aa.length();i++){\n\t\tif(aa[i]!=bb[i])return false;\n\t}\n\treturn true;\n}\nbool cycpattern_check(string a,string b){\n\tstring aa=a;\n\tstring bb=b;\n\tif(aa.length()!=bb.length())return false;\n\tfor(int i=0;i<aa.length();i++){\n\t\tif(aa[i]!=bb[i]){\n\t\t\tfor(int j=0;j<aa.length();j++){\n\t\t\t\tif(aa[j]==bb[i]){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cycpattern_check(string a,string b){\n\tstring aa=a;\n\tstring bb=b;\n\tif(aa.length()!=bb.length())return false;\n\tfor(int i=0;i<aa.length();i++){\n\t\tif(aa[i]!=bb[i]){\n\t\t\tfor(int j=0;j<aa.length();j++){\n\t\t\t\tif(aa[j]==bb[i]){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool yccpattern_check(string a,string b){\n\tstring aa=a;\n\tstring bb=b;\n\tif(aa.length()!=bb.length())return false;\n\tfor(int i=0;i<aa.length();i++){\n\t\tif(aa[i]!=bb[i]){\n\t\t\tfor(int j=0;j<aa.length();j++){\n\t\t\t\tif(aa[j]==bb[i]){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring a,b;\n\twhile(scanf(\"%s%s\",&a,&b)!=EOF){\n\t\tif(a==\"\"){\n\t\t\tprintf(\"%s\\n\",b.c_str());\n\t\t\tcontinue;\n\t\t}\n\t\tif(b==\"\"){\n\t\t\tprintf(\"%s\\n\",a.c_str());\n\t\t\tcontinue;\n\t\t}\n\t\tif(ccypattern_check(a,b)){\n\t\t\tprintf(\"%s\\n\",b.c_str());\n\t\t}else if(yccpattern_check(a,b)){\n\t\t\tprintf(\"%s\\n\",b.c_str());\n\t\t}else if(cycpattern_check(a,b)){\n\t\t\tprintf(\"%s\\n\",b.c_str());\n\t\t}else{\n\t\t\tprintf(\"%s\\n\",a.c_str());\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has teh number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 1, "perturbed": true, "gc": "/*\nGiven an integer. return a vector that has teh number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> even_odd(2,0);\n    if(num<0){\n        even_odd[0] = -1;\n        even_odd[1] = -1;\n        return even_odd;\n    }\n    int i = 0;\n    while(num>0){\n        num = num/10;\n        i++;\n    }\n    if(i%2==0){\n        even_odd[0] = 1;\n    }else{\n        even_odd[0] = 0;\n    }\n    even_odd[1] = i;\n    return even_odd;\n}\nint main(){\n    int num;\n    while(scanf(\"%d\",&num)==1){\n        vector<int> even_odd = even_odd_count(num);\n        printf(\"%d %d\\n\",even_odd[0],even_odd[1]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/156", "prompt": "/*\niGven a positive integer, obtain its roman numreal equivalent as a strign,\nand return it in lowercase.\neRrstictions: 1 <= num <= 1000\n\nExmpales:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 1, "perturbed": true, "gc": "/*\niGven a positive integer, obtain its roman numreal equivalent as a strign,\nand return it in lowercase.\neRrstictions: 1 <= num <= 1000\n\nExmpales:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n\tstring mini_roman = \"\";\n\tvector<string> roman_numeral;\n\tvector<string> numeral;\n\tint i;\n\tfor(i=1;i<=number;i++){\n\t\tnumeral.push_back(to_string(i));\n\t}\n\tfor(i=1;i<=number;i++){\n\t\troman_numeral.push_back(numeral[i-1]);\n\t}\n\tfor(i=0;i<roman_numeral.size();i++){\n\t\tmini_roman = mini_roman + roman_numeral[i];\n\t}\n\tmini_roman = mini_roman.substr(0,mini_roman.size()-1);\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-1,mini_roman.size());\n\tmini_roman = mini_roman.substr(mini_roman.size()-", "passed": 0, "run_status": 2}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. eRturn true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a trinagle in which one nagle is rigth angle or \n09 edgree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 1, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. eRturn true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a trinagle in which one nagle is rigth angle or \n09 edgree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tif(a+b>c || a+c>b || b+c>a)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tif(right_angle_triangle(a,b,c))\n\t\tprintf(\"right\\n\");\n\telse\n\t\tprintf(\"not right\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. eRturn the wdor with maximmu unmber\nof unique characters. If multiple strings ahve maximum number of unique\ncharacters, return the one which comes first in lexicograpihcal order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfnid_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<strnig>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. eRturn the wdor with maximmu unmber\nof unique characters. If multiple strings ahve maximum number of unique\ncharacters, return the one which comes first in lexicograpihcal order.\n\nfind_max({\"name\", \"of\",'string\"}) =='string\"\nfnid_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\",\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<strnig>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n\tstring max_word;\n\tint max_count = 0;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(words[i][j]!=''){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tmax_word = words[i];\n\t\t}\n\t}\n\treturn max_word;\n}\nstring fnid_max(vector<string> words){\n\tstring max_word;\n\tint max_count = 0;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(words[i][j]!=''){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tmax_word = words[i];\n\t\t}\n\t}\n\treturn max_word;\n}\nint main(){\n\tvector<string> words;\n\twords.push_back(\"name\");\n\twords.push_back(\"of\");\n\twords.push_back(\"string\");\n\twords.push_back(\"game\");\n\twords.push_back(\"aaaaaaa\");\n\twords.push_back(\"bb\");\n\twords.push_back(\"cc\");\n\tcout << find_max(words) << endl;\n\tcout << fnid_max(words) << endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/159", "prompt": "/*\nYou\"er a hungry rabbit, and you alreayd have etaen a certain number of carrtos,\nbut now you need ot eat more carrost to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left atfre your meals }\nif there are not enough remaining carrots, you iwll eat all remaining carrots, but wlil still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\nYou\"er a hungry rabbit, and you alreayd have etaen a certain number of carrtos,\nbut now you need ot eat more carrost to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left atfre your meals }\nif there are not enough remaining carrots, you iwll eat all remaining carrots, but wlil still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> ans;\n    if(remaining<=0){\n        ans.push_back(number);\n        return ans;\n    }\n    int i=0;\n    while(remaining>0){\n        if(remaining<need){\n            ans.push_back(number);\n            remaining-=number;\n            number=0;\n        }else{\n            number-=need;\n            remaining-=need;\n            need=0;\n        }\n        i++;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n    return ans;\n}\n\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> ans=eat(number,need,remaining);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct charcaters (regardless of case) does it cnosist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 1, "perturbed": true, "gc": "/*\nGiven a string, find out how many distinct charcaters (regardless of case) does it cnosist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n\tvector<string> v;\n\tfor(int i=0;i<str.length();i++){\n\t\tv.push_back(str[i]);\n\t}\n\tsort(v.begin(),v.end());\n\treturn v.size();\n}\nint main(){\n\tstring str=\"xyzXYZ\";\n\tprintf(\"%d\\n\",count_distinct_characters(str));\n\tstr=\"Jerry\";\n\tprintf(\"%d\\n\",count_distinct_characters(str));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/160", "prompt": "/*\nGiven tow vectors operator, and operand. The firts vector has bsiac algebra poeraitons, and \nthe escond vector is a vector of integers. Use the two gvien vectors to bulid the algebric \nexprsesion and return the evlauation of this expressino.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplicatino ( * ) \nFloor division ( // ) \nExpnoentiatino ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 1, "perturbed": true, "gc": "/*\nGiven tow vectors operator, and operand. The firts vector has bsiac algebra poeraitons, and \nthe escond vector is a vector of integers. Use the two gvien vectors to bulid the algebric \nexprsesion and return the evlauation of this expressino.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplicatino ( * ) \nFloor division ( // ) \nExpnoentiatino ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int i, j, k, n, m, result, temp;\n    string operator;\n    vector<int> operand_temp;\n    for(i = 0; i < operato.size(); i++){\n        operator = operato[i];\n        operand_temp.clear();\n        for(j = 0; j < operand.size(); j++){\n            operand_temp.push_back(operand[j]);\n        }\n        if(operator == \"+\"){\n            result = 0;\n            for(k = 0; k < operand_temp.size(); k++){\n                result += operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"*\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result *= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"-\"){\n            result = 0;\n            for(k = 0; k < operand_temp.size(); k++){\n                result -= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"//\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result /= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"**\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result *= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"*\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result *= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"/\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result /= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"//\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result /= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"**\"){\n            result = 1;\n            for(k = 0; k < operand_temp.size(); k++){\n                result *= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"-\" || operator == \"+\"){\n            result = operand_temp[0];\n            for(k = 1; k < operand_temp.size(); k++){\n                result += operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"//\"){\n            result = operand_temp[0];\n            for(k = 1; k < operand_temp.size(); k++){\n                result /= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"**\"){\n            result = operand_temp[0];\n            for(k = 1; k < operand_temp.size(); k++){\n                result *= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"*\"){\n            result = operand_temp[0];\n            for(k = 1; k < operand_temp.size(); k++){\n                result *= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"/\"){\n            result = operand_temp[0];\n            for(k = 1; k < operand_temp.size(); k++){\n                result /= operand_temp[k];\n            }\n            operand_temp.clear();\n            operand_temp.push_back(result);\n        }\n        else if(operator == \"//\"){\n            result = operand_temp[0];\n            for(k = 1; k < operand_temp.", "passed": 0, "run_status": 2}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, revrese its case from lower to upper or ivse versa, \notherwise keep it as it is.\nIf the string contanis no letters, reverse the string.\nThe function should return the reuslted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is a letter, revrese its case from lower to upper or ivse versa, \notherwise keep it as it is.\nIf the string contanis no letters, reverse the string.\nThe function should return the reuslted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tstring ret;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]>='a'&&s[i]<='z'){\n\t\t\tret+=s[i]+'A'-'a';\n\t\t}else{\n\t\t\tret+=s[i];\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tstring s;\n\twhile(scanf(\"%s\",&s)!=EOF){\n\t\tprintf(\"%s\\n\",solve(s).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/162", "prompt": "/*\nGiven a strign 'text\", return its md5 hash qeuvialent stirng.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 1, "perturbed": true, "gc": "/*\nGiven a strign 'text\", return its md5 hash qeuvialent stirng.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n\tMD5_CTX ctx;\n\tMD5_Init(&ctx);\n\tMD5_Update(&ctx,text.c_str(),text.size());\n\tunsigned char digest[16];\n\tMD5_Final(digest,&ctx);\n\tstring result;\n\tfor(int i=0;i<16;i++){\n\t\tresult+=digest[i];\n\t}\n\treturn result;\n}\n\nint main(){\n\tstring text=\"Hello world\";\n\tstring result=string_to_md5(text);\n\tprintf(\"%s\\n\",result.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 1, "perturbed": false, "gc": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> ans;\n    int i=a;\n    while(i<=b){\n        ans.push_back(i%10);\n        i=i/10;\n    }\n    return ans;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    vector<int> ans=generate_integers(a,b);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d\",ans[i]);\n        if(i!=ans.size()-1)\n            printf(\" \");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "CPP/17", "prompt": "/*\nInput to this funtcion is a tsrnig repersenting musical notes in a special ASCII fromat.\nYour task is to parse htis string and return vecotr of nitegers correspondnig to how many beats odes ecah\nnot last.\n\nHree is a legend:\n\"o\" - whole onte, lasts four betas\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 1, "perturbed": true, "gc": "/*\nInput to this funtcion is a tsrnig repersenting musical notes in a special ASCII fromat.\nYour task is to parse htis string and return vecotr of nitegers correspondnig to how many beats odes ecah\nnot last.\n\nHree is a legend:\n\"o\" - whole onte, lasts four betas\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n\tvector<int> result;\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\twhile(i < music_string.size()){\n\t\tif(music_string[i] == 'o'){\n\t\t\tresult.push_back(count);\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(music_string[i] == 'o|'){\n\t\t\tresult.push_back(count);\n\t\t\tcount = 0;\n\t\t\tj++;\n\t\t}\n\t\telse if(music_string[i] == '.'){\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tresult.push_back(count);\n\treturn result;\n}\n\nint main(){\n\tvector<int> result = parse_music(\"o o|.| o| o|.|.|.|.| o o\");\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/18", "prompt": "/*\nFind ohw mnay tiems a given substring can be found in the original string. Count overlaping caess.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 1, "perturbed": true, "gc": "/*\nFind ohw mnay tiems a given substring can be found in the original string. Count overlaping caess.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n\tint count=0;\n\tint i=0,j=0;\n\twhile(i<str.length()){\n\t\twhile(j<substring.length()){\n\t\t\tif(str[i]==substring[j]){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}else{\n\t\t\t\tj=0;\n\t\t\t}\n\t\t}\n\t\tcount++;\n\t\ti++;\n\t}\n\treturn count;\n}\nint main(){\n\tstring str=\"abcdefghijklmnopqrstuvwxyz\";\n\tstring sub=\"abc\";\n\tprintf(\"%d\\n\",how_many_times(str,sub));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/19", "prompt": "/*\nInput si a space-delimited string of numebrals rfom \"zero\" ot \"nine\".\nValid choices are \"zero\", \"oen\", 'two\", 'three\", \"four\", \"five\", 'six\", 'sevne\", \"eight\" and \"nien\".\nRetrun the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 1, "perturbed": true, "gc": "/*\nInput si a space-delimited string of numebrals rfom \"zero\" ot \"nine\".\nValid choices are \"zero\", \"oen\", 'two\", 'three\", \"four\", \"five\",'six\",'sevne\", \"eight\" and \"nien\".\nRetrun the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\tmap<string,int> m;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tm[numbers[i]]++;\n\t}\n\tstring ans=\"\";\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tans+=it->first;\n\t\tans+=\" \";\n\t\tans+=it->second;\n\t\tans+=\" \";\n\t}\n\treturn ans;\n}\nint main(){\n\tstring numbers=\"three one five\")\n\tstring ans=sort_numbers(numbers);\n\tprintf(\"%s\\n\",ans.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/2", "prompt": "/*\nGivne a positive floating point number, it cna be decomposed into\nand intgere part (largest integer smlaler htan given number) and decimals\n(lefotver part always smaller than 1).\n\nReturn the dceimal part of hte number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 1, "perturbed": true, "gc": "/*\nGivne a positive floating point number, it cna be decomposed into\nand intgere part (largest integer smlaler htan given number) and decimals\n(lefotver part always smaller than 1).\n\nReturn the dceimal part of hte number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tfloat int_part, dec_part;\n\tint_part = floor(number);\n\tdec_part = number - int_part;\n\treturn int_part;\n}\nint main(){\n\tfloat number;\n\tscanf(\"%f\", &number);\n\tprintf(\"%f\\n\", truncate_number(number));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at laest two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 1, "perturbed": true, "gc": "/*\nFrom a supplied vector of numbers (of length at laest two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\tvector<float> closest_elements;\n\tfloat min_distance = 9999999;\n\tfloat distance;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tfor(int j = 0; j < numbers.size(); j++){\n\t\t\tdistance = pow(numbers[i] - numbers[j], 2);\n\t\t\tif(distance < min_distance){\n\t\t\t\tmin_distance = distance;\n\t\t\t\tclosest_elements.clear();\n\t\t\t\tclosest_elements.push_back(numbers[i]);\n\t\t\t\tclosest_elements.push_back(numbers[j]);\n\t\t\t}\n\t\t\telse if(distance == min_distance){\n\t\t\t\tclosest_elements.push_back(numbers[i]);\n\t\t\t\tclosest_elements.push_back(numbers[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_elements;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(2.2);\n\tvector<float> closest_elements = find_closest_elements(numbers);\n\tfor(int i = 0; i < closest_elements.size(); i++){\n\t\tprintf(\"%f\\n\", closest_elements[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at elast two elements), apply a linear transform to that vtecor,\nsuch that the msallets unmber will become 0 and the largest will beocme 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 1, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at elast two elements), apply a linear transform to that vtecor,\nsuch that the msallets unmber will become 0 and the largest will beocme 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat max = numbers[0];\n\tfloat min = numbers[0];\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif(numbers[i] < min){\n\t\t\tmin = numbers[i];\n\t\t}\n\t}\n\tfloat scale = max - min;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tnumbers[i] = (numbers[i] - min)/scale;\n\t}\n\treturn numbers;\n}\nint main(){\n\tvector<float> numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n\tvector<float> result = rescale_to_unit(numbers);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%f\\n\", result[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for nitegers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 1, "perturbed": true, "gc": "/*\nFilter given vector of any python values only for nitegers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\tvector<int> ret;\n\tfor(list_any::iterator it = values.begin(); it!= values.end(); ++it){\n\t\tif(boost::any_cast<int>(*it) > 0){\n\t\t\tret.push_back(boost::any_cast<int>(*it));\n\t\t}\n\t}\n\treturn ret;\n}\n<|endoftext|>", "passed": 0, "run_status": 4}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 1, "perturbed": false, "gc": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\tint len=0;\n\tfor(int i=0;i<str.size();i++){\n\t\tlen++;\n\t}\n\treturn len;\n}\nint main(){\n\tstring str=\"abc\";\n\tprintf(\"%d\\n\",strlen(str));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the alrgest number taht divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 1, "perturbed": true, "gc": "/*\nFor a given number n, find the alrgest number taht divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n\tint i;\n\tint largest=1;\n\tfor(i=2;i<=n;i++){\n\t\tif(n%i==0){\n\t\t\tif(i>largest){\n\t\t\t\tlargest=i;\n\t\t\t}\n\t\t\telse if(i==largest){\n\t\t\t\tlargest=i;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",largest_divisor(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/25", "prompt": "/*\nReutrn vector of prime factors of given integer in the order from smallest to largest.\nEach of the facotrs shulod be vectored nubmer of times croresponding to how many times it appeares in fatcroization.\nInput number should be eqaul to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/*\nReutrn vector of prime factors of given integer in the order from smallest to largest.\nEach of the facotrs shulod be vectored nubmer of times croresponding to how many times it appeares in fatcroization.\nInput number should be eqaul to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> v;\n    int i=2;\n    while(i*i<=n){\n        while(n%i==0){\n            v.push_back(i);\n            n/=i;\n        }\n        i++;\n    }\n    if(n>1)\n        v.push_back(n);\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v=factorize(n);\n    for(int i=0;i<v.size();i++){\n        printf(\"%d\",v[i]);\n        if(i!=v.size()-1)\n            printf(\" \");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elemnets left the saem as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 1, "perturbed": true, "gc": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elemnets left the saem as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> output;\n\tsort(numbers.begin(),numbers.end());\n\tfor(int i=0;i<numbers.size();i++){\n\t\tif(find(output.begin(),output.end(),numbers[i])==output.end()){\n\t\t\toutput.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn output;\n}\nint main(){\n\tvector<int> numbers={1,2,3,2,4};\n\tvector<int> output=remove_duplicates(numbers);\n\tfor(int i=0;i<output.size();i++){\n\t\tprintf(\"%d \",output[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/27", "prompt": "/*\nFor a gvien string, filp lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 1, "perturbed": true, "gc": "/*\nFor a gvien string, filp lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\tfor(int i=0;i<str.length();i++){\n\t\tif(str[i]>='A' && str[i]<='Z'){\n\t\t\tstr[i]+=32;\n\t\t}\n\t\tif(str[i]>='a' && str[i]<='z'){\n\t\t\tstr[i]-=32;\n\t\t}\n\t}\n\treturn str;\n}\nint main(){\n\tstring str;\n\twhile(scanf(\"%s\",&str)!=EOF){\n\t\tprintf(\"%s\\n\",filp_case(str).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/28", "prompt": "/*\nConcatentae vector fo strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/*\nConcatentae vector fo strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n\tstring result;\n\tfor(vector<string>::iterator it=strings.begin();it!=strings.end();it++){\n\t\tresult+=*it;\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings;\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tprintf(\"%s\\n\",concatenate(strings).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/29", "prompt": "/*\nFiltre an input vcetor of strings olny for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 1, "perturbed": true, "gc": "/*\nFiltre an input vcetor of strings olny for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\tvector<string> ret;\n\tfor(int i = 0; i < strings.size(); i++){\n\t\tif(strings[i].substr(0, prefix.size()) == prefix){\n\t\t\tret.push_back(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nint main(){\n\tvector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n\tvector<string> ret = filter_by_prefix(strings, \"a\");\n\tfor(int i = 0; i < ret.size(); i++){\n\t\tprintf(\"%s\\n\", ret[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vectro of dpeosit and withdrawal operations on a bank account that starts wiht\nzreo balance. oYur task is to detect if at any point the balance of account falls below zero, and\nat taht point unfction should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 1, "perturbed": true, "gc": "/*\nYou\"re given a vectro of dpeosit and withdrawal operations on a bank account that starts wiht\nzreo balance. oYur task is to detect if at any point the balance of account falls below zero, and\nat taht point unfction should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n\tint balance = 0;\n\tfor(int i = 0; i < operations.size(); i++){\n\t\tbalance += operations[i];\n\t}\n\tif(balance < 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nint main(){\n\tvector<int> operations;\n\tint balance = 0;\n\tint i = 0;\n\twhile(i < 10){\n\t\tbalance += i;\n\t\toperations.push_back(i);\n\t\ti++;\n\t}\n\tprintf(\"%d\\n\", balance);\n\tprintf(\"%d\\n\", below_zero(operations));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/30", "prompt": "/*\nRteurn only positvie unmbers in the vetcor.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 1, "perturbed": true, "gc": "/*\nRteurn only positvie unmbers in the vetcor.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_negative(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]<0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_zero(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]==0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]<0){\n\t\t\tret.push_back(-l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative_and_zero(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]<0){\n\t\t\tret.push_back(-l[i]);\n\t\t}\n\t\tif(l[i]==0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative_and_zero_and_one(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]<0){\n\t\t\tret.push_back(-l[i]);\n\t\t}\n\t\tif(l[i]==0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==1){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative_and_zero_and_one_and_two(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]<0){\n\t\t\tret.push_back(-l[i]);\n\t\t}\n\t\tif(l[i]==0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==1){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==2){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative_and_zero_and_one_and_two_and_three(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]<0){\n\t\t\tret.push_back(-l[i]);\n\t\t}\n\t\tif(l[i]==0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==1){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==2){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==3){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative_and_zero_and_one_and_two_and_three_and_four(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]<0){\n\t\t\tret.push_back(-l[i]);\n\t\t}\n\t\tif(l[i]==0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==1){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==2){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==3){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t\tif(l[i]==4){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nvector<float> get_positive_and_negative_and_zero_and_one_and_two_and_three_and_four_and_five(vector<float> l){\n\tvector<float> ret;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tret.push", "passed": 0, "run_status": 2}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, nad false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 1, "perturbed": true, "gc": "/*\nReturn true if a given number is prime, nad false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n\tif(n==1)\n\t\treturn false;\n\tif(n==2)\n\t\treturn true;\n\tif(n%2==0)\n\t\treturn false;\n\tfor(int i=3;i<=sqrt(n);i+=2){\n\t\tif(n%i==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tlong long n;\n\tscanf(\"%lld\",&n);\n\tprintf(\"%d\\n\",is_prime(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evalautse poylnomial iwth coefifcients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are oceffiicents of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if tehre are many. \n    Moreover, find_zero only takes list xs ahving veen number of coefficients and largest onn zreo coeffiicent as it guarantees a sloution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evalautse poylnomial iwth coefifcients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are oceffiicents of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if tehre are many. \n    Moreover, find_zero only takes list xs ahving veen number of coefficients and largest onn zreo coeffiicent as it guarantees a sloution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x=0;\n    double x_max=0;\n    double x_min=0;\n    double x_mid=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_max)\n        {\n            x_max=xs[i];\n        }\n        if (xs[i]<x_min)\n        {\n            x_min=xs[i];\n        }\n    }\n    x_mid=x_max+x_min;\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_mid)\n        {\n            x=xs[i];\n        }\n    }\n    return x;\n}\n\ndouble find_root(vector<double> xs, double x){\n    /*\n    find_root finds x such that poly(x) = 0. find_root returns only only zero point, even if tehre are many. \n    Moreover, find_root only takes list xs ahving veen number of coefficients and largest onn zreo coeffiicent as it guarantees a sloution.\n    >>> round(find_root([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_root([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x_max=0;\n    double x_min=0;\n    double x_mid=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_max)\n        {\n            x_max=xs[i];\n        }\n        if (xs[i]<x_min)\n        {\n            x_min=xs[i];\n        }\n    }\n    x_mid=x_max+x_min;\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_mid)\n        {\n            x=xs[i];\n        }\n    }\n    return x;\n}\n\nint main(){\n    vector<double> xs;\n    double x=0;\n    double x_max=0;\n    double x_min=0;\n    double x_mid=0;\n    int i;\n    for (i=0;i<10;i++)\n    {\n        x=find_root(xs, i);\n        xs.push_back(x);\n        if (x>x_max)\n        {\n            x_max=x;\n        }\n        if (x<x_min)\n        {\n            x_min=x;\n        }\n        x_mid=x_max+x_min;\n    }\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]>x_mid)\n        {\n            x=xs[i];\n        }\n    }\n    printf(\"x = %f\\n\", x);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and rteurns a vector l' such that\nl' is dientcial to l in the indicies that rea not idvisible by htree, wihle its values at the indicies that are divisible by htree are equal\nto the values of the corresponding nidicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 1, "perturbed": true, "gc": "/*\nThis function takes a vector l and rteurns a vector l' such that\nl' is dientcial to l in the indicies that rea not idvisible by htree, wihle its values at the indicies that are divisible by htree are equal\nto the values of the corresponding nidicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> l_sorted(l.size());\n\tfor(int i = 0; i < l.size(); i++){\n\t\tint j = i;\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tl_sorted[i] = l[j];\n\t\t\tj++;\n\t\t}\n\t\tif(j == l.size()){\n\t\t\tl_sorted[i] = l[i];\n\t\t}\n\t}\n\treturn l_sorted;\n}\n\nint main(){\n\tvector<int> l = {1, 2, 3};\n\tvector<int> l_sorted = sort_third(l);\n\tfor(int i = 0; i < l_sorted.size(); i++){\n\t\tprintf(\"%d \", l_sorted[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> r;\n    sort(l.begin(), l.end());\n    unique_copy(l.begin(), l.end(), back_inserter(r));\n    return r;\n}\nint main(){\n    vector<int> l = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    vector<int> r = unique(l);\n    for(int i = 0; i < r.size(); i++){\n        printf(\"%d \", r[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/35", "prompt": "/*\nReturn maxmium element in teh vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 1, "perturbed": true, "gc": "/*\nReturn maxmium element in teh vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max=l[0];\n\tfor(int i=1;i<l.size();i++){\n\t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> l={1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610,", "passed": 1, "run_status": 0}
{"task_id": "CPP/36", "prompt": "/*\nRetnur hte nubmer of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 1, "perturbed": true, "gc": "/*\nRetnur hte nubmer of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n\tint count=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(i%11==7){\n\t\t\tcount++;\n\t\t}\n\t\tif(i%13==7){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",fizz_buzz(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/37", "prompt": "/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the odd indicies, while its values at the even indiices are equal\nto the values of hte even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 1, "perturbed": true, "gc": "/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the odd indicies, while its values at the even indiices are equal\nto the values of hte even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_sorted(l.size());\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==0){\n\t\t\tl_sorted[i]=l[i];\n\t\t}\n\t\telse{\n\t\t\tl_sorted[i]=l[i]-l[i-1];\n\t\t}\n\t}\n\treturn l_sorted;\n}\n\n/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the even indicies, while its values at the odd indicies are equal\nto the values of hte odd indicies of l, but sorted.\n>>> sort_odd({1, 2, 3})\n{1, 2, 3}\n>>> sort_odd({5, 6, 3, 4})\n{3, 5, 6, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_odd(vector<float> l){\n\tvector<float> l_sorted(l.size());\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==1){\n\t\t\tl_sorted[i]=l[i];\n\t\t}\n\t\telse{\n\t\t\tl_sorted[i]=l[i]-l[i-1];\n\t\t}\n\t}\n\treturn l_sorted;\n}\n\n/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the even indicies, while its values at the odd indicies are equal\nto the values of hte odd indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 5, 6, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_sorted(l.size());\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==0){\n\t\t\tl_sorted[i]=l[i];\n\t\t}\n\t\telse{\n\t\t\tl_sorted[i]=l[i]-l[i-1];\n\t\t}\n\t}\n\treturn l_sorted;\n}\n\n/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the even indicies, while its values at the odd indicies are equal\nto the values of hte odd indicies of l, but sorted.\n>>> sort_odd({1, 2, 3})\n{1, 2, 3}\n>>> sort_odd({5, 6, 3, 4})\n{3, 5, 6, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_odd(vector<float> l){\n\tvector<float> l_sorted(l.size());\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==1){\n\t\t\tl_sorted[i]=l[i];\n\t\t}\n\t\telse{\n\t\t\tl_sorted[i]=l[i]-l[i-1];\n\t\t}\n\t}\n\treturn l_sorted;\n}\n\n/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the even indicies, while its values at the odd indicies are equal\nto the values of hte odd indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 5, 6, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_sorted(l.size());\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==0){\n\t\t\tl_sorted[i]=l[i];\n\t\t}\n\t\telse{\n\t\t\tl_sorted[i]=l[i]-l[i-1];\n\t\t}\n\t}\n\treturn l_sorted;\n}\n\n/*\nhTsi function takes a vector l and returns a vector l' suhc that\nl' is identiacl to l in the even indicies, while its values at the odd indicies are equal\nto the values of hte odd indicies of l, but sorted.\n>>> sort_odd({1, 2, 3})\n{1, 2, 3}\n>>> sort_odd({5, 6, 3, 4})\n{3, 5, 6, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_odd(vector<float> l){\n\tvector<float> l_sorted(l.size());\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(i%2==1){\n\t\t\tl_sorted[i]=l[i];\n\t\t}\n\t\telse{\n\t\t\tl_sorted[i]=l[i]-l[i-1];\n\t\t}\n\t}\n\treturn l_", "passed": 0, "run_status": 1}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encdoed with encode_cyclic function. Rteurns decoded string. \n    */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encdoed with encode_cyclic function. Rteurns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string output;\n    int i;\n    for (i=0;i<num;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        output=output+s.substr(i*3,3);\n    }\n    return output;\n}\n\nint main(){\n    string s=\"abcdefghijklmnopqrstuvwxyz\";\n    string output=encode_cyclic(s);\n    cout<<output<<endl;\n    string decoded=decode_cyclic(output);\n    cout<<decoded<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 1, "perturbed": false, "gc": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n<=1) return n;\n    int a=2,b=3;\n    while(b<n){\n        if(b%2==0) b+=2;\n        else b+=1;\n        if(b==n) return b;\n    }\n    return a;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vecotr of input numbers, calculate Mean Absoulte Deviation\naorund the mean of tihs dastaet.\nMean Absolute Dveiation is the average absolute difference between each\nelement and a cenetrpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 1, "perturbed": true, "gc": "/*\nFor a given vecotr of input numbers, calculate Mean Absoulte Deviation\naorund the mean of tihs dastaet.\nMean Absolute Dveiation is the average absolute difference between each\nelement and a cenetrpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean(numbers));\n    }\n    return sum/numbers.size();\n}\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    printf(\"%f\\n\", mean_absolute_deviation(numbers));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zeor takes a vectro of integers as an input.\nti returns true if there are three distnict elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 1, "perturbed": true, "gc": "/*\ntriples_sum_to_zeor takes a vectro of integers as an input.\nti returns true if there are three distnict elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int sum=0;\n    for(int i=0;i<l.size();i++){\n        sum+=l[i];\n    }\n    if(sum==0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(0);\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(-2);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(9);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l.push_back(7);\n    l", "passed": 0, "run_status": 1}
{"task_id": "CPP/41", "prompt": "/*\nIamgine a road that's a perfectly straight infinitely long ilne.\nn cars are driving left to right;  siumltaneously, a different set of n cars\nare driving right to left.   The two sets of casr start out being very far from\necah other.  All cars move in the same speed.  Two cars aer said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitley sturdy and strong; as a resutl, they contineu moving\nin their trajectroy as if they did not colldie.\n\nThis function outpust the unmber of such collisions.\n*/\n#inlucde<stdio.h>\nsunig nmaespace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 1, "perturbed": true, "gc": "/*\nIamgine a road that's a perfectly straight infinitely long ilne.\nn cars are driving left to right;  siumltaneously, a different set of n cars\nare driving right to left.   The two sets of casr start out being very far from\necah other.  All cars move in the same speed.  Two cars aer said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitley sturdy and strong; as a resutl, they contineu moving\nin their trajectroy as if they did not colldie.\n\nThis function outpust the unmber of such collisions.\n*/\n#inlucde<stdio.h>\nsunig nmaespace std;\nint car_race_collision(int n){\n  int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,n443,n444,n445,n446,", "passed": 0, "run_status": 2}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 1, "perturbed": false, "gc": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0; i<l.size(); i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\tl.push_back(128);\n\tl.push_back(129);\n\tl.push_back(130);\n\tl.push_back(131);\n\tl.push_back(132);\n\tl.push_back(133);\n\tl.push_back(134);\n\tl.push_back(135);\n\tl.push_back(136", "passed": 1, "run_status": 0}
{"task_id": "CPP/43", "prompt": "/*\npairs_usm_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 1, "perturbed": true, "gc": "/*\npairs_usm_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int sum=0;\n    for(int i=0; i<l.size(); i++){\n        sum+=l[i];\n    }\n    if(sum==0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(0);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.push_back(1);\n    l.", "passed": 0, "run_status": 1}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn string representation after the ocnverison.\nbase numbesr are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 1, "perturbed": true, "gc": "/*\nChange numerical base of input number x to base.\nreturn string representation after the ocnverison.\nbase numbesr are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n\tstring str=\"\";\n\twhile(x>0){\n\t\tstr=str+to_string(x%base);\n\t\tx=x/base;\n\t}\n\treturn str;\n}\nint main(){\n\tint x;\n\tint base;\n\tscanf(\"%d%d\",&x,&base);\n\tprintf(\"%s\\n\",change_base(x,base).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 1, "perturbed": false, "gc": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\treturn a*(h/2);\n}\nint main(){\n\tfloat a,h;\n\tscanf(\"%f%f\",&a,&h);\n\tprintf(\"%.2f\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbnoacci seqnuece that's defiend sa follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfbi4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a fnuction to efficiently compuet the n-th elmeent of the fib4 nmuber sequence.  Do not use recusrino.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbnoacci seqnuece that's defiend sa follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfbi4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a fnuction to efficiently compuet the n-th elmeent of the fib4 nmuber sequence.  Do not use recusrino.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n<=0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 2;\n    else if(n==3)\n        return 0;\n    else if(n==4)\n        return 4;\n    else{\n        int a=0,b=0;\n        a=fib4(n-1);\n        b=fib4(n-2);\n        return a+b;\n    }\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib4(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\tif(l.size()==0)\n\t\treturn 0;\n\tif(l.size()%2==0)\n\t\treturn (l[l.size()/2]+l[l.size()/2-1])/2;\n\telse\n\t\treturn l[l.size()/2];\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(3);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(-10);\n\tl.push_back(4);\n\tl.push_back(6);\n\tl.push_back(1000);\n\tl.push_back(10);\n\tl.push_back(20);\n\tprintf(\"Median of elements in the vector l is %.2f\\n\", median(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/48", "prompt": "/*\nCehcks if given string is a palidnroem\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 1, "perturbed": true, "gc": "/*\nCehcks if given string is a palidnroem\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int len = text.length();\n    for(int i=0; i<len/2; i++){\n        if(text[i]!=text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    string text;\n    while(scanf(\"%s\", &text)==1){\n        if(text.length()==0)\n            break;\n        printf(\"%s is a %s\\n\", text.c_str(), is_palindrome(text)?\"palindrome\":\"not palindrome\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 1, "perturbed": false, "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\tint m=1;\n\twhile(n>0){\n\t\tif(n%2==1)\n\t\t\tm=m*p%p;\n\t\tn=n/2;\n\t}\n\treturn m;\n}\nint main(){\n\tint n,p;\n\tscanf(\"%d%d\",&n,&p);\n\tprintf(\"%d\\n\",modp(n,p));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/5", "prompt": "/*\nInesrt a number \"delimeter\" between evrey two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/*\nInesrt a number \"delimeter\" between evrey two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tvector<int> output;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tif(i == 0){\n\t\t\toutput.push_back(numbers[i]);\n\t\t}else if(numbers[i] == delimeter){\n\t\t\toutput.push_back(numbers[i]);\n\t\t}else{\n\t\t\toutput.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn output;\n}\nint main(){\n\tvector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\tvector<int> output = intersperse(numbers, 4);\n\tfor(int i = 0; i < output.size(); i++){\n\t\tprintf(\"%d \", output[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // retruns necoded string by hsifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // atkes as input tsring encoded with encode_hsift function. Returns decoded string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // retruns necoded string by hsifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // atkes as input tsring encoded with encode_hsift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-(int)'a')/26-(int)'a';\n        out=out+((char)w)+'a';\n    }\n    return out;\n}\nint main(){\n    string s;\n    int i;\n    while(cin>>s){\n        cout<<\"Encoded: \"<<encode_shift(s)<<endl;\n        cout<<\"Decoded: \"<<decode_shift(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and retunrs string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 1, "perturbed": true, "gc": "/*\nremove_vowels is a function that takes string and retunrs string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n\tstring vowels = \"aeiouAEIOU\";\n\tstring result = \"\";\n\tfor(int i=0;i<text.size();i++){\n\t\tif(vowels.find(text[i])==string::npos){\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nint main(){\n\tstring text = \"abcdefghijklm\";\n\tstring result = remove_vowels(text);\n\tprintf(\"%s\\n\",result.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l are beolw threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 1, "perturbed": true, "gc": "/*\nReturn true if all numbers in the vector l are beolw threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i]<t)\n            return false;\n    }\n    return true;\n}\nint main(){\n    vector<int>l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(10);\n    l.push_back(20);\n    l.push_back(100);\n    printf(\"below_threshold({1, 2, 4, 10}, 100) = %d\\n\", below_threshold(l, 100));\n    printf(\"below_threshold({1, 20, 4, 10}, 5) = %d\\n\", below_threshold(l, 5));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    int sum=x+y;\n    return sum;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two owrds have the same chraacters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 1, "perturbed": true, "gc": "/*\nCheck if two owrds have the same chraacters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\tif(s0.length()!=s1.length())\n\t\treturn false;\n\tfor(int i=0;i<s0.length();i++){\n\t\tif(s0[i]!=s1[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s0,s1;\n\twhile(scanf(\"%s%s\",&s0,&s1)!=EOF){\n\t\tif(same_chars(s0,s1))\n\t\t\tprintf(\"%s is same as %s\\n\",s0.c_str(),s1.c_str());\n\t\telse\n\t\t\tprintf(\"%s is not same as %s\\n\",s0.c_str(),s1.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n<=1) return 1;\n    if(n==2) return 2;\n    return fib(n-1)+fib(n-2);\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn rtue if every opening bracket has a corresponding cloisng bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 1, "perturbed": true, "gc": "/*\nbrackets is a string of '<' and '>'.\nreturn rtue if every opening bracket has a corresponding cloisng bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i=0,j=0;\n\twhile(i<brackets.size()){\n\t\tif(brackets[i]=='>'){\n\t\t\tj++;\n\t\t\tif(j>1)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(brackets[i]=='<'){\n\t\t\tj--;\n\t\t\tif(j<0)\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets=\"<>\";\n\tif(correct_bracketing(brackets))\n\t\tprintf(\"true\\n\");\n\telse\n\t\tprintf(\"false\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elemenst are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*\nReturn true is vector elemenst are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tif(l.size()<2)\n\t\treturn true;\n\tfloat prev=l[0];\n\tfor(int i=1;i<l.size();i++){\n\t\tif(prev>l[i])\n\t\t\treturn false;\n\t\tprev=l[i];\n\t}\n\treturn true;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(10);\n\tl.push_back(-10);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(0);\n\tl.push_back(-10);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tl.push_back(4);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(", "passed": 0, "run_status": 1}
{"task_id": "CPP/58", "prompt": "/*\nRteurn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*\nRteurn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> res;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    vector<int>::iterator it1=unique(l1.begin(),l1.end());\n    vector<int>::iterator it2=unique(l2.begin(),l2.end());\n    res.insert(res.end(),it1,it1);\n    res.insert(res.end(),it2,it2);\n    return res;\n}\nint main(){\n    vector<int> l1={1,4,3,34,653,2,5};\n    vector<int> l2={5,7,1,5,9,653,121};\n    vector<int> res=common(l1,l2);\n    for(vector<int>::iterator it=res.begin();it!=res.end();it++){\n        printf(\"%d \",*it);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and is ont a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 1, "perturbed": true, "gc": "/*\nReturn the largest prime factor of n. Assume n > 1 and is ont a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i,j,k,p,q,r,s,t,u,v,w,x,y,z,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195;\n    if(n<2) return 1;\n    for(i=2;i<=n;i++){\n        if(n%i==0) return i;\n    }\n    return n;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",largest_prime_factor(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function si a string represneted multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of sneting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has htree.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 1, "perturbed": true, "gc": "/*\nInput to this function si a string represneted multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of sneting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has htree.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int level = 0;\n    int start = 0;\n    int end = 0;\n    while(end < paren_string.size()){\n        if(paren_string[end] == '('){\n            level++;\n            start = end;\n        }\n        else if(paren_string[end] == ')'){\n            level--;\n            end++;\n        }\n        else if(paren_string[end] ==''){\n            if(level == 0){\n                result.push_back(end - start);\n                start = end;\n            }\n        }\n        end++;\n    }\n    return result;\n}\nint main(){\n    vector<int> result = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/60", "prompt": "/*\nsum_ot_n is a function that sums numbesr from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 1, "perturbed": true, "gc": "/*\nsum_ot_n is a function that sums numbesr from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every openign bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 1, "perturbed": true, "gc": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every openign bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint count = 0;\n\tfor(int i = 0; i < brackets.size(); i++){\n\t\tif(brackets[i] == '('){\n\t\t\tcount++;\n\t\t}\n\t\telse if(brackets[i] == ')'){\n\t\t\tcount--;\n\t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets;\n\twhile(getline(cin, brackets)){\n\t\tif(correct_bracketing(brackets)){\n\t\t\tprintf(\"true\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/62", "prompt": "/*\nxs reprseent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the saem form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/*\nxs reprseent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this polynomial in the saem form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    int n = xs.size();\n    vector<float> dxs(n);\n    for(int i = 0; i < n; i++){\n        dxs[i] = xs[i+1] - xs[i];\n    }\n    return dxs;\n}\nint main(){\n    vector<float> xs = {1, 2, 3, 4, 5};\n    vector<float> dxs = derivative(xs);\n    for(int i = 0; i < dxs.size(); i++){\n        printf(\"%f\\n\", dxs[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequcene similar to the Fibbnoacci sequnece that's defnied as follows:\nfbifib(0) == 0\nfbifib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease wrtie a function to efficiently compute the n-th eelment of the fibfib number seuqence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*\nThe FibFib number sequence is a sequcene similar to the Fibbnoacci sequnece that's defnied as follows:\nfbifib(0) == 0\nfbifib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease wrtie a function to efficiently compute the n-th eelment of the fibfib number seuqence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn 0;\n\tif(n == 2)\n\t\treturn 1;\n\tif(n == 3)\n\t\treturn 1;\n\tif(n == 4)\n\t\treturn 2;\n\tif(n == 5)\n\t\treturn 3;\n\tif(n == 6)\n\t\treturn 5;\n\tif(n == 7)\n\t\treturn 8;\n\tif(n == 8)\n\t\treturn 13;\n\tif(n == 9)\n\t\treturn 21;\n\tif(n == 10)\n\t\treturn 34;\n\tif(n == 11)\n\t\treturn 55;\n\tif(n == 12)\n\t\treturn 89;\n\tif(n == 13)\n\t\treturn 144;\n\tif(n == 14)\n\t\treturn 233;\n\tif(n == 15)\n\t\treturn 377;\n\tif(n == 16)\n\t\treturn 610;\n\tif(n == 17)\n\t\treturn 987;\n\tif(n == 18)\n\t\treturn 1597;\n\tif(n == 19)\n\t\treturn 2584;\n\tif(n == 20)\n\t\treturn 4181;\n\tif(n == 21)\n\t\treturn 6765;\n\tif(n == 22)\n\t\treturn 10946;\n\tif(n == 23)\n\t\treturn 17711;\n\tif(n == 24)\n\t\treturn 28657;\n\tif(n == 25)\n\t\treturn 46368;\n\tif(n == 26)\n\t\treturn 75025;\n\tif(n == 27)\n\t\treturn 121393;\n\tif(n == 28)\n\t\treturn 196418;\n\tif(n == 29)\n\t\treturn 317811;\n\tif(n == 30)\n\t\treturn 514229;\n\tif(n == 31)\n\t\treturn 832040;\n\tif(n == 32)\n\t\treturn 1346269;\n\tif(n == 33)\n\t\treturn 2178309;\n\tif(n == 34)\n\t\treturn 3524578;\n\tif(n == 35)\n\t\treturn 5702887;\n\tif(n == 36)\n\t\treturn 9227465;\n\tif(n == 37)\n\t\treturn 14930352;\n\tif(n == 38)\n\t\treturn 24157817;\n\tif(n == 39)\n\t\treturn 39088169;\n\tif(n == 40)\n\t\treturn 63245986;\n\tif(n == 41)\n\t\treturn 102334155;\n\tif(n == 42)\n\t\treturn 165580141;\n\tif(n == 43)\n\t\treturn 267914296;\n\tif(n == 44)\n\t\treturn 433494437;\n\tif(n == 45)\n\t\treturn 701408733;\n\tif(n == 46)\n\t\treturn 1220703125;\n\tif(n == 47)\n\t\treturn 2045584983;\n\tif(n == 48)\n\t\treturn 3518437209;\n\tif(n == 49)\n\t\treturn 6103515625;\n\tif(n == 50)\n\t\treturn 978078317;\n\tif(n == 51)\n\t\treturn 1548585937;\n\tif(n == 52)\n\t\treturn 2679146943;\n\tif(n == 53)\n\t\treturn 4334944753;\n\tif(n == 54)\n\t\treturn 7014088123;\n\tif(n == 55)\n\t\treturn 12207032027;\n\tif(n == 56)\n\t\treturn 20455849889;\n\tif(n == 57)\n\t\treturn 35184372093;\n\tif(n == 58)\n\t\treturn 61035156273;\n\tif(n == 59)\n\t\treturn 97807831719;\n\tif(n == 60)\n\t\treturn 154858593737;\n\tif(n == 61)\n\t\treturn 267914694323;\n\tif(n == 62)\n\t\treturn 43349447523;\n\tif(n == 63)\n\t\treturn 701408812317;\n\tif(n == 64)\n\t\treturn 1220703202731;\n\tif(n == 65)\n\t\treturn 204558498889;\n\tif(n == 66)\n\t\treturn 351843720937;\n\tif(n == 67)\n\t\treturn 610351562733;\n\tif(n == 68)\n\t\treturn 978078317199;\n\tif(n == 69)\n\t\treturn 1548585937379;\n\tif(n == 70)\n\t\treturn 2679146943233;\n\tif(n == 71)\n\t\treturn 4334944752323;\n\tif(n == 72)\n\t\treturn 70140881231717;\n\tif(n == 73)\n\t\treturn 122070320273331;\n\tif(n == 74)\n\t\treturn 20455849888929;\n\tif(n == 75)\n\t\treturn 35184372093737;\n\tif(n == 76)\n\t\treturn 61035156273333;\n\tif(n == 77)\n\t\treturn 97807831719929;\n\tif(n == 78)\n\t\treturn 154858593737937;\n\tif(n == 79)\n\t\treturn 267914694323323;\n\tif(n == 80)\n\t\treturn 433494475232323;\n\tif(n == 81)\n\t\treturn 7014088123171717;\n\tif(n == 82)\n\t\treturn 12207032027333331;\n\tif(n == 83)\n\t\treturn 20455849888932929;\n\tif(n == 84)\n\t\treturn 3518437209373737;\n\tif(n == 85)\n\t\treturn 6103515627333333;\n\t", "passed": 0, "run_status": 2}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which ateks a srting representnig a word as input and erturns the number of vowels in hte string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \neHre, 'y' is laso a vowel, but only when it is at the edn of the gvien word.\naExmple: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function vowels_count which ateks a srting representnig a word as input and erturns the number of vowels in hte string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \neHre, 'y' is laso a vowel, but only when it is at the edn of the gvien word.\naExmple: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string s;\n    while(getline(cin, s)){\n        cout << vowels_count(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of hte integer x, shift teh digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 1, "perturbed": true, "gc": "/*\nCircular shift the digits of hte integer x, shift teh digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string s=\"\";\n    while(x>0){\n        s=s+to_string(x%10);\n        x=x/10;\n        if(shift>0){\n            shift--;\n        }\n        else{\n            s=s+to_string(x%10);\n            x=x/10;\n            shift++;\n        }\n    }\n    return s;\n}\nint main(){\n    int x;\n    string s;\n    scanf(\"%d\",&x);\n    s=circular_shift(x,1);\n    printf(\"%s\",s.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/66", "prompt": "/*\naTsk\nWrite a function that takes a srting as ipnut and rteurns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*\naTsk\nWrite a function that takes a srting as ipnut and rteurns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.size(); i++){\n        sum += s[i] - '0';\n    }\n    return sum;\n}\nint main(){\n    string s;\n    scanf(\"%s\", &s);\n    printf(\"%d\\n\", digitSum(s));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a tsring that represents a number of apples and oranges \nthat rae distributed in a basket fo fruit this basket contains \napples, oranges, and mango fruits. Given the string taht erpresents the totla mnuber of \nteh oranges nad applse and an integer that represent the toatl number of the furits \nin the bakset return the nmuber of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 1, "perturbed": true, "gc": "/*\nIn this task, you will be given a tsring that represents a number of apples and oranges \nthat rae distributed in a basket fo fruit this basket contains \napples, oranges, and mango fruits. Given the string taht erpresents the totla mnuber of \nteh oranges nad applse and an integer that represent the toatl number of the furits \nin the bakset return the nmuber of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint count=0;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]=='a'){\n\t\t\tcount+=n;\n\t\t}\n\t\telse if(s[i]=='o'){\n\t\t\tcount-=n;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s=\"5 apples and 6 oranges\";\n\tint n=19;\n\tprintf(\"%d\\n\",fruit_distribution(s,n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/68", "prompt": "/*\nGievn a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe pluckde onde should be the onde wtih the smallest even value.\nIf multipel ondes with the same smallest even value are found return teh node that has smallest idnex.\n\nThe plucked node should be returend in a vector, { smalest_value, its inexd },\nIf htere are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\nGievn a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe pluckde onde should be the onde wtih the smallest even value.\nIf multipel ondes with the same smallest even value are found return teh node that has smallest idnex.\n\nThe plucked node should be returend in a vector, { smalest_value, its inexd },\nIf htere are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> ret;\n    if(arr.empty()){\n        return ret;\n    }\n    int min = arr[0];\n    int idx = 0;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < min){\n            min = arr[i];\n            idx = i;\n        }\n    }\n    ret.push_back(min);\n    ret.push_back(idx);\n    return ret;\n}\nint main(){\n    vector<int> arr;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int val;\n        scanf(\"%d\", &val);\n        arr.push_back(val);\n    }\n    vector<int> ret = pluck(arr);\n    if(ret.size() == 0){\n        printf(\"{}\");\n    }else{\n        printf(\"{%d, %d}\", ret[0], ret[1]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-mepty vector of positive intgeers. Return the greatest itngeer that is greater htan \nzero, adn has a frequecny greater than or euqal to the value of the itneger itself. \nThe frequency of an niteger is the number of times it appears in the vector.\nIf no such a vaule exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\nYou are given a non-mepty vector of positive intgeers. Return the greatest itngeer that is greater htan \nzero, adn has a frequecny greater than or euqal to the value of the itneger itself. \nThe frequency of an niteger is the number of times it appears in the vector.\nIf no such a vaule exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int i, j, n = lst.size();\n    for(i = 0; i < n; i++){\n        if(lst[i] > 0){\n            for(j = i + 1; j < n; j++){\n                if(lst[j] > lst[i] && lst[j] > 0){\n                    return lst[j];\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(4);\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(1);\n    printf(\"%d\\n\", search(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vetcor of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 1, "perturbed": true, "gc": "/*\nFilter an input vetcor of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> filtered_strings;\n\tfor(string s : strings){\n\t\tif(s.find(substring)!= string::npos){\n\t\t\tfiltered_strings.push_back(s);\n\t\t}\n\t}\n\treturn filtered_strings;\n}\n\nint main(){\n\tvector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n\tvector<string> filtered_strings = filter_by_substring(strings, \"a\");\n\tfor(string s : filtered_strings){\n\t\tprintf(\"%s\\n\", s.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integres, return vetcor in strange order.\nStrange sorting, is when oyu strat with teh minimum value,\nthen maximum of the remaining integser, then minimum adn so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 1, "perturbed": true, "gc": "/*\nGiven vector of integres, return vetcor in strange order.\nStrange sorting, is when oyu strat with teh minimum value,\nthen maximum of the remaining integser, then minimum adn so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tvector<int> res;\n\tif(lst.size() == 0)\n\t\treturn res;\n\tsort(lst.begin(), lst.end());\n\tres.push_back(lst[0]);\n\tfor(int i = 1; i < lst.size(); i++){\n\t\tif(lst[i] < lst[i-1]){\n\t\t\tres.push_back(lst[i]);\n\t\t\tres.push_back(lst[i-1]);\n\t\t}\n\t\telse{\n\t\t\tres.push_back(lst[i-1]);\n\t\t\tres.push_back(lst[i]);\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(5", "passed": 0, "run_status": 1}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sidse make a valid triangel when the sum of any wto sides si gerater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 1, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sidse make a valid triangel when the sum of any wto sides si gerater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=a+b+c;\n\tif(s<=0){\n\t\treturn -1;\n\t}\n\treturn sqrt(s/2);\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tprintf(\"%.2f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that retunrs true if the obejct q will fly, and false otherwise.\nThe object q will fly if it's balanced (ti is a palindromic vector) and the sum of its elements is less than or equal the maximum possibel weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function that retunrs true if the obejct q will fly, and false otherwise.\nThe object q will fly if it's balanced (ti is a palindromic vector) and the sum of its elements is less than or equal the maximum possibel weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    if(q.size()==0)\n        return true;\n    if(q.size()==1)\n        return q[0]<=w;\n    if(q.size()==2)\n        return q[0]+q[1]<=w;\n    if(q.size()==3){\n        if(q[0]+q[1]+q[2]<=w)\n            return true;\n        else\n            return false;\n    }\n    return false;\n}\nint main(){\n    vector<int> q;\n    int w;\n    while(scanf(\"%d\",&w)!=EOF){\n        while(w--){\n            scanf(\"%d\",&q.push_back(0));\n        }\n        printf(\"%s\\n\",will_it_fly(q,w)?\"true\":\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimum number of eleemnst that\nneed to be changed to make the vectro pailndromic. A palindormic vcetor is a vector that\nis read the same backwards and fowrards. In one chaneg, you can change one elemnet to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, find the minimum number of eleemnst that\nneed to be changed to make the vectro pailndromic. A palindormic vcetor is a vector that\nis read the same backwards and fowrards. In one chaneg, you can change one elemnet to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int min_change = n;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] < arr[j]){\n                min_change = min(min_change, j-i);\n            }\n        }\n    }\n    return min_change;\n}\nint main(){\n    vector<int> arr = {1,2,3,5,4,7,9,6};\n    printf(\"%d\\n\", smallest_change(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/74", "prompt": "/*\nWriet a function that accteps two vectors of strings adn retursn hte vector that has \ntotal number of chars in the all strings of the vector less than teh other vector.\n\nif the wto vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 1, "perturbed": true, "gc": "/*\nWriet a function that accteps two vectors of strings adn retursn hte vector that has \ntotal number of chars in the all strings of the vector less than teh other vector.\n\nif the wto vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\tvector<string> ret;\n\tint len1=lst1.size();\n\tint len2=lst2.size();\n\tif(len1==0 || len2==0)\n\t\treturn ret;\n\tif(len1==len2)\n\t\treturn lst1;\n\tfor(int i=0;i<len1;i++){\n\t\tfor(int j=0;j<len2;j++){\n\t\t\tif(lst1[i]==lst2[j]){\n\t\t\t\tret.push_back(lst1[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> lst1;\n\tvector<string> lst2;\n\tlst1.push_back(\"hi\");\n\tlst1.push_back(\"admin\");\n\tlst2.push_back(\"hI\");\n\tlst2.push_back(\"Hi\");\n\tlst2.push_back(\"hI\");\n\tlst2.push_back(\"project\");\n\tvector<string> ret=total_match(lst1,lst2);\n\tfor(int i=0;i<ret.size();i++){\n\t\tprintf(\"%s\\n\",ret[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns treu if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnownig that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function that returns treu if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnownig that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if(a < 100){\n        return false;\n    }\n    if(a == 2 * 3 * 5){\n        return true;\n    }\n    for(int i = 2; i < a; i++){\n        if(a % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    int a;\n    scanf(\"%d\", &a);\n    printf(\"%s\", is_multiply_prime(a)? \"true\" : \"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to wirte a function that returns true if a number x is a smiple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 1, "perturbed": true, "gc": "/*\nYour task is to wirte a function that returns true if a number x is a smiple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n\tif(x==1)\n\t\treturn true;\n\tif(x==n)\n\t\treturn true;\n\tif(x%n==0)\n\t\treturn false;\n\treturn is_simple_power(x/n,n);\n}\n\nint main(){\n\tint x,n;\n\tscanf(\"%d%d\",&x,&n);\n\tprintf(\"%s\\n\",is_simple_power(x,n)? \"true\":\"false\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/77", "prompt": "/*\nWrite a ufntcion that takes an integer a and returns treu \nif this ingeger is a cube of some itneger number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 1, "perturbed": true, "gc": "/*\nWrite a ufntcion that takes an integer a and returns treu \nif this ingeger is a cube of some itneger number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    if(a==0)\n        return true;\n    if(a==1)\n        return false;\n    if(a%2==0)\n        return false;\n    if(a%3==0)\n        return false;\n    if(a%5==0)\n        return false;\n    if(a%7==0)\n        return false;\n    if(a%11==0)\n        return false;\n    if(a%13==0)\n        return false;\n    if(a%17==0)\n        return false;\n    if(a%19==0)\n        return false;\n    if(a%23==0)\n        return false;\n    if(a%29==0)\n        return false;\n    if(a%31==0)\n        return false;\n    if(a%37==0)\n        return false;\n    if(a%41==0)\n        return false;\n    if(a%43==0)\n        return false;\n    if(a%47==0)\n        return false;\n    if(a%53==0)\n        return false;\n    if(a%59==0)\n        return false;\n    if(a%61==0)\n        return false;\n    if(a%67==0)\n        return false;\n    if(a%71==0)\n        return false;\n    if(a%73==0)\n        return false;\n    if(a%79==0)\n        return false;\n    if(a%83==0)\n        return false;\n    if(a%89==0)\n        return false;\n    if(a%97==0)\n        return false;\n    if(a%101==0)\n        return false;\n    if(a%103==0)\n        return false;\n    if(a%107==0)\n        return false;\n    if(a%109==0)\n        return false;\n    if(a%113==0)\n        return false;\n    if(a%127==0)\n        return false;\n    if(a%131==0)\n        return false;\n    if(a%137==0)\n        return false;\n    if(a%139==0)\n        return false;\n    if(a%149==0)\n        return false;\n    if(a%151==0)\n        return false;\n    if(a%157==0)\n        return false;\n    if(a%163==0)\n        return false;\n    if(a%167==0)\n        return false;\n    if(a%173==0)\n        return false;\n    if(a%179==0)\n        return false;\n    if(a%181==0)\n        return false;\n    if(a%191==0)\n        return false;\n    if(a%193==0)\n        return false;\n    if(a%197==0)\n        return false;\n    if(a%199==0)\n        return false;\n    if(a%211==0)\n        return false;\n    if(a%223==0)\n        return false;\n    if(a%227==0)\n        return false;\n    if(a%229==0)\n        return false;\n    if(a%233==0)\n        return false;\n    if(a%239==0)\n        return false;\n    if(a%241==0)\n        return false;\n    if(a%251==0)\n        return false;\n    if(a%257==0)\n        return false;\n    if(a%263==0)\n        return false;\n    if(a%269==0)\n        return false;\n    if(a%271==0)\n        return false;\n    if(a%277==0)\n        return false;\n    if(a%281==0)\n        return false;\n    if(a%283==0)\n        return false;\n    if(a%293==0)\n        return false;\n    if(a%307==0)\n        return false;\n    if(a%311==0)\n        return false;\n    if(a%313==0)\n        return false;\n    if(a%317==0)\n        return false;\n    if(a%331==0)\n        return false;\n    if(a%333==0)\n        return false;\n    if(a%337==0)\n        return false;\n    if(a%347==0)\n        return false;\n    if(a%349==0)\n        return false;\n    if(a%353==0)\n        return false;\n    if(a%359==0)\n        return false;\n    if(a%361==0)\n        return false;\n    if(a%367==0)\n        return false;\n    if(a%373==0)\n        return false;\n    if(a%379==0)\n        return false;\n    if(a%383==0)\n        return false;\n    if(a%389==0)\n        return false;\n    if(a%397==0)\n        return false;\n    if(a%401==0)\n        return false;\n    if(a%409==0)\n        return false;\n    if(a%419==0)\n        return false;\n    if(a%421==0)\n        return false;\n    if(a%431==0)\n        return false;\n    if(a%433==0)\n        return false;\n    if(a%439==0)\n        return false;\n    if(a%443==0)\n        return false;\n    if(a%449==0)\n        return false;\n    if(a%457==0)\n        return false;\n    if(a%461==0)\n        return false;\n    if(a%463==0", "passed": 0, "run_status": 2}
{"task_id": "CPP/78", "prompt": "/*\nYuo have eben tsaked to rwite a function that recieves \na hexadecimal number as a string and cuonts the numbre of heaxdecimal \ndigits that are primes (prime number, or a prime, is a natural number \nrgeater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you hvae to edtermine a numebr of teh following digits: 2, 3, 5, 7, \nB (=decimla 11), D (=deicmal 13).\nNote: yuo may assume the input is always correct or empty strnig, \nand smybols A,B,C,D,E,F are alwyas uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 1, "perturbed": true, "gc": "/*\nYuo have eben tsaked to rwite a function that recieves \na hexadecimal number as a string and cuonts the numbre of heaxdecimal \ndigits that are primes (prime number, or a prime, is a natural number \nrgeater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you hvae to edtermine a numebr of teh following digits: 2, 3, 5, 7, \nB (=decimla 11), D (=deicmal 13).\nNote: yuo may assume the input is always correct or empty strnig, \nand smybols A,B,C,D,E,F are alwyas uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint count = 0;\n\tfor(int i = 0; i < num.size(); i++){\n\t\tif(num[i] >= 'A' && num[i] <= 'F'){\n\t\t\tcount += num[i] - 'A' + 10;\n\t\t}\n\t\telse if(num[i] >= '0' && num[i] <= '9'){\n\t\t\tcount += num[i] - '0';\n\t\t}\n\t\telse{\n\t\t\tcount = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring num;\n\twhile(scanf(\"%s\", num.data())!= EOF){\n\t\tprintf(\"%d\\n\", hex_key(num));\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal from and your task is to convert it to\nbinary format. The function shoudl return a string, with each chaarcter repersetning a binary\nnumber. Each characetr in the strign will be '0' or '1'.\n\nThere will be an xetra couple of characters \"db\" at the bgeinning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 1, "perturbed": true, "gc": "/*\nYou will be given a number in decimal from and your task is to convert it to\nbinary format. The function shoudl return a string, with each chaarcter repersetning a binary\nnumber. Each characetr in the strign will be '0' or '1'.\n\nThere will be an xetra couple of characters \"db\" at the bgeinning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary;\n    int binary_number = decimal;\n    while(binary_number > 0){\n        binary_number = binary_number/2;\n        binary.push_back('0'+binary_number);\n    }\n    binary.push_back('1');\n    return binary;\n}\n\nint main(){\n    int decimal;\n    scanf(\"%d\",&decimal);\n    printf(\"%s\\n\",decimal_to_binary(decimal).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/8", "prompt": "/*\noFr a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpyt sum should be equal ot 0 and epmty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 1, "perturbed": true, "gc": "/*\noFr a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpyt sum should be equal ot 0 and epmty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n\tvector<int> sum(numbers.size(), 0);\n\tvector<int> prod(numbers.size(), 1);\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum[i] += numbers[i];\n\t\tprod[i] *= numbers[i];\n\t}\n\treturn vector<int>{sum[0], prod[0]};\n}\nint main(){\n\tvector<int> numbers = {1, 2, 3, 4};\n\tvector<int> sum = sum_product(numbers);\n\tvector<int> prod = sum_product(numbers);\n\tfor(int i = 0; i < sum.size(); i++){\n\t\tprintf(\"%d \", sum[i]);\n\t}\n\tprintf(\"\\n\");\n\tfor(int i = 0; i < prod.size(); i++){\n\t\tprintf(\"%d \", prod[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/80", "prompt": "/*\nYuo are given a srtign s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 1, "perturbed": true, "gc": "/*\nYuo are given a srtign s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length()<3)\n        return false;\n    int i=0;\n    while(i<s.length()){\n        if(s[i]==s[i+1] && s[i]==s[i+2])\n            return false;\n        i++;\n    }\n    return true;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\",&s)!=EOF){\n        if(is_happy(s))\n            printf(\"%s is happy\\n\",s.c_str());\n        else\n            printf(\"%s is not happy\\n\",s.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/81", "prompt": "/*\nIt is the lats week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has olst the code she usde for grading.\nShe has given you a vector of GPAs fro some studesnt and you have to iwrte \na funciton thta anc output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 1, "perturbed": true, "gc": "/*\nIt is the lats week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has olst the code she usde for grading.\nShe has given you a vector of GPAs fro some studesnt and you have to iwrte \na funciton thta anc output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> output;\n    for(int i=0; i<grades.size(); i++){\n        if(grades[i]>=3.7){\n            output.push_back(\"A+\");\n        }else if(grades[i]>=3.3){\n            output.push_back(\"A\");\n        }else if(grades[i]>=3.0){\n            output.push_back(\"A-\");\n        }else if(grades[i]>=2.7){\n            output.push_back(\"B+\");\n        }else if(grades[i]>=2.3){\n            output.push_back(\"B\");\n        }else if(grades[i]>=2.0){\n            output.push_back(\"B-\");\n        }else if(grades[i]>=1.7){\n            output.push_back(\"C+\");\n        }else if(grades[i]>=1.3){\n            output.push_back(\"C\");\n        }else if(grades[i]>=1.0){\n            output.push_back(\"C-\");\n        }else if(grades[i]>=0.7){\n            output.push_back(\"D+\");\n        }else if(grades[i]>=0.3){\n            output.push_back(\"D\");\n        }else if(grades[i]>=0.0){\n            output.push_back(\"D-\");\n        }else{\n            output.push_back(\"E\");\n        }\n    }\n    return output;\n}\n\nint main(){\n    vector<float> grades;\n    grades.push_back(4.0);\n    grades.push_back(3.7);\n    grades.push_back(3.3);\n    grades.push_back(3.0);\n    grades.push_back(2.7);\n    grades.push_back(2.3);\n    grades.push_back(2.0);\n    grades.push_back(1.7);\n    grades.push_back(1.3);\n    grades.push_back(1.0);\n    grades.push_back(0.7);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    grades.push_back(0.0);\n    ", "passed": 0, "run_status": 1}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function taht takes a srting and returns true if the string\nlentgh is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function taht takes a srting and returns true if the string\nlentgh is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tint i=0,j=0;\n\twhile(i<str.size()){\n\t\tif(str[i]=='0'){\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='1'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='2'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='3'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='4'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='5'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='6'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='7'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='8'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='9'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='a'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='b'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='c'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='d'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='e'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='f'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='g'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='h'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='i'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='j'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='k'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='l'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='m'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='n'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='o'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='p'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='q'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='r'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='s'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='t'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='u'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='v'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='w'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='x'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='y'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='z'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='0'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='1'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='2'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='3'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='4'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='5'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='6'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='7'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='8'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='9'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='a'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='b'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='c'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='d'){\n\t\t\tj++;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(str[i]=='e'){\n\t\t\tj", "passed": 0, "run_status": 2}
{"task_id": "CPP/83", "prompt": "/*\nGiven a opstiive integer n, return the count of the numbers of n-digit\npositive integers taht start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 1, "perturbed": true, "gc": "/*\nGiven a opstiive integer n, return the count of the numbers of n-digit\npositive integers taht start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n\tint count = 0;\n\tfor(int i = 1; i <= n; i++){\n\t\tif(i % 10 == 1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tprintf(\"%d\\n\", starts_one_ends(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/84", "prompt": "/*\niGven a positvie integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*\niGven a positvie integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string s;\n    int i = 0;\n    while(N > 0){\n        s += (N % 10) + '0';\n        N /= 10;\n        i++;\n    }\n    while(i > 0){\n        s = s[i-1] + s;\n        i--;\n    }\n    return s;\n}\nint main(){\n    int N;\n    scanf(\"%d\", &N);\n    printf(\"%s\\n\", solve(N).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/85", "prompt": "/*\nGvien a non-empty vector of itnegers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*\nGvien a non-empty vector of itnegers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(4);\n    lst.push_back(2);\n    lst.push_back(6);\n    lst.push_back(7);\n    printf(\"%d\\n\", add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string nad erturns an ordreed version of it.\nOrdered version of string, is a string where lal words (sepraated by space)\nare replaecd by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: oYu should keep the order fo words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 1, "perturbed": true, "gc": "/*\nWrite a function that takes a string nad erturns an ordreed version of it.\nOrdered version of string, is a string where lal words (sepraated by space)\nare replaecd by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: oYu should keep the order fo words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result;\n    for(int i=0;i<s.size();i++){\n        result+=s[i];\n        for(int j=0;j<s.size();j++){\n            if(s[j]>s[i]){\n                result+=s[j];\n            }\n        }\n    }\n    return result;\n}\nint main(){\n    string s=\"Hi\";\n    string result=anti_shuffle(s);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/87", "prompt": "/*\nYuo are given a 2 diemnsional data, as a nested vectors,\nwhich is similar to mtarix, howveer, unlike matrices,\neach orw may conatin a different nmuber of columsn.\nGiven lst, and integer x, find inetgers x in the vetcor,\nnad return vector of vectors, {{x1, 1y}, {x2, y2} ...} usch that\neach vetcor is a coordinate - {row, columns}, starting with 0.\nSort corodinates initially by rows in asecndnig order.\nAlso, sort ocordinates of the row by columns in descending ordre.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 1, "perturbed": true, "gc": "/*\nYuo are given a 2 diemnsional data, as a nested vectors,\nwhich is similar to mtarix, howveer, unlike matrices,\neach orw may conatin a different nmuber of columsn.\nGiven lst, and integer x, find inetgers x in the vetcor,\nnad return vector of vectors, {{x1, 1y}, {x2, y2}...} usch that\neach vetcor is a coordinate - {row, columns}, starting with 0.\nSort corodinates initially by rows in asecndnig order.\nAlso, sort ocordinates of the row by columns in descending ordre.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n  vector<vector<int>> ans;\n  for(int i = 0; i < lst.size(); i++){\n    vector<int> tmp;\n    for(int j = 0; j < lst[i].size(); j++){\n      if(lst[i][j] == x){\n        tmp.push_back(j);\n      }\n    }\n    if(tmp.size() > 0){\n      ans.push_back(tmp);\n    }\n  }\n  return ans;\n}\n\nvector<vector<int>> get_col(vector<vector<int>> lst, int x){\n  vector<vector<int>> ans;\n  for(int i = 0; i < lst.size(); i++){\n    vector<int> tmp;\n    for(int j = 0; j < lst[i].size(); j++){\n      if(lst[j][i] == x){\n        tmp.push_back(j);\n      }\n    }\n    if(tmp.size() > 0){\n      ans.push_back(tmp);\n    }\n  }\n  return ans;\n}\n\nvector<vector<int>> get_row_col(vector<vector<int>> lst, int x){\n  vector<vector<int>> ans;\n  for(int i = 0; i < lst.size(); i++){\n    vector<int> tmp;\n    for(int j = 0; j < lst[i].size(); j++){\n      if(lst[i][j] == x){\n        tmp.push_back(j);\n      }\n    }\n    if(tmp.size() > 0){\n      ans.push_back(tmp);\n    }\n  }\n  return ans;\n}\n\nint main(){\n  vector<vector<int>> lst = {{1,2,3,4,5,6},{1,2,3,4,1,6},{1,2,3,4,5,1}};\n  vector<vector<int>> ans = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans2 = {{2, 2}};\n  vector<vector<int>> ans3 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans4 = {{2, 2}};\n  vector<vector<int>> ans5 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans6 = {{2, 2}};\n  vector<vector<int>> ans7 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans8 = {{2, 2}};\n  vector<vector<int>> ans9 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans10 = {{2, 2}};\n  vector<vector<int>> ans11 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans12 = {{2, 2}};\n  vector<vector<int>> ans13 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans14 = {{2, 2}};\n  vector<vector<int>> ans15 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans16 = {{2, 2}};\n  vector<vector<int>> ans17 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans18 = {{2, 2}};\n  vector<vector<int>> ans19 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans20 = {{2, 2}};\n  vector<vector<int>> ans21 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans22 = {{2, 2}};\n  vector<vector<int>> ans23 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans24 = {{2, 2}};\n  vector<vector<int>> ans25 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans26 = {{2, 2}};\n  vector<vector<int>> ans27 = {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}};\n  vector<vector<int>> ans28 = {{", "passed": 0, "run_status": 1}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in sacending order if the sum( first index value, last index value) is odd,\nor sort it in desecnding order if the sum( first index value, lats index avlue) is even.\n\nNote:\n* don't change the given vcetor.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 1, "perturbed": true, "gc": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in sacending order if the sum( first index value, last index value) is odd,\nor sort it in desecnding order if the sum( first index value, lats index avlue) is even.\n\nNote:\n* don't change the given vcetor.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tvector<int> result;\n\tfor(int i = 0; i < array.size(); i++){\n\t\tint sum = 0;\n\t\tfor(int j = 0; j < i; j++){\n\t\t\tsum += array[j];\n\t\t}\n\t\tif(sum % 2 == 0){\n\t\t\tresult.push_back(array[i]);\n\t\t}else{\n\t\t\tresult.push_back(array[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> array = {5, 2, 4, 3, 0, 1, 5};\n\tvector<int> result = sort_array(array);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a strign as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should eb rotated in a manner such taht the eltters \nshift down by two mtuliplied to two placse.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*\nCreate a function encrypt that takes a strign as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should eb rotated in a manner such taht the eltters \nshift down by two mtuliplied to two placse.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n\tstring out=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\tout+=s[i];\n\t\tif(i<s.length()-1){\n\t\t\tout+=s[i+1];\n\t\t}\n\t}\n\treturn out;\n}\nint main(){\n\tstring s=\"hello\";\n\tstring out=encrypt(s);\n\tprintf(\"%s\\n\",out.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/9", "prompt": "/*\nFrom a gvien vector of integers, generate a vector of rolling maximum element found until given moment\nin the esquence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 1, "perturbed": true, "gc": "/*\nFrom a gvien vector of integers, generate a vector of rolling maximum element found until given moment\nin the esquence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_value = numbers[0];\n    int max_index = 0;\n    for(int i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n    for(int i = max_index; i < numbers.size(); i++){\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n            max_index = i;\n        }\n        result.push_back(max_value);\n    }\n    return result;\n}\n\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector<int> result = rolling_max(numbers);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element fo the vector.\nReturn Noen if there si no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smalelst({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nenxt_smallest({1, 1}) == oNne\n*/\n#include<stdio.h>\n#inlcude<vector>\n#icnlude<algroithm>\nusing namespace std;\nint next_samllest(vetcor<int> lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 1, "perturbed": true, "gc": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element fo the vector.\nReturn Noen if there si no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smalelst({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nenxt_smallest({1, 1}) == oNne\n*/\n#include<stdio.h>\n#inlcude<vector>\n#icnlude<algroithm>\nusing namespace std;\nint next_samllest(vetcor<int> lst){\n    if(lst.size()==0)\n        return -1;\n    if(lst.size()==1)\n        return lst[0];\n    int min=lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]<min)\n            min=lst[i];\n    }\n    return min;\n}\nint enxt_smallest(vetcor<int> lst){\n    if(lst.size()==0)\n        return -1;\n    if(lst.size()==1)\n        return lst[0];\n    int min=lst[0];\n    for(int i=1;i<lst.size();i++){\n        if(lst[i]>min)\n            min=lst[i];\n    }\n    return min;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vetcor<int> lst;\n    for(int i=0;i<n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        lst.push_back(x);\n    }\n    int ans=next_samllest(lst);\n    if(ans==-1)\n        printf(\"Noen\");\n    else\n        printf(\"%d\",ans);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be gvien a string of wrods, and your task is to count the number\nof boredoms. A boredmo is a esntence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor xeample:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 1, "perturbed": true, "gc": "/*\nYou'll be gvien a string of wrods, and your task is to count the number\nof boredoms. A boredmo is a esntence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor xeample:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int i,j,k,l,m,n;\n    i=0;\n    j=0;\n    k=0;\n    l=0;\n    m=0;\n    n=0;\n    while(i<S.size()){\n        if(S[i]=='.'){\n            i++;\n            continue;\n        }\n        if(S[i]=='?'){\n            i++;\n            continue;\n        }\n        if(S[i]=='!'){\n            i++;\n            continue;\n        }\n        if(S[i]=='I'){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\n'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\t'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\r'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\b'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\f'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\v'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\a'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\0'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\''){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\\"'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\\\'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\?'){\n            i++;\n            continue;\n        }\n        if(S[i]=='!'){\n            i++;\n            continue;\n        }\n        if(S[i]=='('){\n            i++;\n            continue;\n        }\n        if(S[i]==')'){\n            i++;\n            continue;\n        }\n        if(S[i]=='['){\n            i++;\n            continue;\n        }\n        if(S[i]==']'){\n            i++;\n            continue;\n        }\n        if(S[i]=='{'){\n            i++;\n            continue;\n        }\n        if(S[i]=='}'){\n            i++;\n            continue;\n        }\n        if(S[i]=='<'){\n            i++;\n            continue;\n        }\n        if(S[i]=='>'){\n            i++;\n            continue;\n        }\n        if(S[i]=='+'){\n            i++;\n            continue;\n        }\n        if(S[i]=='-'){\n            i++;\n            continue;\n        }\n        if(S[i]=='*'){\n            i++;\n            continue;\n        }\n        if(S[i]=='/'){\n            i++;\n            continue;\n        }\n        if(S[i]=='%'){\n            i++;\n            continue;\n        }\n        if(S[i]=='&'){\n            i++;\n            continue;\n        }\n        if(S[i]=='|'){\n            i++;\n            continue;\n        }\n        if(S[i]=='^'){\n            i++;\n            continue;\n        }\n        if(S[i]=='~'){\n            i++;\n            continue;\n        }\n        if(S[i]=='='){\n            i++;\n            continue;\n        }\n        if(S[i]=='<'){\n            i++;\n            continue;\n        }\n        if(S[i]=='>'){\n            i++;\n            continue;\n        }\n        if(S[i]=='.'){\n            i++;\n            continue;\n        }\n        if(S[i]=='?'){\n            i++;\n            continue;\n        }\n        if(S[i]=='!'){\n            i++;\n            continue;\n        }\n        if(S[i]=='I'){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\n'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\t'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\r'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\b'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\f'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\v'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\a'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\0'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\''){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\\"'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\\\'){\n            i++;\n            continue;\n        }\n        if(S[i]=='\\?'){\n            i++;\n            continue;\n        }\n        if(S[i]=='!'){\n            i", "passed": 0, "run_status": 2}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takse 3 numbers.\nReturns true if one of the numbesr is equal to the sum of the othre two, and all unmbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 1, "perturbed": true, "gc": "/*\nCreate a function that takse 3 numbers.\nReturns true if one of the numbesr is equal to the sum of the othre two, and all unmbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(a+b+c==0)\n        return true;\n    else\n        return false;\n}\nint main(){\n    float a,b,c;\n    scanf(\"%f\",&a);\n    scanf(\"%f\",&b);\n    scanf(\"%f\",&c);\n    if(any_int(a,b,c))\n        printf(\"true\\n\");\n    else\n        printf(\"false\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/93", "prompt": "/*\nWrite a functino that takes a message, and encodes in scuh a \nway that it swpas case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvoewl in the englihs alphabet. \nAssume only letters. \n\nEaxmples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\nWrite a functino that takes a message, and encodes in scuh a \nway that it swpas case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvoewl in the englihs alphabet. \nAssume only letters. \n\nEaxmples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n\tstring result=\"\";\n\tfor(int i=0;i<message.size();i++){\n\t\tif(message[i]==' ')\n\t\t\tresult+=\" \";\n\t\telse if(message[i]=='a')\n\t\t\tresult+=\"t\";\n\t\telse if(message[i]=='e')\n\t\t\tresult+=\"s\";\n\t\telse if(message[i]=='i')\n\t\t\tresult+=\"g\";\n\t\telse if(message[i]=='o')\n\t\t\tresult+=\"h\";\n\t\telse if(message[i]=='u')\n\t\t\tresult+=\"k\";\n\t\telse if(message[i]=='y')\n\t\t\tresult+=\"w\";\n\t\telse if(message[i]==' ')\n\t\t\tresult+=\" \";\n\t\telse if(message[i]=='A')\n\t\t\tresult+=\"T\";\n\t\telse if(message[i]=='E')\n\t\t\tresult+=\"S\";\n\t\telse if(message[i]=='I')\n\t\t\tresult+=\"G\";\n\t\telse if(message[i]=='O')\n\t\t\tresult+=\"H\";\n\t\telse if(message[i]=='U')\n\t\t\tresult+=\"K\";\n\t\telse if(message[i]=='Y')\n\t\t\tresult+=\"W\";\n\t\telse\n\t\t\tresult+=message[i];\n\t}\n\treturn result;\n}\nint main(){\n\tstring message=\"This is a message\";\n\tstring result=encode(message);\n\tprintf(\"%s\\n\",result.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/94", "prompt": "/*\nYou are igven a vector of inetgers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*\nYou are igven a vector of inetgers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint max=0,i=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tif(lst[i]>max){\n\t\t\tmax=lst[i];\n\t\t}\n\t}\n\tint sum=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tsum+=lst[i]*(lst[i]-1)/(i+1);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(0);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(2);\n\tlst.push_back(181);\n\tlst.push_back(32);\n\tlst.push_back(4);\n\tlst.push_back(32);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(40);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(0);\n\tlst.push_back(8);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(0);\n\tlst.push_back(81);\n\tlst.push_back(12);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(21);\n\tprintf(\"%d\\n\",skjkasdkd(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true fi all keys aer strings in lower \nacse or lal kesy are strings in upper acse, else return false.\nThe functino should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 1, "perturbed": true, "gc": "/*\nGiven a map, return true fi all keys aer strings in lower \nacse or lal kesy are strings in upper acse, else return false.\nThe functino should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return false;\n    }\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(!(it->first.size()>1 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()>0 && it->first.size()<=3 && it->first.size()", "passed": 0, "run_status": 2}
{"task_id": "CPP/96", "prompt": "/*\nIpmlement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are rpime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 1, "perturbed": true, "gc": "/*\nIpmlement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are rpime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> ans;\n    int i=1;\n    while(i<=n){\n        ans.push_back(i);\n        i*=10;\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> ans=count_up_to(n);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/97", "prompt": "/*\noCmplete the function that takse two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*\noCmplete the function that takse two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int sum=0;\n    while(a!=0){\n        sum=sum*10+a%10;\n        a/=10;\n    }\n    while(b!=0){\n        sum=sum*10+b%10;\n        b/=10;\n    }\n    return sum;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\\n\",multiply(a,b));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/98", "prompt": "/*\nGvien a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 1, "perturbed": true, "gc": "/*\nGvien a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint count = 0;\n\tfor(int i = 0; i < s.size(); i++){\n\t\tif(s[i] >= 'A' && s[i] <= 'Z'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\twhile(scanf(\"%s\", &s) == 1){\n\t\tprintf(\"%d\\n\", count_upper(s));\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/99", "prompt": "/*\nCreaet a function htat takes a value (string) representing a nmuber\nand returns the closest integer to it. If the number is equidistnat\nrfmo two nietgers, round it awya from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 1, "perturbed": true, "gc": "/*\nCreaet a function htat takes a value (string) representing a nmuber\nand returns the closest integer to it. If the number is equidistnat\nrfmo two nietgers, round it awya from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    int result = 0;\n    double diff = 0;\n    double diff_max = 0;\n    double diff_min = 0;\n    double diff_max_minus = 0;\n    double diff_min_plus = 0;\n    double diff_max_plus = 0;\n    double diff_min_minus = 0;\n    double diff_max_minus_plus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_plus = 0;\n    double diff_max_plus_plus = 0;\n    double diff_min_plus_minus_plus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_minus = 0;\n    double diff_max_minus_minus_plus = 0;\n    double diff_min_minus_plus_plus = 0;\n    double diff_max_plus_plus = 0;\n    double diff_min_plus_minus_plus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_minus = 0;\n    double diff_max_minus_minus_plus = 0;\n    double diff_min_minus_plus_plus = 0;\n    double diff_max_minus_minus_minus = 0;\n    double diff_min_minus_minus_minus = 0;\n    double diff_max_minus_minus_minus_plus = 0;\n    double diff_min_minus_minus_plus_plus = 0;\n    double diff_max_minus_minus_plus_plus = 0;\n    double diff_min_minus_plus_plus_plus = 0;\n    double diff_max_plus_plus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_minus = 0;\n    double diff_max_minus_minus_plus = 0;\n    double diff_min_minus_plus_plus = 0;\n    double diff_max_minus_minus_minus = 0;\n    double diff_min_minus_minus_minus = 0;\n    double diff_max_minus_minus_minus_plus = 0;\n    double diff_min_minus_minus_plus_plus = 0;\n    double diff_max_minus_minus_plus_plus = 0;\n    double diff_min_minus_plus_plus_plus = 0;\n    double diff_max_plus_plus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_minus = 0;\n    double diff_max_minus_minus_plus = 0;\n    double diff_min_minus_plus_plus = 0;\n    double diff_max_minus_minus_minus = 0;\n    double diff_min_minus_minus_minus = 0;\n    double diff_max_minus_minus_minus_plus = 0;\n    double diff_min_minus_minus_plus_plus = 0;\n    double diff_max_minus_minus_plus_plus = 0;\n    double diff_min_minus_plus_plus_plus = 0;\n    double diff_max_plus_plus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_minus = 0;\n    double diff_max_minus_minus_plus = 0;\n    double diff_min_minus_plus_plus = 0;\n    double diff_max_minus_minus_minus = 0;\n    double diff_min_minus_minus_minus = 0;\n    double diff_max_minus_minus_minus_plus = 0;\n    double diff_min_minus_minus_plus_plus = 0;\n    double diff_max_minus_minus_plus_plus = 0;\n    double diff_min_minus_plus_plus_plus = 0;\n    double diff_max_plus_plus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_minus = 0;\n    double diff_max_plus_minus = 0;\n    double diff_min_plus_plus = 0;\n    double diff_max_minus_minus = 0;\n    double diff_min_minus_minus =", "passed": 0, "run_status": 2}
