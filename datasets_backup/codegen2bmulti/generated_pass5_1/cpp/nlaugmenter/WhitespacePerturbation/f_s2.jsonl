{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vec t or of nu mbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 2, "perturbed": true, "gc": "/*\nCheck if in given vec t or of nu mbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    if(numbers.size() < 2)\n        return false;\n    for(int i = 0; i < numbers.size() - 1; i++){\n        for(int j = i + 1; j < numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold)\n                return true;\n        }\n    }\n    return false;\n}\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    numbers.push_back(5.0);\n    numbers.push_back(2.0);\n    printf(\"%s\\n\", has_close_elements(numbers, 0.5)? \"true\" : \"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/1", "prompt": "/*\nInput to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is tosepara te  thosegro up int o separate strings and r etur nthe vector of th o se.\nSeparate groupsarebalanced(eachopen brace is properly cl osed) and not nested within each other\nIgnore any spaces i n the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 2, "perturbed": true, "gc": "/*\nInput to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is tosepara te  thosegro up int o separate strings and r etur nthe vector of th o se.\nSeparate groupsarebalanced(eachopen brace is properly cl osed) and not nested within each other\nIgnore any spaces i n the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> paren_groups;\n    int i=0;\n    int j=0;\n    while(i<paren_string.size()){\n        if(paren_string[i]=='('){\n            paren_groups.push_back(paren_string.substr(j,i-j));\n            j=i+1;\n        }\n        i++;\n    }\n    paren_groups.push_back(paren_string.substr(j,i-j));\n    return paren_groups;\n}\nint main(){\n    string paren_string;\n    vector<string> paren_groups;\n    while(scanf(\"%s\",&paren_string)!=EOF){\n        paren_groups=separate_paren_groups(paren_string);\n        for(int i=0;i<paren_groups.size();i++){\n            printf(\"%s \",paren_groups[i].c_str());\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest pal i ndrome t hat begins with a supplied string. \n    Algorithm idea issimple: - Fin d thelo ngest p ost fix of  supplied string that is  ap alindrome. \n    -A ppend to the end ofthestring re verseof a string prefix that c omes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest pal i ndrome t hat begins with a supplied string. \n    Algorithm idea issimple: - Fin d thelo ngest p ost fix of  supplied string that is  ap alindrome. \n    -A ppend to the end ofthestring re verseof a string prefix that c omes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string s(str.rbegin(),str.rend());\n    if(s==str) return str;\n    if(s.length()==0) return str;\n    if(is_palindrome(s)) return s;\n    if(s.length()==1) return str;\n    string s1(s.rbegin(),s.rend());\n    string s2(s.rbegin(),s.rend());\n    string s3(s.rbegin(),s.rend());\n    string s4(s.rbegin(),s.rend());\n    string s5(s.rbegin(),s.rend());\n    string s6(s.rbegin(),s.rend());\n    string s7(s.rbegin(),s.rend());\n    string s8(s.rbegin(),s.rend());\n    string s9(s.rbegin(),s.rend());\n    string s10(s.rbegin(),s.rend());\n    string s11(s.rbegin(),s.rend());\n    string s12(s.rbegin(),s.rend());\n    string s13(s.rbegin(),s.rend());\n    string s14(s.rbegin(),s.rend());\n    string s15(s.rbegin(),s.rend());\n    string s16(s.rbegin(),s.rend());\n    string s17(s.rbegin(),s.rend());\n    string s18(s.rbegin(),s.rend());\n    string s19(s.rbegin(),s.rend());\n    string s20(s.rbegin(),s.rend());\n    string s21(s.rbegin(),s.rend());\n    string s22(s.rbegin(),s.rend());\n    string s23(s.rbegin(),s.rend());\n    string s24(s.rbegin(),s.rend());\n    string s25(s.rbegin(),s.rend());\n    string s26(s.rbegin(),s.rend());\n    string s27(s.rbegin(),s.rend());\n    string s28(s.rbegin(),s.rend());\n    string s29(s.rbegin(),s.rend());\n    string s30(s.rbegin(),s.rend());\n    string s31(s.rbegin(),s.rend());\n    string s32(s.rbegin(),s.rend());\n    string s33(s.rbegin(),s.rend());\n    string s34(s.rbegin(),s.rend());\n    string s35(s.rbegin(),s.rend());\n    string s36(s.rbegin(),s.rend());\n    string s37(s.rbegin(),s.rend());\n    string s38(s.rbegin(),s.rend());\n    string s39(s.rbegin(),s.rend());\n    string s40(s.rbegin(),s.rend());\n    string s41(s.rbegin(),s.rend());\n    string s42(s.rbegin(),s.rend());\n    string s43(s.rbegin(),s.rend());\n    string s44(s.rbegin(),s.rend());\n    string s45(s.rbegin(),s.rend());\n    string s46(s.rbegin(),s.rend());\n    string s47(s.rbegin(),s.rend());\n    string s48(s.rbegin(),s.rend());\n    string s49(s.rbegin(),s.rend());\n    string s50(s.rbegin(),s.rend());\n    string s51(s.rbegin(),s.rend());\n    string s52(s.rbegin(),s.rend());\n    string s53(s.rbegin(),s.rend());\n    string s54(s.rbegin(),s.rend());\n    string s55(s.rbegin(),s.rend());\n    string s56(s.rbegin(),s.rend());\n    string s57(s.rbegin(),s.rend());\n    string s58(s.rbegin(),s.rend());\n    string s59(s.rbegin(),s.rend());\n    string s60(s.rbegin(),s.rend());\n    string s61(s.rbegin(),s.rend());\n    string s62(s.rbegin(),s.rend());\n    string s63(s.rbegin(),s.rend());\n    string s64(s.rbegin(),s.rend());\n    string s65(s.rbegin(),s.rend());\n    string s66(s.rbegin(),s.rend());\n    string s67(s.rbegin(),s.rend());\n    string s68(s.rbegin(),s.rend());\n    string s69(s.rbegin(),s.rend());\n    string s70(s.rbegin(),s.rend());\n    string s71(s.rbegin(),s.rend());\n    string s72(s.rbegin(),s.rend());\n    string s73(s.rbegin(),s.rend());\n    string s74(s.rbegin(),s.rend());\n    string s75(s.rbegin(),s.rend());\n    string s76(s.rbegin(),s.rend());\n    string s77(s.rbegin(),s.rend());\n    string s78(s.rbegin(),s.rend());\n    string s79(s.rbegin(),s.rend());\n    string s80(s.rbegin(),s.rend());\n    string s81(s.rbegin(),s.rend());\n    string s82(s.rbegin(),s.rend());\n    string s83(s.rbegin(),s.rend());\n    string s", "passed": 0, "run_status": 2}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive inte g er n, yo u have to make a pile of n levels of stones.\nThe first level has n ston es.Th enumberofstones  in the next level is:\n  -  the next odd numb e r ifn is odd.\n    - the next eve n numb er ifn is even.\nReturn t he number of stones in each level in a vector, where eleme nt at index\ni represent s thenumber of stones in the  level (i+ 1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er n, yo u have to make a pile of n levels of stones.\nThe first level has n ston es.Th enumberofstones  in the next level is:\n  -  the next odd numb e r ifn is odd.\n    - the next eve n numb er ifn is even.\nReturn t he number of stones in each level in a vector, where eleme nt at index\ni represent s thenumber of stones in the  level (i+ 1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> v;\n    v.push_back(n);\n    int i=1;\n    while(i<=n){\n        v.push_back(v[i-1]*2);\n        v.push_back(v[i-1]*2+1);\n        i++;\n    }\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v=make_a_pile(n);\n    for(int i=0;i<v.size();i++){\n        printf(\"%d \",v[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/101", "prompt": "/*\nYouwill be given a s t ring ofwords separated by commas or spaces. Your task is\nto split the string i ntowo rd s and r etu rn a v ector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 2, "perturbed": true, "gc": "/*\nYouwill be given a s t ring ofwords separated by commas or spaces. Your task is\nto split the string i ntowo rd s and r etu rn a v ector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> v;\n\tstring word;\n\tint i=0,j=0;\n\twhile(i<s.size()){\n\t\tif(s[i]==','){\n\t\t\tv.push_back(word);\n\t\t\tword=\"\";\n\t\t\tj=i+1;\n\t\t}\n\t\telse{\n\t\t\tword+=s[i];\n\t\t}\n\t\ti++;\n\t}\n\tv.push_back(word);\n\treturn v;\n}\n\nint main(){\n\tstring s;\n\tcin>>s;\n\tvector<string> v=words_string(s);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%s\\n\",v[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes t w o positi ve numbers x and y and returns the\nbiggest even integer number that isin the  r ange [x , y ] incl usive. If \nthere's no su chn umber, then the fu n ction should return-1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 2, "perturbed": true, "gc": "/*\nThis function takes t w o positi ve numbers x and y and returns the\nbiggest even integer number that isin the  r ange [x, y ] incl usive. If \nthere's no su chn umber, then the fu n ction should return-1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n\tint i,j,k,n,m,ans;\n\tif(x==y) return x;\n\tif(x>y) swap(x,y);\n\tm=x;\n\tn=y;\n\tfor(i=x;i<=y;i++){\n\t\tfor(j=x;j<=y;j++){\n\t\t\tif(i==j) continue;\n\t\t\tif(i%2==0 && j%2==0) continue;\n\t\t\tif(i%2==0 && j%2==1) continue;\n\t\t\tif(j%2==0 && i%2==1) continue;\n\t\t\tif(i%2==1 && j%2==0) continue;\n\t\t\tif(j%2==1 && i%2==0) continue;\n\t\t\tif(i%2==1 && j%2==1) continue;\n\t\t\tk=i*j;\n\t\t\tif(k<m) m=k;\n\t\t\tif(k>n) n=k;\n\t\t}\n\t}\n\tans=m;\n\treturn ans;\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d%d\",&x,&y);\n\tprintf(\"%d\\n\",choose_num(x,y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/103", "prompt": "/*\nYouare given two pos i tive int egers n and m, and your task is to compute the\naverage ofthe integersfrom n  t hroughm ( includ ing n and m). \nRound the  ans wer to the nearest integer(smaller one) and convertthat t o binary.If n is greater  than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 2, "perturbed": true, "gc": "/*\nYouare given two pos i tive int egers n and m, and your task is to compute the\naverage ofthe integersfrom n  t hroughm ( includ ing n and m). \nRound the  ans wer to the nearest integer(smaller one) and convertthat t o binary.If n is greater  than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\tint avg = (n+m)/2;\n\tint binary_avg = 0;\n\tint binary_n = 0;\n\tint binary_m = 0;\n\tint binary_n_m = 0;\n\tint binary_n_m_avg = 0;\n\tint binary_n_m_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg = 0;\n\tint binary_n_m_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg_avg", "passed": 0, "run_status": 2}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of pos i tive int egers x. return a sorted vector of all \nelements that hasn't any even d igit.\nN ote: Re tur ned ve ctor should be sorted in  inc reasing order.\n\nFo r  example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of pos i tive int egers x. return a sorted vector of all \nelements that hasn't any even d igit.\nN ote: Re tur ned ve ctor should be sorted in  inc reasing order.\n\nFo r  example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> res;\n    for(int i=0; i<x.size(); i++){\n        int d=x[i];\n        while(d>0){\n            res.push_back(d%10);\n            d/=10;\n        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint main(){\n    vector<int> x={15, 33, 1422, 1};\n    vector<int> res=unique_digits(x);\n    for(int i=0; i<res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of int e gers, so rt the integers that are between 1 and 9 inclusive,reverse the resulti ng vec to r, andthe n repl ace each digit by its co rres ponding name from\" One\", \"Two\", \"Three\", \"Four\", \"Fi ve\", \" Six\",\"Seven\", \"Eight\", \" Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of int e gers, so rt the integers that are between 1 and 9 inclusive,reverse the resulti ng vec to r, andthe n repl ace each digit by its co rres ponding name from\" One\", \"Two\", \"Three\", \"Four\", \"Fi ve\", \" Six\",\"Seven\", \"Eight\", \" Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n  vector<string> ret;\n  for(int i = 0; i < arr.size(); i++){\n    string str = to_string(arr[i]);\n    ret.push_back(str);\n  }\n  return ret;\n}\nvector<string> reverse(vector<string> arr){\n  vector<string> ret;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    ret.push_back(str);\n  }\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nvector<string> reverse_all(vector<string> arr){\n  vector<string> ret;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    ret.push_back(str);\n  }\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nvector<string> reverse_all_with_map(vector<string> arr){\n  vector<string> ret;\n  map<string, int> m;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    m[str]++;\n  }\n  for(map<string, int>::iterator it = m.begin(); it!= m.end(); it++){\n    ret.push_back(it->first);\n  }\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nvector<string> reverse_all_with_map_reverse(vector<string> arr){\n  vector<string> ret;\n  map<string, int> m;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    m[str]++;\n  }\n  for(map<string, int>::iterator it = m.begin(); it!= m.end(); it++){\n    ret.push_back(it->first);\n  }\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nvector<string> reverse_all_with_map_reverse_reverse(vector<string> arr){\n  vector<string> ret;\n  map<string, int> m;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    m[str]++;\n  }\n  for(map<string, int>::iterator it = m.begin(); it!= m.end(); it++){\n    ret.push_back(it->first);\n  }\n  reverse(ret.begin(), ret.end());\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nvector<string> reverse_all_with_map_reverse_reverse_reverse(vector<string> arr){\n  vector<string> ret;\n  map<string, int> m;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    m[str]++;\n  }\n  for(map<string, int>::iterator it = m.begin(); it!= m.end(); it++){\n    ret.push_back(it->first);\n  }\n  reverse(ret.begin(), ret.end());\n  reverse(ret.begin(), ret.end());\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nvector<string> reverse_all_with_map_reverse_reverse_reverse_reverse(vector<string> arr){\n  vector<string> ret;\n  map<string, int> m;\n  for(int i = 0; i < arr.size(); i++){\n    string str = arr[i];\n    m[str]++;\n  }\n  for(map<string, int>::iterator it = m.begin(); it!= m.end(); it++){\n    ret.push_back(it->first);\n  }\n  reverse(ret.begin(), ret.end());\n  reverse(ret.begin(), ret.end());\n  reverse(ret.begin(), ret.end());\n  reverse(ret.begin(), ret.end());\n  return ret;\n}\nint main(){\n  vector<int> arr = {2, 1, 1, 4, 5, 8, 2, 3};\n  vector<string> ret = by_length(arr);\n  for(int i = 0; i < ret.size(); i++){\n    printf(\"%s\\n\", ret[i].c_str());\n  }\n  vector<string> ret2 = reverse(ret);\n  for(int i = 0; i < ret2.size(); i++){\n    printf(\"%s\\n\", ret2[i].c_str());\n  }\n  vector<string> ret3 = reverse_all(ret);\n  for(int i = 0; i < ret3.size(); i++){\n    printf(\"%s\\n\", ret3[i].c_str());\n  }\n  vector<string> ret4 = reverse_all_with_map(ret);\n  for(int i = 0; i < ret4.size(); i++){\n    printf(\"%s", "passed": 0, "run_status": 1}
{"task_id": "CPP/106", "prompt": "/*\nImplement the functio n  f thattakes n as a parameter,\nand returns a vector of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\nor t h e sum of numbers from 1to i othe rwise. \ni startsfrom 1.\nthe fac torial of i is the multiplication of the numbers from 1 to  i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/*\nImplement the functio n  f thattakes n as a parameter,\nand returns a vector of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\nor t h e sum of numbers from 1to i othe rwise. \ni startsfrom 1.\nthe fac torial of i is the multiplication of the numbers from 1 to  i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\tvector<int> v(n,0);\n\tfor(int i=1;i<=n;i++){\n\t\tv[i] = v[i-1] + i;\n\t}\n\treturn v;\n}\nint main(){\n\tvector<int> v = f(5);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive inte g er n, re turn a vector that has the number of even and odd\nintegerpalindromes t hatfa ll  within  th e rang e(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er n, re turn a vector that has the number of even and odd\nintegerpalindromes t hatfa ll  within  th e rang e(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> res;\n    int even_num = 0, odd_num = 0;\n    for(int i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(is_even(i)){\n                even_num++;\n            }else{\n                odd_num++;\n            }\n        }\n    }\n    res.push_back(even_num);\n    res.push_back(odd_num);\n    return res;\n}\nbool is_palindrome(int n){\n    int i = 0, j = n-1;\n    while(i < j){\n        if(n % i == n % j){\n            i++;\n            j--;\n        }else{\n            return false;\n        }\n    }\n    return true;\n}\nbool is_even(int n){\n    return (n % 2 == 0);\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> res = even_odd_palindrome(n);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function coun t _nums wh ich takes a vector of integers and returns\nthe number of elements which  has a  s um of d igi ts > 0 .\nIf a number is negativ e,t hen its first sign e d digit will be negative:\ne.g. -1 23 has  signed digits -1, 2, and  3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function coun t _nums wh ich takes a vector of integers and returns\nthe number of elements which  has a  s um of d igi ts > 0.\nIf a number is negativ e,t hen its first sign e d digit will be negative:\ne.g. -1 23 has  signed digits -1, 2, and  3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int cnt = 0;\n    for(int i = 0; i < n.size(); i++){\n        if(n[i] > 0){\n            cnt++;\n        }\n    }\n    return cnt;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> v;\n        for(int i = 0; i < n; i++){\n            int x;\n            scanf(\"%d\", &x);\n            v.push_back(x);\n        }\n        printf(\"%d\\n\", count_nums(v));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/109", "prompt": "/*\nWehave a vector \"arr \"  of N in tegers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be ra ndomly  o rdered.  Yo ur tas k is to determine if\nitisp ossible to get a v e ctorsorted in non-decreasing ord er byperforming \nthe following  operation on the givenvector:\n    You are allowed to per form right shift operat ion an y number of times.\n\nOne  right shi ft operation me ans shiftingall elements of the vector by one\nposition in the right direction. The las t element of the vector willbe moved to\nthe starting po sitioninthe vecto r i.e.0th index. \nIf it is possible to obtain th e sorted v ector  by performing the above operation\nthen return true else re turn false. \nIf the given vector is empty then returntrue.\n\nNote:  The givenvector is guaranteedtohaveuniqueelement s.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 2, "perturbed": true, "gc": "/*\nWehave a vector \"arr \"  of N in tegers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be ra ndomly  o rdered.  Yo ur tas k is to determine if\nitisp ossible to get a v e ctorsorted in non-decreasing ord er byperforming \nthe following  operation on the givenvector:\n    You are allowed to per form right shift operat ion an y number of times.\n\nOne  right shi ft operation me ans shiftingall elements of the vector by one\nposition in the right direction. The las t element of the vector willbe moved to\nthe starting po sitioninthe vecto r i.e.0th index. \nIf it is possible to obtain th e sorted v ector  by performing the above operation\nthen return true else re turn false. \nIf the given vector is empty then returntrue.\n\nNote:  The givenvector is guaranteedtohaveuniqueelement s.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if(arr.empty())\n        return true;\n    for(int i=0; i<arr.size(); i++){\n        for(int j=0; j<arr.size(); j++){\n            if(j==i)\n                continue;\n            if(arr[i]>arr[j]){\n                int temp=arr[i];\n                arr[i]=arr[j];\n                arr[j]=temp;\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    vector<int> arr;\n    arr.push_back(3);\n    arr.push_back(4);\n    arr.push_back(5);\n    arr.push_back(1);\n    arr.push_back(2);\n    move_one_ball(arr);\n    for(int i=0; i<arr.size(); i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and bconsisting only of 1s and 0s.\nPerform binary XOR ontheseinputs and re turn r es ult als o a s a st ring.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 2, "perturbed": true, "gc": "/*\nInput are two strings a and bconsisting only of 1s and 0s.\nPerform binary XOR ontheseinputs and re turn r es ult als o a s a st ring.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n\tstring r=\"\";\n\tint i,j;\n\tfor(i=0;i<a.length();i++){\n\t\tfor(j=0;j<b.length();j++){\n\t\t\tif(a[i]==b[j]){\n\t\t\t\tr+=a[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn r;\n}\nint main(){\n\tstring a=\"010\";\n\tstring b=\"110\";\n\tstring r=string_xor(a,b);\n\tprintf(\"%s\\n\",r.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/110", "prompt": "/*\nInthis problem, youw ill impl ement a function that takes two vectors of numbers,and determines whet herit  i s possi ble  to pe rform an exchange of ele ment sbetween them tom ake lst1 a vector of only even nu mbers. \nThere isno limit on the  number of exchanged elementsbetween lst1 and lst2.\nIf it  is possible to exchang e elem ents between the lst1a nd lst2 to make\nall the e lements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*\nInthis problem, youw ill impl ement a function that takes two vectors of numbers,and determines whet herit  i s possi ble  to pe rform an exchange of ele ment sbetween them tom ake lst1 a vector of only even nu mbers. \nThere isno limit on the  number of exchanged elementsbetween lst1 and lst2.\nIf it  is possible to exchang e elem ents between the lst1a nd lst2 to make\nall the e lements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int i=0,j=0;\n    while(i<lst1.size() && j<lst2.size()){\n        if(lst1[i]%2==0 && lst2[j]%2==0){\n            lst1[i] = lst1[i]/2;\n            lst2[j] = lst2[j]/2;\n            i++;\n            j++;\n        }\n        else if(lst1[i]%2!=0 && lst2[j]%2==0){\n            lst1[i] = lst1[i]/2;\n            lst2[j] = lst2[j]/2;\n            i++;\n        }\n        else if(lst1[i]%2==0 && lst2[j]%2!=0){\n            lst1[i] = lst1[i]/2;\n            lst2[j] = lst2[j]/2;\n            i++;\n        }\n        else if(lst1[i]%2!=0 && lst2[j]%2!=0){\n            lst1[i] = lst1[i]/2;\n            lst2[j] = lst2[j]/2;\n            i++;\n        }\n    }\n    if(i==lst1.size() && j==lst2.size()){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\nint main(){\n    vector<int> lst1,lst2;\n    int i=0,j=0;\n    while(i<5){\n        lst1.push_back(i);\n        i++;\n    }\n    while(j<5){\n        lst2.push_back(j);\n        j++;\n    }\n    printf(\"%s\\n\",exchange(lst1,lst2).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string repres e nting aspace separated lowercase letters, return a map\nof the letter with themost r ep etition  an d cont aining the corresponding  cou nt.\nIf several let t ers have the same occurrence, ret urn al l of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string repres e nting aspace separated lowercase letters, return a map\nof the letter with themost r ep etition  an d cont aining the corresponding  cou nt.\nIf several let t ers have the same occurrence, ret urn al l of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    for(int i=0;i<test.size();i++){\n        hist[test[i]]++;\n    }\n    return hist;\n}\nint main(){\n    string test=\"a b c\";\n    map<char,int> histogram=histogram(test);\n    for(map<char,int>::iterator it=histogram.begin();it!=histogram.end();it++){\n        printf(\"%c %d\\n\",it->first,it->second);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two stringss and c, you have to deleted all the characters in s thatare equal toanych ar acter i n c \nthencheck if the result stri ngi spalindrome.\nA st r ing is called palindrome if it re ads th e same backward as forwar d.\nYou should return a vectorcontaining theresult string  and \"True\"/\"False\" for  the c heck.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 2, "perturbed": true, "gc": "/*\nTask\nWe are given two stringss and c, you have to deleted all the characters in s thatare equal toanych ar acter i n c \nthencheck if the result stri ngi spalindrome.\nA st r ing is called palindrome if it re ads th e same backward as forwar d.\nYou should return a vectorcontaining theresult string  and \"True\"/\"False\" for  the c heck.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    vector<string> ans;\n    int i=0,j=0;\n    while(i<s.size()){\n        while(j<c.size()&&s[i]!=c[j])j++;\n        if(j==c.size()){\n            ans.push_back(s.substr(i,j));\n            i=i+j;\n            j=0;\n        }else{\n            i++;\n        }\n    }\n    return ans;\n}\nint main(){\n    string s,c;\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        scanf(\"%s%s\",&s,&c);\n        vector<string> ans=reverse_delete(s,c);\n        for(int i=0;i<ans.size();i++){\n            printf(\"%s\\n\",ans[i].c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of str i ngs, whe re each string consists of only digits, return a vector.\nEach element i  ofth eoutputsho uld be  'the number of odd elem ents  in the\nstring i o f  theinput.\" where all the i's sh ould b e replaced by the numberof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of str i ngs, whe re each string consists of only digits, return a vector.\nEach element i  ofth eoutputsho uld be  'the number of odd elem ents  in the\nstring i o f  theinput.\" where all the i's sh ould b e replaced by the numberof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n\tmap<string,int> m;\n\tfor(int i=0;i<lst.size();i++){\n\t\tfor(int j=0;j<lst[i].size();j++){\n\t\t\tif(lst[i][j]=='0'){\n\t\t\t\tm[lst[i]]++;\n\t\t\t}\n\t\t}\n\t}\n\tvector<string> r;\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tr.push_back(it->first);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<string> lst;\n\tlst.push_back(\"1234567\");\n\tlst.push_back(\"3\");\n\tlst.push_back(\"11111111\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"8\");\n\tlst.push_back(\"9\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"1\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push_back(\"0\");\n\tlst.push", "passed": 0, "run_status": 1}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of int e gers num s, find the minimum sum of any non-empty sub-vectorof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of int e gers num s, find the minimum sum of any non-empty sub-vectorof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\tlong long sum = 0;\n\tlong long minSum = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tsum += nums[i];\n\t\tif(sum < minSum){\n\t\t\tminSum = sum;\n\t\t}\n\t\tif(sum > minSum){\n\t\t\tsum = 0;\n\t\t}\n\t}\n\treturn minSum;\n}\nint main(){\n\tvector<long long> nums;\n\tnums.push_back(2);\n\tnums.push_back(3);\n\tnums.push_back(4);\n\tnums.push_back(1);\n\tnums.push_back(2);\n\tnums.push_back(4);\n\tprintf(\"%lld\\n\", minSubArraySum(nums));\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/115", "prompt": "/*\nYouare given a recta n gular gr id of wells. Each row represents a single well,\nandeach 1 in a row rep resent sa singl e u nit of  water.\nEach well has acorr esponding bucket t h at can be used to extract water f rom it , \nand all buckets have t he same capacity.\nYour task is to use the buckets to empty  the wells.\nOutput thenumber  of times you need tol ower the b uckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a recta n gular gr id of wells. Each row represents a single well,\nandeach 1 in a row rep resent sa singl e u nit of  water.\nEach well has acorr esponding bucket t h at can be used to extract water f rom it, \nand all buckets have t he same capacity.\nYour task is to use the buckets to empty  the wells.\nOutput thenumber  of times you need tol ower the b uckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int m = grid.size();\n    int n = grid[0].size();\n    vector<vector<int>> dp(m,vector<int>(n,0));\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                dp[i][j]=0;\n            }\n        }\n    }\n    for(int i=0;i<m;i++){\n        for(int j=0;j<n;j++){\n            if(grid[i][j]==0){\n                dp[i][j]=0;\n            }else if(grid[i][j]==1){\n                dp[i][j]=1;\n            }else{\n                ", "passed": 0, "run_status": 2}
{"task_id": "CPP/116", "prompt": "/*\nInthis Kata, you hav e  to sort  a vector of non-negative integers according to\nnumber ofones in their  binar yreprese nta tion i n ascending order.\nFor s imil ar number of ones, sortbased on decimal value.\n\nItmust b e implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 2, "perturbed": true, "gc": "/*\nInthis Kata, you hav e  to sort  a vector of non-negative integers according to\nnumber ofones in their  binar yreprese nta tion i n ascending order.\nFor s imil ar number of ones, sortbased on decimal value.\n\nItmust b e implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\tvector<int> temp;\n\tfor(int i=0; i<arr.size(); i++){\n\t\ttemp.push_back(arr[i]);\n\t}\n\tsort(temp.begin(), temp.end());\n\treturn temp;\n}\nint main(){\n\tvector<int> arr = {1, 5, 2, 3, 4};\n\tvector<int> temp = sort_array(arr);\n\tfor(int i=0; i<temp.size(); i++){\n\t\tprintf(\"%d \", temp[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s anda  natural  number n, you have been tasked to implement \na function that returns a  vecto rof allwor ds fro m string s that containexac tly \nn consonants, in order these words appear in th e stri ng s.If the strings isempty then the functionshould return an empty vector.\nNot e: you may assume the i nput s tring contains only let ters and s paces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string s anda  natural  number n, you have been tasked to implement \na function that returns a  vecto rof allwor ds fro m string s that containexac tly \nn consonants, in order these words appear in th e stri ng s.If the strings isempty then the functionshould return an empty vector.\nNot e: you may assume the i nput s tring contains only let ters and s paces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> res;\n    if(s.empty()){\n        return res;\n    }\n    int i=0;\n    while(i<s.size()){\n        if(s[i]!=' '){\n            break;\n        }\n        i++;\n    }\n    while(i<s.size()){\n        if(s[i]!=' '){\n            res.push_back(s.substr(0,i));\n            break;\n        }\n        i++;\n    }\n    while(i<s.size()){\n        if(s[i]!=' '){\n            res.push_back(s.substr(i,n));\n            break;\n        }\n        i++;\n    }\n    return res;\n}\nint main(){\n    string s=\"Hello world\";\n    vector<string> res=select_words(s,4);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/118", "prompt": "/*\nYouare given a word. Your tas k is to find the closest vowel that stands between two consonants from  the r ig ht side  of  the w ord (case sensitive).\n\nV owel sin the beginning and ending doesn't count. Returnemptystring ifyou didn't\nfind  any vowel met the above condition. \n\nYou may assume thatthe given string contai ns Eng lish letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a word. Your tas k is to find the closest vowel that stands between two consonants from  the r ig ht side  of  the w ord (case sensitive).\n\nV owel sin the beginning and ending doesn't count. Returnemptystring ifyou didn't\nfind  any vowel met the above condition. \n\nYou may assume thatthe given string contai ns Eng lish letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring ans=\"\";\n\tint i=0;\n\twhile(i<word.size()-1){\n\t\twhile(i<word.size()-1 && word[i]!=word[i+1]){\n\t\t\ti++;\n\t\t}\n\t\tif(i<word.size()-1){\n\t\t\tif(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u'){\n\t\t\t\tans=word[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans=\"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tans=\"\";\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tstring word;\n\tgetline(cin,word);\n\tcout<<get_closest_vowel(word)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/119", "prompt": "/*\nYouare given a vecto r  of twostrings, both strings consist of open\nparentheses '(' or close parenthe ses') 'only.\nY our  job i s to check if it is poss ible  to concatenate th e  twostrings in\nsome order, thatthe re sulting string willbe go od.\nA string S is consideredto be good if and only if all  parentheses in S\nare b alance d. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a vecto r  of twostrings, both strings consist of open\nparentheses '(' or close parenthe ses') 'only.\nY our  job i s to check if it is poss ible  to concatenate th e  twostrings in\nsome order, thatthe re sulting string willbe go od.\nA string S is consideredto be good if and only if all  parentheses in S\nare b alance d. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int i,j,k,l,m,n,sz;\n    string str;\n    vector<string> v;\n    for(i=0;i<lst.size();i++){\n        v.push_back(lst[i]);\n    }\n    sz=v.size();\n    for(i=0;i<sz;i++){\n        for(j=0;j<sz;j++){\n            if(i==j){\n                continue;\n            }\n            if(v[i][0]=='('&&v[j][0]==')'){\n                v[i]=v[i]+v[j];\n                v[j]=v[i];\n            }\n        }\n    }\n    for(i=0;i<sz;i++){\n        if(v[i][0]=='('){\n            str=v[i];\n            for(j=1;j<v[i].size();j++){\n                if(v[i][j]==')'){\n                    str=str+v[i][j];\n                    break;\n                }\n            }\n            if(str.size()==v[i].size()){\n                return \"Yes\";\n            }\n        }\n    }\n    return \"No\";\n}\nint main(){\n    vector<string> lst;\n    string str;\n    while(scanf(\"%s\",&str)!=EOF){\n        lst.push_back(str);\n    }\n    printf(\"%s\\n\",match_parens(lst).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/12", "prompt": "/*\nOutof vector of stri n gs, retu rn the longest one. Return the first one in case ofmultiple\nstrings of  the s am e lengt h.Return  None in case the inputvect or is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/*\nOutof vector of stri n gs, retu rn the longest one. Return the first one in case ofmultiple\nstrings of  the s am e lengt h.Return  None in case the inputvect or is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n\tif(strings.size()==0)\n\t\treturn \"\";\n\tstring longest=\"\";\n\tint max=0;\n\tfor(int i=0;i<strings.size();i++){\n\t\tif(strings[i].size()>max){\n\t\t\tmax=strings[i].size();\n\t\t\tlongest=strings[i];\n\t\t}\n\t}\n\treturn longest;\n}\nint main(){\n\tvector<string> strings;\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tstrings.push_back(s);\n\t}\n\tstring longest=longest(strings);\n\tprintf(\"%s\\n\",longest.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers  and a positive integer k, return a sorted vector \nof length k with the  maxim um  k numb ers  in ar r.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector arr of integers  and a positive integer k, return a sorted vector \nof length k with the  maxim um  k numb ers  in ar r.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    int max = arr[0];\n    for(int i=1;i<k;i++){\n        if(arr[i]>max){\n            max = arr[i];\n        }\n    }\n    res.push_back(max);\n    for(int i=k;i<arr.size();i++){\n        if(arr[i]>max){\n            max = arr[i];\n        }\n        res.push_back(max);\n    }\n    return res;\n}\nint main(){\n    int arr[] = {-3, -4, 5};\n    int arr1[] = {4, -4, 4};\n    int arr2[] = {4, 4, 4};\n    int arr3[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr4[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr5[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr6[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr7[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr8[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr9[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr10[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr11[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr12[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr13[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr14[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr15[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr16[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr17[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr18[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr19[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr20[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr21[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr22[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr23[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr24[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr25[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr26[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr27[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr28[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr29[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr30[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr31[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr32[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr33[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr34[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr35[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr36[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr37[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr38[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr39[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr40[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr41[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr42[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr43[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr44[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr45[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr46[] = {-3, 2, 1, 2, -1, -2, 1};\n    int arr47[] = {-3, 2", "passed": 0, "run_status": 1}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vec t or of in tegers, return the sum of all of the odd elements that are in even posi tions. \n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 2, "perturbed": true, "gc": "/*\nGiven a non-empty vec t or of in tegers, return the sum of all of the odd elements that are in even posi tions. \n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(5);\n    lst.push_back(8);\n    lst.push_back(7);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    lst.push_back(3);\n    ", "passed": 0, "run_status": 1}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vec t or of in tegers arr and an integer k, return\nthe sum of the elements with at mos t twodi gits fr omthe fi rst k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 2, "perturbed": true, "gc": "/*\nGiven a non-empty vec t or of in tegers arr and an integer k, return\nthe sum of the elements with at mos t twodi gits fr omthe fi rst k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        vector<int> arr(n);\n        for(int i=0;i<n;i++){\n            scanf(\"%d\",&arr[i]);\n        }\n        int k;\n        scanf(\"%d\",&k);\n        printf(\"%d\\n\",add_elements(arr,k));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive inte g er n, re turn a sorted vector that has the odd numbers in collatz sequence.\n\nThe  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\nas follows: start wi th any  positiveinteger n. Then  each term is obtained from the \nprevious term as follows:  if the previous term i s even , the next term is onehalf of \nt he previous ter m. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. Theconjecture is that no matterwhat value of n, the sequen ce will al ways reac h 1.\n\nNote: \n    1.Collatz(1) is {1}.\n    2. retu rned vecto r sor ted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er n, re turn a sorted vector that has the odd numbers in collatz sequence.\n\nThe  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\nas follows: start wi th any  positiveinteger n. Then  each term is obtained from the \nprevious term as follows:  if the previous term i s even, the next term is onehalf of \nt he previous ter m. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. Theconjecture is that no matterwhat value of n, the sequen ce will al ways reac h 1.\n\nNote: \n    1.Collatz(1) is {1}.\n    2. retu rned vecto r sor ted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> res;\n    if(n==1)\n        res.push_back(1);\n    else{\n        res.push_back(n);\n        while(n>1){\n            if(n%2==0)\n                n/=2;\n            else\n                n=3*n+1;\n            res.push_back(n);\n        }\n    }\n    return res;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> res=get_odd_collatz(n);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/124", "prompt": "/*\nYouhave to write a f u nction w hich validates a given date string and\nreturns trueif the date is vali d othe rw ise fal se. \nThe d ate is valid if all of t hef ollowing rules are satisfied:\n1. The date string isnot em pty.\n2. The number of day s is not less than 1 orhigher than 31 days for months 1,3 ,5,7,8,10,12. And the n umberof days is not less tha n 1 or hig her than 30 day s for months4,6,9,11. And, the numberof days isnot less than 1 or higher than 29 for  the month 2.\n3. The months should not be less than 1 or  higher th an 12.\n4.  The date should bein the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 2, "perturbed": true, "gc": "/*\nYouhave to write a f u nction w hich validates a given date string and\nreturns trueif the date is vali d othe rw ise fal se. \nThe d ate is valid if all of t hef ollowing rules are satisfied:\n1. The date string isnot em pty.\n2. The number of day s is not less than 1 orhigher than 31 days for months 1,3,5,7,8,10,12. And the n umberof days is not less tha n 1 or hig her than 30 day s for months4,6,9,11. And, the numberof days isnot less than 1 or higher than 29 for  the month 2.\n3. The months should not be less than 1 or  higher th an 12.\n4.  The date should bein the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int day = 0, month = 0, year = 0;\n    string month_str;\n    string day_str;\n    string year_str;\n    string::size_type pos;\n    \n    pos = date.find_first_of(\"-/\");\n    if(pos == string::npos)\n        return false;\n    \n    month_str = date.substr(0,pos);\n    day_str = date.substr(pos+1,2);\n    year_str = date.substr(pos+3,4);\n    \n    if(month_str.size()!= 3){\n        return false;\n    }\n    \n    if(day_str.size()!= 2){\n        return false;\n    }\n    \n    if(year_str.size()!= 4){\n        return false;\n    }\n    \n    if(month_str[0] < '0' || month_str[0] > '9'){\n        return false;\n    }\n    \n    if(month_str[1] < '0' || month_str[1] > '9'){\n        return false;\n    }\n    \n    if(month_str[2] < '0' || month_str[2] > '9'){\n        return false;\n    }\n    \n    if(day_str[0] < '0' || day_str[0] > '9'){\n        return false;\n    }\n    \n    if(day_str[1] < '0' || day_str[1] > '9'){\n        return false;\n    }\n    \n    if(day_str[2] < '0' || day_str[2] > '9'){\n        return false;\n    }\n    \n    if(year_str[0] < '0' || year_str[0] > '9'){\n        return false;\n    }\n    \n    if(year_str[1] < '0' || year_str[1] > '9'){\n        return false;\n    }\n    \n    if(year_str[2] < '0' || year_str[2] > '9'){\n        return false;\n    }\n    \n    if(year_str[3] < '0' || year_str[3] > '9'){\n        return false;\n    }\n    \n    if(day > 31){\n        return false;\n    }\n    \n    if(month > 12){\n        return false;\n    }\n    \n    if(day > 29){\n        return false;\n    }\n    \n    if(month == 2 && day > 29){\n        return false;\n    }\n    \n    if(month == 1 && day > 31){\n        return false;\n    }\n    \n    if(month == 3 && day > 30){\n        return false;\n    }\n    \n    if(month == 5 && day > 31){\n        return false;\n    }\n    \n    if(month == 7 && day > 31){\n        return false;\n    }\n    \n    if(month == 8 && day > 30){\n        return false;\n    }\n    \n    if(month == 10 && day > 31){\n        return false;\n    }\n    \n    if(month == 12 && day > 31){\n        return false;\n    }\n    \n    if(month == 4 && day > 30){\n        return false;\n    }\n    \n    if(month == 6 && day > 30){\n        return false;\n    }\n    \n    if(month == 9 && day > 30){\n        return false;\n    }\n    \n    if(month == 11 && day > 30){\n        return false;\n    }\n    \n    if(day < 1){\n        return false;\n    }\n    \n    if(year < 1900){\n        return false;\n    }\n    \n    if(year > 2100){\n        return false;\n    }\n    \n    return true;\n}\n\nint main(){\n    string date;\n    int day, month, year;\n    \n    while(scanf(\"%s\",date)!= EOF){\n        if(valid_date(date)){\n            day = atoi(date.substr(0,2).c_str());\n            month = atoi(date.substr(3,2).c_str());\n            year = atoi(date.substr(6,4).c_str());\n            \n            printf(\"%d-%d-%d\\n\",year,month,day);\n        }\n    }\n    \n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of wor d s, retur n a vector of words split on whitespace, if no whitespaces exists in th e text  y ou\nshou ldspliton commas ',' if no comm ase xists you should r e turna vector with one element, t he num ber of lower-case letters  with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") =1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string of wor d s, retur n a vector of words split on whitespace, if no whitespaces exists in th e text  y ou\nshou ldspliton commas ',' if no comm ase xists you should r e turna vector with one element, t he num ber of lower-case letters  with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") =1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> ret;\n    string temp;\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] ==''){\n            if(!temp.empty()){\n                ret.push_back(temp);\n                temp.clear();\n            }\n        }else{\n            temp += txt[i];\n        }\n    }\n    if(!temp.empty()){\n        ret.push_back(temp);\n    }\n    return ret;\n}\n\nint main(){\n    string txt;\n    vector<string> ret;\n    while(scanf(\"%s\", &txt)!= EOF){\n        ret = split_words(txt);\n        for(int i = 0; i < ret.size(); i++){\n            printf(\"%s \", ret[i].c_str());\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of num b ers, ret urn whether or not they are sorted\nin ascending order. Ifvector has mo re tha n1 dupli cat e of t he same\nnumber, return f alse .Assume no negati v e numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of num b ers, ret urn whether or not they are sorted\nin ascending order. Ifvector has mo re tha n1 dupli cat e of t he same\nnumber, return f alse.Assume no negati v e numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tif(lst.size()==0)\n\t\treturn true;\n\tfor(int i=1;i<lst.size();i++){\n\t\tif(lst[i]<lst[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(6);\n\tlst.push_back(7);\n\tprintf(\"%s\\n\",is_sorted(lst)?\"true\":\"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/127", "prompt": "/*\nYouare given two int e rvals,\nw here each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*\nYouare given two int e rvals,\nw here each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    if(interval1.size() == 0 || interval2.size() == 0){\n        return \"NO\";\n    }\n    if(interval1.size() == 1 && interval2.size() == 1){\n        return \"YES\";\n    }\n    if(interval1.size() == 1 && interval2.size() == 2){\n        return \"NO\";\n    }\n    if(interval1.size() == 2 && interval2.size() == 1){\n        return \"NO\";\n    }\n    if(interval1.size() == 2 && interval2.size() == 2){\n        return \"YES\";\n    }\n    if(interval1.size() == 3 && interval2.size() == 3){\n        return \"YES\";\n    }\n    return \"NO\";\n}\nint main(){\n    vector<int> interval1;\n    vector<int> interval2;\n    int i;\n    while(scanf(\"%d\", &i)!= EOF){\n        interval1.push_back(i);\n    }\n    scanf(\"%d\", &i);\n    while(scanf(\"%d\", &i)!= EOF){\n        interval2.push_back(i);\n    }\n    printf(\"%s\\n\", intersection(interval1, interval2).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/128", "prompt": "/*\nYouare given a vecto r  arr ofintegers and you need to return\nsum of magnitudes of integers multiplie d by p ro duct of  al l sign s\nof each number in thevect or, represented by 1, -1 or 0.\nNote: return -32768 f or emp ty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a vecto r  arr ofintegers and you need to return\nsum of magnitudes of integers multiplie d by p ro duct of  al l sign s\nof each number in thevect or, represented by 1, -1 or 0.\nNote: return -32768 f or emp ty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n\tint sum = 0;\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tsum += arr[i] * (arr[i] > 0? 1 : -1);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> arr;\n\tarr.push_back(1);\n\tarr.push_back(2);\n\tarr.push_back(2);\n\tarr.push_back(-4);\n\tarr.push_back(0);\n\tarr.push_back(1);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr.push_back(0);\n\tarr", "passed": 0, "run_status": 1}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \neach cell ofthe grid cont ains a  v alue. E ver y inte ger in the range {1, N *  N}inclusive appearse xactly once on the cells of the g rid.\nYou have to find the mini mum path of length k inthe grid. You can start\nfrom any c ell, and in each step y ou can  move to any of the nei ghbor cell s,\nin other wor ds, you can go to cells which share anedge with you current\ncell.\nPlease note that a p ath of length kmeans visiting exactly k cells (not\nnece ssarily di stinct).You CANNOT go off the grid.\nA path A (of length k)  is consid eredless than a path B (of length k) if\nafter making the ordere d vectors o f thevalues on the cells that A and Bgothrough (let 's call them lst_A and lst_B), l st_ A islexicog raphica lly less\nth an lst_B, in other words,there exist aninteger index i (1 <= i <= k)\nsuch that lst_A[i] < lst _B[i] andfor an y  j(1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt i s guara nteed that theanswe r is uni que.\nReturnan ordered vec t or of the values on thecellsthat the mini mum pathgo through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\nGiven a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \neach cell ofthe grid cont ains a  v alue. E ver y inte ger in the range {1, N *  N}inclusive appearse xactly once on the cells of the g rid.\nYou have to find the mini mum path of length k inthe grid. You can start\nfrom any c ell, and in each step y ou can  move to any of the nei ghbor cell s,\nin other wor ds, you can go to cells which share anedge with you current\ncell.\nPlease note that a p ath of length kmeans visiting exactly k cells (not\nnece ssarily di stinct).You CANNOT go off the grid.\nA path A (of length k)  is consid eredless than a path B (of length k) if\nafter making the ordere d vectors o f thevalues on the cells that A and Bgothrough (let's call them lst_A and lst_B), l st_ A islexicog raphica lly less\nth an lst_B, in other words,there exist aninteger index i (1 <= i <= k)\nsuch that lst_A[i] < lst _B[i] andfor an y  j(1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt i s guara nteed that theanswe r is uni que.\nReturnan ordered vec t or of the values on thecellsthat the mini mum pathgo through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> ans;\n    int n = grid.size();\n    if(n == 0){\n        return ans;\n    }\n    int m = grid[0].size();\n    if(k > m){\n        return ans;\n    }\n    int i, j, lst_i, lst_j;\n    int lst_k = 0;\n    for(i = 0; i < n; i++){\n        for(j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                lst_i = i;\n                lst_j = j;\n                lst_k = 0;\n                break;\n            }\n        }\n    }\n    while(lst_k < k){\n        ans.push_back(lst_i);\n        ans.push_back(lst_j);\n        lst_i = lst_i - 1;\n        lst_j = lst_j + 1;\n        if(lst_i < 0 || lst_j < 0 || lst_i >= n || lst_j >= m){\n            return ans;\n        }\n        if(grid[lst_i][lst_j] == 1){\n            lst_k++;\n        }\n    }\n    return ans;\n}\nint main(){\n    vector<vector<int>> grid;\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    grid.resize(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &grid[i].resize(m));\n    }\n    int k;\n    scanf(\"%d\", &k);\n    vector<int> ans = minPath(grid, k);\n    for(int i = 0; i < ans.size(); i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest com m on divis or of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 2, "perturbed": true, "gc": "/*\nReturn a greatest com m on divis or of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if(a == 0 || b == 0) return 0;\n    if(a == 1 || b == 1) return 1;\n    int c = a;\n    while(c!= b){\n        if(c > b) c = c - b;\n        else b = b - c;\n    }\n    return c;\n}\nint main(){\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", greatest_common_divisor(a, b));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibona c ci seque nce, it was studied deeply by mathematicians in \nthe lastcouple centur ies. H ow ever, w hat  peopl e don't know is Tribonac cis equence.\nTribonacc i  sequence is defined bythe recur rence: \ntri(1) =3\ntri(n) = 1 +n / 2, if n is even.\ntri(n) = tri(n - 1) + tri(n - 2) + t ri(n + 1), if n is odd. \nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*\nEveryone knows Fibona c ci seque nce, it was studied deeply by mathematicians in \nthe lastcouple centur ies. H ow ever, w hat  peopl e don't know is Tribonac cis equence.\nTribonacc i  sequence is defined bythe recur rence: \ntri(1) =3\ntri(n) = 1 +n / 2, if n is even.\ntri(n) = tri(n - 1) + tri(n - 2) + t ri(n + 1), if n is odd. \nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> res;\n\tif(n<=0)\n\t\treturn res;\n\tres.push_back(1);\n\tif(n==1)\n\t\treturn res;\n\tif(n==2)\n\t\treturn res;\n\tif(n%2==0)\n\t\tres.push_back(1+res[n-1]);\n\telse\n\t\tres.push_back(1+res[n-1]+res[n-2]);\n\tfor(int i=3;i<=n;i++){\n\t\tres.push_back(res[i-1]+res[i-2]);\n\t}\n\treturn res;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> res=tri(n);\n\tfor(int i=0;i<res.size();i++){\n\t\tprintf(\"%d \",res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive inte g er n, re turn the product of the odd digits.\nReturn 0 if alldigits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er n, re turn the product of the odd digits.\nReturn 0 if alldigits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int i=0;\n    while(n!=0){\n        n/=10;\n        i++;\n    }\n    return i;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    if(n==0){\n        printf(\"0\");\n    }else{\n        int i=0;\n        while(n!=0){\n            n/=10;\n            i++;\n        }\n        if(i%2==0){\n            printf(\"0\");\n        }else{\n            printf(\"%d\",n);\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function tha t  takes a  string as input which contains only square brackets.\nThefunction shou ld ret ur n trueifand on ly if there is a valid s ubse quence of brackets where at least one bracket in the  subse quence isnested.\n\nis_nes ted(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_ nested(\"[][]\") ➞ falseis_nes ted(\"[]\") ➞ false\nis_ne sted(\"[[][ ]]\") ➞ true\nis_ nested(\"[[]][[\") ➞ true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool  is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function tha t  takes a  string as input which contains only square brackets.\nThefunction shou ld ret ur n trueifand on ly if there is a valid s ubse quence of brackets where at least one bracket in the  subse quence isnested.\n\nis_nes ted(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_ nested(\"[][]\") ➞ falseis_nes ted(\"[]\") ➞ false\nis_ne sted(\"[[][ ]]\") ➞ true\nis_ nested(\"[[]][[\") ➞ true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool  is_nested(string str){\n\tint i=0,j=0;\n\twhile(i<str.size()){\n\t\tif(str[i]=='['){\n\t\t\tj++;\n\t\t}\n\t\tif(str[i]==']'){\n\t\t\tj--;\n\t\t}\n\t\tif(j==0){\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nbool is_nes(string str){\n\tint i=0,j=0;\n\twhile(i<str.size()){\n\t\tif(str[i]=='['){\n\t\t\tj++;\n\t\t}\n\t\tif(str[i]==']'){\n\t\t\tj--;\n\t\t}\n\t\tif(j==0){\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nbool is_nested(string str){\n\tint i=0,j=0;\n\twhile(i<str.size()){\n\t\tif(str[i]=='['){\n\t\t\tj++;\n\t\t}\n\t\tif(str[i]==']'){\n\t\t\tj--;\n\t\t}\n\t\tif(j==0){\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main(){\n\tstring str=\"[[]]\";\n\tprintf(\"%s\\n\",is_nes(str).c_str());\n\tprintf(\"%s\\n\",is_nested(str).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/133", "prompt": "/*\nYouare given a vecto r  of numb ers.\nYou need to return the sum of squared numbers in thegiven vector, \nround  e ach ele men t in t he vector to the upper i nt(C eiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a vecto r  of numb ers.\nYou need to return the sum of squared numbers in thegiven vector, \nround  e ach ele men t in t he vector to the upper i nt(C eiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tsum+=pow(lst[i],2);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(1.4);\n\tlst.push_back(4.2);\n\tlst.push_back(0);\n\tlst.push_back(-2.4);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tprintf(\"%d\\n\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function tha t  returns  true if the last character\nof a given string is analphabetical charac teran dis nota p art of  a word, and false other wise .Note: \"word\" isa  group of characters separated by  space .\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function tha t  returns  true if the last character\nof a given string is analphabetical charac teran dis nota p art of  a word, and false other wise.Note: \"word\" isa  group of characters separated by  space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if(txt.length() == 0)\n        return false;\n    if(txt.length() == 1)\n        return true;\n    if(txt.length() == 2)\n        return true;\n    if(txt.length() == 3)\n        return true;\n    if(txt.length() == 4)\n        return true;\n    if(txt.length() == 5)\n        return true;\n    if(txt.length() == 6)\n        return true;\n    if(txt.length() == 7)\n        return true;\n    if(txt.length() == 8)\n        return true;\n    if(txt.length() == 9)\n        return true;\n    if(txt.length() == 10)\n        return true;\n    if(txt.length() == 11)\n        return true;\n    if(txt.length() == 12)\n        return true;\n    if(txt.length() == 13)\n        return true;\n    if(txt.length() == 14)\n        return true;\n    if(txt.length() == 15)\n        return true;\n    if(txt.length() == 16)\n        return true;\n    if(txt.length() == 17)\n        return true;\n    if(txt.length() == 18)\n        return true;\n    if(txt.length() == 19)\n        return true;\n    if(txt.length() == 20)\n        return true;\n    if(txt.length() == 21)\n        return true;\n    if(txt.length() == 22)\n        return true;\n    if(txt.length() == 23)\n        return true;\n    if(txt.length() == 24)\n        return true;\n    if(txt.length() == 25)\n        return true;\n    if(txt.length() == 26)\n        return true;\n    if(txt.length() == 27)\n        return true;\n    if(txt.length() == 28)\n        return true;\n    if(txt.length() == 29)\n        return true;\n    if(txt.length() == 30)\n        return true;\n    if(txt.length() == 31)\n        return true;\n    if(txt.length() == 32)\n        return true;\n    if(txt.length() == 33)\n        return true;\n    if(txt.length() == 34)\n        return true;\n    if(txt.length() == 35)\n        return true;\n    if(txt.length() == 36)\n        return true;\n    if(txt.length() == 37)\n        return true;\n    if(txt.length() == 38)\n        return true;\n    if(txt.length() == 39)\n        return true;\n    if(txt.length() == 40)\n        return true;\n    if(txt.length() == 41)\n        return true;\n    if(txt.length() == 42)\n        return true;\n    if(txt.length() == 43)\n        return true;\n    if(txt.length() == 44)\n        return true;\n    if(txt.length() == 45)\n        return true;\n    if(txt.length() == 46)\n        return true;\n    if(txt.length() == 47)\n        return true;\n    if(txt.length() == 48)\n        return true;\n    if(txt.length() == 49)\n        return true;\n    if(txt.length() == 50)\n        return true;\n    if(txt.length() == 51)\n        return true;\n    if(txt.length() == 52)\n        return true;\n    if(txt.length() == 53)\n        return true;\n    if(txt.length() == 54)\n        return true;\n    if(txt.length() == 55)\n        return true;\n    if(txt.length() == 56)\n        return true;\n    if(txt.length() == 57)\n        return true;\n    if(txt.length() == 58)\n        return true;\n    if(txt.length() == 59)\n        return true;\n    if(txt.length() == 60)\n        return true;\n    if(txt.length() == 61)\n        return true;\n    if(txt.length() == 62)\n        return true;\n    if(txt.length() == 63)\n        return true;\n    if(txt.length() == 64)\n        return true;\n    if(txt.length() == 65)\n        return true;\n    if(txt.length() == 66)\n        return true;\n    if(txt.length() == 67)\n        return true;\n    if(txt.length() == 68)\n        return true;\n    if(txt.length() == 69)\n        return true;\n    if(txt.length() == 70)\n        return true;\n    if(txt.length() == 71)\n        return true;\n    if(txt.length() == 72)\n        return true;\n    if(txt.length() == 73)\n        return true;\n    if(txt.length() == 74)\n        return true;\n    if(txt.length() == 75)\n        return true;\n    if(txt.length() == 76)\n        return true;\n    if(txt.length() == 77)\n        return true;\n    if(txt.length() == 78)\n        return true;\n    if(txt.length() == 79)\n        return true;\n    if(txt.length() == 80)\n        return true;\n    if(txt.length() == 81)\n        return true;\n    if(txt.length() == 82)\n        return true;\n    if(txt.length() == 83)\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function whi c h return s the largest index of an element which\nis not greater than or equal to  the e le ment im med iately  preceding it. If\nno suc h el ement exists thenr eturn -1. The givenvector will n ot con tain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function whi c h return s the largest index of an element which\nis not greater than or equal to  the e le ment im med iately  preceding it. If\nno suc h el ement exists thenr eturn -1. The givenvector will n ot con tain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int i,j,k,l,m,n,max=0;\n    for(i=0;i<arr.size();i++){\n        for(j=i+1;j<arr.size();j++){\n            for(k=j+1;k<arr.size();k++){\n                for(l=k+1;l<arr.size();l++){\n                    for(m=l+1;m<arr.size();m++){\n                        if(arr[i]>arr[j] && arr[i]>arr[k] && arr[i]>arr[l] && arr[i]>arr[m] && arr[i]>arr[j] && arr[i]>arr[k] && arr[i]>arr[l] && arr[i]>arr[m]){\n                            max=arr[i];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}\n\nint main(){\n    vector<int> arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(4);\n    arr.push_back(3);\n    arr.push_back(5);\n    printf(\"%d\",can_arrange(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function tha t  returns  a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b \" is t he  smalle stof pos itive integers in a vect or.If there is no neg a tiveor positive integers, return  themas 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function tha t  returns  a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b \" is t he  smalle stof pos itive integers in a vect or.If there is no neg a tiveor positive integers, return  themas 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tvector<int> ret;\n\tif(lst.size() == 0){\n\t\tret.push_back(0);\n\t\tret.push_back(0);\n\t\treturn ret;\n\t}\n\tint max = lst[0];\n\tint min = lst[0];\n\tfor(int i = 1; i < lst.size(); i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t\tif(lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\tret.push_back(max);\n\tret.push_back(min);\n\treturn ret;\n}\nint main(){\n\tvector<int> lst = {2, 4, 1, 3, 5, 7};\n\tvector<int> ret = largest_smallest_integers(lst);\n\tfor(int i = 0; i < ret.size(); i++){\n\t\tprintf(\"%d \", ret[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function tha t  takes i ntegers, floats, or strings representing\nreal numbers, and returns thelarger  v ariable  in  its g iven variable type.\nRetu rn\" None\" if the value s  areequal.\nNote: If a real numbe r is r epresented as a string, t he floating point mightbe .or ,\n\ncompare_one(1, 2.5) ➞ 2 .5\ncompare_one(1, \"2,3\" ) ➞ \"2 ,3\"\ncompare_one(\"5,1\",\"6\") ➞ \"6\" compare_one(\"1 \", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost /any.hpp>\nusingnamespace std;\nboost::any compare_one(bo ost::any a ,boost::a ny b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function tha t  takes i ntegers, floats, or strings representing\nreal numbers, and returns thelarger  v ariable  in  its g iven variable type.\nRetu rn\" None\" if the value s  areequal.\nNote: If a real numbe r is r epresented as a string, t he floating point mightbe.or,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\" ) ➞ \"2,3\"\ncompare_one(\"5,1\",\"6\") ➞ \"6\" compare_one(\"1 \", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost /any.hpp>\nusingnamespace std;\nboost::any compare_one(bo ost::any a,boost::a ny b){\n\tif(a.type() == b.type()){\n\t\tif(a.type() == boost::typeindex::type_id<float>()){\n\t\t\treturn a.value<float>() > b.value<float>()? a : b;\n\t\t}else if(a.type() == boost::typeindex::type_id<string>()){\n\t\t\treturn a.value<string>() > b.value<string>()? a : b;\n\t\t}else if(a.type() == boost::typeindex::type_id<int>()){\n\t\t\treturn a.value<int>() > b.value<int>()? a : b;\n\t\t}else{\n\t\t\treturn a > b;\n\t\t}\n\t}else{\n\t\treturn a > b;\n\t}\n}\nint main(){\n\tint a = 1;\n\tfloat b = 2.5;\n\tstring c = \"2,3\";\n\tstring d = \"1 \";\n\tstring e = \"6\";\n\tstring f = \"1\";\n\tint g = 1;\n\tfloat h = 2.5;\n\tstring i = \"6\";\n\tstring j = \"1 \";\n\tstring k = \"6\";\n\tstring l = \"1\";\n\tint m = 1;\n\tfloat n = 2.5;\n\tstring o = \"6\";\n\tstring p = \"1 \";\n\tstring q = \"6\";\n\tstring r = \"1\";\n\tint s = 1;\n\tfloat t = 2.5;\n\tstring u = \"6\";\n\tstring v = \"1 \";\n\tstring w = \"6\";\n\tstring x = \"1\";\n\tint y = 1;\n\tfloat z = 2.5;\n\tstring aa = \"6\";\n\tstring bb = \"1 \";\n\tstring cc = \"6\";\n\tstring dd = \"1\";\n\tint ee = 1;\n\tfloat ff = 2.5;\n\tstring gg = \"6\";\n\tstring hh = \"1 \";\n\tstring ii = \"6\";\n\tstring jj = \"1\";\n\tint kk = 1;\n\tfloat ll = 2.5;\n\tstring mm = \"6\";\n\tstring nn = \"1 \";\n\tstring oo = \"6\";\n\tstring pp = \"1\";\n\tint qq = 1;\n\tfloat rr = 2.5;\n\tstring ss = \"6\";\n\tstring tt = \"1 \";\n\tstring uu = \"6\";\n\tstring vv = \"1\";\n\tint ww = 1;\n\tfloat xx = 2.5;\n\tstring yy = \"6\";\n\tstring zz = \"1 \";\n\tstring aa = \"6\";\n\tstring bb = \"1 \";\n\tstring cc = \"6\";\n\tstring dd = \"1\";\n\tint ee = 1;\n\tfloat ff = 2.5;\n\tstring gg = \"6\";\n\tstring hh = \"1 \";\n\tstring ii = \"6\";\n\tstring jj = \"1\";\n\tint kk = 1;\n\tfloat ll = 2.5;\n\tstring mm = \"6\";\n\tstring nn = \"1 \";\n\tstring oo = \"6\";\n\tstring pp = \"1\";\n\tint qq = 1;\n\tfloat rr = 2.5;\n\tstring ss = \"6\";\n\tstring tt = \"1 \";\n\tstring uu = \"6\";\n\tstring vv = \"1\";\n\tint ww = 1;\n\tfloat xx = 2.5;\n\tstring yy = \"6\";\n\tstring zz = \"1 \";\n\tstring aa = \"6\";\n\tstring bb = \"1 \";\n\tstring cc = \"6\";\n\tstring dd = \"1\";\n\tint ee = 1;\n\tfloat ff = 2.5;\n\tstring gg = \"6\";\n\tstring hh = \"1 \";\n\tstring ii = \"6\";\n\tstring jj = \"1\";\n\tint kk = 1;\n\tfloat ll = 2.5;\n\tstring mm = \"6\";\n\tstring nn = \"1 \";\n\tstring oo = \"6\";\n\tstring pp = \"1\";\n\tint qq = 1;\n\tfloat rr = 2.5;\n\tstring ss = \"6\";\n\tstring tt = \"1 \";\n\tstring uu = \"6\";\n\tstring vv = \"1\";\n\tint ww = 1;\n\tfloat xx = 2.5;\n\tstring yy = \"6\";\n\tstring zz = \"1 \";\n\tstring aa = \"6\";\n\tstring bb = \"1 \";\n\tstring cc = \"6\";\n\tstring dd = \"1\";\n\tint ee = 1;\n\tfloat ff = 2.5;\n\tstring gg = \"6\";\n\tstring hh = \"1 \";\n\tstring ii = \"6\";\n\tstring jj = \"1\";\n\tint kk = 1;\n\tfloat ll = 2.5;\n\tstring mm = \"6\";\n\tstring nn = \"1 \";\n\tstring oo = \"6\";\n\tstring pp = \"1\";\n\tint qq = 1;\n\tfloat rr = 2.5;\n\tstring ss = \"6\";\n\tstring tt = \"1 \";\n\tstring uu = \"6\";\n\tstring vv = \"1\";\n\tint ww = 1;\n\tfloat xx = 2.5;\n\tstring yy =", "passed": 0, "run_status": 2}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether theg iven num ber n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 2, "perturbed": true, "gc": "/*\nEvaluate whether theg iven num ber n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n\tif(n<=0)\n\t\treturn false;\n\tint sum=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(i%2==0)\n\t\t\tsum+=i;\n\t}\n\tif(sum%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tif(is_equal_to_sum_even(n))\n\t\tprintf(\"true\\n\");\n\telse\n\t\tprintf(\"false\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/139", "prompt": "/*\nTheBrazilian factori a l is def ined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere  n > 0 \nFor exa mpl e:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 2, "perturbed": true, "gc": "/*\nTheBrazilian factori a l is def ined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere  n > 0 \nFor exa mpl e:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\tlong long fact = 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tfact *= i;\n\t}\n\treturn fact;\n}\n\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%lld\\n\",special_factorial(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of allp refixesfrom shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 2, "perturbed": true, "gc": "/*\nReturn vector of allp refixesfrom shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tint len = str.length();\n\tfor(int i=0; i<len; i++){\n\t\tfor(int j=i+1; j<len; j++){\n\t\t\tstring prefix = str.substr(i, j-i);\n\t\t\tif(prefixes.size()==0 || prefixes.back()!=prefix){\n\t\t\t\tprefixes.push_back(prefix);\n\t\t\t}\n\t\t}\n\t}\n\treturn prefixes;\n}\n\nint main(){\n\tstring str = \"abc\";\n\tvector<string> prefixes = all_prefixes(str);\n\tfor(int i=0; i<prefixes.size(); i++){\n\t\tprintf(\"%s\\n\", prefixes[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text,r eplace a ll spaces in it with underscores, \nand if a string has more than 2 cons ecutiv espaces,  \nt hen re place all consecutive sp aces  with - \n\nfix_spac e s(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string text,r eplace a ll spaces in it with underscores, \nand if a string has more than 2 cons ecutiv espaces,  \nt hen re place all consecutive sp aces  with - \n\nfix_spac e s(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint i,j;\n\tfor(i=0;i<text.length();i++){\n\t\tif(text[i]==' '){\n\t\t\tfor(j=0;j<text.length();j++){\n\t\t\t\tif(text[j]==' '){\n\t\t\t\t\ttext[j]='_';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;\n}\nstring fix_spac(string text){\n\tint i,j;\n\tfor(i=0;i<text.length();i++){\n\t\tif(text[i]==' '){\n\t\t\tfor(j=0;j<text.length();j++){\n\t\t\t\tif(text[j]==' '){\n\t\t\t\t\ttext[j]='-';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;\n}\nint main(){\n\tstring text=\"Example\";\n\tprintf(\"%s\\n\",fix_spaces(text).c_str());\n\tprintf(\"%s\\n\",fix_spac(text).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function whi c h takesa string representing a file's name, and returns\n\"Yes\" ifthe the file' s name  i s valid , a nd ret urns \"No\" otherwise.\nA f ile' sname is consider e d tobe valid if and only if allthe fo llowing conditions are m et:\n- There should not be more than three digits ('0'-'9')  in the file's name.\n-The fi le's name contains exac tly one do t \".\"\n- The sub string before the dot should not be empty, and itstarts with a letter from \nthe latinalphapet ('a'-'z' and 'A'-'Z').\n- The substring after th e dot shou ld beone  of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function whi c h takesa string representing a file's name, and returns\n\"Yes\" ifthe the file' s name  i s valid, a nd ret urns \"No\" otherwise.\nA f ile' sname is consider e d tobe valid if and only if allthe fo llowing conditions are m et:\n- There should not be more than three digits ('0'-'9')  in the file's name.\n-The fi le's name contains exac tly one do t \".\"\n- The sub string before the dot should not be empty, and itstarts with a letter from \nthe latinalphapet ('a'-'z' and 'A'-'Z').\n- The substring after th e dot shou ld beone  of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tif(file_name.length()>3){\n\t\tif(file_name.substr(0,3)==\"0\"){\n\t\t\tif(file_name.substr(3,1)==\".\"){\n\t\t\t\tif(file_name.substr(4,1)==\".\"){\n\t\t\t\t\tif(file_name.substr(5,1)==\".\"){\n\t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(file_name.length()>1){\n\t\tif(file_name.substr(0,1)==\".\"){\n\t\t\tif(file_name.substr(1,1)==\".\"){\n\t\t\t\tif(file_name.substr(2,1)==\".\"){\n\t\t\t\t\tif(file_name.substr(3,1)==\".\"){\n\t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(file_name.length()>0){\n\t\tif(file_name.substr(0,1)==\".\"){\n\t\t\tif(file_name.substr(1,1)==\".\"){\n\t\t\t\tif(file_name.substr(2,1)==\".\"){\n\t\t\t\t\tif(file_name.substr(3,1)==\".\"){\n\t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\nint main(){\n\tstring file_name;\n\twhile(file_name_check(file_name)!=\"No\"){\n\t\tprintf(\"%s\\n\",file_name_check(file_name).c_str());\n\t\tfile_name=get_input();\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function willt ake a ve ctor of integers. For all entries in the vector, the function shall squ areth einteger  en try if  its index is a \nmultipl e of  3 and will cube t h e integer entry if its index is a  multi ple of 4 and not a multip le of 3. The function will not \nchange the entries in thevector whose indexes ar e nota multiple of 3 or 4.T he functio n shall then re turn the sumof all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 2, "perturbed": true, "gc": "/*\n\"\nThis function willt ake a ve ctor of integers. For all entries in the vector, the function shall squ areth einteger  en try if  its index is a \nmultipl e of  3 and will cube t h e integer entry if its index is a  multi ple of 4 and not a multip le of 3. The function will not \nchange the entries in thevector whose indexes ar e nota multiple of 3 or 4.T he functio n shall then re turn the sumof all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(i % 3 == 0 && i % 4 == 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(-1);\n\tlst.push_back(-5);\n\tlst.push_back(2);\n\tlst.push_back(-1);\n\tlst.push_back(-5);\n\tprintf(\"%d\\n\", sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/143", "prompt": "/*\nYouare given a strin g  represe nting a sentence,\nthe sentence contains some words separated by a space ,\nandyo u havetoreturn  a string that containsthewords from the ori g inalsentence,\nwhose lengths areprimenumbers,\nthe order of the  words in the new string should be the same as the origina l one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a strin g  represe nting a sentence,\nthe sentence contains some words separated by a space,\nandyo u havetoreturn  a string that containsthewords from the ori g inalsentence,\nwhose lengths areprimenumbers,\nthe order of the  words in the new string should be the same as the origina l one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_sentence;\n    int len = sentence.length();\n    int i = 0;\n    while(i < len){\n        int j = i;\n        while(j < len && sentence[j]!=''){\n            j++;\n        }\n        new_sentence += sentence.substr(i,j-i);\n        i = j;\n    }\n    return new_sentence;\n}\n\nint main(){\n    string sentence;\n    int len;\n    while(scanf(\"%d\",&len)!= EOF){\n        getchar();\n        getchar();\n        getline(cin,sentence);\n        printf(\"%s\\n\",words_in_sentence(sentence).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to imple m ent a fu nction that will simplify the expression\nx * n. Thefunction returns tr ue ifx* n eva lua tes to  a whole number and fals e\not herwise. Both x an d  n, are string representation ofa frac tion,andhave the follow ing format,\n<numerator>/<denominator> where both numerator  and denominator are po sitive  whole numbers.\n\nYou ca n assume t hat x, and n ar e valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = truesimplify(\"1/6\",\"2/1\") = false\nsimplify(\"7/10\", \"10/2\")= false\n*/ \n#include <stdio.h>\n#include<string>\nusing namespace std;\nbo ol simplif y(str ing x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*\nYour task is to imple m ent a fu nction that will simplify the expression\nx * n. Thefunction returns tr ue ifx* n eva lua tes to  a whole number and fals e\not herwise. Both x an d  n, are string representation ofa frac tion,andhave the follow ing format,\n<numerator>/<denominator> where both numerator  and denominator are po sitive  whole numbers.\n\nYou ca n assume t hat x, and n ar e valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = truesimplify(\"1/6\",\"2/1\") = false\nsimplify(\"7/10\", \"10/2\")= false\n*/ \n#include <stdio.h>\n#include<string>\nusing namespace std;\nbo ol simplif y(str ing x,string n){\n\tstring xn=x;\n\tstring nn=n;\n\tint xnumerator=0;\n\tint xdenominator=1;\n\tint nnumerator=0;\n\tint ndenominator=1;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint o=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=", "passed": 0, "run_status": 2}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function whic h  sorts t he given vector of integers\nin ascending order according to the sum oftheirdi gits.\nN ote : if t here are several items w ithsimilar sum of the i r digits,\norder them based on the ir ind ex inoriginal vector.\n\nF or example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function whic h  sorts t he given vector of integers\nin ascending order according to the sum oftheirdi gits.\nN ote : if t here are several items w ithsimilar sum of the i r digits,\norder them based on the ir ind ex inoriginal vector.\n\nF or example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n\tvector<int> res;\n\tif(nums.size() == 0)\n\t\treturn res;\n\tint sum = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tsum += nums[i];\n\t}\n\tint max_index = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(nums[i] == sum){\n\t\t\tmax_index = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(max_index == 0){\n\t\tres.push_back(nums[0]);\n\t\tres.push_back(nums[1]);\n\t\tres.push_back(nums[2]);\n\t\tres.push_back(nums[3]);\n\t\tres.push_back(nums[4]);\n\t}\n\telse if(max_index == nums.size() - 1){\n\t\tres.push_back(nums[max_index]);\n\t\tres.push_back(nums[max_index - 1]);\n\t\tres.push_back(nums[max_index + 1]);\n\t\tres.push_back(nums[max_index - 2]);\n\t\tres.push_back(nums[max_index - 3]);\n\t}\n\telse{\n\t\tres.push_back(nums[max_index]);\n\t\tres.push_back(nums[max_index - 1]);\n\t\tres.push_back(nums[max_index + 1]);\n\t\tres.push_back(nums[max_index - 2]);\n\t\tres.push_back(nums[max_index - 3]);\n\t\tres.push_back(nums[max_index - 4]);\n\t}\n\treturn res;\n}\nint main(){\n\tvector<int> nums;\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-", "passed": 0, "run_status": 1}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes avector of numbers as input and returns \nthe number of elements in the v ectorth at aregre ater t han 10 and both \nfirst a ndl ast digits of a nu m ber are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that takes avector of numbers as input and returns \nthe number of elements in the v ectorth at aregre ater t han 10 and both \nfirst a ndl ast digits of a nu m ber are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] < 0){\n            continue;\n        }\n        if(nums[i] < 10){\n            continue;\n        }\n        if(nums[i] % 10 == 0){\n            continue;\n        }\n        if(nums[i] % 10 == 1 || nums[i] % 10 == 3 || nums[i] % 10 == 5 || nums[i] % 10 == 7 || nums[i] % 10 == 9){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    vector<int> nums;\n    nums.push_back(15);\n    nums.push_back(-73);\n    nums.push_back(14);\n    nums.push_back(-15);\n    nums.push_back(33);\n    nums.push_back(-2);\n    nums.push_back(-3);\n    nums.push_back(45);\n    nums.push_back(21);\n    nums.push_back(109);\n    printf(\"%d\\n\", specialFilter(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/147", "prompt": "/*\nYouare given a posit i ve integ er n. You have to create an integer vector a of length n.    For eachi (1 ≤  i  ≤ n),the  value  of a{i} = i * i - i + 1 .\n Return the numbe r  of triples (a{i}, a{j}, a{k}) of  a whe re i < j < k, \nand a[i] +  a[j] + a[k] is a multiple of3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a posit i ve integ er n. You have to create an integer vector a of length n.    For eachi (1 ≤  i  ≤ n),the  value  of a{i} = i * i - i + 1.\n Return the numbe r  of triples (a{i}, a{j}, a{k}) of  a whe re i < j < k, \nand a[i] +  a[j] + a[k] is a multiple of3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 3 * i + j + k){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight plane t s in our  solar system: the closerst to the Sun \nis Mercury,the next one is Ven us,th en  Earth,  Ma rs, Ju piter, Saturn, \nUranus,Nept une.\nWrite a funct i on that takes two planet names as  strin gs planet1 and planet2. The function should return avector containing all planets  whose orbits are \nloca ted be tween the orbit of plan et1 and th e orbit of plan et2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector i f planet1 or planet2\nare notcorrect planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/*\nThere are eight plane t s in our  solar system: the closerst to the Sun \nis Mercury,the next one is Ven us,th en  Earth,  Ma rs, Ju piter, Saturn, \nUranus,Nept une.\nWrite a funct i on that takes two planet names as  strin gs planet1 and planet2. The function should return avector containing all planets  whose orbits are \nloca ted be tween the orbit of plan et1 and th e orbit of plan et2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector i f planet1 or planet2\nare notcorrect planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> ans;\n\tif(planet1.compare(\"\")==0 || planet2.compare(\"\")==0){\n\t\treturn ans;\n\t}\n\tif(planet1.compare(planet2)==0){\n\t\treturn ans;\n\t}\n\tif(planet1.compare(\"Jupiter\")==0){\n\t\tif(planet2.compare(\"Neptune\")==0){\n\t\t\tans.push_back(\"Saturn\");\n\t\t\tans.push_back(\"Uranus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet2.compare(\"Earth\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet2.compare(\"Jupiter\")==0){\n\t\tif(planet1.compare(\"Neptune\")==0){\n\t\t\tans.push_back(\"Saturn\");\n\t\t\tans.push_back(\"Uranus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet1.compare(\"Earth\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet1.compare(\"Neptune\")==0){\n\t\tif(planet2.compare(\"Earth\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet2.compare(\"Neptune\")==0){\n\t\tif(planet1.compare(\"Earth\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet1.compare(\"Earth\")==0){\n\t\tif(planet2.compare(\"Mercury\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet2.compare(\"Jupiter\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet2.compare(\"Earth\")==0){\n\t\tif(planet1.compare(\"Mercury\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet1.compare(\"Jupiter\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet1.compare(\"Mercury\")==0){\n\t\tif(planet2.compare(\"Jupiter\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet2.compare(\"Neptune\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet2.compare(\"Mercury\")==0){\n\t\tif(planet1.compare(\"Jupiter\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet1.compare(\"Neptune\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet1.compare(\"Venus\")==0){\n\t\tif(planet2.compare(\"Jupiter\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet2.compare(\"Neptune\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\tif(planet2.compare(\"Venus\")==0){\n\t\tif(planet1.compare(\"Jupiter\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t\tif(planet1.compare(\"Neptune\")==0){\n\t\t\tans.push_back(\"Venus\");\n\t\t\treturn ans;\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main(){\n\tstring planet1,planet2;\n\tvector<string> ans;\n\twhile(scanf(\"%s%s\",&planet1,&planet2)!=EOF){\n\t\tans=bf(planet1,planet2);\n\t\tfor(int i=0;i<ans.size();i++){\n\t\t\tprintf(\"%s\\n\",ans[i].c_str());\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that acceptsa vector of strings as a parameter,\ndeletes the strings that have odd l engths  f rom it, \nan d retu rns the resulted vectorwith  a sorted order,\nT h e vector is always a vector of st ringsand nevera vector of num bers,\nand it may contain duplicates.\nThe order of the vect or should be ascendingby len gth of each word, andy ou\nshouldreturn the vect or sorted bythat rule.\nIf two words have the same length, sort the vector alphabetical ly.\nThe function should return a vector of strings in so rted order .\nYoumay  assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that acceptsa vector of strings as a parameter,\ndeletes the strings that have odd l engths  f rom it, \nan d retu rns the resulted vectorwith  a sorted order,\nT h e vector is always a vector of st ringsand nevera vector of num bers,\nand it may contain duplicates.\nThe order of the vect or should be ascendingby len gth of each word, andy ou\nshouldreturn the vect or sorted bythat rule.\nIf two words have the same length, sort the vector alphabetical ly.\nThe function should return a vector of strings in so rted order.\nYoumay  assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> res;\n    for(string s:lst){\n        if(s.length()%2==0)\n            res.push_back(s);\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\nvector<string> vector_sort(vector<string> lst){\n    vector<string> res;\n    for(string s:lst){\n        if(s.length()%2==0)\n            res.push_back(s);\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main(){\n    vector<string> lst;\n    lst.push_back(\"aa\");\n    lst.push_back(\"a\");\n    lst.push_back(\"aaa\");\n    lst.push_back(\"ab\");\n    lst.push_back(\"cd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"abcd\");\n    lst.push_back(\"", "passed": 0, "run_status": 1}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 2, "perturbed": true, "gc": "/*\nReturn a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring s;\n\tint i;\n\tfor(i=0;i<n;i++){\n\t\ts+=to_string(i);\n\t\ts+=\" \";\n\t}\n\treturn s;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%s\",string_sequence(n).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/150", "prompt": "/*\nA simple program whic h  shouldreturn the value of x if n is \na prime number and should return the val ue ofyotherwi se. \n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 2, "perturbed": true, "gc": "/*\nA simple program whic h  shouldreturn the value of x if n is \na prime number and should return the val ue ofyotherwi se. \n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n==1)\n\t\treturn x;\n\tif(n==2)\n\t\treturn y;\n\tif(n%2==0)\n\t\treturn x_or_y(n/2,x,y);\n\telse\n\t\treturn y_or_x(n/2,x,y);\n}\nint y_or_x(int n,int x,int y){\n\tif(n==1)\n\t\treturn y;\n\tif(n==2)\n\t\treturn x;\n\tif(n%2==0)\n\t\treturn y_or_x(n/2,x,y);\n\telse\n\t\treturn x_or_y(n/2,x,y);\n}\nint main(){\n\tint n,x,y;\n\tscanf(\"%d\",&n);\n\tscanf(\"%d\",&x);\n\tscanf(\"%d\",&y);\n\tprintf(\"%d\",x_or_y(n,x,y));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of num b ers, ret urn the sum of squares of the numbers\nin the vectorthat are odd. Ignor e numb er s thatare  negat ive or not integers.\n\ndo uble _the_difference({1 ,  3, 2, 0}) == 1 + 9+ 0+ 0 = 10double _the_difference({-1, -2,0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_d ifference({0}) == 0  \nIf the  input vector is empty,  return 0. */\n#include<st dio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_diff erence(vector<float> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of num b ers, ret urn the sum of squares of the numbers\nin the vectorthat are odd. Ignor e numb er s thatare  negat ive or not integers.\n\ndo uble _the_difference({1,  3, 2, 0}) == 1 + 9+ 0+ 0 = 10double _the_difference({-1, -2,0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_d ifference({0}) == 0  \nIf the  input vector is empty,  return 0. */\n#include<st dio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_diff erence(vector<float> lst){\n\tlong long double sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] < 0){\n\t\t\tsum += pow(lst[i], 2);\n\t\t}\n\t\telse{\n\t\t\tsum += pow(lst[i], 2);\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(0);\n\tcout<<\"sum of squares of the numbers in the vector is \"<<double_the_diff(lst)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/152", "prompt": "/*\nI think we all rememb e r that f eeling when the result of some long-awaited\nevent is finally known. The  feeli ng s and t hou ghts y ou have at that moment a red efinitely worth no t ing down and comparing.Your task  is to  determine if a person co rrectly guessed the results of a number of matches.\nYou ar e given two vectors ofscores  and guesses of equall ength, whe re each index s hows a match. \nReturn a vector of the same lengthdenoting how far off each guess was.If they have guessed correctly,\nthe value is 0, and if n ot, the va lue is th e absolute difference between the guess and the sc ore.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*\nI think we all rememb e r that f eeling when the result of some long-awaited\nevent is finally known. The  feeli ng s and t hou ghts y ou have at that moment a red efinitely worth no t ing down and comparing.Your task  is to  determine if a person co rrectly guessed the results of a number of matches.\nYou ar e given two vectors ofscores  and guesses of equall ength, whe re each index s hows a match. \nReturn a vector of the same lengthdenoting how far off each guess was.If they have guessed correctly,\nthe value is 0, and if n ot, the va lue is th e absolute difference between the guess and the sc ore.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tint i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392", "passed": 0, "run_status": 2}
{"task_id": "CPP/153", "prompt": "/*\nYouwill be given the name ofa class (a string) and a vector of extensions.\nThe extensions are to be  usedto  load a ddi tional  classes to the class. T hes trength of the ext e nsion is as follows: Let CAP be t he num ber of the uppercase\nlett ers in the extension's name,and let SM be the number of l owercase letters \nin th e exte nsion's name, the stren gth is giv en by the fract ion CAP - SM. \nYou should find the strongest extension and return a string in this \nfor mat: ClassName.StrongestExtensionName.\nIf there are twoor more ex tensionswith the same strength, you should\nchoose the onethat comes  firs t in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 2, "perturbed": true, "gc": "/*\nYouwill be given the name ofa class (a string) and a vector of extensions.\nThe extensions are to be  usedto  load a ddi tional  classes to the class. T hes trength of the ext e nsion is as follows: Let CAP be t he num ber of the uppercase\nlett ers in the extension's name,and let SM be the number of l owercase letters \nin th e exte nsion's name, the stren gth is giv en by the fract ion CAP - SM. \nYou should find the strongest extension and return a string in this \nfor mat: ClassName.StrongestExtensionName.\nIf there are twoor more ex tensionswith the same strength, you should\nchoose the onethat comes  firs t in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int i,j,k,l,m,n,s,t,u,v,w,x,y,z,cap,sm,ext_num,ext_str_num,ext_str_cap,ext_str_sm;\n    string ext_str;\n    for(i=0;i<extensions.size();i++){\n        ext_str_num=0;\n        ext_str_cap=0;\n        ext_str_sm=0;\n        ext_num=0;\n        for(j=0;j<extensions.size();j++){\n            if(extensions[j]==class_name){\n                ext_num++;\n                ext_str_num=ext_str_num+extensions[j].size();\n                ext_str_cap=ext_str_cap+extensions[j].size()-extensions[j].size()%2;\n                ext_str_sm=ext_str_sm+extensions[j].size()-extensions[j].size()%2;\n            }\n        }\n        if(ext_num==1){\n            ext_str=extensions[0];\n            return ext_str;\n        }\n        else if(ext_num==2){\n            cap=ext_str_cap/2;\n            sm=ext_str_sm/2;\n            if(cap>sm){\n                ext_str=extensions[0];\n                return ext_str;\n            }\n            else{\n                ext_str=extensions[1];\n                return ext_str;\n            }\n        }\n        else{\n            for(j=0;j<extensions.size();j++){\n                if(extensions[j]==class_name){\n                    ext_str_num=ext_str_num+extensions[j].size();\n                    ext_str_cap=ext_str_cap+extensions[j].size()-extensions[j].size()%2;\n                    ext_str_sm=ext_str_sm+extensions[j].size()-extensions[j].size()%2;\n                }\n            }\n            cap=ext_str_cap/2;\n            sm=ext_str_sm/2;\n            if(cap>sm){\n                ext_str=extensions[0];\n                return ext_str;\n            }\n            else{\n                ext_str=extensions[1];\n                return ext_str;\n            }\n        }\n    }\n    return \"\";\n}\nint main(){\n    string class_name=\"Slices\";\n    vector<string> extensions;\n    extensions.push_back(\"SErviNGSliCes\");\n    extensions.push_back(\"Cheese\");\n    extensions.push_back(\"StuFfed\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices\");\n    extensions.push_back(\"Slices", "passed": 0, "run_status": 1}
{"task_id": "CPP/154", "prompt": "/*\nYouare given 2 words .  You nee d to return true if the second word or any of its rotations is a substr ingin  t he firs t w ord\ncy cpattern_check(\"abcd\",\"a bd\")  => false\ncycpatte r n_check(\"hello\",\"ell\") => true\ncy cpatte rn_check(\"whassup\",\"psus\" ) => false\ncycpattern_check(\"abab\",\"baa\") =>true\ncycpatte rn_check(\"efef\",\"eeff\")  => fa lse\ncycpattern_check(\"h imenss\",'s imen\") => true\n*/\n#include<stdio.h>\n#include<string>using namespace std;\nbool cycpattern_check(strin g a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 2, "perturbed": true, "gc": "/*\nYouare given 2 words.  You nee d to return true if the second word or any of its rotations is a substr ingin  t he firs t w ord\ncy cpattern_check(\"abcd\",\"a bd\")  => false\ncycpatte r n_check(\"hello\",\"ell\") => true\ncy cpatte rn_check(\"whassup\",\"psus\" ) => false\ncycpattern_check(\"abab\",\"baa\") =>true\ncycpatte rn_check(\"efef\",\"eeff\")  => fa lse\ncycpattern_check(\"h imenss\",'s imen\") => true\n*/\n#include<stdio.h>\n#include<string>using namespace std;\nbool cycpattern_check(strin g a,string b){\n    if(a.size()!=b.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b){\n    if(a.size()!=b.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c){\n    if(a.size()!=b.size()||a.size()!=c.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c,strin d){\n    if(a.size()!=b.size()||a.size()!=c.size()||a.size()!=d.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i]&&a[i]!=d[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c,strin d,strin e){\n    if(a.size()!=b.size()||a.size()!=c.size()||a.size()!=d.size()||a.size()!=e.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i]&&a[i]!=d[i]&&a[i]!=e[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c,strin d,strin e,strin f){\n    if(a.size()!=b.size()||a.size()!=c.size()||a.size()!=d.size()||a.size()!=e.size()||a.size()!=f.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i]&&a[i]!=d[i]&&a[i]!=e[i]&&a[i]!=f[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c,strin d,strin e,strin f,strin g){\n    if(a.size()!=b.size()||a.size()!=c.size()||a.size()!=d.size()||a.size()!=e.size()||a.size()!=f.size()||a.size()!=g.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i]&&a[i]!=d[i]&&a[i]!=e[i]&&a[i]!=f[i]&&a[i]!=g[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c,strin d,strin e,strin f,strin g,strin h){\n    if(a.size()!=b.size()||a.size()!=c.size()||a.size()!=d.size()||a.size()!=e.size()||a.size()!=f.size()||a.size()!=g.size()||a.size()!=h.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i]&&a[i]!=d[i]&&a[i]!=e[i]&&a[i]!=f[i]&&a[i]!=g[i]&&a[i]!=h[i])return false;\n    }\n    return true;\n}\nbool cycpattern_check(strin g a,strin b,strin c,strin d,strin e,strin f,strin g,strin h,strin i){\n    if(a.size()!=b.size()||a.size()!=c.size()||a.size()!=d.size()||a.size()!=e.size()||a.size()!=f.size()||a.size()!=g.size()||a.size()!=h.size()||a.size()!=i.size())return false;\n    for(int i=0;i<a.size();i++){\n        if(a[i]!=b[i]&&a[i]!=c[i]&&a[i]!=d[", "passed": 0, "run_status": 2}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. ret u rn a vec tor that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 2, "perturbed": true, "gc": "/*\nGiven an integer. ret u rn a vec tor that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n\tvector<int> vec;\n\tint i = 0;\n\twhile(num > 0){\n\t\tif(num % 2 == 0){\n\t\t\tvec.push_back(num/2);\n\t\t\tnum = num/2;\n\t\t}else{\n\t\t\tvec.push_back(num);\n\t\t\tnum = num-1;\n\t\t}\n\t\ti++;\n\t}\n\treturn vec;\n}\nint main(){\n\tint num;\n\tscanf(\"%d\", &num);\n\tvector<int> vec = even_odd_count(num);\n\tfor(int i = 0; i < vec.size(); i++){\n\t\tprintf(\"%d \", vec[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive inte g er, obta in its roman numeral equivalent as a string,\nand return it in lowercase .\nRest ri ctions:  1<= num  <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er, obta in its roman numeral equivalent as a string,\nand return it in lowercase.\nRest ri ctions:  1<= num  <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    string mini_roman = \"\";\n    vector<string> roman_numeral;\n    vector<string> roman_numeral_reverse;\n    vector<string> roman_numeral_reverse_reverse;\n    string numeral;\n    string numeral_reverse;\n    string numeral_reverse_reverse;\n    string numeral_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse;\n    string numeral_reverse_reverse_reverse_reverse_", "passed": 0, "run_status": 2}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths oft he three  sides of a triangle. Return true if the three\nsides forma right-angle d tria ng le, fal seotherw ise.\nA right-angled tria ngle  is a triangle inw hichone angle is rightangle or\n90 de gree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 2, "perturbed": true, "gc": "/*\nGiven the lengths oft he three  sides of a triangle. Return true if the three\nsides forma right-angle d tria ng le, fal seotherw ise.\nA right-angled tria ngle  is a triangle inw hichone angle is rightangle or\n90 de gree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tfloat s=sqrt(pow(a,2)+pow(b,2)+pow(c,2));\n\tif(s==0){\n\t\treturn false;\n\t}\n\tfloat s1=sqrt(pow(a,2)+pow(b,2));\n\tfloat s2=sqrt(pow(a,2)+pow(c,2));\n\tfloat s3=sqrt(pow(b,2)+pow(c,2));\n\tif(s1==0 || s2==0 || s3==0){\n\t\treturn false;\n\t}\n\tfloat s4=s1+s2;\n\tfloat s5=s1+s3;\n\tfloat s6=s2+s3;\n\tif(s4==s5 || s4==s6 || s5==s6){\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tif(right_angle_triangle(a,b,c)){\n\t\tprintf(\"true\\n\");\n\t}else{\n\t\tprintf(\"false\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that acceptsa vector of strings.\nThe vector contains different words.Return the wo rd wit hmaximum  nu mber\no f unique characters. Ifmult iple strings havem aximum number of uniquecharacter s, ret urn the one which comes f irst in lexicographicalorder.\n\nfind_max({\"name\", \"of\", 's tring\"}) == 'string\"\nfi nd_max ({\"name\", \"enam\", \"game \"}) == \"en am\"\nfind_max({\" aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/#include<stdio.h>\n#include<vector>\n#include<stri ng>\n#include<algorithm>\nusing namespace std;\nstring find _max(vecto r<string>  words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that acceptsa vector of strings.\nThe vector contains different words.Return the wo rd wit hmaximum  nu mber\no f unique characters. Ifmult iple strings havem aximum number of uniquecharacter s, ret urn the one which comes f irst in lexicographicalorder.\n\nfind_max({\"name\", \"of\",'s tring\"}) =='string\"\nfi nd_max ({\"name\", \"enam\", \"game \"}) == \"en am\"\nfind_max({\" aaaaaaa\", \"bb\",\"cc\"}) == \"aaaaaaa\"\n*/#include<stdio.h>\n#include<vector>\n#include<stri ng>\n#include<algorithm>\nusing namespace std;\nstring find _max(vecto r<string>  words){\n\tstring max=\"\";\n\tfor(int i=0;i<words.size();i++){\n\t\tif(words[i].size()>max.size()){\n\t\t\tmax=words[i];\n\t\t}\n\t}\n\treturn max;\n}\nstring find_max(vecto r<string>  words){\n\tstring max=\"\";\n\tfor(int i=0;i<words.size();i++){\n\t\tif(words[i].size()>max.size()){\n\t\t\tmax=words[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvecto words;\n\twords.push_back(\"name\");\n\twords.push_back(\"of\");\n\twords.push_back(\"s tring\");\n\twords.push_back(\"enam\");\n\twords.push_back(\"game \");\n\twords.push_back(\"aaaaaaa\");\n\twords.push_back(\"bb\");\n\twords.push_back(\"cc\");\n\tprintf(\"find_max(%s) == %s\\n\",words.get_str().c_str(),find_max(words).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbi t , and yo u already have eaten a certain number of carrots,\nbut nowyou need to e at mor ecarrots  to  compl ete the day's meals.\nyou  sho uld return a vecto r  of { total number of eaten carro ts aft er your meals,\n                              the number of carrots left after you r meals }\nif there arenot en ough remaining carrots,  you willeat all remaini ng carrots, but willstill be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\nYou\"re a hungry rabbi t, and yo u already have eaten a certain number of carrots,\nbut nowyou need to e at mor ecarrots  to  compl ete the day's meals.\nyou  sho uld return a vecto r  of { total number of eaten carro ts aft er your meals,\n                              the number of carrots left after you r meals }\nif there arenot en ough remaining carrots,  you willeat all remaini ng carrots, but willstill be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> result;\n    if(remaining == 0){\n        result.push_back(remaining);\n        return result;\n    }\n    if(number >= need){\n        result.push_back(number-need);\n        result.push_back(remaining);\n        return result;\n    }\n    int i = 0;\n    while(number > 0){\n        if(number >= need){\n            result.push_back(number-need);\n            number = 0;\n        }else{\n            number -= need;\n            result.push_back(need);\n            i++;\n        }\n    }\n    result.push_back(remaining-i);\n    return result;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d%d%d\",&number,&need,&remaining);\n    vector<int> result = eat(number,need,remaining);\n    for(int i = 0;i < result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, findo ut how m any distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string, findo ut how m any distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    vector<char> vec;\n    for(int i=0;i<str.size();i++){\n        vec.push_back(str[i]);\n    }\n    sort(vec.begin(),vec.end());\n    int count=0;\n    for(int i=0;i<vec.size();i++){\n        if(count==0){\n            count++;\n        }else{\n            if(vec[i]!=vec[i-1]){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    string str=\"xyzXYZ\";\n    printf(\"%d\\n\",count_distinct_characters(str));\n    str=\"Jerry\";\n    printf(\"%d\\n\",count_distinct_characters(str));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors ope r ator, an d operand. The first vector has basic algebra operations,and \nthe seco nd vec to r is avec tor of  integers. Use the two g iven  vectors to buildt he algebric \nexpressionand retur n theevaluation of this expres sion.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtr action ( - ) \nMultiplic ation( * ) \nFloor division(  // ) \nExp onentiation ( * * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 2, "perturbed": true, "gc": "/*\nGiven two vectors ope r ator, an d operand. The first vector has basic algebra operations,and \nthe seco nd vec to r is avec tor of  integers. Use the two g iven  vectors to buildt he algebric \nexpressionand retur n theevaluation of this expres sion.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtr action ( - ) \nMultiplic ation( * ) \nFloor division(  // ) \nExp onentiation ( * * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int i, j, k, l, m, n, sum, temp, temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10, temp11, temp12, temp13, temp14, temp15, temp16, temp17, temp18, temp19, temp20, temp21, temp22, temp23, temp24, temp25, temp26, temp27, temp28, temp29, temp30, temp31, temp32, temp33, temp34, temp35, temp36, temp37, temp38, temp39, temp40, temp41, temp42, temp43, temp44, temp45, temp46, temp47, temp48, temp49, temp50, temp51, temp52, temp53, temp54, temp55, temp56, temp57, temp58, temp59, temp60, temp61, temp62, temp63, temp64, temp65, temp66, temp67, temp68, temp69, temp70, temp71, temp72, temp73, temp74, temp75, temp76, temp77, temp78, temp79, temp80, temp81, temp82, temp83, temp84, temp85, temp86, temp87, temp88, temp89, temp90, temp91, temp92, temp93, temp94, temp95, temp96, temp97, temp98, temp99, temp100, temp101, temp102, temp103, temp104, temp105, temp106, temp107, temp108, temp109, temp110, temp111, temp112, temp113, temp114, temp115, temp116, temp117, temp118, temp119, temp120, temp121, temp122, temp123, temp124, temp125, temp126, temp127, temp128, temp129, temp130, temp131, temp132, temp133, temp134, temp135, temp136, temp137, temp138, temp139, temp140, temp141, temp142, temp143, temp144, temp145, temp146, temp147, temp148, temp149, temp150, temp151, temp152, temp153, temp154, temp155, temp156, temp157, temp158, temp159, temp160, temp161, temp162, temp163, temp164, temp165, temp166, temp167, temp168, temp169, temp170, temp171, temp172, temp173, temp174, temp175, temp176, temp177, temp178, temp179, temp180, temp181, temp182, temp183, temp184, temp185, temp186, temp187, temp188, temp189, temp190, temp191, temp192, temp193, temp194, temp195, temp196, temp197, temp198, temp199, temp200, temp201, temp202, temp203, temp204, temp205, temp206, temp207, temp208, temp209, temp210, temp211, temp212, temp213, temp214, temp215, temp216, temp217, temp218, temp219, temp220, temp221, temp222, temp223, temp224, temp225, temp226, temp227, temp228, temp229, temp230, temp231, temp232, temp233, temp234, temp235, temp236, temp237, temp238, temp239, temp240, temp241, temp242, temp243, temp244, temp245, temp246, temp247, temp248, temp249, temp250, temp251, temp252, temp253, temp254, temp255, temp256, temp257, temp258, temp259, temp260, temp261, temp262, temp263, temp264, temp265, temp266, temp267, temp268, temp269, temp270, temp271, temp272, temp273, temp274, temp275, temp276, temp277, temp278, temp279, temp280, temp281, temp282, temp283, temp284, temp285, temp286, temp287, temp288, temp289, temp290, temp291, temp292, temp293, temp294, temp295, temp296, temp297, temp298, temp299, temp300, temp301, temp302, temp303, temp304, temp305, temp306, temp307, temp308, temp309, temp310, temp311, temp312, temp313, temp314, temp315, temp316, temp317, temp318, temp319, temp320, temp321, temp322, temp323, temp324, temp325, temp326, temp327, temp328, temp329, temp330, temp331, temp332, temp333, temp334, temp335, temp336, temp337, temp338, temp339, temp340, temp341, temp342, temp343, temp344, temp345, temp346, temp347, temp348, temp349, temp350, temp351, temp352, temp353, temp354, temp355, temp356, temp357, temp358, temp359, temp360, temp361, temp362, temp363, temp364, temp365, temp366, temp367, temp368, temp369, temp370, temp371, temp372, temp373, temp374, temp375, temp376, temp377, temp378, temp379, temp380, temp381, temp382, temp383, temp384, temp385, temp386, temp387, temp388, temp389, temp390, temp391, temp392, temp393, temp394, temp395, temp396, temp397, temp398, temp399, temp400, temp401, temp402, temp403, temp404, temp405", "passed": 0, "run_status": 2}
{"task_id": "CPP/161", "prompt": "/*\nYouare given a strin g  s.\nif s [i] is a letter, reverse its case from lower to upper or vise versa, \no therwi se  keep i t a s it i s.\nIf the string contain s no  letters, reverset he string.\nThe functionshould re turn t he resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a strin g  s.\nif s [i] is a letter, reverse its case from lower to upper or vise versa, \no therwi se  keep i t a s it i s.\nIf the string contain s no  letters, reverset he string.\nThe functionshould re turn t he resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tstring ret=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]>='a'&&s[i]<='z'){\n\t\t\tret+=s[i]+'A'-'a';\n\t\t}\n\t\telse if(s[i]>='A'&&s[i]<='Z'){\n\t\t\tret+=s[i]+'a'-'A';\n\t\t}\n\t\telse{\n\t\t\tret+=s[i];\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tstring s=\"\";\n\twhile(scanf(\"%s\",&s)!=EOF){\n\t\tprintf(\"%s\\n\",solve(s).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\" ,  returnits md5 hash equivalent string.\nIf 'text\" is an empty string, return No ne.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string 'text\",  returnits md5 hash equivalent string.\nIf 'text\" is an empty string, return No ne.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n\tMD5_CTX md5;\n\tMD5_Init(&md5);\n\tMD5_Update(&md5,text.c_str(),text.size());\n\tunsigned char md5_hash[MD5_DIGEST_LENGTH];\n\tMD5_Final(md5_hash,&md5);\n\tstring md5_str;\n\tfor(int i=0;i<MD5_DIGEST_LENGTH;i++){\n\t\tmd5_str+=md5_hash[i];\n\t}\n\treturn md5_str;\n}\n\nint main(){\n\tstring text=\"Hello world\";\n\tstring md5_str=string_to_md5(text);\n\tprintf(\"%s\\n\",md5_str.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive in t egers aand b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 2, "perturbed": true, "gc": "/*\nGiven two positive in t egers aand b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\tvector<int> res;\n\tint c=a;\n\twhile(c<=b){\n\t\tres.push_back(c);\n\t\tc=c*10;\n\t}\n\treturn res;\n}\nint main(){\n\tint a,b;\n\tscanf(\"%d%d\",&a,&b);\n\tvector<int> res=generate_integers(a,b);\n\tfor(int i=0;i<res.size();i++){\n\t\tprintf(\"%d \",res[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/17", "prompt": "/*\nInput to this functio n  is a st ring representing musical notes in a special ASCII format.\nYour task is  topa rs e thisstr ing an d return vector of integ erscorresponding to h o w many beats does each\nnot last.\nHereis a legend:\n\"o\" - wholenote, lasts four beats\n\"o|\" -half note, lasts two beats\n\" .|\" - quater note, last s onebeat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 2, "perturbed": true, "gc": "/*\nInput to this functio n  is a st ring representing musical notes in a special ASCII format.\nYour task is  topa rs e thisstr ing an d return vector of integ erscorresponding to h o w many beats does each\nnot last.\nHereis a legend:\n\"o\" - wholenote, lasts four beats\n\"o|\" -half note, lasts two beats\n\".|\" - quater note, last s onebeat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n\tvector<int> result;\n\tint i=0;\n\twhile(i<music_string.size()){\n\t\tif(music_string[i]=='o'){\n\t\t\tresult.push_back(4);\n\t\t\ti++;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(2);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='o'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='.'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='o'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='.'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='o'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='.'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='o'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='o' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='.'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='.' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;\n\t\t}\n\t\telse if(music_string[i]=='|' && music_string[i+1]=='|'){\n\t\t\tresult.push_back(1);\n\t\t\ti+=2;", "passed": 0, "run_status": 2}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given su bstring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 2, "perturbed": true, "gc": "/*\nFind how many times a given su bstring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count=0;\n    int i=0,j=0;\n    while(i<str.size()){\n        while(j<substring.size()){\n            if(str[i]==substring[j]){\n                i++;\n                j++;\n            }else{\n                break;\n            }\n        }\n        if(j==substring.size()){\n            count++;\n            i++;\n            j=0;\n        }\n    }\n    return count;\n}\nint main(){\n    string str=\"abcdefghijklmnopqrstuvwxyz\";\n    string sub=\"abc\";\n    int count=how_many_times(str,sub);\n    printf(\"%d\\n\",count);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-deli m ited str ing of numberals from \"zero\" to \"nine\".\nValid choices are\"zero\", \"one\" , 'two \",  'three \",\"four\" , \"five\", 'six\", 'seven\" , \"e ight\" and \"nine\".R eturn the string with numbers sor ted fr om smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 2, "perturbed": true, "gc": "/*\nInput is a space-deli m ited str ing of numberals from \"zero\" to \"nine\".\nValid choices are\"zero\", \"one\", 'two \",  'three \",\"four\", \"five\",'six\",'seven\", \"e ight\" and \"nine\".R eturn the string with numbers sor ted fr om smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\tmap<string,int> m;\n\tstring str;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tif(m.find(numbers[i])==m.end()){\n\t\t\tm[numbers[i]]=1;\n\t\t}\n\t\telse{\n\t\t\tm[numbers[i]]++;\n\t\t}\n\t}\n\tfor(map<string,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tstr+=it->first+\" \"+it->second;\n\t}\n\treturn str;\n}\nint main(){\n\tstring numbers=\"three one five\")\n\tstring str=sort_numbers(numbers);\n\tprintf(\"%s\",str.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floa t ing poin t number, it can be decomposed into\nand integer part (largest integer s maller  t han giv ennumber ) and decimals\n(leftover  par talways smaller t h an 1).\n\nReturn the decimal part o f thenumber.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive floa t ing poin t number, it can be decomposed into\nand integer part (largest integer s maller  t han giv ennumber ) and decimals\n(leftover  par talways smaller t h an 1).\n\nReturn the decimal part o f thenumber.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tfloat decimal_part = number - (int)number;\n\treturn (int)number + decimal_part;\n}\nint main(){\n\tfloat number = 3.5;\n\tprintf(\"%f\\n\",truncate_number(number));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vecto r  of numb ers (of length at least two) select and return two that are the closest  toea ch \notherand  retur n them in order (smaller  num ber, larger number ) .\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 2, "perturbed": true, "gc": "/*\nFrom a supplied vecto r  of numb ers (of length at least two) select and return two that are the closest  toea ch \notherand  retur n them in order (smaller  num ber, larger number ).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\tvector<float> closest_elements;\n\tfloat min_dist=numbers[0];\n\tfor(int i=1;i<numbers.size();i++){\n\t\tfloat dist=sqrt(pow(numbers[i]-numbers[0],2));\n\t\tif(dist<min_dist){\n\t\t\tmin_dist=dist;\n\t\t\tclosest_elements.clear();\n\t\t\tclosest_elements.push_back(numbers[0]);\n\t\t\tclosest_elements.push_back(numbers[i]);\n\t\t}\n\t\telse if(dist==min_dist){\n\t\t\tclosest_elements.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn closest_elements;\n}\nint main(){\n\tvector<float> numbers={1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n\tvector<float> closest_elements=find_closest_elements(numbers);\n\tfor(int i=0;i<closest_elements.size();i++){\n\t\tprintf(\"%f\\n\",closest_elements[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbe r s (of at  least two elements), apply a linear transform to that vector,\nsuch tha t thesm allestnum ber wi ll become 0 and the larg estwill become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 2, "perturbed": true, "gc": "/*\nGiven vector of numbe r s (of at  least two elements), apply a linear transform to that vector,\nsuch tha t thesm allestnum ber wi ll become 0 and the larg estwill become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float sum=0;\n    for(int i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n    }\n    for(int i=0;i<numbers.size();i++){\n        numbers[i]/=sum;\n    }\n    return numbers;\n}\nint main(){\n    vector<float> numbers={1.0, 2.0, 3.0, 4.0, 5.0};\n    vector<float> numbers_rescaled=rescale_to_unit(numbers);\n    for(int i=0;i<numbers_rescaled.size();i++){\n        printf(\"%f\\n\",numbers_rescaled[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector o f  any pyt hon values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 2, "perturbed": true, "gc": "/*\nFilter given vector o f  any pyt hon values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto it=values.begin();it!=values.end();it++){\n        if(boost::any_cast<int>(*it)>=0){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\n\nint main(){\n    list_any values;\n    values.push_back(1);\n    values.push_back(2);\n    values.push_back(3);\n    values.push_back(3.14);\n    values.push_back(5);\n    values.push_back(\"abc\");\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push_back(list_any());\n    values.push", "passed": 0, "run_status": 4}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of give n  string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/*\nReturn length of give n  string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\tint len=0;\n\tfor(int i=0;i<str.length();i++){\n\t\tlen++;\n\t}\n\treturn len;\n}\nint main(){\n\tstring str=\"abc\";\n\tprintf(\"%d\\n\",strlen(str));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/24", "prompt": "/*\nFora given number n, find the  largest number that divides n evenly, smaller thann\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 2, "perturbed": true, "gc": "/*\nFora given number n, find the  largest number that divides n evenly, smaller thann\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i;\n    for(i=1;i<=n;i++){\n        if(n%i==0){\n            if(i>n/i){\n                return i;\n            }\n            else{\n                return n/i;\n            }\n        }\n    }\n    return n;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",largest_divisor(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prim e  factors  of given integer in the order from smallest to largest.\nEach of the fa ctorssh ould be  ve ctored  number of times corresp ondi ng to how many tim e s itappeares in factorization.\nI nput n umbershould be equal tothe product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/*\nReturn vector of prim e  factors  of given integer in the order from smallest to largest.\nEach of the fa ctorssh ould be  ve ctored  number of times corresp ondi ng to how many tim e s itappeares in factorization.\nI nput n umbershould be equal tothe product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n\tvector<int> factors;\n\tint i;\n\tfor(i=2;i<=n;i++){\n\t\twhile(n%i==0){\n\t\t\tfactors.push_back(i);\n\t\t\tn/=i;\n\t\t}\n\t}\n\tif(n>1)\n\t\tfactors.push_back(n);\n\treturn factors;\n}\nint main(){\n\tvector<int> factors;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfactors=factorize(n);\n\tfor(int i=0;i<factors.size();i++){\n\t\tprintf(\"%d \",factors[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of inte g ers, rem ove all elements that occur more than once.\nKeep order ofelements left  the s am e as in  th e inpu t.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 2, "perturbed": true, "gc": "/*\nFrom a vector of inte g ers, rem ove all elements that occur more than once.\nKeep order ofelements left  the s am e as in  th e inpu t.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    sort(numbers.begin(),numbers.end());\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers;\n    numbers.push_back(1);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(2);\n    numbers.push_back(4);\n    numbers.push_back(5);\n    numbers.push_back(6);\n    numbers.push_back(7);\n    numbers.push_back(8);\n    numbers.push_back(9);\n    numbers.push_back(10);\n    numbers.push_back(11);\n    numbers.push_back(12);\n    numbers.push_back(13);\n    numbers.push_back(14);\n    numbers.push_back(15);\n    numbers.push_back(16);\n    numbers.push_back(17);\n    numbers.push_back(18);\n    numbers.push_back(19);\n    numbers.push_back(20);\n    numbers.push_back(21);\n    numbers.push_back(22);\n    numbers.push_back(23);\n    numbers.push_back(24);\n    numbers.push_back(25);\n    numbers.push_back(26);\n    numbers.push_back(27);\n    numbers.push_back(28);\n    numbers.push_back(29);\n    numbers.push_back(30);\n    numbers.push_back(31);\n    numbers.push_back(32);\n    numbers.push_back(33);\n    numbers.push_back(34);\n    numbers.push_back(35);\n    numbers.push_back(36);\n    numbers.push_back(37);\n    numbers.push_back(38);\n    numbers.push_back(39);\n    numbers.push_back(40);\n    numbers.push_back(41);\n    numbers.push_back(42);\n    numbers.push_back(43);\n    numbers.push_back(44);\n    numbers.push_back(45);\n    numbers.push_back(46);\n    numbers.push_back(47);\n    numbers.push_back(48);\n    numbers.push_back(49);\n    numbers.push_back(50);\n    numbers.push_back(51);\n    numbers.push_back(52);\n    numbers.push_back(53);\n    numbers.push_back(54);\n    numbers.push_back(55);\n    numbers.push_back(56);\n    numbers.push_back(57);\n    numbers.push_back(58);\n    numbers.push_back(59);\n    numbers.push_back(60);\n    numbers.push_back(61);\n    numbers.push_back(62);\n    numbers.push_back(63);\n    numbers.push_back(64);\n    numbers.push_back(65);\n    numbers.push_back(66);\n    numbers.push_back(67);\n    numbers.push_back(68);\n    numbers.push_back(69);\n    numbers.push_back(70);\n    numbers.push_back(71);\n    numbers.push_back(72);\n    numbers.push_back(73);\n    numbers.push_back(74);\n    numbers.push_back(75);\n    numbers.push_back(76);\n    numbers.push_back(77);\n    numbers.push_back(78);\n    numbers.push_back(79);\n    numbers.push_back(80);\n    numbers.push_back(81);\n    numbers.push_back(82);\n    numbers.push_back(83);\n    numbers.push_back(84);\n    numbers.push_back(85);\n    numbers.push_back(86);\n    numbers.push_back(87);\n    numbers.push_back(88);\n    numbers.push_back(89);\n    numbers.push_back(90);\n    numbers.push_back(91);\n    numbers.push_back(92);\n    numbers.push_back(93);\n    numbers.push_back(94);\n    numbers.push_back(95);\n    numbers.push_back(96);\n    numbers.push_back(97);\n    numbers.push_back(98);\n    numbers.push_back(99);\n    numbers.push_back(100);\n    numbers.push_back(101);\n    numbers.push_back(102);\n    numbers.push_back(103);\n    numbers.push_back(104);\n    numbers.push_back(105);\n    numbers.push_back(106);\n    numbers.push_back(107);\n    numbers.push_back(108);\n    numbers.push_back(109);\n    numbers.push_back(110);\n    numbers.push_back(111);\n    numbers.push_back(112);\n    numbers.push_back(113);\n    numbers.push_back(114);\n    numbers.push_back(115);\n    numbers.push_back(116);\n    numbers.push_back(117);\n    numbers.push_back(118);\n    numbers.push_back", "passed": 0, "run_status": 1}
{"task_id": "CPP/27", "prompt": "/*\nFora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 2, "perturbed": true, "gc": "/*\nFora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    string str1 = \"\";\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] >= 'a' && str[i] <= 'z')\n            str1 += str[i] - 'a' + 'A';\n        else\n            str1 += str[i];\n    }\n    return str1;\n}\nint main(){\n    string str;\n    scanf(\"%s\", &str);\n    printf(\"%s\\n\", filp_case(str).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of stringsinto a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/*\nConcatenate vector of stringsinto a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n\tstring result;\n\tfor(int i = 0; i < strings.size(); i++){\n\t\tresult += strings[i];\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings;\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tprintf(\"%s\\n\", concatenate(strings).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vecto r  of stri ngs only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 2, "perturbed": true, "gc": "/*\nFilter an input vecto r  of stri ngs only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\tvector<string> result;\n\tfor(vector<string>::iterator it = strings.begin(); it!= strings.end(); it++){\n\t\tif(it->substr(0, prefix.size()) == prefix){\n\t\t\tresult.push_back(*it);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n\tvector<string> result = filter_by_prefix(strings, \"a\");\n\tfor(vector<string>::iterator it = result.begin(); it!= result.end(); it++){\n\t\tprintf(\"%s\\n\", it->c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of depos it and withdrawal operations on a bank account thatstarts with\nzero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lls below zero, andat that point  funct ion should return true. O therwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 2, "perturbed": true, "gc": "/*\nYou\"re given a vector of depos it and withdrawal operations on a bank account thatstarts with\nzero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lls below zero, andat that point  funct ion should return true. O therwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n\tint sum=0;\n\tfor(int i=0; i<operations.size(); i++){\n\t\tsum+=operations[i];\n\t}\n\tif(sum<0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tvector<int> operations;\n\toperations.push_back(1);\n\toperations.push_back(2);\n\toperations.push_back(-4);\n\toperations.push_back(5);\n\tprintf(\"%s\\n\", below_zero(operations)?\"true\":\"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positiven umbers i n the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 2, "perturbed": true, "gc": "/*\nReturn only positiven umbers i n the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\tvector<float> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tr.push_back(l[i]);\n\t\t}\n\t}\n\treturn r;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(-1);\n\tl.push_back(2);\n\tl.push_back(-4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(5);\n\tl.push_back(3);\n\tl.push_back(-5);\n\tl.push_back(2);\n\tl.push_back(-3);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(0);\n\tl.push_back(123);\n\tl.push_back(1);\n\tl.push_back(-10);\n\tvector<float> r=get_positive(l);\n\tfor(int i=0;i<r.size();i++){\n\t\tprintf(\"%f\\n\",r[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a give n  numberis prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 2, "perturbed": true, "gc": "/*\nReturn true if a give n  numberis prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n\tif(n==1)return false;\n\tif(n==2)return true;\n\tif(n==3)return true;\n\tif(n%2==0)return false;\n\tif(n%3==0)return false;\n\tlong long i=5;\n\twhile(i*i<=n){\n\t\tif(n%i==0)return false;\n\t\ti+=6;\n\t}\n\treturn true;\n}\nint main(){\n\tlong long n;\n\twhile(scanf(\"%lld\",&n)!=EOF){\n\t\tif(is_prime(n))printf(\"%lld is prime\\n\",n);\n\t\telse printf(\"%lld is not prime\\n\",n);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomialw ith coef ficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... x s[n] *  x ^n \n   */ \n    d ouble sum=0;\n    int i;  for (i=0;i<xs.size ( );i++)\n    {\n       sum+=xs[i]*p ow(x,i );\n   }\n   returnsum;}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs arecoefficients of a polyn omial.  find_zero find x suchthat poly( x) = 0. find_ze ro returns only onlyzero point, even if there are many. \n    Moreover, find_zero onlytakes list xs having even number of coefficients and lar gest non z ero coeff icientas it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomialw ith coef ficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... x s[n] *  x ^n \n   */ \n    d ouble sum=0;\n    int i;  for (i=0;i<xs.size ( );i++)\n    {\n       sum+=xs[i]*p ow(x,i );\n   }\n   returnsum;}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs arecoefficients of a polyn omial.  find_zero find x suchthat poly( x) = 0. find_ze ro returns only onlyzero point, even if there are many. \n    Moreover, find_zero onlytakes list xs having even number of coefficients and lar gest non z ero coeff icientas it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x;\n    double x0;\n    double x1;\n    double x2;\n    double x3;\n    double x4;\n    double x5;\n    double x6;\n    double x7;\n    double x8;\n    double x9;\n    double x10;\n    double x11;\n    double x12;\n    double x13;\n    double x14;\n    double x15;\n    double x16;\n    double x17;\n    double x18;\n    double x19;\n    double x20;\n    double x21;\n    double x22;\n    double x23;\n    double x24;\n    double x25;\n    double x26;\n    double x27;\n    double x28;\n    double x29;\n    double x30;\n    double x31;\n    double x32;\n    double x33;\n    double x34;\n    double x35;\n    double x36;\n    double x37;\n    double x38;\n    double x39;\n    double x40;\n    double x41;\n    double x42;\n    double x43;\n    double x44;\n    double x45;\n    double x46;\n    double x47;\n    double x48;\n    double x49;\n    double x50;\n    double x51;\n    double x52;\n    double x53;\n    double x54;\n    double x55;\n    double x56;\n    double x57;\n    double x58;\n    double x59;\n    double x60;\n    double x61;\n    double x62;\n    double x63;\n    double x64;\n    double x65;\n    double x66;\n    double x67;\n    double x68;\n    double x69;\n    double x70;\n    double x71;\n    double x72;\n    double x73;\n    double x74;\n    double x75;\n    double x76;\n    double x77;\n    double x78;\n    double x79;\n    double x80;\n    double x81;\n    double x82;\n    double x83;\n    double x84;\n    double x85;\n    double x86;\n    double x87;\n    double x88;\n    double x89;\n    double x90;\n    double x91;\n    double x92;\n    double x93;\n    double x94;\n    double x95;\n    double x96;\n    double x97;\n    double x98;\n    double x99;\n    double x100;\n    double x101;\n    double x102;\n    double x103;\n    double x104;\n    double x105;\n    double x106;\n    double x107;\n    double x108;\n    double x109;\n    double x110;\n    double x111;\n    double x112;\n    double x113;\n    double x114;\n    double x115;\n    double x116;\n    double x117;\n    double x118;\n    double x119;\n    double x120;\n    double x121;\n    double x122;\n    double x123;\n    double x124;\n    double x125;\n    double x126;\n    double x127;\n    double x128;\n    double x129;\n    double x130;\n    double x131;\n    double x132;\n    double x133;\n    double x134;\n    double x135;\n    double x136;\n    double x137;\n    double x138;\n    double x139;\n    double x140;\n    double x141;\n    double x142;\n    double x143;\n    double x144;\n    double x145;\n    double x146;\n    double x147;\n    double x148;\n    double x149;\n    double x150;\n    double x151;\n    double x152;\n    double x153;\n    double x154;\n    double x155;\n    double x156;\n    double x157;\n    double x158;\n    double x159;\n    double x160;\n    double x161;\n    double x162;\n    double x163;\n    double x164;\n    double x165;\n    double x166;\n    double x167;\n    double x168;\n    double x169;\n    double x170;\n    double x171;\n    double x172;\n    double x173;\n    double x174;\n    double x175;\n    double x176;\n    double x177;\n    double x178;\n    double x179;\n    double x180;\n    double x181;\n    double x182;\n    double x183;\n    double x184;\n    double x185;\n    double x186;\n    double x187;\n    double x188;\n    double x189;\n    double x190;\n    double x191;\n    double x192;\n    double x193;\n    double x194;\n    double", "passed": 0, "run_status": 2}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l  and returns a vector l' such that\nl' is identical to l in the indicies  thatar e not d ivi sibleby three, while its valu esa tthe indicies tha t  aredivisible by threeare equal \nto th e values of the correspon ding indicies of l, butsorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 2, "perturbed": true, "gc": "/*\nThis function takes a vector l  and returns a vector l' such that\nl' is identical to l in the indicies  thatar e not d ivi sibleby three, while its valu esa tthe indicies tha t  aredivisible by threeare equal \nto th e values of the correspon ding indicies of l, butsorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> l_sorted(l.size());\n\tfor(int i = 0; i < l.size(); i++){\n\t\tint j = i;\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\twhile(j < l.size() && l[j] % 3 == 0){\n\t\t\tj++;\n\t\t}\n\t\tl_sorted[i] = l[j];\n\t\t", "passed": 0, "run_status": 2}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted uniquee lementsin a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*\nReturn sorted uniquee lementsin a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> res;\n    sort(l.begin(), l.end());\n    for(int i=0; i<l.size(); i++){\n        if(find(res.begin(), res.end(), l[i])==res.end()){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main(){\n    vector<int> l;\n    l.push_back(5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(3);\n    l.push_back(9);\n    l.push_back(0);\n    l.push_back(123);\n    vector<int> res=unique(l);\n    for(int i=0; i<res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum elemen t  in thevector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 2, "perturbed": true, "gc": "/*\nReturn maximum elemen t  in thevector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max=l[0];\n\tfor(int i=1;i<l.size();i++){\n\t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(5);\n\tl.push_back(3);\n\tl.push_back(-5);\n\tl.push_back(2);\n\tl.push_back(-3);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(0);\n\tl.push_back(123);\n\tl.push_back(1);\n\tl.push_back(-10);\n\tprintf(\"%f\\n\",max_element(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number oft imes the  digit 7 appears in integers less than n which are divisible by 11 or 1 3.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 2, "perturbed": true, "gc": "/*\nReturn the number oft imes the  digit 7 appears in integers less than n which are divisible by 11 or 1 3.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i = 1; i <= n; i++){\n        if(i % 11 == 7 || i % 3 == 1){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",fizz_buzz(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l  and returns a vector l' such that\nl' is identical to l in the odd indi cies,wh ile its  va lues a t the even indicies areequa lto the values of the even indicies of l,but sorte d.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 2, "perturbed": true, "gc": "/*\nThis function takes a vector l  and returns a vector l' such that\nl' is identical to l in the odd indi cies,wh ile its  va lues a t the even indicies areequa lto the values of the even indicies of l,but sorte d.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_even;\n\tfor(int i = 0; i < l.size(); i++){\n\t\tif(i%2 == 0){\n\t\t\tl_even.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_even;\n}\n\nint main(){\n\tvector<float> l = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\tvector<float> l_even = sort_even(l);\n\tfor(int i = 0; i < l_even.size(); i++){\n\t\tprintf(\"%f \", l_even[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encodedwith encode_cyclic function. Returns decoded string. \n   */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encodedwith encode_cyclic function. Returns decoded string. \n   */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i<num;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\nint main(){\n    string s;\n    string output;\n    int i;\n    while(1){\n        scanf(\"%s\",&s);\n        if (s==\"END\") break;\n        output=encode_cyclic(s);\n        printf(\"%s\\n\",output.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-t h  numberthat is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 2, "perturbed": true, "gc": "/*\nprime_fib returns n-t h  numberthat is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,n443,n444,n445,n446,n447,n448,n449,n450,n451,n452,n453,n454,n455,n456,n457,n458,n459,n460,n461,n462,n463,n464,n465,n466,n467,n468,n469,n470,n471,n472,", "passed": 0, "run_status": 2}
{"task_id": "CPP/4", "prompt": "/*\nFora given vector of input nu mbers, calculate Mean Absolute Deviation\naround themean of this datase t.\nMea nAbsolut e D eviati on is the average absolu ted ifference betweene ach\nelement and a centerpoint (me an inthis case):\nMAD = average  | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 2, "perturbed": true, "gc": "/*\nFora given vector of input nu mbers, calculate Mean Absolute Deviation\naround themean of this datase t.\nMea nAbsolut e D eviati on is the average absolu ted ifference betweene ach\nelement and a centerpoint (me an inthis case):\nMAD = average  | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean(numbers));\n    }\n    return sum / numbers.size();\n}\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    cout << mean_absolute_deviation(numbers) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero t a kes a ve ctor of integers as an input.\nit returns true if there are three distin ct ele me nts inthe  vecto r that\nsum to zero, andfals eotherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 2, "perturbed": true, "gc": "/*\ntriples_sum_to_zero t a kes a ve ctor of integers as an input.\nit returns true if there are three distin ct ele me nts inthe  vecto r that\nsum to zero, andfals eotherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\tint sum=0;\n\tfor(int i=0;i<l.size();i++){\n\t\tsum+=l[i];\n\t}\n\tif(sum==0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(3);\n\tl.push_back(5);\n\tl.push_back(0);\n\tprintf(\"%d\\n\",triples_sum_to_zero(l));\n\tl.clear();\n\tl.push_back(1);\n\tl.push_back(3);\n\tl.push_back(-2);\n\tl.push_back(1);\n\tprintf(\"%d\\n\",triples_sum_to_zero(l));\n\tl.clear();\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(7);\n\tprintf(\"%d\\n\",triples_sum_to_zero(l));\n\tl.clear();\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(-5);\n\tl.push_back(3);\n\tl.push_back(9);\n\tl.push_back(7);\n\tprintf(\"%d\\n\",triples_sum_to_zero(l));\n\tl.clear();\n\tl.push_back(1);\n\tprintf(\"%d\\n\",triples_sum_to_zero(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfec tly straight infinitely long line.\nn cars are driving left to right;  s imulta ne ously,a d iffere nt set of n cars\nare dri ving  right to left.  T he two sets of carsstart out bei ng ver y farfrom\neach other.  A ll cars move in the same speed.  Two cars are said to coll ide\nwhen a car that's m ovingleft to right hits a ca r that's m oving right toleft.\nHowever, the cars are infinitelysturdy andstrong; as a result, they continue mo ving\nin their trajectory as if they did not collide.\n\nTh is functio n outputs  the number of suchcollisions.\n*/\n#include<stdio. h>\nusing n amesp ace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 2, "perturbed": true, "gc": "/*\nImagine a road that's a perfec tly straight infinitely long line.\nn cars are driving left to right;  s imulta ne ously,a d iffere nt set of n cars\nare dri ving  right to left.  T he two sets of carsstart out bei ng ver y farfrom\neach other.  A ll cars move in the same speed.  Two cars are said to coll ide\nwhen a car that's m ovingleft to right hits a ca r that's m oving right toleft.\nHowever, the cars are infinitelysturdy andstrong; as a result, they continue mo ving\nin their trajectory as if they did not collide.\n\nTh is functio n outputs  the number of suchcollisions.\n*/\n#include<stdio. h>\nusing n amesp ace std;\nint car_race_collision(int n){\n\tint i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y", "passed": 0, "run_status": 2}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with el e ments in cremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 2, "perturbed": true, "gc": "/*\nReturn vector with el e ments in cremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0; i<l.size(); i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\tl.push_back(128);\n\tl.push_back(129);\n\tl.push_back(130);\n\tl.push_back(131);\n\tl.push_back(132);\n\tl.push_back(133);\n\tl.push_back(134);\n\tl.push_back(135);\n\tl.push", "passed": 1, "run_status": 0}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero tak e s a vect or of integers as an input.\nit returns true if there are two distinct e lement sin thevec tor th at\nsum to zero, and fals e ot herwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 2, "perturbed": true, "gc": "/*\npairs_sum_to_zero tak e s a vect or of integers as an input.\nit returns true if there are two distinct e lement sin thevec tor th at\nsum to zero, and fals e ot herwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int n=l.size();\n    if(n<2) return false;\n    int i=0,j=0;\n    while(i<n){\n        if(l[i]==0)\n            j++;\n        else if(l[i]==l[j]){\n            j++;\n            if(j==n)\n                return false;\n        }\n        else\n            i++;\n    }\n    return true;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(-2);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(-5);\n    l.push_back(3);\n    l.push_back(5);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(7);\n    l.push_back(1);\n    l.push_", "passed": 0, "run_status": 3}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input  number x to base.\nreturn string representation after theconversion.\nb asenu mb ers are  le ss tha n 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 2, "perturbed": true, "gc": "/*\nChange numerical base of input  number x to base.\nreturn string representation after theconversion.\nb asenu mb ers are  le ss tha n 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string ans=\"\";\n    while(x>0){\n        ans=ans+to_string(x%base);\n        x=x/base;\n    }\n    return ans;\n}\nint main(){\n    int x;\n    int base;\n    scanf(\"%d\",&x);\n    scanf(\"%d\",&base);\n    printf(\"%s\\n\",change_base(x,base).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a sid e  and hig h return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 2, "perturbed": true, "gc": "/*\nGiven length of a sid e  and hig h return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\treturn a*h/2;\n}\nint main(){\n\tfloat a,h;\n\tscanf(\"%f %f\",&a,&h);\n\tprintf(\"%.2f\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/46", "prompt": "/*\nTheFib4 number seque n ce is asequence similar to the Fibbonacci sequnece that's defined as follows:fib4(0 )-> 0\nfi b4( 1) ->0\nfib4(2) -> 2\nfib4(3) - > 0fib4(n) -> fib4(n- 1 ) + fib4(n-2) + fib4(n-3) + fib4( n-4).Please write a function t o efficiently compute the n-th element of the fib4 numbersequence.  Do not use r ecursi on.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*\nTheFib4 number seque n ce is asequence similar to the Fibbonacci sequnece that's defined as follows:fib4(0 )-> 0\nfi b4( 1) ->0\nfib4(2) -> 2\nfib4(3) - > 0fib4(n) -> fib4(n- 1 ) + fib4(n-2) + fib4(n-3) + fib4( n-4).Please write a function t o efficiently compute the n-th element of the fib4 numbersequence.  Do not use r ecursi on.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n\tif(n<=0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\tif(n==3){\n\t\treturn 2;\n\t}\n\tif(n==4){\n\t\treturn 3;\n\t}\n\tif(n==5){\n\t\treturn 4;\n\t}\n\tif(n==6){\n\t\treturn 5;\n\t}\n\tif(n==7){\n\t\treturn 6;\n\t}\n\tif(n==8){\n\t\treturn 7;\n\t}\n\tif(n==9){\n\t\treturn 8;\n\t}\n\tif(n==10){\n\t\treturn 9;\n\t}\n\tif(n==11){\n\t\treturn 10;\n\t}\n\tif(n==12){\n\t\treturn 11;\n\t}\n\tif(n==13){\n\t\treturn 12;\n\t}\n\tif(n==14){\n\t\treturn 13;\n\t}\n\tif(n==15){\n\t\treturn 14;\n\t}\n\tif(n==16){\n\t\treturn 15;\n\t}\n\tif(n==17){\n\t\treturn 16;\n\t}\n\tif(n==18){\n\t\treturn 17;\n\t}\n\tif(n==19){\n\t\treturn 18;\n\t}\n\tif(n==20){\n\t\treturn 19;\n\t}\n\tif(n==21){\n\t\treturn 20;\n\t}\n\tif(n==22){\n\t\treturn 21;\n\t}\n\tif(n==23){\n\t\treturn 22;\n\t}\n\tif(n==24){\n\t\treturn 23;\n\t}\n\tif(n==25){\n\t\treturn 24;\n\t}\n\tif(n==26){\n\t\treturn 25;\n\t}\n\tif(n==27){\n\t\treturn 26;\n\t}\n\tif(n==28){\n\t\treturn 27;\n\t}\n\tif(n==29){\n\t\treturn 28;\n\t}\n\tif(n==30){\n\t\treturn 29;\n\t}\n\tif(n==31){\n\t\treturn 30;\n\t}\n\tif(n==32){\n\t\treturn 31;\n\t}\n\tif(n==33){\n\t\treturn 32;\n\t}\n\tif(n==34){\n\t\treturn 33;\n\t}\n\tif(n==35){\n\t\treturn 34;\n\t}\n\tif(n==36){\n\t\treturn 35;\n\t}\n\tif(n==37){\n\t\treturn 36;\n\t}\n\tif(n==38){\n\t\treturn 37;\n\t}\n\tif(n==39){\n\t\treturn 38;\n\t}\n\tif(n==40){\n\t\treturn 39;\n\t}\n\tif(n==41){\n\t\treturn 40;\n\t}\n\tif(n==42){\n\t\treturn 41;\n\t}\n\tif(n==43){\n\t\treturn 42;\n\t}\n\tif(n==44){\n\t\treturn 43;\n\t}\n\tif(n==45){\n\t\treturn 44;\n\t}\n\tif(n==46){\n\t\treturn 45;\n\t}\n\tif(n==47){\n\t\treturn 46;\n\t}\n\tif(n==48){\n\t\treturn 47;\n\t}\n\tif(n==49){\n\t\treturn 48;\n\t}\n\tif(n==50){\n\t\treturn 49;\n\t}\n\tif(n==51){\n\t\treturn 50;\n\t}\n\tif(n==52){\n\t\treturn 51;\n\t}\n\tif(n==53){\n\t\treturn 52;\n\t}\n\tif(n==54){\n\t\treturn 53;\n\t}\n\tif(n==55){\n\t\treturn 54;\n\t}\n\tif(n==56){\n\t\treturn 55;\n\t}\n\tif(n==57){\n\t\treturn 56;\n\t}\n\tif(n==58){\n\t\treturn 57;\n\t}\n\tif(n==59){\n\t\treturn 58;\n\t}\n\tif(n==60){\n\t\treturn 59;\n\t}\n\tif(n==61){\n\t\treturn 60;\n\t}\n\tif(n==62){\n\t\treturn 61;\n\t}\n\tif(n==63){\n\t\treturn 62;\n\t}\n\tif(n==64){\n\t\treturn 63;\n\t}\n\tif(n==65){\n\t\treturn 64;\n\t}\n\tif(n==66){\n\t\treturn 65;\n\t}\n\tif(n==67){\n\t\treturn 66;\n\t}\n\tif(n==68){\n\t\treturn 67;\n\t}\n\tif(n==69){\n\t\treturn 68;\n\t}\n\tif(n==70){\n\t\treturn 69;\n\t}\n\tif(n==71){\n\t\treturn 70;\n\t}\n\tif(n==72){\n\t\treturn 71;\n\t}\n\tif(n==73){\n\t\treturn 72;\n\t}\n\tif(n==74){\n\t\treturn 73;\n\t}\n\tif(n==75){\n\t\treturn 74;\n\t}\n\tif(n==76){\n\t\treturn 75;\n\t}\n\tif(n==77){\n\t\treturn 76;\n\t}\n\tif(n==78){\n\t\treturn 77;\n\t}\n\tif(n==79){\n\t\treturn 78;\n\t}\n\tif(n==80){\n\t\treturn 79;\n\t}\n\tif(n==81){\n\t\treturn 80;\n\t}\n\tif(n==82){\n\t\treturn 81;\n\t}\n\tif(n==83){\n\t\treturn 82;\n\t}\n\tif(n==84", "passed": 0, "run_status": 2}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elem e nts in t he vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*\nReturn median of elem e nts in t he vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\tif(l.size()==0)\n\t\treturn 0;\n\tsort(l.begin(),l.end());\n\tint mid=(l.size()+1)/2;\n\tif(l.size()%2==0)\n\t\treturn (l[mid-1]+l[mid])/2;\n\telse\n\t\treturn l[mid];\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(3);\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(5);\n\tprintf(\"%f\\n\",median(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given strin g  is a pa lindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 2, "perturbed": true, "gc": "/*\nChecks if given strin g  is a pa lindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n\tint i,j;\n\tfor(i=0,j=text.size()-1;i<j;i++,j--){\n\t\tif(text[i]!=text[j])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring text;\n\twhile(scanf(\"%s\",&text)!=EOF){\n\t\tprintf(\"%s is \",text.c_str());\n\t\tif(is_palindrome(text))\n\t\t\tprintf(\"a palindrome\\n\");\n\t\telse\n\t\t\tprintf(\"not a palindrome\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p ( b e awareof numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*\nReturn 2^n modulo p ( b e awareof numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int a=1;\n    while(n>0){\n        if(n&1)\n            a=a*p%p;\n        n>>=1;\n        p=p*p%p;\n    }\n    return a;\n}\nint main(){\n    int n,p,a;\n    scanf(\"%d%d\",&n,&p);\n    a=modp(n,p);\n    printf(\"%d\\n\",a);\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"deli m eter\" be tween every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/*\nInsert a number \"deli m eter\" be tween every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(i==0 || numbers[i]!=numbers[i-1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    for(int i=numbers.size()-1; i>=0; i--){\n        if(i==numbers.size()-1 || numbers[i]!=numbers[i+1]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    vector<int> result = intersperse(numbers, 4);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded strin g  by shif ting every character by 5 in the alphabet.\n    string out;\n    int i;\n   for  ( i=0;i<s .le ngth() ;i++)\n    {\n        intw=(( int)s[i]+5-(int)'a ' )%26+(int)'a';   \n      out=out +(char )w;\n   }    return out; \n}\nstring decode_shift(strings){\n    // takes as input st ring encoded with encod e_shif t function. Returns dec oded strin g.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 2, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded strin g  by shif ting every character by 5 in the alphabet.\n    string out;\n    int i;\n   for  ( i=0;i<s.le ngth() ;i++)\n    {\n        intw=(( int)s[i]+5-(int)'a')%26+(int)'a';   \n      out=out +(char )w;\n   }    return out; \n}\nstring decode_shift(strings){\n    // takes as input st ring encoded with encod e_shif t function. Returns dec oded strin g.\n    string out;\n    int i;\n   for  ( i=0;i<s.le ngth() ;i++)\n    {\n        intw=(( int)s[i]-5+(int)'a' )/26;   \n      out=out +(char )w;\n   }    return out; \n}\nint main(){\n    string s=\"abcdefghijklmnopqrstuvwxyz\";\n    string out=encode_shift(s);\n    cout<<out<<endl;\n    out=decode_shift(out);\n    cout<<out<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a fu n ction th at takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 2, "perturbed": true, "gc": "/*\nremove_vowels is a fu n ction th at takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U')\n            result+=text[i];\n    }\n    return result;\n}\nint main(){\n    string text=\"\";\n    getline(cin,text);\n    cout<<remove_vowels(text)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all nu m bers inthe vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 2, "perturbed": true, "gc": "/*\nReturn true if all nu m bers inthe vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\tfor(int i=0; i<l.size(); i++){\n\t\tif(l[i]>t)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int>l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(10);\n\tl.push_back(20);\n\tprintf(\"%s\\n\", below_threshold(l, 100)? \"true\" : \"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/53", "prompt": "/*\nAddtwo numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*\nAddtwo numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    int sum=0;\n    while(y){\n        sum+=y%10;\n        y/=10;\n    }\n    while(x){\n        sum+=x%10;\n        x/=10;\n    }\n    return sum;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words ha v e the sa me characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 2, "perturbed": true, "gc": "/*\nCheck if two words ha v e the sa me characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    int n0=s0.size();\n    int n1=s1.size();\n    if(n0!=n1)\n        return false;\n    for(int i=0;i<n0;i++){\n        if(s0[i]!=s1[i])\n            return false;\n    }\n    return true;\n}\nint main(){\n    string s0,s1;\n    while(scanf(\"%s%s\",&s0,&s1)!=EOF){\n        if(same_chars(s0,s1))\n            printf(\"%s is same as %s\\n\",s0.c_str(),s1.c_str());\n        else\n            printf(\"%s is not same as %s\\n\",s0.c_str(),s1.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==0) return 0;\n    if(n==1) return 1;\n    if(n==2) return 1;\n    int a=0,b=1,c=0;\n    for(int i=3;i<=n;i++){\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    return c;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a stringo f '<' an d '>'.\nreturn true if every opening bracket has a corresponding closing  brack et .\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 2, "perturbed": true, "gc": "/*\nbrackets is a stringo f '<' an d '>'.\nreturn true if every opening bracket has a corresponding closing  brack et.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i,j;\n\tfor(i=0;i<(int)brackets.size();i++){\n\t\tif(brackets[i]=='>'){\n\t\t\tfor(j=i+1;j<(int)brackets.size();j++){\n\t\t\t\tif(brackets[j]=='<'){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets;\n\twhile(scanf(\"%s\",&brackets)==1){\n\t\tif(correct_bracketing(brackets)){\n\t\t\tprintf(\"%s\\n\",brackets.c_str());\n\t\t}\n\t\telse{\n\t\t\tprintf(\"no\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements  are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*\nReturn true is vector elements  are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    if(l.size()<2)\n        return true;\n    float m=l[0];\n    for(int i=1;i<l.size();i++){\n        if(l[i]<m)\n            return false;\n        if(l[i]>m)\n            m=l[i];\n    }\n    return true;\n}\nint main(){\n    vector<float> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(20);\n    l.push_back(4);\n    l.push_back(10);\n    l.push_back(-10);\n    printf(\"%s\\n\",monotonic(l)?\"monotonic\":\"not monotonic\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted uniquec ommon el ements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*\nReturn sorted uniquec ommon el ements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> res;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size()&&j<l2.size()){\n        if(l1[i]==l2[j]){\n            res.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j])\n            i++;\n        else\n            j++;\n    }\n    return res;\n}\nint main(){\n    vector<int> l1={1,4,3,34,6,53,2,5};\n    vector<int> l2={5,7,1,5,9,653,121};\n    vector<int> res=common(l1,l2);\n    for(int i=0;i<res.size();i++)\n        printf(\"%d \",res[i]);\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest pr i me facto r of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 2, "perturbed": true, "gc": "/*\nReturn the largest pr i me facto r of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i,j,k,p,q,r,s,t,u,v,w,x,y,z,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,n443,n444,n445,n446,n447,n448,n449,n450,n451,n452,n453,n454,n455,n456,n457,n458,n459,n460,n461,n462,n463,n464,n465,n466,n467,n468,n469,n470,n471,n472,n473,n474,n475,n476,", "passed": 0, "run_status": 2}
{"task_id": "CPP/6", "prompt": "/*\nInput to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces.Fo r eachofthe gr oup, output the deepestleve lof nesting of pa r entheses.\nE.g. (()()) has maximum  two l evelsof nesting while (( ())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 2, "perturbed": true, "gc": "/*\nInput to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces.Fo r eachofthe gr oup, output the deepestleve lof nesting of pa r entheses.\nE.g. (()()) has maximum  two l evelsof nesting while (( ())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depth_of_nesting;\n    int i = 0;\n    int j = 0;\n    while(i < paren_string.length()){\n        if(paren_string[i] == '('){\n            depth_of_nesting.push_back(j);\n            j++;\n        }\n        else if(paren_string[i] == ')'){\n            j--;\n        }\n        i++;\n    }\n    return depth_of_nesting;\n}\n\nint main(){\n    vector<int> depth_of_nesting = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n    for(int i = 0; i < depth_of_nesting.size(); i++){\n        printf(\"%d \", depth_of_nesting[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a functio n  that su ms numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 2, "perturbed": true, "gc": "/*\nsum_to_n is a functio n  that su ms numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a stringo f '(' an d ')'.\nreturn true if every opening bracket has a corresponding closing  brack et .\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 2, "perturbed": true, "gc": "/*\nbrackets is a stringo f '(' an d ')'.\nreturn true if every opening bracket has a corresponding closing  brack et.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i,j,k,l;\n    for(i=0;i<(int)brackets.size();i++){\n        if(brackets[i]==')'){\n            for(j=i+1;j<(int)brackets.size();j++){\n                if(brackets[j]=='('){\n                    k=j;\n                    break;\n                }\n            }\n            for(l=i+1;l<(int)brackets.size();l++){\n                if(brackets[l]==')'){\n                    if(k!=l){\n                        return false;\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return true;\n}\nint main(){\n    string brackets;\n    while(cin>>brackets){\n        if(correct_bracketing(brackets)){\n            printf(\"%s is correct\\n\",brackets.c_str());\n        }else{\n            printf(\"%s is not correct\\n\",brackets.c_str());\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/62", "prompt": "/*\nxsrepresent coeffici e nts of a  polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + .... Return derivativeof thi spolynom ial  in th e same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/*\nxsrepresent coeffici e nts of a  polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 +.... Return derivativeof thi spolynom ial  in th e same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\tvector<float> result;\n\tfloat x, y, z, n, i, j, k;\n\tfor(i = 0; i < xs.size(); i++){\n\t\tx = xs[i];\n\t\ty = xs[i+1];\n\t\tz = xs[i+2];\n\t\tn = x * y;\n\t\ti += 2;\n\t\tj = x * z;\n\t\tk = y * z;\n\t\tresult.push_back(n);\n\t\tresult.push_back(j);\n\t\tresult.push_back(k);\n\t}\n\treturn result;\n}\nint main(){\n\tvector<float> xs;\n\tfloat x, y, z;\n\twhile(scanf(\"%f\", &x)!= EOF){\n\t\txs.push_back(x);\n\t}\n\tprintf(\"%s\\n\", derivative(xs).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/63", "prompt": "/*\nTheFibFib number seq u ence isa sequence similar to the Fibbonacci sequnece that's defined as follows :\nfibf ib (0) ==0\nf ibfib( 1) == 0\nfibfib(2) == 1\nf ibfi b(n) == fibfib(n-1 )  + fibfib(n-2) + fibfib(n-3).\nPle ase wr ite afunction to efficie ntly compute the n-th elementof the fibfib number sequenc e.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*\nTheFibFib number seq u ence isa sequence similar to the Fibbonacci sequnece that's defined as follows :\nfibf ib (0) ==0\nf ibfib( 1) == 0\nfibfib(2) == 1\nf ibfi b(n) == fibfib(n-1 )  + fibfib(n-2) + fibfib(n-3).\nPle ase wr ite afunction to efficie ntly compute the n-th elementof the fibfib number sequenc e.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    if(n==3)\n        return 2;\n    if(n==4)\n        return 3;\n    if(n==5)\n        return 4;\n    if(n==6)\n        return 5;\n    if(n==7)\n        return 6;\n    if(n==8)\n        return 7;\n    if(n==9)\n        return 8;\n    if(n==10)\n        return 9;\n    if(n==11)\n        return 10;\n    if(n==12)\n        return 11;\n    if(n==13)\n        return 12;\n    if(n==14)\n        return 13;\n    if(n==15)\n        return 14;\n    if(n==16)\n        return 15;\n    if(n==17)\n        return 16;\n    if(n==18)\n        return 17;\n    if(n==19)\n        return 18;\n    if(n==20)\n        return 19;\n    if(n==21)\n        return 20;\n    if(n==22)\n        return 21;\n    if(n==23)\n        return 22;\n    if(n==24)\n        return 23;\n    if(n==25)\n        return 24;\n    if(n==26)\n        return 25;\n    if(n==27)\n        return 26;\n    if(n==28)\n        return 27;\n    if(n==29)\n        return 28;\n    if(n==30)\n        return 29;\n    if(n==31)\n        return 30;\n    if(n==32)\n        return 31;\n    if(n==33)\n        return 32;\n    if(n==34)\n        return 33;\n    if(n==35)\n        return 34;\n    if(n==36)\n        return 35;\n    if(n==37)\n        return 36;\n    if(n==38)\n        return 37;\n    if(n==39)\n        return 38;\n    if(n==40)\n        return 39;\n    if(n==41)\n        return 40;\n    if(n==42)\n        return 41;\n    if(n==43)\n        return 42;\n    if(n==44)\n        return 43;\n    if(n==45)\n        return 44;\n    if(n==46)\n        return 45;\n    if(n==47)\n        return 46;\n    if(n==48)\n        return 47;\n    if(n==49)\n        return 48;\n    if(n==50)\n        return 49;\n    if(n==51)\n        return 50;\n    if(n==52)\n        return 51;\n    if(n==53)\n        return 52;\n    if(n==54)\n        return 53;\n    if(n==55)\n        return 54;\n    if(n==56)\n        return 55;\n    if(n==57)\n        return 56;\n    if(n==58)\n        return 57;\n    if(n==59)\n        return 58;\n    if(n==60)\n        return 59;\n    if(n==61)\n        return 60;\n    if(n==62)\n        return 61;\n    if(n==63)\n        return 62;\n    if(n==64)\n        return 63;\n    if(n==65)\n        return 64;\n    if(n==66)\n        return 65;\n    if(n==67)\n        return 66;\n    if(n==68)\n        return 67;\n    if(n==69)\n        return 68;\n    if(n==70)\n        return 69;\n    if(n==71)\n        return 70;\n    if(n==72)\n        return 71;\n    if(n==73)\n        return 72;\n    if(n==74)\n        return 73;\n    if(n==75)\n        return 74;\n    if(n==76)\n        return 75;\n    if(n==77)\n        return 76;\n    if(n==78)\n        return 77;\n    if(n==79)\n        return 78;\n    if(n==80)\n        return 79;\n    if(n==81)\n        return 80;\n    if(n==82)\n        return 81;\n    if(n==83)\n        return 82;\n    if(n==84)\n        return 83;\n    if(n==85)\n        return 84;\n    if(n==86)\n        return 85;\n    if(n==87)\n        return 86;\n    if(n==88)\n        return 87;\n    if(n==89)\n        return 88;\n    if(n==90)\n        return 89;\n    if(n==91)\n        return 90;\n    if(n==92)\n        return 91;\n    if(n==93)\n        return 92;\n    if(n==94)\n        return 93;\n    if(n==95)\n        return 94;\n    if(n==96)\n        return 95;\n    if(n==97)\n        return 96;\n    if(n==98)\n        return 97;\n    if(n==99)\n        return 98;\n    if(n==100)\n        return 99;\n    if(n==101)\n        return 100;\n    if(n==102)\n        return 101;\n    if(n==103)\n        return 102;\n    if(n==104)\n        return 103;\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowe l s_countwhich takes a string representing a word as input and returns the numbe r of v ow els inthe  strin g. Vowels in this case a re' a', 'e', 'i', 'o', 'u'.\nHere, 'y' is alsoa vowel,but on ly when it is at the endof the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function vowe l s_countwhich takes a string representing a word as input and returns the numbe r of v ow els inthe  strin g. Vowels in this case a re' a', 'e', 'i', 'o', 'u'.\nHere, 'y' is alsoa vowel,but on ly when it is at the endof the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\tint count=0;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n\t\t\tcount++;\n\t\telse if(s[i]=='y'){\n\t\t\tif(i==s.size()-1)\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\twhile(getline(cin,s)){\n\t\tcout<<vowels_count(s)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the di g its of t he integer x, shift the digits right by shift\nand return the result asa stri ng .\nIf sh ift  > num ber of digits, return di gits  reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 2, "perturbed": true, "gc": "/*\nCircular shift the di g its of t he integer x, shift the digits right by shift\nand return the result asa stri ng.\nIf sh ift  > num ber of digits, return di gits  reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n\tstring str=\"\";\n\tint i=0;\n\twhile(x>0){\n\t\tstr=str+to_string(x%10);\n\t\tx=x/10;\n\t\ti++;\n\t}\n\tfor(int j=0;j<shift;j++){\n\t\tstr=str+\"0\";\n\t}\n\tfor(int j=0;j<i;j++){\n\t\tstr=str+to_string(x%10);\n\t\tx=x/10;\n\t}\n\treturn str;\n}\n\nint main(){\n\tint x=12;\n\tint shift=1;\n\tstring str=\"\";\n\tstr=circular_shift(x,shift);\n\tprintf(\"%s\\n\",str.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that tak es a string as input and returns the sum of the upper characters only's \nASCII  c odes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*\nTask\nWrite a function that tak es a string as input and returns the sum of the upper characters only's \nASCII  c odes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.size(); i++){\n        sum += s[i] - '0';\n    }\n    return sum;\n}\nint main(){\n    string s;\n    scanf(\"%s\", &s);\n    printf(\"%d\\n\", digitSum(s));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/67", "prompt": "/*\nInthis task, you wil l  be give n a string that represents a number of apples and oranges\nthat are dis tribut ed  in a b ask et offruit this basket contai nsapples, oranges, a n d mango fruits. Given the stringthat r epresentsthe totalnumbe r of \nthe oranges and applesand an integer that represent  the total number of th e frui ts \nin the basket retur n the numb er of the mango  fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 2, "perturbed": true, "gc": "/*\nInthis task, you wil l  be give n a string that represents a number of apples and oranges\nthat are dis tribut ed  in a b ask et offruit this basket contai nsapples, oranges, a n d mango fruits. Given the stringthat r epresentsthe totalnumbe r of \nthe oranges and applesand an integer that represent  the total number of th e frui ts \nin the basket retur n the numb er of the mango  fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int count=0;\n    int i=0;\n    while(i<s.size()){\n        if(s[i]=='a'){\n            count+=n;\n            n--;\n        }\n        else if(s[i]=='o'){\n            count-=n;\n            n--;\n        }\n        i++;\n    }\n    return count;\n}\nint main(){\n    string s;\n    int n;\n    scanf(\"%d\",&n);\n    scanf(\"%s\",&s);\n    printf(\"%d\\n\",fruit_distribution(s,n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector repres e nting abranch of a tree that has non-negative integer nodes\nyourtask is to pl uckon eof thenod es and  return it.\nThe pluckednode  should be the nod e  with the smallest evenvalue.\nIf  multi ple nodeswith the same s mallest even value are foundreturn the nodethat has smal lest index.\n\nThe plucke d node  should be returned ina vector,{ smalest_value , its index },\nIf there are no even values or thegiven vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector repres e nting abranch of a tree that has non-negative integer nodes\nyourtask is to pl uckon eof thenod es and  return it.\nThe pluckednode  should be the nod e  with the smallest evenvalue.\nIf  multi ple nodeswith the same s mallest even value are foundreturn the nodethat has smal lest index.\n\nThe plucke d node  should be returned ina vector,{ smalest_value, its index },\nIf there are no even values or thegiven vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> res;\n    int min = arr[0];\n    int min_index = 0;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]<min){\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n}\n\nint main(){\n    vector<int> arr = {4,2,3};\n    vector<int> res = pluck(arr);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    arr = {1,2,3};\n    res = pluck(arr);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    arr = {};\n    res = pluck(arr);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    arr = {5, 0, 3, 0, 4, 2};\n    res = pluck(arr);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/69", "prompt": "/*\nYouare given a non-e m pty vect or of positive integers. Return the greatest integer thatis greater th an ze ro , and h asa freq uency greater than or eq ualto the value of th e  integer itself. \nThe frequency o f an i nteger isthe number of t imes it appears in the vector.\nIf no such a value exist, r eturn -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a non-e m pty vect or of positive integers. Return the greatest integer thatis greater th an ze ro, and h asa freq uency greater than or eq ualto the value of th e  integer itself. \nThe frequency o f an i nteger isthe number of t imes it appears in the vector.\nIf no such a value exist, r eturn -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int max = lst[0];\n    int max_index = 0;\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] > max){\n            max = lst[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> lst(n);\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &lst[i]);\n        }\n        printf(\"%d\\n\", search(lst));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vecto r  of stri ngs only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 2, "perturbed": true, "gc": "/*\nFilter an input vecto r  of stri ngs only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> filtered_strings;\n\tfor(vector<string>::iterator it = strings.begin(); it!= strings.end(); it++){\n\t\tif(it->find(substring)!= string::npos){\n\t\t\tfiltered_strings.push_back(*it);\n\t\t}\n\t}\n\treturn filtered_strings;\n}\n\nint main(){\n\tvector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n\tvector<string> filtered_strings = filter_by_substring(strings, \"a\");\n\tfor(vector<string>::iterator it = filtered_strings.begin(); it!= filtered_strings.end(); it++){\n\t\tprintf(\"%s\\n\", (*it).c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integ e rs, retu rn vector in strange order.\nStrange sorting, is when you start with the  minim um  value, \nth en max imum of the remaining in tege rs, then minimum a n d soon.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 2, "perturbed": true, "gc": "/*\nGiven vector of integ e rs, retu rn vector in strange order.\nStrange sorting, is when you start with the  minim um  value, \nth en max imum of the remaining in tege rs, then minimum a n d soon.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> ret;\n    if(lst.size() == 0)\n        return ret;\n    sort(lst.begin(), lst.end());\n    ret.push_back(lst[0]);\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] < lst[i-1]){\n            ret.push_back(lst[i]);\n            ret.push_back(lst[i-1]);\n        }\n    }\n    return ret;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(4);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n", "passed": 0, "run_status": 1}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths oft he three  sides of a triangle. Return the area of\nthe triangle rounded to 2 deci malpo in ts if t hethreesides form a valid trian gle.  Otherwise return -1\nThree sides makea valid trian gle wh en the sum of any two sid es is greater \nthan thethirdside.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 2, "perturbed": true, "gc": "/*\nGiven the lengths oft he three  sides of a triangle. Return the area of\nthe triangle rounded to 2 deci malpo in ts if t hethreesides form a valid trian gle.  Otherwise return -1\nThree sides makea valid trian gle wh en the sum of any two sid es is greater \nthan thethirdside.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=sqrt(pow(a,2)+pow(b,2)+pow(c,2));\n\treturn s*(a+b+c)/2;\n}\nint main(){\n\tfloat a,b,c;\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tprintf(\"%.2f\",triangle_area(a,b,c));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returnstrue if the object q will fly, and false otherwise.The object q will f ly ifit 's bala nce d (itis a palindromic vector)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that returnstrue if the object q will fly, and false otherwise.The object q will f ly ifit's bala nce d (itis a palindromic vector)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for(int i=0;i<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum>w)\n        return false;\n    if(sum<w)\n        return true;\n    return false;\n}\nint main(){\n    vector<int> q={1,2,3,4,5};\n    int w=6;\n    printf(\"%s\\n\",will_it_fly(q,w)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers , find the minimum number of elements that\nneed to be changed to make t he vec to r palin dro mic. A  palindromic vector is a  vec tor that\nis read t h e same backwards and forwards. In  one c hange, you can change one  element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make t he vec to r palin dro mic. A  palindromic vector is a  vec tor that\nis read t h e same backwards and forwards. In  one c hange, you can change one  element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int min = arr[0];\n    for(int i = 1; i < n; i++){\n        if(arr[i] < min){\n            min = arr[i];\n        }\n    }\n    for(int i = 0; i < n; i++){\n        if(arr[i] < min){\n            min = arr[i];\n        }\n    }\n    return min;\n}\nint main(){\n    vector<int> arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(3);\n    arr.push_back(5);\n    arr.push_back(4);\n    arr.push_back(7);\n    arr.push_back(9);\n    arr.push_back(6);\n    printf(\"%d\\n\", smallest_change(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that acceptstwo vectors of strings and returns the vector that has \ntotal number of  chars  i n the a llstring s of the vector less tha n th eother vector.\n\ni f  thetwo vectors have the same nu mber o f chars, return thefirst  vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that acceptstwo vectors of strings and returns the vector that has \ntotal number of  chars  i n the a llstring s of the vector less tha n th eother vector.\n\ni f  thetwo vectors have the same nu mber o f chars, return thefirst  vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    vector<string> res;\n    if(lst1.size()!=lst2.size()){\n        return res;\n    }\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i].size()>lst2[i].size()){\n            res.push_back(lst1[i]);\n        }else if(lst1[i].size()<lst2[i].size()){\n            res.push_back(lst2[i]);\n        }else{\n            res.push_back(lst1[i]);\n        }\n    }\n    return res;\n}\nint main(){\n    vector<string> lst1 = {\"hi\", \"admin\"};\n    vector<string> lst2 = {\"hI\", \"Hi\"};\n    vector<string> lst3 = {\"hI\", \"hi\", \"hi\"};\n    vector<string> lst4 = {\"4\"};\n    vector<string> lst5 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst6 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst7 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst8 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst9 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst10 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst11 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst12 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst13 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst14 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst15 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst16 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst17 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst18 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst19 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst20 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst21 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst22 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst23 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst24 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst25 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst26 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst27 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst28 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst29 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst30 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst31 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst32 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst33 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst34 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst35 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst36 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst37 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst38 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst39 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst40 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst41 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst42 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst43 = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n    vector<string> lst44 = {\"1\", \"2\", \"3\", \"4\", \"", "passed": 0, "run_status": 1}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returnstrue if the given number is the multiplication of 3primenumbers\nand f alse o th erwise. \nKn owingthat (a) is less then 10 0. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that returnstrue if the given number is the multiplication of 3primenumbers\nand f alse o th erwise. \nKn owingthat (a) is less then 10 0. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tint i = 2;\n\twhile(i<a){\n\t\tif(a%i == 0){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tint a;\n\tscanf(\"%d\",&a);\n\tprintf(\"%s\",is_multiply_prime(a)?\"true\":\"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a functi on that returns true if a number x is a simple\npower of nand false inotherca ses.\nxisa simp le power of n if n**int= x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 2, "perturbed": true, "gc": "/*\nYour task is to write a functi on that returns true if a number x is a simple\npower of nand false inotherca ses.\nxisa simp le power of n if n**int= x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x%n==0)\n        return false;\n    return is_simple_power(x/n,n);\n}\n\nint main(){\n    int x,n;\n    scanf(\"%d %d\",&x,&n);\n    printf(\"%s\",is_simple_power(x,n)? \"true\":\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an  integer a and returns true \nif this ingeger is a cube ofsome integernumber .Note: y oumay as sume the input is always  val id.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that takes an  integer a and returns true \nif this ingeger is a cube ofsome integernumber.Note: y oumay as sume the input is always  val id.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    if(a==0)\n        return true;\n    if(a==1)\n        return false;\n    if(a%2==0)\n        return false;\n    if(a%3==0)\n        return false;\n    if(a%5==0)\n        return false;\n    if(a%7==0)\n        return false;\n    if(a%11==0)\n        return false;\n    if(a%13==0)\n        return false;\n    if(a%17==0)\n        return false;\n    if(a%19==0)\n        return false;\n    if(a%23==0)\n        return false;\n    if(a%29==0)\n        return false;\n    if(a%31==0)\n        return false;\n    if(a%37==0)\n        return false;\n    if(a%41==0)\n        return false;\n    if(a%43==0)\n        return false;\n    if(a%47==0)\n        return false;\n    if(a%53==0)\n        return false;\n    if(a%59==0)\n        return false;\n    if(a%61==0)\n        return false;\n    if(a%67==0)\n        return false;\n    if(a%71==0)\n        return false;\n    if(a%73==0)\n        return false;\n    if(a%79==0)\n        return false;\n    if(a%83==0)\n        return false;\n    if(a%89==0)\n        return false;\n    if(a%97==0)\n        return false;\n    if(a%101==0)\n        return false;\n    if(a%103==0)\n        return false;\n    if(a%107==0)\n        return false;\n    if(a%109==0)\n        return false;\n    if(a%113==0)\n        return false;\n    if(a%127==0)\n        return false;\n    if(a%131==0)\n        return false;\n    if(a%137==0)\n        return false;\n    if(a%139==0)\n        return false;\n    if(a%149==0)\n        return false;\n    if(a%151==0)\n        return false;\n    if(a%157==0)\n        return false;\n    if(a%163==0)\n        return false;\n    if(a%167==0)\n        return false;\n    if(a%173==0)\n        return false;\n    if(a%179==0)\n        return false;\n    if(a%181==0)\n        return false;\n    if(a%191==0)\n        return false;\n    if(a%193==0)\n        return false;\n    if(a%197==0)\n        return false;\n    if(a%199==0)\n        return false;\n    if(a%211==0)\n        return false;\n    if(a%223==0)\n        return false;\n    if(a%227==0)\n        return false;\n    if(a%229==0)\n        return false;\n    if(a%233==0)\n        return false;\n    if(a%239==0)\n        return false;\n    if(a%241==0)\n        return false;\n    if(a%251==0)\n        return false;\n    if(a%257==0)\n        return false;\n    if(a%263==0)\n        return false;\n    if(a%269==0)\n        return false;\n    if(a%271==0)\n        return false;\n    if(a%277==0)\n        return false;\n    if(a%281==0)\n        return false;\n    if(a%283==0)\n        return false;\n    if(a%293==0)\n        return false;\n    if(a%307==0)\n        return false;\n    if(a%311==0)\n        return false;\n    if(a%313==0)\n        return false;\n    if(a%317==0)\n        return false;\n    if(a%331==0)\n        return false;\n    if(a%333==0)\n        return false;\n    if(a%337==0)\n        return false;\n    if(a%347==0)\n        return false;\n    if(a%349==0)\n        return false;\n    if(a%353==0)\n        return false;\n    if(a%359==0)\n        return false;\n    if(a%361==0)\n        return false;\n    if(a%367==0)\n        return false;\n    if(a%373==0)\n        return false;\n    if(a%379==0)\n        return false;\n    if(a%383==0)\n        return false;\n    if(a%389==0)\n        return false;\n    if(a%397==0)\n        return false;\n    if(a%401==0)\n        return false;\n    if(a%409==0)\n        return false;\n    if(a%419==0)\n        return false;\n    if(a%421==0)\n        return false;\n    if(a%431==0)\n        return false;\n    if(a%433==0)\n        return false;\n    if(a%439==0)\n        return false;\n    if(a%443==0)\n        return false;\n    if(a%449==0)\n        return false;\n    if(a%457==0)\n        return false;\n    if(a%461==0)\n        return false;\n    if(a%463==0", "passed": 0, "run_status": 2}
{"task_id": "CPP/78", "prompt": "/*\nYouhave been taskedt o writea function that receives \na hexadecimal number as astring and counts t he num be r of he xad ecimal  \ndigits that are primes  (pr ime number, or a p r ime,is a natural number \ngreater  than1 that isnot a product o f two smaller natural numbers).\nHexadecimal digits are 0,1, 2, 3, 4, 5, 6, 7, 8,  9, A,  B, C, D, E, F.\nPrimen umbers are 2, 3, 5, 7, 11 , 13, 17,...So you have to determine a number ofthe following digits: 2, 3, 5, 7, \nB(=decimal 11), D (=decimal 13).\nNote: you may assume the  inputisalways co rrect or empty string, \nand symbols A,B,C,D,E,F ar e always u pperc ase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 2, "perturbed": true, "gc": "/*\nYouhave been taskedt o writea function that receives \na hexadecimal number as astring and counts t he num be r of he xad ecimal  \ndigits that are primes  (pr ime number, or a p r ime,is a natural number \ngreater  than1 that isnot a product o f two smaller natural numbers).\nHexadecimal digits are 0,1, 2, 3, 4, 5, 6, 7, 8,  9, A,  B, C, D, E, F.\nPrimen umbers are 2, 3, 5, 7, 11, 13, 17,...So you have to determine a number ofthe following digits: 2, 3, 5, 7, \nB(=decimal 11), D (=decimal 13).\nNote: you may assume the  inputisalways co rrect or empty string, \nand symbols A,B,C,D,E,F ar e always u pperc ase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint count = 0;\n\tfor(int i = 0; i < num.size(); i++){\n\t\tif(num[i] >= '0' && num[i] <= '9'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(num[i] >= 'A' && num[i] <= 'F'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(num[i] >= 'a' && num[i] <= 'f'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring num;\n\twhile(scanf(\"%s\", &num)!= EOF){\n\t\tint count = hex_key(num);\n\t\tprintf(\"%d\\n\", count);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/79", "prompt": "/*\nYouwill be given a n u mber indecimal form and your task is to convert it to\nbinary format. The funct ionsh ou ld retu rna stri ng, with each characterrepr esenting a binaryn umber. Each character in the stri ng wil l be '0' or '1'.\n\nThere w ill be an extra couple of characters \"db\" atthe beginning  and at the end of thestring .\nThe extra charactersare thereto help with th e format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 2, "perturbed": true, "gc": "/*\nYouwill be given a n u mber indecimal form and your task is to convert it to\nbinary format. The funct ionsh ou ld retu rna stri ng, with each characterrepr esenting a binaryn umber. Each character in the stri ng wil l be '0' or '1'.\n\nThere w ill be an extra couple of characters \"db\" atthe beginning  and at the end of thestring.\nThe extra charactersare thereto help with th e format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\tstring binary=\"\";\n\tint i=0;\n\twhile(decimal>0){\n\t\tbinary=binary+\"1\";\n\t\tdecimal=decimal-1;\n\t}\n\tbinary=binary+\"0\";\n\treturn binary;\n}\n\nint main(){\n\tint decimal=15;\n\tstring binary=decimal_to_binary(decimal);\n\tprintf(\"%s\\n\",binary.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/8", "prompt": "/*\nFora given vector of integers , return a vector consisting of a sum and a productof all the integers  inave ctor.\nE mpt y sumshould be equal to 0 and  emp ty product shouldb e equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 2, "perturbed": true, "gc": "/*\nFora given vector of integers, return a vector consisting of a sum and a productof all the integers  inave ctor.\nE mpt y sumshould be equal to 0 and  emp ty product shouldb e equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum_product(2,0);\n    for(int i=0; i<numbers.size(); i++){\n        sum_product[0] += numbers[i];\n        sum_product[1] *= numbers[i];\n    }\n    return sum_product;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4};\n    vector<int> sum_product = sum_product(numbers);\n    printf(\"sum_product(%d) = %d, %d\\n\", numbers.size(), sum_product[0], sum_product[1]);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/80", "prompt": "/*\nYouare given a strin g  s.\nYour  task is to check if the string is happy or not.\nA stringis happy if i ts len gt h is at  le ast 3and every 3 consecutivelett ers are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a strin g  s.\nYour  task is to check if the string is happy or not.\nA stringis happy if i ts len gt h is at  le ast 3and every 3 consecutivelett ers are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length()<3)\n        return false;\n    int i=0,j=0;\n    while(i<s.length()){\n        if(s[i]==s[i+1] && s[i]==s[i+2]){\n            j=i+3;\n            while(j<s.length() && s[j]==s[i])\n                j++;\n            if(j==s.length())\n                return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\",&s)!=EOF){\n        if(is_happy(s))\n            printf(\"%s is happy\\n\",s.c_str());\n        else\n            printf(\"%s is not happy\\n\",s.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/81", "prompt": "/*\nItis the last week o f  the sem ester and the teacher has to give the grades\nto students.The teacher h as bee nmakingher  own a lgorithm for grading.\nTh e on ly problem is, she has lost the code she used for gr ading. \nShe has given you a vect or of GPAs for some studentsand you have towrite \na func tion that can output avector  of letter grades using  the follo wing table:\n        GPA      |   Letter grade\n         4.0               A+\n        > 3.7               A \n       > 3.3               A- \n        > 3. 0             B+ \n       > 2.7               B \n        > 2.3              B-        > 2.0                C+\n        > 1.7               C\n       > 1.3                C-        > 1.0             D+ \n       > 0.7               D\n       > 0 .0             D-\n         0.0               E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 2, "perturbed": true, "gc": "/*\nItis the last week o f  the sem ester and the teacher has to give the grades\nto students.The teacher h as bee nmakingher  own a lgorithm for grading.\nTh e on ly problem is, she has lost the code she used for gr ading. \nShe has given you a vect or of GPAs for some studentsand you have towrite \na func tion that can output avector  of letter grades using  the follo wing table:\n        GPA      |   Letter grade\n         4.0               A+\n        > 3.7               A \n       > 3.3               A- \n        > 3. 0             B+ \n       > 2.7               B \n        > 2.3              B-        > 2.0                C+\n        > 1.7               C\n       > 1.3                C-        > 1.0             D+ \n       > 0.7               D\n       > 0.0             D-\n         0.0               E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> output;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=3.7){\n            output.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.3){\n            output.push_back(\"A\");\n        }\n        else if(grades[i]>=3.0){\n            output.push_back(\"A-\");\n        }\n        else if(grades[i]>=2.7){\n            output.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.3){\n            output.push_back(\"B\");\n        }\n        else if(grades[i]>=2.0){\n            output.push_back(\"B-\");\n        }\n        else if(grades[i]>=1.7){\n            output.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.3){\n            output.push_back(\"C\");\n        }\n        else if(grades[i]>=1.0){\n            output.push_back(\"C-\");\n        }\n        else if(grades[i]>=0.7){\n            output.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.3){\n            output.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0){\n            output.push_back(\"D-\");\n        }\n        else{\n            output.push_back(\"E\");\n        }\n    }\n    return output;\n}\n\nint main(){\n    vector<float> grades;\n    grades.push_back(4.0);\n    grades.push_back(3.0);\n    grades.push_back(1.7);\n    grades.push_back(2.0);\n    grades.push_back(3.5);\n    vector<string> output = numerical_letter_grade(grades);\n    for(int i=0;i<output.size();i++){\n        printf(\"%s\\n\", output[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes astring and returns true if the string\nlength is a prime number or false  other wi se\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that takes astring and returns true if the string\nlength is a prime number or false  other wi se\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tint i;\n\tfor(i=2;i<str.length();i++){\n\t\tif(str[i]=='0'){\n\t\t\tbreak;\n\t\t}\n\t\telse if(str[i]=='1'){\n\t\t\tcontinue;\n\t\t}\n\t\telse if(str[i]=='2'){\n\t\t\tif(i==str.length()-1){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(str[i]=='3'){\n\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(str[i]=='4'){\n\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(str[i]=='5'){\n\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(str[i]=='6'){\n\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif(str[i]=='7'){\n\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tif(str[i]=='8'){\n\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\tif(str[i]=='9'){\n\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\tif(str[i]=='0'){\n\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='1'){\n\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='2'){\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='3'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='4'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='5'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='6'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='7'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='8'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='9'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='0'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='1'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(str[i]=='2'){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i==str.length()-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n", "passed": 0, "run_status": 2}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive inte g er n, re turn the count of the numbers of n-digit\npositive integers that start o r endwi th 1.\n* /\n# includ e<stdio.h>\nusing namespa ces td;\nint starts_one _ ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er n, re turn the count of the numbers of n-digit\npositive integers that start o r endwi th 1.\n* /\n# includ e<stdio.h>\nusing namespa ces td;\nint starts_one _ ends(int n){\n    int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50,n51,n52,n53,n54,n55,n56,n57,n58,n59,n60,n61,n62,n63,n64,n65,n66,n67,n68,n69,n70,n71,n72,n73,n74,n75,n76,n77,n78,n79,n80,n81,n82,n83,n84,n85,n86,n87,n88,n89,n90,n91,n92,n93,n94,n95,n96,n97,n98,n99,n100,n101,n102,n103,n104,n105,n106,n107,n108,n109,n110,n111,n112,n113,n114,n115,n116,n117,n118,n119,n120,n121,n122,n123,n124,n125,n126,n127,n128,n129,n130,n131,n132,n133,n134,n135,n136,n137,n138,n139,n140,n141,n142,n143,n144,n145,n146,n147,n148,n149,n150,n151,n152,n153,n154,n155,n156,n157,n158,n159,n160,n161,n162,n163,n164,n165,n166,n167,n168,n169,n170,n171,n172,n173,n174,n175,n176,n177,n178,n179,n180,n181,n182,n183,n184,n185,n186,n187,n188,n189,n190,n191,n192,n193,n194,n195,n196,n197,n198,n199,n200,n201,n202,n203,n204,n205,n206,n207,n208,n209,n210,n211,n212,n213,n214,n215,n216,n217,n218,n219,n220,n221,n222,n223,n224,n225,n226,n227,n228,n229,n230,n231,n232,n233,n234,n235,n236,n237,n238,n239,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n250,n251,n252,n253,n254,n255,n256,n257,n258,n259,n260,n261,n262,n263,n264,n265,n266,n267,n268,n269,n270,n271,n272,n273,n274,n275,n276,n277,n278,n279,n280,n281,n282,n283,n284,n285,n286,n287,n288,n289,n290,n291,n292,n293,n294,n295,n296,n297,n298,n299,n300,n301,n302,n303,n304,n305,n306,n307,n308,n309,n310,n311,n312,n313,n314,n315,n316,n317,n318,n319,n320,n321,n322,n323,n324,n325,n326,n327,n328,n329,n330,n331,n332,n333,n334,n335,n336,n337,n338,n339,n340,n341,n342,n343,n344,n345,n346,n347,n348,n349,n350,n351,n352,n353,n354,n355,n356,n357,n358,n359,n360,n361,n362,n363,n364,n365,n366,n367,n368,n369,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n380,n381,n382,n383,n384,n385,n386,n387,n388,n389,n390,n391,n392,n393,n394,n395,n396,n397,n398,n399,n400,n401,n402,n403,n404,n405,n406,n407,n408,n409,n410,n411,n412,n413,n414,n415,n416,n417,n418,n419,n420,n421,n422,n423,n424,n425,n426,n427,n428,n429,n430,n431,n432,n433,n434,n435,n436,n437,n438,n439,n440,n441,n442,n443,n444,n445,n446,n447,n448,n449,n450,n451,n452,n453,n454,n455,n456,n457,n458,n459,n460,n461,n462,n463,n464,n465,n466,n467,n468,n469,n470,n471,n472,n473,n474,n475,n476,n477,n478,n479,n480,n481,n482,n483,n484,n485,n486", "passed": 0, "run_status": 2}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive inte g er N, re turn the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*\nGiven a positive inte g er N, re turn the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string res;\n    int sum = 0;\n    while(N){\n        sum += N % 2;\n        N /= 2;\n    }\n    while(sum){\n        res += '1';\n        sum -= 1;\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\nint main(){\n    int N;\n    scanf(\"%d\", &N);\n    printf(\"%s\", solve(N).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vec t or of in tegers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*\nGiven a non-empty vec t or of in tegers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> t;\n    t.push_back(4);\n    t.push_back(2);\n    t.push_back(6);\n    t.push_back(7);\n    printf(\"%d\\n\", add(t));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes astring and returns an ordered version of it.\nOrdered version of string,  isast ring wh ere  all w ords (separated by space )\nar ereplaced by a ne w  word where all thecharacters ar ranged  in\nascending orderbased  on ascii value.\nNote: You should keep the order of wordsand blank spaces in the  sente nce.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that takes astring and returns an ordered version of it.\nOrdered version of string,  isast ring wh ere  all w ords (separated by space )\nar ereplaced by a ne w  word where all thecharacters ar ranged  in\nascending orderbased  on ascii value.\nNote: You should keep the order of wordsand blank spaces in the  sente nce.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result;\n    for(int i=0;i<s.size();i++){\n        result.push_back(s[i]);\n        sort(result.begin(),result.end());\n        result.erase(unique(result.begin(),result.end()),result.end());\n    }\n    return result;\n}\n\nint main(){\n    string s;\n    while(scanf(\"%s\",&s)==1){\n        printf(\"%s\\n\",anti_shuffle(s).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/87", "prompt": "/*\nYouare given a 2 dim e nsionaldata, as a nested vectors,\nwhich is similar to matrix, however, unlikematric es ,\neachrow  may c ontain a different numbe r of  columns.\nGiven ls t , and integer x, find integers xin the  vector,\nand returnvecto r of vectors, {{x1, y1}, {x2,y2} ...} such that\neach vect or is a coordinate - {r ow, co lumns}, starting with0 .\nSort coo rdinates initia lly by rows in ascending order.\nAlso, sort coordinates of the row by columns in descend ing order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a 2 dim e nsionaldata, as a nested vectors,\nwhich is similar to matrix, however, unlikematric es,\neachrow  may c ontain a different numbe r of  columns.\nGiven ls t, and integer x, find integers xin the  vector,\nand returnvecto r of vectors, {{x1, y1}, {x2,y2}...} such that\neach vect or is a coordinate - {r ow, co lumns}, starting with0.\nSort coo rdinates initia lly by rows in ascending order.\nAlso, sort coordinates of the row by columns in descend ing order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n  vector<vector<int>> res;\n  int n = lst.size();\n  for(int i = 0; i < n; i++){\n    vector<int> row;\n    for(int j = 0; j < lst[i].size(); j++){\n      if(lst[i][j] == x){\n        row.push_back(j);\n      }\n    }\n    if(row.size() > 0){\n      res.push_back(row);\n    }\n  }\n  return res;\n}\nint main(){\n  vector<vector<int>> lst = {{1,2,3,4,5,6},{1,2,3,4,1,6},{1,2,3,4,5,1}};\n  vector<vector<int>> res = get_row(lst, 1);\n  for(int i = 0; i < res.size(); i++){\n    for(int j = 0; j < res[i].size(); j++){\n      printf(\"%d \", res[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non - negative  integers, return a copy of the given vector after sorting,\nyou will so rt the  g iven ve cto r in a scending order if the su m(f irst index value,l ast index value) isodd,\nor sortit indescending order ifthe s um( first index value, last index value) is even.\n\nNote:\n*  don't change the given  vecto r.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 2, "perturbed": true, "gc": "/*\nGiven a vector of non - negative  integers, return a copy of the given vector after sorting,\nyou will so rt the  g iven ve cto r in a scending order if the su m(f irst index value,l ast index value) isodd,\nor sortit indescending order ifthe s um( first index value, last index value) is even.\n\nNote:\n*  don't change the given  vecto r.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    sort(array.begin(), array.end());\n    return array;\n}\nint main(){\n    vector<int> array = {2, 4, 3, 0, 1, 5, 6};\n    vector<int> result = sort_array(array);\n    for(auto i: result){\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function enc r ypt that  takes a string as an argument and\nreturns a stringencrypted with thealphab et  beingrot ated.\nThe alphabet should berota ted in a manner su c h that the letters shift down by  two m ultipliedto two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function enc r ypt that  takes a string as an argument and\nreturns a stringencrypted with thealphab et  beingrot ated.\nThe alphabet should berota ted in a manner su c h that the letters shift down by  two m ultipliedto two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n\tstring rypt=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\trypt+=s[i]^2;\n\t}\n\treturn rypt;\n}\nint main(){\n\tstring s=\"asdfghjkl\";\n\tstring rypt=encrypt(s);\n\tprintf(\"%s\\n\",rypt.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector o f  integer s, generate a vector of rolling maximum element found until given momen t\nin t he  sequen ce. \n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 2, "perturbed": true, "gc": "/*\nFrom a given vector o f  integer s, generate a vector of rolling maximum element found until given momen t\nin t he  sequen ce. \n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> max_numbers;\n    int max_index = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        if(max_index < i){\n            max_numbers.push_back(numbers[max_index]);\n        }\n        if(numbers[i] > max_numbers[max_index]){\n            max_index = i;\n        }\n    }\n    max_numbers.push_back(numbers[max_index]);\n    return max_numbers;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector<int> max_numbers = rolling_max(numbers);\n    for(int i = 0; i < max_numbers.size(); i++){\n        printf(\"%d \", max_numbers[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "CPP/90", "prompt": "/*\nYouare given a vecto r  of inte gers.\nWrite a function next_smallest() that returnsthe 2nd smallest el ementof  the ve cto r.\nRet urn None if there is nosuch  element.\n\nnext_sm a llest({1, 2, 3, 4, 5}) == 2\nnext_ smalle st({5, 1,4, 3, 2})== 2next_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/ \n#include<stdio.h>\n#inc lude<v ector>\n#include<algorit hm>\nusingnamespace std;int next_smallest(vector<int> lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a vecto r  of inte gers.\nWrite a function next_smallest() that returnsthe 2nd smallest el ementof  the ve cto r.\nRet urn None if there is nosuch  element.\n\nnext_sm a llest({1, 2, 3, 4, 5}) == 2\nnext_ smalle st({5, 1,4, 3, 2})== 2next_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/ \n#include<stdio.h>\n#inc lude<v ector>\n#include<algorit hm>\nusingnamespace std;int next_smallest(vector<int> lst){\n\tif(lst.size()==0)return None;\n\tint min=lst[0];\n\tfor(int i=1;i<lst.size();i++){\n\t\tif(lst[i]<min)min=lst[i];\n\t}\n\treturn min;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tcout<<next_smallest(lst)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a str i ng of wo rds, and your task is to count the number\nof boredoms. A boredom is a s entenc ethat st art s with  the word \"I\".\nSentences  are  delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 2, "perturbed": true, "gc": "/*\nYou'll be given a str i ng of wo rds, and your task is to count the number\nof boredoms. A boredom is a s entenc ethat st art s with  the word \"I\".\nSentences  are  delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int i=0,j=0;\n    while(i<S.size()){\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n            j++;\n        }\n        i++;\n    }\n    return j;\n}\nint main(){\n    string S;\n    while(scanf(\"%s\",&S)!=EOF){\n        printf(\"%d\\n\",is_bored(S));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function tha t  takes 3  numbers.\nReturns true if one of the numbers is equal to the sum of the  other  t wo, and  al l numb ers are integers.\nReturn s fa lse in any other c a ses.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function tha t  takes 3  numbers.\nReturns true if one of the numbers is equal to the sum of the  other  t wo, and  al l numb ers are integers.\nReturn s fa lse in any other c a ses.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(a==b+c && a>=0 && a<=100 && b>=0 && b<=100 && c>=0 && c<=100){\n        return true;\n    }\n    return false;\n}\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    if(any_int(a,b,c)){\n        printf(\"true\");\n    }else{\n        printf(\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes amessage, and encodes in such a \nway that it swaps case ofall letters,replac es  all vo wel s in the message with the let terthat appears 2 pla c es ahead of that \nvowelin the en glishalphabet.\nAssume only le tters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\nWrite a function that takes amessage, and encodes in such a \nway that it swaps case ofall letters,replac es  all vo wel s in the message with the let terthat appears 2 pla c es ahead of that \nvowelin the en glishalphabet.\nAssume only le tters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n\tstring result = \"\";\n\tfor(int i = 0; i < message.length(); i++){\n\t\tif(message[i] >= 65 && message[i] <= 90){\n\t\t\tresult += message[i] + message[i];\n\t\t}\n\t\telse{\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring message = \"This is a message\";\n\tstring encoded = encode(message);\n\tprintf(\"%s\\n\", encoded.c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/94", "prompt": "/*\nYouare given a vecto r  of inte gers.\nYou need to find the largest prime value and returnthe sum of it s digi ts .\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*\nYouare given a vecto r  of inte gers.\nYou need to find the largest prime value and returnthe sum of it s digi ts.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint max=0,sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(lst[i]>max){\n\t\t\tmax=lst[i];\n\t\t}\n\t\tsum+=lst[i];\n\t}\n\treturn max;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(0);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(5);\n\tlst.push_back(2);\n\tlst.push_back(181);\n\tlst.push_back(32);\n\tlst.push_back(4);\n\tlst.push_back(32);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(32);\n\tlst.push_back(324);\n\tlst.push_back(4);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(9);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(40);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(2);\n\tlst.push_back(5);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(7);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_back(1);\n\tlst.push_", "passed": 0, "run_status": 1}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return t r ue if al l keys are strings in lower \ncase or all keys are stringsin upper case , else  r eturn f als e.\nThe  function should returnfals eis the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 2, "perturbed": true, "gc": "/*\nGiven a map, return t r ue if al l keys are strings in lower \ncase or all keys are stringsin upper case, else  r eturn f als e.\nThe  function should returnfals eis the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return true;\n    }\n    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first.size()!=1 || it->second.size()!=1){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    map<string,string> dict;\n    dict[\"a\"]=\"apple\";\n    dict[\"A\"]=\"banana\";\n    dict[\"B\"]=\"banana\";\n    dict[\"Name\"]=\"John\";\n    dict[\"Age\"]=\"36\";\n    dict[\"City\"]=\"Houston\";\n    dict[\"STATE\"]=\"NC\";\n    dict[\"ZIP\"]=\"12345\";\n    printf(\"%s\\n\",check_dict_case(dict)?\"true\":\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/96", "prompt": "/*\nImplement a functiont hat take s an non-negative integer and returns a vector of the first n\nintegersthat a re  primenum bers a nd less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 2, "perturbed": true, "gc": "/*\nImplement a functiont hat take s an non-negative integer and returns a vector of the first n\nintegersthat a re  primenum bers a nd less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> ans;\n    int i=0;\n    while(i<n){\n        ans.push_back(i);\n        i++;\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> ans=count_up_to(n);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that tak es two integers and returns \nthe product of their unit digits.\nAssume t he inp ut  is alw ays  valid .\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*\nComplete the function that tak es two integers and returns \nthe product of their unit digits.\nAssume t he inp ut  is alw ays  valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int i,j,sum=0;\n    for(i=0;i<=a;i++){\n        for(j=0;j<=b;j++){\n            sum=sum+pow(i,j);\n        }\n    }\n    return sum;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\",multiply(a,b));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, cou n t the nu mber of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 2, "perturbed": true, "gc": "/*\nGiven a string s, cou n t the nu mber of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string s;\n    while(scanf(\"%s\", &s)!= EOF){\n        printf(\"%d\\n\", count_upper(s));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function tha t  takes a  value (string) representing a number\nand returns the closest integer t o it.If  the nu mbe r is e quidistant\nfrom two inte gers ,round it away fr o m zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 2, "perturbed": true, "gc": "/*\nCreate a function tha t  takes a  value (string) representing a number\nand returns the closest integer t o it.If  the nu mbe r is e quidistant\nfrom two inte gers,round it away fr o m zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    int int_value = atoi(value.c_str());\n    int int_closest = int_value;\n    int int_closest_diff = int_value;\n    int int_closest_diff_sign = 0;\n    int int_closest_diff_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    int int_closest_diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_", "passed": 0, "run_status": 2}
