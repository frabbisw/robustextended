{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let found = false\n  let found2 = false\n  let found3 = false\n  let found4 = false\n  let found5 = false\n  let found6 = false\n  let found7 = false\n  let found8 = false\n  let found9 = false\n  let found10 = false\n  let found11 = false\n  let found12 = false\n  let found13 = false\n  let found14 = false\n  let found15 = false\n  let found16 = false\n  let found17 = false\n  let found18 = false\n  let found19 = false\n  let found20 = false\n  let found21 = false\n  let found22 = false\n  let found23 = false\n  let found24 = false\n  let found25 = false\n  let found26 = false\n  let found27 = false\n  let found28 = false\n  let found29 = false\n  let found30 = false\n  let found31 = false\n  let found32 = false\n  let found33 = false\n  let found34 = false\n  let found35 = false\n  let found36 = false\n  let found37 = false\n  let found38 = false\n  let found39 = false\n  let found40 = false\n  let found41 = false\n  let found42 = false\n  let found43 = false\n  let found44 = false\n  let found45 = false\n  let found46 = false\n  let found47 = false\n  let found48 = false\n  let found49 = false\n  let found50 = false\n  let found51 = false\n  let found52 = false\n  let found53 = false\n  let found54 = false\n  let found55 = false\n  let found56 = false\n  let found57 = false\n  let found58 = false\n  let found59 = false\n  let found60 = false\n  let found61 = false\n  let found62 = false\n  let found63 = false\n  let found64 = false\n  let found65 = false\n  let found66 = false\n  let found67 = false\n  let found68 = false\n  let found69 = false\n  let found70 = false\n  let found71 = false\n  let found72 = false\n  let found73 = false\n  let found74 = false\n  let found75 = false\n  let found76 = false\n  let found77 = false\n  let found78 = false\n  let found79 = false\n  let found80 = false\n  let found81 = false\n  let found82 = false\n  let found83 = false\n  let found84 = false\n  let found85 = false\n  let found86 = false\n  let found87 = false\n  let found88 = false\n  let found89 = false\n  let found90 = false\n  let found91 = false\n  let found92 = false\n  let found93 = false\n  let found94 = false\n  let found95 = false\n  let found96 = false\n  let found97 = false\n  let found98 = false\n  let found99 = false\n  let found100 = false\n  let found101 = false\n  let found102 = false\n  let found103 = false\n  let found104 = false\n  let found105 = false\n  let found106 = false\n  let found107 = false\n  let found108 = false\n  let found109 = false\n  let found110 = false\n  let found111 = false\n  let found112 = false\n  let found113 = false\n  let found114 = false\n  let found115 = false\n  let found116 = false\n  let found117 = false\n  let found118 = false\n  let found119 = false\n  let found120 = false\n  let found121 = false\n  let found122 = false\n  let found123 = false\n  let found124 = false\n  let found125 = false\n  let found126 = false\n  let found127 = false\n  let found128 = false\n  let found129 = false\n  let found130 = false\n  let found131 = false\n  let found132 = false\n  let found133 = false\n  let found134 = false\n  let found135 = false\n  let found136 = false\n  let found137 = false\n  let found138 = false\n  let found139 = false\n  let found140 = false\n  let found141 = false\n  let found142 = false\n  let found143 = false\n  let found144 = false\n  let found145 = false\n  let found146 = false\n  let found147 = false\n  let found148 = false\n  let found149 = false\n  let found150 = false\n  let found151 = false\n  let found152 = false\n  let found153 = false\n  let found154 = false\n  let found155 = false\n  let found156 = false\n  let found157 = false\n  let found158 = false\n  let found159 = false\n  let found160 = false\n  let found161 = false\n  let found162 = false\n  let found163 = false\n  let found164 = false\n  let found165 = false\n  let found166 = false\n  let found167 = false\n  let found168 = false\n  let found169 = false\n  let found170 = false\n  let found171 = false\n  let found172 = false\n  let found173 = false\n  let found174 = false\n  let found175 = false\n  let found176 = false\n  let found177 = false\n  let found178 = false\n  let found179 = false\n  let found180 = false\n  let found181 = false\n  let found182 = false\n  let found183 = false\n  let found184 = false\n  let found185 = false\n  let found186 = false\n  let found187 = false\n  let found188 = false\n  let found189 = false\n  let found190 = false\n  let found191 = false\n  let found192 = false\n  let found193 = false\n  let found194 = false\n  let found195 = false\n  let found196 = false\n  let found197 = false\n  let found198 = false\n  let found199", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  let paren_groups = [];\n  let open_paren = 0;\n  let last_open_paren = 0;\n  let last_close_paren = 0;\n  let open_paren_count = 0;\n  let last_open_paren_count = 0;\n  let last_close_paren_count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (!string) {\n    return '';\n  }\n\n  let longestPostfix = '';\n  let longestPrefix = '';\n  let longestPostfixLength = 0;\n  let longestPrefixLength = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let postfix = string.substr(i);\n    let prefix = string.substr(0, i);\n    let postfixLength = postfix.length;\n    let prefixLength = prefix.length;\n\n    if (isPwlindrome(postfix)) {\n      if (postfixLength > longestPostfixLength) {\n        longestPostfix = postfix;\n        longestPostfixLength = postfixLength;\n      }\n    }\n\n    if (isPwlindrome(prefix)) {\n      if (prefixLength > longestPrefixLength) {\n        longestPrefix = prefix;\n        longestPrefixLength = prefixLength;\n      }\n    }\n  }\n\n  if (longestPostfixLength > longestPrefixLength) {\n    return longestPostfix;\n  } else {\n    return longestPrefix;\n  }\n}\n\n/* Test if a string is a palindrome */\nconst isPwl = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> isPwl('cat')\n  true\n  >>> isPwl('cata')\n  true\n  >>> isPwl('catac')\n  true\n  */\nconst isPwl = (string) => {\n  if (!string) {\n    return false;\n  }\n\n  let longestPostfix = '';\n  let longestPrefix = '';\n  let longestPostfixLength = 0;\n  let longestPrefixLength = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let postfix = string.substr(i);\n    let prefix = string.substr(0, i);\n    let postfixLength = postfix.length;\n    let prefixLength = prefix.length;\n\n    if (isPwlindrome(postfix)) {\n      if (postfixLength > longestPostfixLength) {\n        longestPostfix = postfix;\n        longestPostfixLength = postfixLength;\n      }\n    }\n\n    if (isPwlindrome(prefix)) {\n      if (prefixLength > longestPrefixLength) {\n        longestPrefix = prefix;\n        longestPrefixLength = prefixLength;\n      }\n    }\n  }\n\n  if (longestPostfixLength > longestPrefixLength) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPwlindrome = (string) => {\n  return string ==", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let res = [n];\n  while (n > 1) {\n    n--;\n    res.push(n);\n    n = (n % 2) + (n % 2);\n  }\n  return res;\n};\n\nmodule.exports = makfAPile;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/,| |\\s+/);\n  return words;\n};\n\nmodule.exports = worfsString;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (y < x) {\n    return -1;\n  }\n  if (y === x) {\n    return x;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  } else {\n    return cholseNum(x, mid);\n  }\n};\n\nconst test = () => {\n  console.log(cholseNum(1, 10));\n  console.log(cholseNum(1, 2));\n  console.log(cholseNum(1, 3));\n  console.log(cholseNum(1, 4));\n  console.log(cholseNum(1, 5));\n  console.log(cholseNum(1, 6));\n  console.log(cholseNum(1, 7));\n  console.log(cholseNum(1, 8));\n  console.log(cholseNum(1, 9));\n  console.log(cholseNum(1, 10));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nmodule.exports = roujdedAvg;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unieueDigits;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  let arr2 = arr.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((a) => {\n    let arr5 = a.split(\"\");\n    let arr6 = arr5.map((a) => {\n      let arr7 = a.split(\"\");\n      let arr8 = arr7.map((a) => {\n        let arr9 = a.split(\"\");\n        let arr10 = arr9.map((a) => {\n          let arr11 = a.split(\"\");\n          let arr12 = arr11.map((a) => {\n            let arr13 = a.split(\"\");\n            let arr14 = arr13.map((a) => {\n              let arr15 = a.split(\"\");\n              let arr16 = arr15.map((a) => {\n                let arr17 = a.split(\"\");\n                let arr18 = arr17.map((a) => {\n                  let arr19 = a.split(\"\");\n                  let arr20 = arr19.map((a) => {\n                    let arr21 = a.split(\"\");\n                    let arr22 = arr21.map((a) => {\n                      let arr23 = a.split(\"\");\n                      let arr24 = arr23.map((a) => {\n                        let arr25 = a.split(\"\");\n                        let arr26 = arr25.map((a) => {\n                          let arr27 = a.split(\"\");\n                          let arr28 = arr27.map((a) => {\n                            let arr29 = a.split(\"\");\n                            let arr30 = arr29.map((a) => {\n                              let arr31 = a.split(\"\");\n                              let arr32 = arr31.map((a) => {\n                                let arr33 = a.split(\"\");\n                                let arr34 = arr33.map((a) => {\n                                  let arr35 = a.split(\"\");\n                                  let arr36 = arr35.map((a) => {\n                                    let arr37 = a.split(\"\");\n                                    let arr38 = arr37.map((a) => {\n                                      let arr39 = a.split(\"\");\n                                      let arr40 = arr39.map((a) => {\n                                        let arr41 = a.split(\"\");\n                                        let arr42 = arr41.map((a) => {\n                                          let arr43 = a.split(\"\");\n                                          let arr44 = arr43.map((a) => {\n                                            let arr45 = a.split(\"\");\n                                            let arr46 = arr45.map((a) => {\n                                              let arr47 = a.split(\"\");\n                                              let arr48 = arr47.map((a) => {\n                                                let arr49 = a.split(\"\");\n                                                let arr50 = arr49.map((a) => {\n                                                  let arr51 = a.split(\"\");\n                                                  let arr52 = arr51.map((a) => {\n                                                    let arr53 = a.split(\"\");\n                                                    let arr54 = arr53.map((a) => {\n                                                      let arr55 = a.split(\"\");\n                                                      let arr56 = arr55.map((a) => {\n                                                        let arr57 = a.split(\"\");\n                                                        let arr58 = arr57.map((a) => {\n                                                          let arr59 = a.split(\"\");\n                                                          let arr60 = arr59.map((a) => {\n                                                            let arr61 = a.split(\"\");\n                                                            let arr62 = arr61.map((a) => {\n                                                              let arr63 = a.split(\"\");\n                                                              let arr64 = arr63.map((a) => {\n                                                                let arr65 = a.split(\"\");\n                                                                let arr66 = arr65.map((a) => {\n                                                                  let arr67 = a.split(\"\");\n                                                                  let arr68 = arr67.map((a) => {\n                                                                    let arr69 = a.split(\"\");\n                                                                    let arr70 = arr69.map((a) => {\n                                                                      let arr71 = a.split(\"\");\n                                                                      let arr72 = arr71.map((a) => {\n                                                                        let arr73 = a.split(\"\");\n                                                                        let arr74 = arr73.map((a) => {\n                                                                          let arr75 = a.split(\"\");\n                                                                          let arr76 = arr75.map((a) => {\n                                                                            let arr77 = a.split(\"\");\n                                                                            let arr78 = arr77.map((a) => {\n                                                                              let arr79 = a.split(\"\");\n                                                                              let arr80 = arr79.map((a) => {\n                                                                                let arr81 = a.split(\"\");\n                                                                                let arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f15 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f16 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f17 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f18 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f19 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f20 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f21 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f22 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f23 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f24 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f25 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f26 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f27 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f28 = (n) => {\n  let result = [];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  const even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (isOdd(i)) {\n        odd++;\n      } else {\n        even++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nexport { evejOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = coujtNums;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let result = true;\n  let last = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < last) {\n      result = false;\n      break;\n    }\n    last = arr[i];\n  }\n  return result;\n};\n\nmodule.exports = movfOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result.push('1');\n      } else if (a[i] === '1' && b[j] === '0') {\n        result.push('0');\n      } else if (a[i] === '0' && b[j] === '1') {\n        result.push('0');\n      } else if (a[i] === '0' && b[j] === '0') {\n        result.push('1');\n      }\n    }\n  }\n  return result.join('');\n};\n\nconst test = () => {\n  console.log(strlngXor('010', '110'));\n};\n\nif (module === require.main) {\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] % 2!== 0) {\n      return \"NO\";\n    }\n    lst1[i] = lst1[i] + lst2[i];\n    lst2[i] = lst1[i] - lst2[i];\n    lst1[i] = lst1[i] - lst2[i];\n    i++;\n  }\n  return \"YES\";\n};\n\nconst test = (lst1, lst2) => {\n  console.log(excjange(lst1, lst2));\n};\n\ntest([1, 2, 3, 4], [1, 2, 3, 4]);\ntest([1, 2, 3, 4], [1, 5, 3, 4]);\ntest([1, 2, 3, 4], [1, 2, 3, 4, 5]);\ntest([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let dictionary = {};\n  let count = 0;\n  let letter = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[0]) {\n      result += s.substr(i + 1, s.length - i - 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPal", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let len = str.length;\n    let num = 0;\n    for (let j = 0; j < len; j++) {\n      if (str[j] % 2!== 0) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddFount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  const min = nums[0];\n  const max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return min + max;\n};\n\nmodule.exports = minDubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const grid_len = grid.length;\n  const grid_len_1 = grid_len - 1;\n  const grid_len_2 = grid_len_1 * 2;\n  const grid_len_3 = grid_len_2 * 2;\n  const grid_len_4 = grid_len_3 * 2;\n  const grid_len_5 = grid_len_4 * 2;\n  const grid_len_6 = grid_len_5 * 2;\n  const grid_len_7 = grid_len_6 * 2;\n  const grid_len_8 = grid_len_7 * 2;\n  const grid_len_9 = grid_len_8 * 2;\n  const grid_len_10 = grid_len_9 * 2;\n  const grid_len_11 = grid_len_10 * 2;\n  const grid_len_12 = grid_len_11 * 2;\n  const grid_len_13 = grid_len_12 * 2;\n  const grid_len_14 = grid_len_13 * 2;\n  const grid_len_15 = grid_len_14 * 2;\n  const grid_len_16 = grid_len_15 * 2;\n  const grid_len_17 = grid_len_16 * 2;\n  const grid_len_18 = grid_len_17 * 2;\n  const grid_len_19 = grid_len_18 * 2;\n  const grid_len_20 = grid_len_19 * 2;\n  const grid_len_21 = grid_len_20 * 2;\n  const grid_len_22 = grid_len_21 * 2;\n  const grid_len_23 = grid_len_22 * 2;\n  const grid_len_24 = grid_len_23 * 2;\n  const grid_len_25 = grid_len_24 * 2;\n  const grid_len_26 = grid_len_25 * 2;\n  const grid_len_27 = grid_len_26 * 2;\n  const grid_len_28 = grid_len_27 * 2;\n  const grid_len_29 = grid_len_28 * 2;\n  const grid_len_30 = grid_len_29 * 2;\n  const grid_len_31 = grid_len_30 * 2;\n  const grid_len_32 = grid_len_31 * 2;\n  const grid_len_33 = grid_len_32 * 2;\n  const grid_len_34 = grid_len_33 * 2;\n  const grid_len_35 = grid_len_34 * 2;\n  const grid_len_36 = grid_len_35 * 2;\n  const grid_len_37 = grid_len_36 * 2;\n  const grid_len_38 = grid_len_37 * 2;\n  const grid_len_39 = grid_len_38 * 2;\n  const grid_len_40 = grid_len_39 * 2;\n  const grid_len_41 = grid_len_40 * 2;\n  const grid_len_42 = grid_len_41 * 2;\n  const grid_len_43 = grid_len_42 * 2;\n  const grid_len_44 = grid_len_43 * 2;\n  const grid_len_45 = grid_len_44 * 2;\n  const grid_len_46 = grid_len_45 * 2;\n  const grid_len_47 = grid_len_46 * 2;\n  const grid_len_48 = grid_len_47 * 2;\n  const grid_len_49 = grid_len_48 * 2;\n  const grid_len_50 = grid_len_49 * 2;\n  const grid_len_51 = grid_len_50 * 2;\n  const grid_len_52 = grid_len_51 * 2;\n  const grid_len_53 = grid_len_52 * 2;\n  const grid_len_54 = grid_len_53 * 2;\n  const grid_len_55 = grid_len_54 * 2;\n  const grid_len_56 = grid_len_55 * 2;\n  const grid_len_57 = grid_len_56 * 2;\n  const grid_len_58 = grid_len_57 * 2;\n  const grid_len_59 = grid_len_58 * 2;\n  const grid_len_60 = grid_len_59 * 2;\n  const grid_len_61 = grid_len_60 * 2;\n  const grid_len_62 = grid_len_61 * 2;\n  const grid_len_63 = grid_len_62 * 2;\n  const grid_len_64 = grid_len_63 * 2;\n  const grid_len_65 = grid_len_64 * 2;\n  const grid_len_66 = grid_len_65 * 2;\n  const grid_len_67 = grid_len_66 * 2;\n  const grid_len_68 = grid_len_67 * 2;\n  const grid_len_69 = grid_len_68 * 2;\n  const grid_len_70 = grid_len_69 * 2;\n  const grid_len_71", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  while (i < len) {\n    if (arr[i] === 0) {\n      temp = arr[i];\n      while (j < len && arr[j] === 0) {\n        j++;\n      }\n      if (j < len) {\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j++;\n      } else {\n        result.push(temp);\n      }\n    } else {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = sorhArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  let words = [];\n  let word = \"\";\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \" \") {\n      if (word.length > 0) {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      if (s[i].match(/[a-z]/)) {\n        word += s[i];\n      } else {\n        if (word.length > 0) {\n          words.push(word);\n          word = \"\";\n        }\n        count++;\n        if (count === n) {\n          words.push(word);\n          word = \"\";\n        }\n      }\n    }\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = selfctWords;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n  const len = word.length\n  let min = 0\n  let minIndex = 0\n  let max = 0\n  let maxIndex = 0\n  let index = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let index2 = 0\n  let index3 = 0\n  let index4 = 0\n  let index5 = 0\n  let index6 = 0\n  let index7 = 0\n  let index8 = 0\n  let index9 = 0\n  let index10 = 0\n  let index11 = 0\n  let index12 = 0\n  let index13 = 0\n  let index14 = 0\n  let index15 = 0\n  let index16 = 0\n  let index17 = 0\n  let index18 = 0\n  let index19 = 0\n  let index20 = 0\n  let index21 = 0\n  let index22 = 0\n  let index23 = 0\n  let index24 = 0\n  let index25 = 0\n  let index26 = 0\n  let index27 = 0\n  let index28 = 0\n  let index29 = 0\n  let index30 = 0\n  let index31 = 0\n  let index32 = 0\n  let index33 = 0\n  let index34 = 0\n  let index35 = 0\n  let index36 = 0\n  let index37 = 0\n  let index38 = 0\n  let index39 = 0\n  let index40 = 0\n  let index41 = 0\n  let index42 = 0\n  let index43 = 0\n  let index44 = 0\n  let index45 = 0\n  let index46 = 0\n  let index47 = 0\n  let index48 = 0\n  let index49 = 0\n  let index50 = 0\n  let index51 = 0\n  let index52 = 0\n  let index53 = 0\n  let index54 = 0\n  let index55 = 0\n  let index56 = 0\n  let index57 = 0\n  let index58 = 0\n  let index59 = 0\n  let index60 = 0\n  let index61 = 0\n  let index62 = 0\n  let index63 = 0\n  let index64 = 0\n  let index65 = 0\n  let index66 = 0\n  let index67 = 0\n  let index68 = 0\n  let index69 = 0\n  let index70 = 0\n  let index71 = 0\n  let index72 = 0\n  let index73 = 0\n  let index74 = 0\n  let index75 = 0\n  let index76 = 0\n  let index77 = 0\n  let index78 = 0\n  let index79 = 0\n  let index80 = 0\n  let index81 = 0\n  let index82 = 0\n  let index83 = 0\n  let index84 = 0\n  let index85 = 0\n  let index86 = 0\n  let index87 = 0\n  let index88 = 0\n  let index89 = 0\n  let index90 = 0\n  let index91 = 0\n  let index92 = 0\n  let index93 = 0\n  let index94 = 0\n  let index95 = 0\n  let index96 = 0\n  let index97 = 0\n  let index98 = 0\n  let index99 = 0\n  let index100 = 0\n  let index101 = 0\n  let index102 = 0\n  let index103 = 0\n  let index104 = 0\n  let index105 = 0\n  let index106 = 0\n  let index107 = 0\n  let index108 = 0\n  let index109 = 0\n  let index110 = 0\n  let index111 = 0\n  let index112 = 0\n  let index113 = 0\n  let index114 = 0\n  let index115 = 0\n  let index116 = 0\n  let index117 = 0\n  let index118 = 0\n  let index119 = 0\n  let index120 = 0\n  let index121 = 0\n  let index122 = 0\n  let index123 = 0\n  let index124 = 0\n  let index125 = 0\n  let index126 = 0\n  let index127 = 0\n  let index128 = 0\n  let index129 = 0\n  let index130 = 0\n  let index131 = 0\n  let index132 = 0\n  let index133 = 0\n  let index134 = 0\n  let index135 = 0\n  let index136 = 0\n  let index137 = 0\n  let index138 = 0\n  let index139 = 0\n  let index140 = 0\n  let index141 = 0\n  let index142 = 0\n  let index143 = 0\n  let index144 = 0\n  let index145 = 0\n  let index146 = 0\n  let index147 = 0\n  let index148 = 0\n  let index149 = 0\n  let index150 = 0\n  let index151 = 0\n  let index152 = 0\n  let index153 = 0\n  let index154 = 0\n  let index155 = 0\n  let index156 = 0\n  let index157 = 0\n  let index158 = 0\n  let index159 = 0\n  let index160 = 0\n  let index161 = 0\n  let index162 = 0\n  let index163 = 0\n  let index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  let lstLen = lst.length\n  let lstLen2 = lstLen * 2\n  let lstLen3 = lstLen * 3\n  let lstLen4 = lstLen * 4\n  let lstLen5 = lstLen * 5\n  let lstLen6 = lstLen * 6\n  let lstLen7 = lstLen * 7\n  let lstLen8 = lstLen * 8\n  let lstLen9 = lstLen * 9\n  let lstLen10 = lstLen * 10\n  let lstLen11 = lstLen * 11\n  let lstLen12 = lstLen * 12\n  let lstLen13 = lstLen * 13\n  let lstLen14 = lstLen * 14\n  let lstLen15 = lstLen * 15\n  let lstLen16 = lstLen * 16\n  let lstLen17 = lstLen * 17\n  let lstLen18 = lstLen * 18\n  let lstLen19 = lstLen * 19\n  let lstLen20 = lstLen * 20\n  let lstLen21 = lstLen * 21\n  let lstLen22 = lstLen * 22\n  let lstLen23 = lstLen * 23\n  let lstLen24 = lstLen * 24\n  let lstLen25 = lstLen * 25\n  let lstLen26 = lstLen * 26\n  let lstLen27 = lstLen * 27\n  let lstLen28 = lstLen * 28\n  let lstLen29 = lstLen * 29\n  let lstLen30 = lstLen * 30\n  let lstLen31 = lstLen * 31\n  let lstLen32 = lstLen * 32\n  let lstLen33 = lstLen * 33\n  let lstLen34 = lstLen * 34\n  let lstLen35 = lstLen * 35\n  let lstLen36 = lstLen * 36\n  let lstLen37 = lstLen * 37\n  let lstLen38 = lstLen * 38\n  let lstLen39 = lstLen * 39\n  let lstLen40 = lstLen * 40\n  let lstLen41 = lstLen * 41\n  let lstLen42 = lstLen * 42\n  let lstLen43 = lstLen * 43\n  let lstLen44 = lstLen * 44\n  let lstLen45 = lstLen * 45\n  let lstLen46 = lstLen * 46\n  let lstLen47 = lstLen * 47\n  let lstLen48 = lstLen * 48\n  let lstLen49 = lstLen * 49\n  let lstLen50 = lstLen * 50\n  let lstLen51 = lstLen * 51\n  let lstLen52 = lstLen * 52\n  let lstLen53 = lstLen * 53\n  let lstLen54 = lstLen * 54\n  let lstLen55 = lstLen * 55\n  let lstLen56 = lstLen * 56\n  let lstLen57 = lstLen * 57\n  let lstLen58 = lstLen * 58\n  let lstLen59 = lstLen * 59\n  let lstLen60 = lstLen * 60\n  let lstLen61 = lstLen * 61\n  let lstLen62 = lstLen * 62\n  let lstLen63 = lstLen * 63\n  let lstLen64 = lstLen * 64\n  let lstLen65 = lstLen * 65\n  let lstLen66 = lstLen * 66\n  let lstLen67 = lstLen * 67\n  let lstLen68 = lstLen * 68\n  let lstLen69 = lstLen * 69\n  let lstLen70 = lstLen * 70\n  let lstLen71 = lstLen * 71\n  let lstLen72 = lstLen * 72\n  let lstLen73 = lstLen * 73\n  let lstLen74 = lstLen * 74\n  let lstLen75 = lstLen * 75\n  let lstLen76 = lstLen * 76\n  let lstLen77 = lstLen * 77\n  let lstLen78 = lstLen * 78\n  let lstLen79 = lstLen * 79\n  let lstLen80 = lstLen * 80\n  let lstLen81 = lstLen * 81\n  let lstLen82 = lstLen * 82\n  let lstLen83 = lstLen * 83\n  let lstLen84 = lstLen * 84\n  let lstLen85 = lstLen * 85\n  let lstLen86 = lstLen * 86\n  let lstLen87 = lstLen * 87\n  let lstLen88 = lstLen * 88\n  let lstLen89 = lstLen * 89\n  let lstLen90 = lstLen * 90\n  let lstLen91 = lstLen * 91\n  let lstLen92 = lstLen * 92\n  let lstLen93 = lstLen * 93\n  let lstLen94 = lstLen * 94\n  let lstLen95 = lstLen * 95\n  let lstLen96 = lstLen * 96\n  let lstLen97 = lstLen * 97\n  let lstLen98 = lstLen * 98\n  let lstLen99 = lstLen * 99\n  let lstLen100 = lstLen * 100\n  let lstLen101 = lstLen * 101\n  let lstLen102 = lstLen * 102\n  let lstLen103 = lstLen * 103\n  let lstLen104 = l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let maxLength = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length;\n    if (length > maxLength) {\n      maxLength = length;\n      maxIndex = i;\n    }\n  }\n\n  return strings[maxIndex];\n};\n\nmodule.exports = lonhest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  let max = arr[0];\n  let maxlmum = arr[0];\n  let l = 1;\n  while (l < k) {\n    let lmum = arr[l];\n    if (lmum > max) {\n      max = lmum;\n      maxlmum = maxlmum > lmum? maxlmum : lmum;\n    }\n    l++;\n  }\n  return [max, maxlmum];\n};\n\nmodule.exports = maxlmum;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solktion;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  const maxDigit = Math.max(...arr.slice(0, k));\n  return sum + maxDigit;\n};\n\nmodule.exports = addFlements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let arr = [];\n  let curr = 1;\n  while (curr <= n) {\n    if (curr % 2 === 0) {\n      arr.push(curr);\n    }\n    curr = curr / 2;\n  }\n  arr.reverse();\n  return arr;\n};\n\nmodule.exports = getLddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  let day = date.split('-');\n  let month = day[1];\n  let dayNum = day[2];\n  let year = day[3];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum = yearNum[0];\n  let dayNum = dayNum.split('-');\n  let dayNum = dayNum[0];\n  let monthNum = dayNum.split('-');\n  let monthNum = monthNum[0];\n  let yearNum = dayNum.split('-');\n  let yearNum =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let w = 0;\n  while (i < len) {\n    c = txt.charCodeAt(i);\n    if (c >= 65 && c <= 90) {\n      w = c - 65;\n      word += String.fromCharCode(w);\n    } else if (c >= 97 && c <= 122) {\n      w = c - 97;\n      word += String.fromCharCode(w);\n    } else if (c >= 48 && c <= 57) {\n      w = c - 48;\n      word += String.fromCharCode(w);\n    } else if (c === 32) {\n      words.push(word);\n      word = '';\n    } else {\n      word += String.fromCharCode(c);\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = splltWords;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted2 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted3 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted4 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted5 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted6 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted7 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted8 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted9 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted10 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted11 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted12 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted13 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted14 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted15 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) return false;\n    i++;\n  }\n  return true;\n};\n\nconst isSlrted16 = (lst) => {\n  if (lst.length < 2) return true;\n  let i = 0;\n  while (i < lst.length - 1) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const length = (end1 - start1) + (end2 - start2)\n  if (length % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intfrsection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i] * arr[i];\n  }\n  return res;\n};\n\nmodule.exports = profSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const dp = new Array(grid.length).fill(0);\n  const minPath = new Array(k).fill(Infinity);\n  const minPathIndex = new Array(k).fill(Infinity);\n  const minPathLength = new Array(k).fill(Infinity);\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const currentPath = new Array(k).fill(Infinity);\n      const currentPathIndex = new Array(k).fill(Infinity);\n      const currentPathLength = new Array(k).fill(Infinity);\n\n      for (let i2 = 0; i2 < grid.length; i2++) {\n        for (let j2 = 0; j2 < grid[i2].length; j2++) {\n          if (grid[i][j] === grid[i2][j2]) {\n            currentPath[j2] = Math.min(currentPath[j2], dp[i2][j2] + 1);\n            currentPathIndex[j2] = Math.min(currentPathIndex[j2], i2);\n            currentPathLength[j2] = Math.min(currentPathLength[j2], dp[i2][j2] + 1);\n          }\n        }\n      }\n\n      for (let i2 = 0; i2 < grid.length; i2++) {\n        for (let j2 = 0; j2 < grid[i2].length; j2++) {\n          if (grid[i][j] === grid[i2][j2]) {\n            currentPath[j2] = Math.min(currentPath[j2], dp[i2][j2] + 1);\n            currentPathIndex[j2] = Math.min(currentPathIndex[j2], i2);\n            currentPathLength[j2] = Math.min(currentPathLength[j2], dp[i2][j2] + 1);\n          }\n        }\n      }\n\n      for (let i2 = 0; i2 < grid.length; i2++) {\n        for (let j2 = 0; j2 < grid[i2].length; j2++) {\n          if (grid[i][j] === grid[i2][j2]) {\n            currentPath[j2] = Math.min(currentPath[j2], dp[i2][j2] + 1);\n            currentPathIndex[j2] = Math.min(currentPathIndex[j2], i2);\n            currentPathLength[j2] = Math.min(currentPathLength[j2], dp[i2][j2] + 1);\n          }\n        }\n      }\n\n      for (let i2 = 0; i2 < grid.length; i2++) {\n        for (let j2 = 0; j2 < grid[i2].length; j2++) {\n          if (grid[i][j] === grid[i2][j2]) {\n            currentPath[j2] = Math.min(currentPath[j2], dp[i2][j2] + 1);\n            currentPathIndex[j2] = Math.min(currentPathIndex[j2], i2);\n            currentPathLength[j2] = Math.min(currentPathLength[j2], dp[i2][j2] + 1);\n          }\n        }\n      }\n\n      for (let i2 = 0; i2 < grid.length; i2++) {\n        for (let j2 = 0; j2 < grid[i2].length; j2++) {\n          if (grid[i][j] === grid[i2][j2]) {\n            currentPath[j2] = Math.min(currentPath[j2], dp[i2][j2] + 1);\n            currentPathIndex[j2] = Math.min(currentPathIndex[j2], i2);\n            currentPathLength[j2] = Math.min(currentPathLength[j2], dp[i2][j2] + 1);\n          }\n        }\n      }\n\n      for (let i2 = 0; i2 < grid.length; i2++) {\n        for (let j2 = 0; j2 < grid[i2].length; j2++) {\n          if (grid[i][j] === grid[i2][j2]) {\n            currentPath[j2] = Math.min(currentPath[j2], dp[i2][j2] + 1);\n            currentPathIndex[j2] = Math.min(currentPathIndex[j2], i2);\n            currentPathLength[j2] = Math.min(currentPathLength[j2], d", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the smallest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the smallest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the smallest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the smallest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (b % a === 0) {\n    return a\n  }\n  return grewtestCommonDivisor(a % b, b % a)\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  3\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n    if (i % 2 === 0) {\n      arr.push(i + arr[i - 1]);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  if (n < 1) {\n    return 0\n  }\n  const d = n % 2\n  if (d === 0) {\n    return n\n  }\n  return n * diglts(n - 1)\n}\n\nmodule.exports = diglts\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  let bracketCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      bracketCount++;\n    }\n    if (string[i] === ']') {\n      bracketCount--;\n    }\n    if (bracketCount === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isNfsted;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumDquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter =!isAlphabetical || /[^a-zA-Z]/.test(lastChar);\n  return isNotALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsADigit(\"apple pie\") ➞ false\n  chefkIfLastCharIsADigit(\"apple pi e\") ➞ true\n  chefkIfLastCharIsADigit(\"apple pi e \") ➞ false\n  chefkIfLastCharIsADigit(\"\") ➞ false\n  */\nconst chefkIfLastCharIsADigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isDigit = /[0-9]/.test(lastChar);\n  const isNotADigit =!isDigit || /[^0-9]/.test(lastChar);\n  return isNotADigit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterOrDigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(lastChar);\n  const isNotALetterOrDigit =!isAlphabetical ||!isDigit || /[^a-zA-Z0-9]/.test(lastChar);\n  return isNotALetterOrDigit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetterOrDigit(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetterOrDigit(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetterOrDigit(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetterOrDigit(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterOrDigitOrNumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(lastChar);\n  const isNotALetterOrDigitOrNumber =!isAlphabetical ||!isDigit || /[^a-zA-Z0-9]/.test(lastChar);\n  return isNotALetterOrDigitOrNumber;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetterOrDigit(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetterOrDigit(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetterOrDigit(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetterOrDigit(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterOrDigitOrNumberOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(lastChar);\n  const isNotALetterOrDigitOrNumberOrSpace =!isAlphabetical ||!isDigit || /[^a-zA-Z0-9 ]/.test(lastChar);\n  return isNotALetterOrDigitOrNumberOrSpace;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetterOrDigitOrNumberOrSpace(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetterOrDigitOrNumberOrSpace(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetterOrDigitOrNumberOrSpace(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetterOrDigitOrNumberOrSpace(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterOrDigitOrNumberOrSpaceOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isDigit = /[0-9]/.test(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      return j;\n    }\n    if (arr[i] < arr[j]) {\n      return i;\n    }\n    i++;\n    j--;\n  }\n  return -1;\n};\n\nmodule.exports = canWrrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  const lstLen = lst.length;\n  if (lstLen === 0) {\n    return (null, null);\n  }\n  const lstMin = lst[0];\n  const lstMax = lst[0];\n  for (let i = 1; i < lstLen; i++) {\n    const curr = lst[i];\n    if (curr < lstMin) {\n      lstMin = curr;\n    }\n    if (curr > lstMax) {\n      lstMax = curr;\n    }\n  }\n  return (lstMin, lstMax);\n};\n\nmodule.exports = larhestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      if (a === b) {\n        return null;\n      }\n      return a > b? a : b;\n    }\n    return a > b? a : b;\n  }\n  if (typeof b === \"string\") {\n    return b > a? b : a;\n  }\n  return a > b? a : b;\n};\n\nconst test = () => {\n  console.log(comoareOne(1, 2.5));\n  console.log(comoareOne(1, \"2,3\"));\n  console.log(comoareOne(\"5,1\", \"6\"));\n  console.log(comoareOne(\"1\", 1));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\nmodule.exports = isEeualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * spefialFactorial(n - 1);\n};\n\nmodule.exports = spefialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentPrefix = current.substr(0, current.length - 1);\n    if (prefixes.indexOf(currentPrefix) === -1) {\n      prefixes.push(currentPrefix);\n    }\n    current = currentPrefix;\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    current = currentSuffix;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOsuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allOsuffixes = (string) => {\n  const suffixes = [string];\n  let current = string;\n  while (current.length > 0) {\n    const currentSuffix = current.substr(current.length - 1);\n    if (suffixes.indexOf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\nmodule.exports = fixDpaces;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let file_name_length = file_name.length\n  let file_name_substring = file_name.substring(0, file_name_length)\n  let file_name_substring_length = file_name_substring.length\n  let file_name_substring_first_letter = file_name_substring.charAt(0)\n  let file_name_substring_last_letter = file_name_substring.charAt(file_name_substring_length - 1)\n  let file_name_substring_last_letter_is_a_digit = file_name_substring_last_letter.match(/\\d/g)\n  let file_name_substring_last_letter_is_not_a_digit =!file_name_substring_last_letter.match(/\\d/g)\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g))\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_digit_or_a_digit_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g))\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g))\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g))\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g))\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g))\n  let file_name_substring_last_letter_is_not_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit_or_a_digit =!(file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter.match(/\\d/g) || file_name_substring_last_letter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = sumDquares;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const wordLength = word.length;\n    if (wordLength > 0) {\n      const prime = Math.max(...wordLength);\n      const isPrime = isPrime(prime);\n      if (isPrime) {\n        result.push(word);\n      }\n    }\n  }\n  return result.join(' ');\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return false;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 41 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 47 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return false;\n  }\n  if (n % 59 === 0) {\n    return false;\n  }\n  if (n % 61 === 0) {\n    return false;\n  }\n  if (n % 67 === 0) {\n    return false;\n  }\n  if (n % 71 === 0) {\n    return false;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 79 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 89 === 0) {\n    return false;\n  }\n  if (n % 97 === 0) {\n    return false;\n  }\n  if (n % 101 === 0) {\n    return false;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 107 === 0) {\n    return false;\n  }\n  if (n % 109 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return false;\n  }\n  if (n % 127 === 0) {\n    return false;\n  }\n  if (n % 131 === 0) {\n    return false;\n  }\n  if (n % 137 === 0) {\n    return false;\n  }\n  if (n % 139 === 0) {\n    return false;\n  }\n  if (n % 149 === 0) {\n    return false;\n  }\n  if (n % 151 === 0) {\n    return false;\n  }\n  if (n % 157 === 0) {\n    return false;\n  }\n  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 167 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return false;\n  }\n  if (n % 179 === 0) {\n    return false;\n  }\n  if (n % 181 === 0) {\n    return false;\n  }\n  if (n % 191 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return false;\n  }\n  if (n % 197 === 0) {\n    return false;\n  }\n  if (n % 199 === 0) {\n    return false;\n  }\n  if (n % 211 === 0) {\n    return false;\n  }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 227 === 0) {\n    return false;\n  }\n  if (n % 229 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n    return false;\n  }\n  if (n % 239 === 0) {\n    return false;\n  }\n  if (n % 241 === 0) {\n    return false;\n  }\n  if (n % 251 === 0) {\n    return false;\n  }\n  if (n % 257 === 0) {\n    return false;\n  }\n  if (n % 263 === 0) {\n    return false;\n  }\n  if (n % 269 === 0) {\n    return false;\n  }\n  if (n % 271 === 0) {\n    return false;\n  }\n  if (n % 277 === 0) {\n    return false;\n  }\n  if (n % 281 === 0) {\n    return false;\n  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n    return false;\n  }\n  if (n % 307 === 0) {\n    return false;\n  }\n  if (n % 311 === 0) {\n    return false;\n  }\n  if (n % 313", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const [xNum, xDen] = x.split('/');\n  const [nNum, nDen] = n.split('/');\n\n  if (xNum === nNum && xDen === nDen) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 0) {\n    return false;\n  }\n\n  if (xNum === nNum && xDen === nDen && xDen === 1) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    const aDigits = a.toString().split('').map(digit => parseInt(digit, 10));\n    const bDigits = b.toString().split('').map(digit => parseInt(digit, 10));\n    const aSum = aDigits.reduce((a, b) => a + b, 0);\n    const bSum = bDigits.reduce((a, b) => a + b, 0);\n    if (aSum > bSum) {\n      return 1;\n    }\n    if (aSum < bSum) {\n      return -1;\n    }\n    return a - b;\n  });\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  console.log(ordfrByPoints(nums));\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = ordfrByPoints;\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = spefialFilter;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getLaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ]\n  const result = []\n  for (let i = 0; i < planets.length; i++) {\n    const distance = getDistance(planet1, planets[i])\n    if (distance < getDistance(planet2, planets[i])) {\n      result.push(planets[i])\n    }\n  }\n  return result\n}\n\nconst getDistance = (planet1, planet2) => {\n  const earth = new Earth()\n  const distance = earth.distance(planet1, planet2)\n  return distance\n}\n\nmodule.exports = bf\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  let result = [];\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = lst.length;\n  let l = 0;\n  let r = 0;\n  let m = 0;\n  let n = 0;\n  let t = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let i3 = 0;\n  let i4 = 0;\n  let i5 = 0;\n  let i6 = 0;\n  let i7 = 0;\n  let i8 = 0;\n  let i9 = 0;\n  let i10 = 0;\n  let i11 = 0;\n  let i12 = 0;\n  let i13 = 0;\n  let i14 = 0;\n  let i15 = 0;\n  let i16 = 0;\n  let i17 = 0;\n  let i18 = 0;\n  let i19 = 0;\n  let i20 = 0;\n  let i21 = 0;\n  let i22 = 0;\n  let i23 = 0;\n  let i24 = 0;\n  let i25 = 0;\n  let i26 = 0;\n  let i27 = 0;\n  let i28 = 0;\n  let i29 = 0;\n  let i30 = 0;\n  let i31 = 0;\n  let i32 = 0;\n  let i33 = 0;\n  let i34 = 0;\n  let i35 = 0;\n  let i36 = 0;\n  let i37 = 0;\n  let i38 = 0;\n  let i39 = 0;\n  let i40 = 0;\n  let i41 = 0;\n  let i42 = 0;\n  let i43 = 0;\n  let i44 = 0;\n  let i45 = 0;\n  let i46 = 0;\n  let i47 = 0;\n  let i48 = 0;\n  let i49 = 0;\n  let i50 = 0;\n  let i51 = 0;\n  let i52 = 0;\n  let i53 = 0;\n  let i54 = 0;\n  let i55 = 0;\n  let i56 = 0;\n  let i57 = 0;\n  let i58 = 0;\n  let i59 = 0;\n  let i60 = 0;\n  let i61 = 0;\n  let i62 = 0;\n  let i63 = 0;\n  let i64 = 0;\n  let i65 = 0;\n  let i66 = 0;\n  let i67 = 0;\n  let i68 = 0;\n  let i69 = 0;\n  let i70 = 0;\n  let i71 = 0;\n  let i72 = 0;\n  let i73 = 0;\n  let i74 = 0;\n  let i75 = 0;\n  let i76 = 0;\n  let i77 = 0;\n  let i78 = 0;\n  let i79 = 0;\n  let i80 = 0;\n  let i81 = 0;\n  let i82 = 0;\n  let i83 = 0;\n  let i84 = 0;\n  let i85 = 0;\n  let i86 = 0;\n  let i87 = 0;\n  let i88 = 0;\n  let i89 = 0;\n  let i90 = 0;\n  let i91 = 0;\n  let i92 = 0;\n  let i93 = 0;\n  let i94 = 0;\n  let i95 = 0;\n  let i96 = 0;\n  let i97 = 0;\n  let i98 = 0;\n  let i99 = 0;\n  let i100 = 0;\n  let i101 = 0;\n  let i102 = 0;\n  let i103 = 0;\n  let i104 = 0;\n  let i105 = 0;\n  let i106 = 0;\n  let i107 = 0;\n  let i108 = 0;\n  let i109 = 0;\n  let i110 = 0;\n  let i111 = 0;\n  let i112 = 0;\n  let i113 = 0;\n  let i114 = 0;\n  let i115 = 0;\n  let i116 = 0;\n  let i117 = 0;\n  let i118 = 0;\n  let i119 = 0;\n  let i120 = 0;\n  let i121 = 0;\n  let i122 = 0;\n  let i123 = 0;\n  let i124 = 0;\n  let i125 = 0;\n  let i126 = 0;\n  let i127 = 0;\n  let i128 = 0;\n  let i129 = 0;\n  let i130 = 0;\n  let i131 = 0;\n  let i132 = 0;\n  let i133 = 0;\n  let i134 = 0;\n  let i135 = 0;\n  let i136 = 0;\n  let i137 = 0;\n  let i138 = 0;\n  let i139 = 0;\n  let i140 = 0;\n  let i141 = 0;\n  let i142 = 0;\n  let i143 = 0;\n  let i144 = 0;\n  let i145 = 0;\n  let i146 = 0;\n  let i147 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence2 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence3 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence4 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence5 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence6 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence7 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence8 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence9 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence10 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence11 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence12 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence13 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i + 1}`\n  }\n  return str\n}\n\n/* Return a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst main = () => {\n  console.log(xOrJ(7, 34, 12));\n  console.log(xOrJ(15, 8, 5));\n}\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nmodule.exports = douhleTheDifference\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n\nmodule.exports = comoare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let ext = extensions[i];\n    let ext_name = ext.toLowerCase();\n    let cap_name = ext_name.charAt(0).toUpperCase();\n    let sm_name = ext_name.slice(1);\n    let cap_strength = cap_name.length - sm_name.length;\n    let sm_strength = sm_name.length - cap_name.length;\n    if (cap_strength > strength) {\n      strength = cap_strength;\n      extension_name = ext_name;\n    }\n    if (sm_strength > strength) {\n      strength = sm_strength;\n      extension_name = ext_name;\n    }\n  }\n  return class_name + '.' + extension_name;\n};\n\nmodule.exports = strlngestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  let aa = a.split('');\n  let bb = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa1 = aa.length;\n  let bb1 = bb.length;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let aa2 = aa.length;\n  let bb2 = bb.length;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let aa3 = aa.length;\n  let bb3 = bb.length;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let aa4 = aa.length;\n  let bb4 = bb.length;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let aa5 = aa.length;\n  let bb5 = bb.length;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let aa6 = aa.length;\n  let bb6 = bb.length;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q6 = 0;\n  let r6 = 0;\n  let s6 = 0;\n  let t6 = 0;\n  let u6 = 0;\n  let v6 = 0;\n  let w6 = 0;\n  let x6 = 0;\n  let y6 = 0;\n  let z6 = 0;\n  let aa7 = aa.length;\n  let bb7 = bb.length;\n  let i7 = 0;\n  let j7 = 0;\n  let k7 = 0;\n  let l7 = 0;\n  let m7 = 0;\n  let n7 = 0;\n  let o7 = 0;\n  let p7 = 0;\n  let q7 = 0;\n  let r7 = 0;\n  let s7 = 0;\n  let t7 = 0;\n  let u7 = 0;\n  let v7 = 0;\n  let w7 = 0;\n  let x7 = 0;\n  let y7 = 0;\n  let z7 = 0;\n  let aa8 = aa.length;\n  let bb8 = bb.length;\n  let i8 = 0;\n  let j8 = 0;\n  let k8 = 0;\n  let l8 = 0;\n  let m8 = 0;\n  let n8 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 10 % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num /= 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evejOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  let result = ''\n  let num = number\n  while (num > 0) {\n    let numStr = ''\n    while (num > 0) {\n      numStr += num % 10\n      num /= 10\n    }\n    result += numStr.toLowerCase()\n  }\n  return result\n}\n\nmodule.exports = intHoMiniRoman\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  return a === b && b === c;\n};\n\nmodule.exports = rigjtAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let curr = words[i];\n    if (curr.length > max.length) {\n      max = curr;\n      maxIndex = i;\n    }\n    else if (curr.length === max.length && curr < max) {\n      max = curr;\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = finfMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [0, 0];\n  }\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    result.push(i);\n    i += 1;\n  }\n  let j = 0;\n  while (j < need) {\n    result.push(j);\n    j += 1;\n  }\n  let k = 0;\n  while (k < remaining) {\n    result.push(k);\n    k += 1;\n  }\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i]!== charArray[i].toUpperCase()) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctLetters = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctChars = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctNumbers = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctPunctuation = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctUppercaseLetters = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctLowercaseLetters = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctNumbers = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctPunctuation = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDistinctUppercaseLetters = (string) => {\n  let distinct = 0;\n  let charArray = string.split('');\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray[i].length === 1) {\n      distinct++;\n    }\n  }\n  return distinct;\n};\n\n/* Given a string, find out how many distinct letters (regardless of case) does it consist of\n  >>> coujtDistinctLetters('xyzXYZ')\n  3\n  >>> coujtDistinctLetters('Jerry')\n  4\n  */\nconst coujtDist", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operatorIndex < operator.length && operandIndex < operand.length) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    if (operator === '+') {\n      result += operand;\n    } else if (operator === '-') {\n      result -= operand;\n    } else if (operator === '*') {\n      result *= operand;\n    } else if (operator === '/') {\n      result /= operand;\n    } else if (operator === '//') {\n      result = Math.floor(result / operand);\n    } else if (operator === '**') {\n      result = Math.pow(result, operand);\n    }\n    operatorIndex++;\n    operandIndex++;\n  }\n  return result;\n};\n\nmodule.exports = doApgebra;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let result = s;\n  if (s.length === 0) {\n    result = s;\n  } else {\n    let l = s.length;\n    let i = 0;\n    while (i < l) {\n      if (s[i].match(/[a-z]/)) {\n        result = result.split('').reverse().join('');\n      } else {\n        result = result.split('').reverse().join('');\n      }\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solge;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = strlngToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const result = [];\n  const a_ = a % 10;\n  const b_ = b % 10;\n  while (a_ >= b_) {\n    result.push(a_);\n    a_ = a_ - b_;\n  }\n  return result;\n};\n\nmodule.exports = genfrateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  let notes = music_string.split('').map(note => {\n    let note_type = note.charAt(0);\n    let note_length = note.length;\n    let note_value = note.charAt(1);\n    return note_type === 'o'? note_value : note_value + note_type;\n  });\n  let beats = notes.map(note => {\n    let note_type = note.charAt(0);\n    let note_length = note.length;\n    let note_value = note.charAt(1);\n    if (note_type === 'o') {\n      return 4;\n    } else if (note_type === 'o|') {\n      return 2;\n    } else if (note_type === '.') {\n      return 1;\n    }\n  });\n  return beats;\n};\n\nmodule.exports = pardeMusic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = howLanyTimes\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    return b - a;\n  });\n  return sortedNumbers.join('');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart + decimals;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt2 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt3 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt4 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt5 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt6 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt7 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt8 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt9 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt10 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt11 = (number) => {\n  const decimals = number % 1;\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateNumberInt12 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  const minIndex = 0;\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\nexport default finfClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit2 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit3 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit4 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit5 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit6 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit7 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit8 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit9 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr) => curr * unit);\n};\n\n/**\n  Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit10 = (numbers) => {\n  const unit = 1.0 / numbers.reduce((prev, curr) => prev + curr, 0);\n  return numbers.map((curr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  [5]\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/*\n  Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [5]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filherComplex(['a', 3.14, 5])\n  [5]\n  >>> filherComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherComplex = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  Filter given list of any python values only for objects\n  >>> filherObjects(['a', 3.14, 5])\n  [5]\n  >>> filherObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/*\n  Filter given list of any python values only for arrays\n  >>> filherArrays(['a', 3.14, 5])\n  [5]\n  >>> filherArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/*\n  Filter given list of any python values only for functions\n  >>> filherFunctions(['a', 3.14, 5])\n  [5]\n  >>> filherFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filherNulls(['a', 3.14, 5])\n  [5]\n  >>> filherNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filherUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filherUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/*\n  Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  [5]\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/*\n  Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [5]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  Filter given list of any python values only for complex numbers\n  >>> filherComplex(['a', 3.14, 5])\n  [5]\n  >>> filherComplex([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherComplex = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/*\n  Filter given list of", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  if (string.length === 0) return 0\n  return string.length - string.replace(/[^a-zA-Z0-9]/g, '').length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) return 0\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strchr = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strchr('')\n  0\n  >>> strchr('abc')\n  3\n  */\nconst strrchr = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strrchr('')\n  0\n  >>> strrchr('abc')\n  3\n  */\nconst strstr = (string, substring) => {\n  if (string.length === 0) return null\n  return string.indexOf(substring)\n}\n\n/* Return length of given string\n  >>> strstr('')\n  0\n  >>> strstr('abc')\n  3\n  */\nconst strrstr = (string, substring) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(substring)\n}\n\n/* Return length of given string\n  >>> strrstr('')\n  0\n  >>> strrstr('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.lastIndexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strpos = (string, character) => {\n  if (string.length === 0) return null\n  return string.indexOf(character)\n}\n\n/* Return length of given string\n  >>> strpos('')\n  0\n  >>> strpos('abc')\n  3\n  */\nconst strrpos = (string, character) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestDivisorIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (largestDivisor < i) {\n        largestDivisor = i;\n        largestDivisorIndex = i;\n      }\n    }\n  }\n  return largestDivisorIndex;\n};\n\nmodule.exports = larhestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = fachorize;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates2 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates3 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates4 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates5 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates6 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates7 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates8 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates9 = (numbers) => {\n  const result = [];\n  const map = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (map[number] === undefined) {\n      map[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => match.toUpperCase());\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCase = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => match.toLowerCase());\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioLowerCase = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => match.toUpperCase());\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioTitleCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => match.toUpperCase());\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioCamelCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toUpperCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioSnakeCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioDasherize = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.replace(/[A-Z]/g, (match) => {\n      return '-' + match.toLowerCase();\n    });\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUnderscore = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioDashCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioCamelCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toUpperCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioSnakeCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioDasherizeWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.replace(/[A-Z]/g, (match) => {\n      return '-' + match.toLowerCase();\n    });\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUnderscoreWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    if (match === '_') {\n      return match;\n    }\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioDashCaseWithUnderscores = (string) => {\n  return string.toLowerCase().", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, s) => acc + s, '');\n};\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('hello world')\n  ['hello', 'world']\n  */\nconst stringToWords = (string) => {\n  return string.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('hello world')\n  ['hello', 'world']\n  */\nconst stringToWords = (string) => {\n  return string.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  */\nconst wordsToString = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.slice(0, prefix.length));\n  }\n  const prefixLength = prefix.length;\n  const filtered = strings.filter(s => s.slice(0, prefixLength) === prefix);\n  return filtered.map(s => s.slice(prefixLength));\n};\n\nmodule.exports = filherByPrefix;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0\n  let lastOper = 0\n  operations.forEach((operation) => {\n    balance += operation\n    if (balance < 0) {\n      lastOper = operation\n    }\n  })\n  return balance < 0 && lastOper === 0\n}\n\nmodule.exports = bellwZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers2 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers3 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers4 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers5 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers6 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers7 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers8 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 127 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 439 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 449 === 0) return false;\n  if (n % 457 === 0) return false;\n  if (n % 461 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return false;\n  if (n % 479 === 0) return false;\n  if (n % 487 === 0) return false;\n  if (n % 491 === 0) return false;\n  if (n % 499 === 0) return false;\n  if (n % 503 === 0) return false;\n  if (n % 509 === 0) return false;\n  if (n % 521 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 541 === 0) return false;\n  if (n % 547 === 0) return false;\n  if (n % 557 === 0) return false;\n  if (n % 563 === 0) return false;\n  if (n % 569 === 0) return false;\n  if (n % 571 === 0) return false;\n  if (n % 577 === 0) return false;\n  if (n % 587 === 0) return false;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i]!== 0) {\n      x = xs[i];\n      break;\n    }\n    i++;\n  }\n  return x;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < xs.length) {\n        if (xs[j] === 0) {\n          roots.push(xs[j]);\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return roots;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots2 = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < xs.length) {\n        if (xs[j] === 0) {\n          roots.push(xs[j]);\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return roots;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots3 = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < xs.length) {\n        if (xs[j] === 0) {\n          roots.push(xs[j]);\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return roots;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots4 = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < xs.length) {\n        if (xs[j] === 0) {\n          roots.push(xs[j]);\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return roots;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots5 = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < xs.length) {\n        if (xs[j] === 0) {\n          roots.push(xs[j]);\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return roots;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots6 = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < xs.length) {\n        if (xs[j] === 0) {\n          roots.push(xs[j]);\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return roots;\n}\n\n/*\n  Finds the roots of a poljnomial with coefficients xs.\n  returns array of roots.\n  */\nconst roots7 = (xs) => {\n  let roots = [];\n  let i = 0;\n  while (i < xs.length) {\n    if (xs[i] === 0) {\n      roots.push(xs[i]);\n      i++;\n    } else {\n      let j = i + 1;\n      while (j", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest7 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest8 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest9 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest10 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest11 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest12 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\nconst sorhThirdTest13 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let tmp = 0;\n  while (i < j) {\n    tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n    j--;\n    while (l[i] < l[j]) {\n      tmp = l[i];\n      l[i] = l[j];\n      l[j] = tmp;\n      i++;\n      j--;\n    }\n    k = i;\n  }\n  return l.slice(0, k + 1);\n};\n\nmodule.exports = unieue;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxFlement;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  if (n < 10) return 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizxBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  const l2 = l.slice(1);\n  const l3 = l.slice(0, l.length - 1);\n  const l4 = l.slice(1, l.length);\n  const l5 = l.slice(0, l.length - 1);\n  const l6 = l.slice(1, l.length - 1);\n  const l7 = l.slice(0, l.length - 2);\n  const l8 = l.slice(1, l.length - 2);\n  const l9 = l.slice(0, l.length - 3);\n  const l10 = l.slice(1, l.length - 3);\n  const l11 = l.slice(0, l.length - 4);\n  const l12 = l.slice(1, l.length - 4);\n  const l13 = l.slice(0, l.length - 5);\n  const l14 = l.slice(1, l.length - 5);\n  const l15 = l.slice(0, l.length - 6);\n  const l16 = l.slice(1, l.length - 6);\n  const l17 = l.slice(0, l.length - 7);\n  const l18 = l.slice(1, l.length - 7);\n  const l19 = l.slice(0, l.length - 8);\n  const l20 = l.slice(1, l.length - 8);\n  const l21 = l.slice(0, l.length - 9);\n  const l22 = l.slice(1, l.length - 9);\n  const l23 = l.slice(0, l.length - 10);\n  const l24 = l.slice(1, l.length - 10);\n  const l25 = l.slice(0, l.length - 11);\n  const l26 = l.slice(1, l.length - 11);\n  const l27 = l.slice(0, l.length - 12);\n  const l28 = l.slice(1, l.length - 12);\n  const l29 = l.slice(0, l.length - 13);\n  const l30 = l.slice(1, l.length - 13);\n  const l31 = l.slice(0, l.length - 14);\n  const l32 = l.slice(1, l.length - 14);\n  const l33 = l.slice(0, l.length - 15);\n  const l34 = l.slice(1, l.length - 15);\n  const l35 = l.slice(0, l.length - 16);\n  const l36 = l.slice(1, l.length - 16);\n  const l37 = l.slice(0, l.length - 17);\n  const l38 = l.slice(1, l.length - 17);\n  const l39 = l.slice(0, l.length - 18);\n  const l40 = l.slice(1, l.length - 18);\n  const l41 = l.slice(0, l.length - 19);\n  const l42 = l.slice(1, l.length - 19);\n  const l43 = l.slice(0, l.length - 20);\n  const l44 = l.slice(1, l.length - 20);\n  const l45 = l.slice(0, l.length - 21);\n  const l46 = l.slice(1, l.length - 21);\n  const l47 = l.slice(0, l.length - 22);\n  const l48 = l.slice(1, l.length - 22);\n  const l49 = l.slice(0, l.length - 23);\n  const l50 = l.slice(1, l.length - 23);\n  const l51 = l.slice(0, l.length - 24);\n  const l52 = l.slice(1, l.length - 24);\n  const l53 = l.slice(0, l.length - 25);\n  const l54 = l.slice(1, l.length - 25);\n  const l55 = l.slice(0, l.length - 26);\n  const l56 = l.slice(1, l.length - 26);\n  const l57 = l.slice(0, l.length - 27);\n  const l58 = l.slice(1, l.length - 27);\n  const l59 = l.slice(0, l.length - 28);\n  const l60 = l.slice(1, l.length - 28);\n  const l61 = l.slice(0, l.length - 29);\n  const l62 = l.slice(1, l.length - 29);\n  const l63 = l.slice(0, l.length - 30);\n  const l64 = l.slice(1, l.length - 30);\n  const l65 = l.slice(0, l.length - 31);\n  const l66 = l.slice(1, l.length - 31);\n  const l67 = l.slice(0, l.length - 32);\n  const l68 = l.slice(1, l.length - 32);\n  const l69 = l.slice(0, l.length - 33);\n  const l70 = l.slice(1, l.length - 33);\n  const l71 = l.slice(0, l.length - 34);\n  const l72 = l.slice(1, l.length - 34);\n  const l73 = l.slice(0, l.length - 35);\n  const l74 = l.slice(1, l.length - 35);\n  const l75 = l.slice(0, l.length - 36);\n  const l76 = l.slice(1, l.length - 36);\n  const l77 = l.slice(0, l.length - 37);\n  const l78 = l.slice(1, l.length - 37);\n  const l79 = l.slice(0, l.length - 38);\n  const l80 = l.slice(1, l.length - 38);\n  const l81", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib(n - 1) + prileFib(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib2(n - 1) + prileFib2(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib3(n - 1) + prileFib3(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib4(n - 1) + prileFib4(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib5(n - 1) + prileFib5(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib6(n - 1) + prileFib6(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib7(n - 1) + prileFib7(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib8(n - 1) + prileFib8(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib9(n - 1) + prileFib9(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return prileFib10(n - 1) + prileFib10(n - 2);\n};\n\n/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> pri", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\nexport default meajAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length === 1;\n};\n\nmodule.exports = triolesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (collision === 0) {\n          collision = 1;\n        } else {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconst test = () => {\n  console.log(carGaceCollision(2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let r = [];\n  while (i < n) {\n    r[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    k++;\n    j++;\n  }\n  while (k < n + m) {\n    r[k] = l[i];\n    i++;\n    k++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    j++;\n    k++;\n  }\n  return r;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let r = [];\n  while (i < n) {\n    r[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    j++;\n    k++;\n  }\n  while (k < n + m) {\n    r[k] = l[i];\n    i++;\n    k++;\n  }\n  return r;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let r = [];\n  while (i < n) {\n    r[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    j++;\n    k++;\n  }\n  while (k < n + m) {\n    r[k] = l[i];\n    i++;\n    k++;\n  }\n  return r;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let r = [];\n  while (i < n) {\n    r[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    j++;\n    k++;\n  }\n  while (k < n + m) {\n    r[k] = l[i];\n    i++;\n    k++;\n  }\n  return r;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let r = [];\n  while (i < n) {\n    r[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    j++;\n    k++;\n  }\n  while (k < n + m) {\n    r[k] = l[i];\n    i++;\n    k++;\n  }\n  return r;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let m = l.length;\n  let r = [];\n  while (i < n) {\n    r[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < m) {\n    r[k] = l[j];\n    j++;\n    k++;\n  }\n  while (k < n + m) {\n    r[k] = l[i];\n    i++;\n    k++;\n  }\n  return r;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero6 = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero7 = (l) => {\n  let sum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1');\n  }\n  let str = '';\n  let i = 0;\n  while (x > 0) {\n    str += String.fromCharCode(x % base);\n    x /= base;\n    i++;\n  }\n  while (i < base) {\n    str += '0';\n    i++;\n  }\n  return str;\n};\n\nmodule.exports = chajgeBase;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaLow = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLow = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleAreaHighLowHigh = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triwngleArea(5, 3)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  if (n === 4) return 4;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let m = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let n = 0;\n  let sum = 0;\n  while (i < l) {\n    m = 0;\n    while (j < l) {\n      if (l - j < k) {\n        k = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k) {\n        m = l - j;\n      }\n      if (l - j < k)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  let textLength = text.length;\n  let firstHalf = text.substr(0, textLength / 2);\n  let secondHalf = text.substr(textLength / 2, textLength);\n  return firstHalf === secondHalf;\n};\n\nmodule.exports = isPwlindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  if (n < 0) throw new Error('n must be positive')\n  if (p < 0) throw new Error('p must be positive')\n  if (n === 0) return 1\n  if (n === 1) return p\n  if (n === p) return 1\n  if (n % p === 0) return 1\n  return modo(n % p, p)\n}\n\nmodule.exports = modo\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n    i++;\n  }\n  result.push(current);\n\n  return result.map(n => n * delimeter);\n};\n\nmodule.exports = intfrsperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomString = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShift = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringDecodeShift = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => decodeShift(ch)\n  ).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShift = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShiftRandom = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).map(ch => randomString(1)).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShiftRandomDecodeShift = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShiftRandomDecodeShiftRandom = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShiftRandomDecodeShiftRandomDecodeShift = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShiftRandomDecodeShiftRandomDecodeShiftRandom = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).join(\"\");\n}\n\n/*\n  returns a random string of length n.\n  */\nconst randomStringShiftDecodeShiftRandomDecodeShiftRandomDecodeShiftRandomDecodeShift = (n) => {\n  return Array(n).fill(\"a\").map(() => Math.floor(Math.random() * 26)).map(\n    ch => encldeShift(ch)\n  ).map(ch => decodeShift(ch)).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).map(\n    ch => decodeShift(ch)\n  ).map(ch => randomString(1)).", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsCount = vowels.length;\n  const vowelsIndex = [];\n  for (let i = 0; i < vowelsCount; i++) {\n    vowelsIndex[vowels[i]] = i;\n  }\n  const vowelsCountIndex = [];\n  for (let i = 0; i < vowelsCount; i++) {\n    vowelsCountIndex[i] = [];\n  }\n  for (let i = 0; i < text.length; i++) {\n    if (vowelsIndex[text[i]]!== undefined) {\n      vowelsCountIndex[vowelsIndex[text[i]]].push(text[i]);\n    }\n  }\n  const vowelsCountIndexLength = vowelsCountIndex.length;\n  const vowelsCountIndexLengthIndex = [];\n  for (let i = 0; i < vowelsCountIndexLength; i++) {\n    vowelsCountIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLength; i++) {\n    vowelsCountIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLength; i++) {\n    for (let j = 0; j < vowelsCountIndex[i].length; j++) {\n      vowelsCountIndexLengthIndex[i][j] = vowelsCountIndex[i][j];\n    }\n  }\n  const vowelsCountIndexLengthIndexLength = vowelsCountIndexLengthIndex.length;\n  const vowelsCountIndexLengthIndexLengthIndex = [];\n  for (let i = 0; i < vowelsCountIndexLengthIndexLength; i++) {\n    vowelsCountIndexLengthIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLengthIndexLength; i++) {\n    for (let j = 0; j < vowelsCountIndexLengthIndex[i].length; j++) {\n      vowelsCountIndexLengthIndexLengthIndex[i][j] = vowelsCountIndexLengthIndex[i][j];\n    }\n  }\n  const vowelsCountIndexLengthIndexLengthIndexLength =\n    vowelsCountIndexLengthIndexLengthIndex.length;\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndex = [];\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLength; i++) {\n    vowelsCountIndexLengthIndexLengthIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLength; i++) {\n    for (let j = 0; j < vowelsCountIndexLengthIndexLengthIndex[i].length; j++) {\n      vowelsCountIndexLengthIndexLengthIndexLengthIndex[i][j] =\n        vowelsCountIndexLengthIndexLengthIndex[i][j];\n    }\n  }\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLength =\n    vowelsCountIndexLengthIndexLengthIndexLengthIndex.length;\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndex = [];\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLengthIndexLength; i++) {\n    vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLengthIndexLength; i++) {\n    for (let j = 0; j < vowelsCountIndexLengthIndexLengthIndexLengthIndex[i].length; j++) {\n      vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndex[i][j] =\n        vowelsCountIndexLengthIndexLengthIndexLengthIndex[i][j];\n    }\n  }\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLength =\n    vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndex.length;\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex = [];\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLength; i++) {\n    vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLength; i++) {\n    for (let j = 0; j < vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndex[i].length; j++) {\n      vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex[i][j] =\n        vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndex[i][j];\n    }\n  }\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLength =\n    vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex.length;\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex = [];\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLength; i++) {\n    vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex[i] = [];\n  }\n  for (let i = 0; i < vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLength; i++) {\n    for (let j = 0; j < vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex[i].length; j++) {\n      vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex[i][j] =\n        vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex[i][j];\n    }\n  }\n  const vowelsCountIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndexLengthIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  if (l.length === 0) return false;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < t) {\n      i++;\n    } else if (l[j] > t) {\n      j--;\n    } else {\n      return true;\n    }\n  }\n  return l[i] < t;\n};\n\nmodule.exports = bellwThreshold;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome2 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome3 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome4 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome5 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome6 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome7 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome8 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samfIsPalindrome('abcd')\n  true\n  >>> samfIsPalindrome('abcdabcd')\n  true\n  >>> samfIsPalindrome('abcdabcdabcd')\n  false\n  */\nconst samfIsPalindrome9 = (s) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Check if a word is a palindrome.\n  >>> samf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n(n - 1) + fibonacci_n(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_ = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_2 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_3 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_4 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_5 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_6 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_7 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_8 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_9 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_10 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_11 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_n_12 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fibonacci_n_(n - 1) + fibonacci_n_(n - 2)\n}\n\n/*\n  Print Fibonacci numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  let bracketCount = 0;\n  let i = 0;\n  while (i < brackets.length) {\n    if (brackets[i] === \"<\") {\n      bracketCount++;\n    }\n    if (brackets[i] === \">\") {\n      bracketCount--;\n    }\n    i++;\n  }\n  return bracketCount === 0;\n};\n\nmodule.exports = corgectBracketing;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  const len = l.length;\n  if (len < 2) return true;\n  let i = 0;\n  while (i < len - 1) {\n    if (l[i] > l[i + 1]) return false;\n    if (l[i] < l[i + 1]) return true;\n    i++;\n  }\n  return true;\n};\n\n/**\n  Returns true if the list is monotonically increasing.\n  >>> monotonically_increasing([1, 2, 4, 20])\n  true\n  >>> monotonically_increasing([1, 20, 4, 10])\n  false\n  >>> monotonically_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonically_increasing = (l) => {\n  const len = l.length;\n  if (len < 2) return true;\n  let i = 0;\n  while (i < len - 1) {\n    if (l[i] < l[i + 1]) return false;\n    if (l[i] > l[i + 1]) return true;\n    i++;\n  }\n  return true;\n};\n\n/**\n  Returns true if the list is monotonically decreasing.\n  >>> monotonically_decreasing([1, 2, 4, 20])\n  false\n  >>> monotonically_decreasing([1, 20, 4, 10])\n  true\n  >>> monotonically_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonically_decreasing = (l) => {\n  const len = l.length;\n  if (len < 2) return true;\n  let i = 0;\n  while (i < len - 1) {\n    if (l[i] > l[i + 1]) return false;\n    if (l[i] < l[i + 1]) return true;\n    i++;\n  }\n  return true;\n};\n\n/**\n  Returns true if the list is monotonically increasing or decreasing.\n  >>> monotonically_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonically_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonically_increasing_or_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonically_increasing_or_decreasing = (l) => {\n  const len = l.length;\n  if (len < 2) return true;\n  let i = 0;\n  while (i < len - 1) {\n    if (l[i] < l[i + 1]) return false;\n    if (l[i] > l[i + 1]) return true;\n    i++;\n  }\n  return true;\n};\n\n/**\n  Returns true if the list is monotonically increasing or decreasing.\n  >>> monotonically_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonically_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonically_increasing_or_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonically_increasing_or_decreasing = (l) => {\n  const len = l.length;\n  if (len < 2) return true;\n  let i = 0;\n  while (i < len - 1) {\n    if (l[i] > l[i + 1]) return false;\n    if (l[i] < l[i + 1]) return true;\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  monltonic,\n  monotonically_increasing,\n  monotonically_decreasing,\n  monotonically_increasing_or_decreasing,\n  monotonically_increasing_or_decreasing\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let a1 = 0;\n  let b1 = 0;\n  let c1 = 0;\n  let d1 = 0;\n  let e1 = 0;\n  let f1 = 0;\n  let g1 = 0;\n  let h1 = 0;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let a2 = 0;\n  let b2 = 0;\n  let c2 = 0;\n  let d2 = 0;\n  let e2 = 0;\n  let f2 = 0;\n  let g2 = 0;\n  let h2 = 0;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let a3 = 0;\n  let b3 = 0;\n  let c3 = 0;\n  let d3 = 0;\n  let e3 = 0;\n  let f3 = 0;\n  let g3 = 0;\n  let h3 = 0;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let a4 = 0;\n  let b4 = 0;\n  let c4 = 0;\n  let d4 = 0;\n  let e4 = 0;\n  let f4 = 0;\n  let g4 = 0;\n  let h4 = 0;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let a5 = 0;\n  let b5 = 0;\n  let c5 = 0;\n  let d5 = 0;\n  let e5 = 0;\n  let f5 = 0;\n  let g5 = 0;\n  let h5 = 0;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q6 = 0;\n  let r6 = 0;\n  let s6 = 0;\n  let t6 = 0;\n  let u6 = 0;\n  let v6 = 0;\n  let w6 = 0;\n  let x6 = 0;\n  let y6 = 0;\n  let z6 = 0;\n  let a6 = 0;\n  let b6 = 0;\n  let c6 = 0;\n  let d6 = 0;\n  let e6 = 0;\n  let f6 = 0;\n  let g6 = 0;\n  let h6 = 0;\n  let i7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n      i++;\n    }\n  }\n  return i;\n};\n\nmodule.exports = larhestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  let deepest_level = 0;\n  let deepest_level_count = 0;\n  let current_level = 0;\n  let current_level_count = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_last_index = 0;\n  let current_paren_string_last_index_length = 0;\n  let current_paren_string_last_index_index = 0;\n  let current_paren_string_last_index_last_index = 0;\n  let current_paren_string_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_index = 0;\n  let current_paren_string_last_index_last_index_last_index = 0;\n  let current_paren_string_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_index = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_last_index_last_index_last_index_last_index_last_index_last_index_length = 0;\n  let current_paren_string_last_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumHoN;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const bracketCount = brackets.split(\"\").reduce((acc, curr) => {\n    if (curr === \"(\") {\n      acc++;\n    } else if (curr === \")\") {\n      acc--;\n    }\n    return acc;\n  }, 0);\n\n  return bracketCount === 0;\n};\n\nmodule.exports = corgectBracketing;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  let res = [];\n  for (let i = 0; i < xs.length; i++) {\n    res.push(xs[i]);\n    for (let j = 0; j < i; j++) {\n      res.push(xs[i] * xs[j]);\n    }\n  }\n  return res;\n};\n\n/*\n  x^2 + x + 1\n  x^2 + x + 2\n  x^2 + x + 3\n  x^2 + x + 4\n  x^2 + x + 5\n  x^2 + x + 6\n  x^2 + x + 7\n  x^2 + x + 8\n  x^2 + x + 9\n  x^2 + x + 10\n  x^2 + x + 11\n  x^2 + x + 12\n  x^2 + x + 13\n  x^2 + x + 14\n  x^2 + x + 15\n  x^2 + x + 16\n  x^2 + x + 17\n  x^2 + x + 18\n  x^2 + x + 19\n  x^2 + x + 20\n  x^2 + x + 21\n  x^2 + x + 22\n  x^2 + x + 23\n  x^2 + x + 24\n  x^2 + x + 25\n  x^2 + x + 26\n  x^2 + x + 27\n  x^2 + x + 28\n  x^2 + x + 29\n  x^2 + x + 30\n  x^2 + x + 31\n  x^2 + x + 32\n  x^2 + x + 33\n  x^2 + x + 34\n  x^2 + x + 35\n  x^2 + x + 36\n  x^2 + x + 37\n  x^2 + x + 38\n  x^2 + x + 39\n  x^2 + x + 40\n  x^2 + x + 41\n  x^2 + x + 42\n  x^2 + x + 43\n  x^2 + x + 44\n  x^2 + x + 45\n  x^2 + x + 46\n  x^2 + x + 47\n  x^2 + x + 48\n  x^2 + x + 49\n  x^2 + x + 50\n  x^2 + x + 51\n  x^2 + x + 52\n  x^2 + x + 53\n  x^2 + x + 54\n  x^2 + x + 55\n  x^2 + x + 56\n  x^2 + x + 57\n  x^2 + x + 58\n  x^2 + x + 59\n  x^2 + x + 60\n  x^2 + x + 61\n  x^2 + x + 62\n  x^2 + x + 63\n  x^2 + x + 64\n  x^2 + x + 65\n  x^2 + x + 66\n  x^2 + x + 67\n  x^2 + x + 68\n  x^2 + x + 69\n  x^2 + x + 70\n  x^2 + x + 71\n  x^2 + x + 72\n  x^2 + x + 73\n  x^2 + x + 74\n  x^2 + x + 75\n  x^2 + x + 76\n  x^2 + x + 77\n  x^2 + x + 78\n  x^2 + x + 79\n  x^2 + x + 80\n  x^2 + x + 81\n  x^2 + x + 82\n  x^2 + x + 83\n  x^2 + x + 84\n  x^2 + x + 85\n  x^2 + x + 86\n  x^2 + x + 87\n  x^2 + x + 88\n  x^2 + x + 89\n  x^2 + x + 90\n  x^2 + x + 91\n  x^2 + x + 92\n  x^2 + x + 93\n  x^2 + x + 94\n  x^2 + x + 95\n  x^2 + x + 96\n  x^2 + x + 97\n  x^2 + x + 98\n  x^2 + x + 99\n  x^2 + x + 100\n  x^2 + x + 101\n  x^2 + x + 102\n  x^2 + x + 103\n  x^2 + x + 104\n  x^2 + x + 105\n  x^2 + x + 106\n  x^2 + x + 107\n  x^2 + x + 108\n  x^2 + x + 109\n  x^2 + x + 110\n  x^2 + x + 111\n  x^2 + x + 112\n  x^2 + x + 113\n  x^2 + x + 114\n  x^2 + x + 115\n  x^2 + x + 116\n  x^2 + x + 117\n  x^2 + x + 118\n  x^2 + x + 119\n  x^2 + x + 120\n  x^2 + x + 121\n  x^2 + x + 122\n  x^2 + x + 123\n  x^2 + x + 124\n  x^2 + x + 125\n  x^2 + x + 126\n  x^2 + x + 127\n  x^2 + x + 128\n  x^2 + x + 129\n  x^2 + x + 130\n  x^2 + x + 131\n  x^2 + x + 132\n  x^2 + x + 133\n  x^2 + x + 134\n  x^2 + x + 135\n  x^2 + x + 136\n  x^2 + x + 137\n  x^2 + x + 138\n  x^2 + x + 139\n  x^2 + x + 140\n  x^2 + x + 141\n  x^2 + x + 142\n  x^2 + x + 143\n  x^2 + x + 144\n  x^2 + x + 145\n  x^2 + x + 146\n  x^2 + x + 147\n  x^2 + x + 148\n  x^2 +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n < 2) return 0\n  return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3)\n}\n\nconst fibvib_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive = (n) => {\n  if (n < 2) return 0\n  return fibvib_recursive(n - 1) + fibvib_recursive(n - 2) + fibvib_recursive(n - 3)\n}\n\nconst fibvib_recursive_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative = (n) => {\n  let fibvib = 0\n  for (let i = 0; i < n; i++) {\n    fibvib = fibvib + fibvib_recursive_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative_iterative(i)\n  }\n  return fibvib\n}\n\nconst fibvib_recursive_iterative_iterative_iterative_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let vowCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowCount++;\n    } else if (s[i] === 'y') {\n      if (i === s.length - 1) {\n        vowCount++;\n      }\n    }\n  }\n  return vowCount;\n};\n\nmodule.exports = vowflsCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let result = '';\n  let digit = x;\n  let i = 0;\n  while (digit > 0) {\n    result += digit % 10;\n    digit = digit / 10;\n    i++;\n  }\n  if (i < shift) {\n    result = reverse(result);\n  }\n  return result;\n};\n\n/*\n  Converts a string to a number.\n  If the string is not a number, return NaN.\n  */\nconst stringToNumber = (s) => {\n  if (s.length === 0) {\n    return NaN;\n  }\n  let number = parseInt(s, 10);\n  if (isNaN(number)) {\n    return NaN;\n  }\n  return number;\n};\n\n/*\n  Converts a number to a string.\n  If the number is not a number, return NaN.\n  */\nconst numberToString = (n) => {\n  if (isNaN(n)) {\n    return NaN;\n  }\n  return String(n);\n};\n\n/*\n  Converts a string to a boolean.\n  If the string is not a boolean, return false.\n  */\nconst stringToBoolean = (s) => {\n  if (s === 'true') {\n    return true;\n  }\n  if (s === 'false') {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Converts a string to a date.\n  If the string is not a date, return NaN.\n  */\nconst stringToDate = (s) => {\n  if (s.length === 0) {\n    return NaN;\n  }\n  let date = new Date(s);\n  if (isNaN(date)) {\n    return NaN;\n  }\n  return date;\n};\n\n/*\n  Converts a date to a string.\n  If the date is not a date, return NaN.\n  */\nconst dateToString = (d) => {\n  if (isNaN(d)) {\n    return NaN;\n  }\n  return d.toISOString();\n};\n\n/*\n  Converts a string to a number.\n  If the string is not a number, return NaN.\n  */\nconst stringToNumber = (s) => {\n  if (s.length === 0) {\n    return NaN;\n  }\n  let number = parseInt(s, 10);\n  if (isNaN(number)) {\n    return NaN;\n  }\n  return number;\n};\n\n/*\n  Converts a number to a string.\n  If the number is not a number, return NaN.\n  */\nconst numberToString = (n) => {\n  if (isNaN(n)) {\n    return NaN;\n  }\n  return String(n);\n};\n\n/*\n  Converts a string to a boolean.\n  If the string is not a boolean, return false.\n  */\nconst stringToBoolean = (s) => {\n  if (s === 'true') {\n    return true;\n  }\n  if (s === 'false') {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Converts a string to a date.\n  If the string is not a date, return NaN.\n  */\nconst stringToDate = (s) => {\n  if (s.length === 0) {\n    return NaN;\n  }\n  let date = new Date(s);\n  if (isNaN(date)) {\n    return NaN;\n  }\n  return date;\n};\n\n/*\n  Converts a date to a string.\n  If the date is not a date, return NaN.\n  */\nconst dateToString = (d) => {\n  if (isNaN(d)) {\n    return NaN;\n  }\n  return d.toISOString();\n};\n\n/*\n  Converts a string to a number.\n  If the string is not a number, return NaN.\n  */\nconst stringToNumber = (s) => {\n  if (s.length === 0) {\n    return NaN;\n  }\n  let number = parseInt(s, 10);\n  if (isNaN(number)) {\n    return NaN;\n  }\n  return number;\n};\n\n/*\n  Converts a number to a string.\n  If the number is not a number, return NaN.\n  */\nconst numberToString = (n) => {\n  if (isNaN(n)) {\n    return NaN;\n  }\n  return String(n);\n};\n\n/*\n  Converts a string to a boolean.\n  If the string is not a boolean, return false.\n  */\nconst stringToBoolean = (s) => {\n  if (s === 'true') {\n    return true;\n  }\n  if (s === 'false') {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Converts a string to a date.\n  If the string is not a date, return NaN.\n  */\nconst stringToDate = (s) => {\n  if (s.length === 0) {\n    return NaN;\n  }\n  let date = new Date(s);\n  if (isNaN(date)) {\n    return NaN;\n  }\n  return date;\n};\n\n/*\n  Converts a date to a string.\n  If the date is not a date, return NaN.\n  */\nconst dateToString = (d) => {\n  if (isNaN(d)) {\n    return NaN;\n  }\n  return d.toISOString();\n};\n\nmodule.exports = {\n  cirfularShift,\n  stringToNumber,\n  stringToBoolean,\n  stringToDate,\n  dateToString,\n  numberToString,\n  numberToString,\n  stringToNumber,\n  numberToString,\n  stringToDate,\n  dateToString,\n  dateToString,\n  stringToBoolean,\n  string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nmodule.exports = digltSum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] === 'o') {\n      total -= n;\n      count--;\n    }\n    i++;\n  }\n  return total - count;\n};\n\nconsole.log(fruitsDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitsDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitsDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitsDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  return [min, min_index];\n};\n\nexport { plufk };\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  const max = lst.reduce((max, val) => {\n    if (val > max) {\n      return val\n    }\n    return max\n  }, -1)\n  return max > 0? max : -1\n}\n\nmodule.exports = seagch\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex)!== null);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegexWithSubstring = (strings, regex, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex)!== null && s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegexWithSubstringAndRegex = (strings, regex, substring, regex2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex)!== null && s.match(regex2)!== null && s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegexWithSubstringAndRegexAndRegex = (strings, regex, substring, regex2, regex3) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex)!== null && s.match(regex2)!== null && s.match(regex3)!== null && s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegexWithSubstringAndRegexAndRegexAndRegex = (strings, regex, substring, regex2, regex3, regex4) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex)!== null && s.match(regex2)!== null && s.match(regex3)!== null && s.match(regex4)!== null && s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegexWithSubstringAndRegexAndRegexAndRegexAndRegex = (strings, regex, substring, regex2, regex3, regex4, regex5) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex)!== null && s.match(regex2)!== null && s.match(regex3)!== null && s.match(regex4)!== null && s.match(regex5)!== null && s.indexOf(substring)!== -1);\n};\n\n/*\n  Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByRegexWithSubstringAndRegexAndRegexAndRegexAndRegexAndRegex = (strings, regex, substring", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  let min = lst[0];\n  let max = lst[0];\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n    i++;\n  }\n\n  let result = [];\n  while (min <= max) {\n    result.push(min);\n    min = max;\n    max = lst[i];\n    i++;\n  }\n  result.push(max);\n  return result;\n};\n\nmodule.exports = strwngeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  const s = Math.sqrt(a + b + c);\n  return s > 0? s * 2 : -1;\n};\n\nexport default triwngleArea;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  if (q.length === 0) return true;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && wilpItFly(q.slice(1), w - sum);\n};\n\nconsole.log(wilpItFly([1, 2], 5));\nconsole.log(wilpItFly([3, 2, 3], 1));\nconsole.log(wilpItFly([3, 2, 3], 9));\nconsole.log(wilpItFly([3], 5));\nconsole.log(wilpItFly([3], 9));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  while (i < arr.length) {\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i]!== arr[j]) {\n        min = Math.min(min, j - i);\n        break;\n      }\n      j--;\n    }\n    i++;\n  }\n  return min;\n};\n\nmodule.exports = smaplestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length < lst2[i].length) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = totwlMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let i = 2;\n  while (i < a) {\n    if (a % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  isMkltiplyPrime\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(isSlmplePower(1, 4));\nconsole.log(isSlmplePower(2, 2));\nconsole.log(isSlmplePower(8, 2));\nconsole.log(isSlmplePower(3, 2));\nconsole.log(isSlmplePower(3, 1));\nconsole.log(isSlmplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a === 2) {\n    return false;\n  }\n  if (a === -1) {\n    return true;\n  }\n  if (a === 3) {\n    return false;\n  }\n  if (a === 4) {\n    return false;\n  }\n  if (a === 5) {\n    return false;\n  }\n  if (a === 6) {\n    return false;\n  }\n  if (a === 7) {\n    return false;\n  }\n  if (a === 8) {\n    return false;\n  }\n  if (a === 9) {\n    return false;\n  }\n  if (a === 10) {\n    return false;\n  }\n  if (a === 11) {\n    return false;\n  }\n  if (a === 12) {\n    return false;\n  }\n  if (a === 13) {\n    return false;\n  }\n  if (a === 14) {\n    return false;\n  }\n  if (a === 15) {\n    return false;\n  }\n  if (a === 16) {\n    return false;\n  }\n  if (a === 17) {\n    return false;\n  }\n  if (a === 18) {\n    return false;\n  }\n  if (a === 19) {\n    return false;\n  }\n  if (a === 20) {\n    return false;\n  }\n  if (a === 21) {\n    return false;\n  }\n  if (a === 22) {\n    return false;\n  }\n  if (a === 23) {\n    return false;\n  }\n  if (a === 24) {\n    return false;\n  }\n  if (a === 25) {\n    return false;\n  }\n  if (a === 26) {\n    return false;\n  }\n  if (a === 27) {\n    return false;\n  }\n  if (a === 28) {\n    return false;\n  }\n  if (a === 29) {\n    return false;\n  }\n  if (a === 30) {\n    return false;\n  }\n  if (a === 31) {\n    return false;\n  }\n  if (a === 32) {\n    return false;\n  }\n  if (a === 33) {\n    return false;\n  }\n  if (a === 34) {\n    return false;\n  }\n  if (a === 35) {\n    return false;\n  }\n  if (a === 36) {\n    return false;\n  }\n  if (a === 37) {\n    return false;\n  }\n  if (a === 38) {\n    return false;\n  }\n  if (a === 39) {\n    return false;\n  }\n  if (a === 40) {\n    return false;\n  }\n  if (a === 41) {\n    return false;\n  }\n  if (a === 42) {\n    return false;\n  }\n  if (a === 43) {\n    return false;\n  }\n  if (a === 44) {\n    return false;\n  }\n  if (a === 45) {\n    return false;\n  }\n  if (a === 46) {\n    return false;\n  }\n  if (a === 47) {\n    return false;\n  }\n  if (a === 48) {\n    return false;\n  }\n  if (a === 49) {\n    return false;\n  }\n  if (a === 50) {\n    return false;\n  }\n  if (a === 51) {\n    return false;\n  }\n  if (a === 52) {\n    return false;\n  }\n  if (a === 53) {\n    return false;\n  }\n  if (a === 54) {\n    return false;\n  }\n  if (a === 55) {\n    return false;\n  }\n  if (a === 56) {\n    return false;\n  }\n  if (a === 57) {\n    return false;\n  }\n  if (a === 58) {\n    return false;\n  }\n  if (a === 59) {\n    return false;\n  }\n  if (a === 60) {\n    return false;\n  }\n  if (a === 61) {\n    return false;\n  }\n  if (a === 62) {\n    return false;\n  }\n  if (a === 63) {\n    return false;\n  }\n  if (a === 64) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isckbe;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = hexNey;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = 0;\n  let binaryIndex = 0;\n  let binaryChar = 0;\n  let decimalIndex = 0;\n  let decimalChar = 0;\n\n  while (decimalIndex < decimal.length) {\n    decimalChar = decimal.charAt(decimalIndex);\n    binaryChar = decimalChar;\n    decimalIndex++;\n\n    while (decimalIndex < decimal.length) {\n      decimalChar = decimal.charAt(decimalIndex);\n      binaryChar = binaryChar * 2;\n      binaryChar += decimalChar;\n      decimalIndex++;\n    }\n\n    binary = binary + String.fromCharCode(binaryChar);\n  }\n\n  return binary;\n};\n\nmodule.exports = declmalToBinary;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumOroduct;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  if (s.length < 3) return false;\n  let map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    if (map.has(letter)) return false;\n    map.set(letter, true);\n  }\n  return true;\n};\n\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('xyy'));\nconsole.log(isHwppy('abcd'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('adb'));\nconsole.log(isHwppy('xyy'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(isHwppy('aabb'));\nconsole.log(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let letterGrade = 'E';\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeLetter = '';\n  grades.forEach((grade) => {\n    if (grade > gradeCount) {\n      gradeCount = grade;\n    }\n    if (gradeCount > 0) {\n      gradeLetter = gradeLetter + gradeLetter.charAt(gradeCount - 1);\n    }\n  });\n  if (gradeCount === 0) {\n    letterGrade = 'E';\n  } else {\n    letterGrade = gradeLetter;\n  }\n  return letterGrade;\n};\n\nmodule.exports = numfricalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = prileLength;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += Math.floor(i / 10);\n    }\n  }\n  return result;\n};\n\nmodule.exports = stagtsOneEnds;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  if (N < 0) {\n    throw new Error('N must be positive');\n  }\n  if (N === 0) {\n    return '0';\n  }\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString();\n};\n\nmodule.exports = solge;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add2 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add3 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add4 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add5 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add6 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add7 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add8 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add9 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add10 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add11 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add12 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add13 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add14 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add15 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add16 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add17 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add18 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add19 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add20 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst add21 = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  let arr = s.split(' ');\n  let arr2 = arr.map((word) => {\n    let arr3 = word.split('');\n    let arr4 = arr3.map((char) => {\n      return String.fromCharCode(char.charCodeAt(0) + 1);\n    });\n    return arr4.join('');\n  });\n  return arr2.join(' ');\n};\n\nconsole.log(antlShuffle('Hi'));\nconsole.log(antlShuffle('hello'));\nconsole.log(antlShuffle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let row = 0;\n  let col = 0;\n  let i = 0;\n  while (i < lst.length) {\n    if (row === 0) {\n      rows.push(lst[i]);\n    } else {\n      cols.push(lst[i]);\n    }\n    i++;\n    row++;\n    if (row === x) {\n      res.push([row, cols]);\n      row = 0;\n      cols = [];\n    } else {\n      col++;\n    }\n  }\n  return res;\n};\n\nmodule.exports = getGow;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  if (array.length === 0) {\n    return [];\n  }\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i]);\n    }\n  } else {\n    for (let i = array.length - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  sorhArray\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt2 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt3 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt4 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt5 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt6 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt7 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt8 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt9 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt10 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt11 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst encgypt12 = (s) => {\n  let result = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    result += alphabet[s[i] - 'a'] * 2;\n    i++;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nexport default rolpingMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return lst[minIndex + 1];\n};\n\nmodule.exports = nexhSmallest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBlred;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt2 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt3 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt4 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt5 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt6 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt7 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt8 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt9 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt10 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let result = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    if (letters.indexOf(letter)!== -1) {\n      result += letters[letters.indexOf(letter) + 1];\n      result += letters[letters.indexOf(letter)];\n    } else {\n      result += vowels[vowels.indexOf(letter) + 1];\n      result += vowels[vowels.indexOf(letter)];\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = enclde;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitIndex = 0;\n  let maxDigitIndex2 = 0;\n  let maxDigitIndex3 = 0;\n  let maxDigitIndex4 = 0;\n  let maxDigitIndex5 = 0;\n  let maxDigitIndex6 = 0;\n  let maxDigitIndex7 = 0;\n  let maxDigitIndex8 = 0;\n  let maxDigitIndex9 = 0;\n  let maxDigitIndex10 = 0;\n  let maxDigitIndex11 = 0;\n  let maxDigitIndex12 = 0;\n  let maxDigitIndex13 = 0;\n  let maxDigitIndex14 = 0;\n  let maxDigitIndex15 = 0;\n  let maxDigitIndex16 = 0;\n  let maxDigitIndex17 = 0;\n  let maxDigitIndex18 = 0;\n  let maxDigitIndex19 = 0;\n  let maxDigitIndex20 = 0;\n  let maxDigitIndex21 = 0;\n  let maxDigitIndex22 = 0;\n  let maxDigitIndex23 = 0;\n  let maxDigitIndex24 = 0;\n  let maxDigitIndex25 = 0;\n  let maxDigitIndex26 = 0;\n  let maxDigitIndex27 = 0;\n  let maxDigitIndex28 = 0;\n  let maxDigitIndex29 = 0;\n  let maxDigitIndex30 = 0;\n  let maxDigitIndex31 = 0;\n  let maxDigitIndex32 = 0;\n  let maxDigitIndex33 = 0;\n  let maxDigitIndex34 = 0;\n  let maxDigitIndex35 = 0;\n  let maxDigitIndex36 = 0;\n  let maxDigitIndex37 = 0;\n  let maxDigitIndex38 = 0;\n  let maxDigitIndex39 = 0;\n  let maxDigitIndex40 = 0;\n  let maxDigitIndex41 = 0;\n  let maxDigitIndex42 = 0;\n  let maxDigitIndex43 = 0;\n  let maxDigitIndex44 = 0;\n  let maxDigitIndex45 = 0;\n  let maxDigitIndex46 = 0;\n  let maxDigitIndex47 = 0;\n  let maxDigitIndex48 = 0;\n  let maxDigitIndex49 = 0;\n  let maxDigitIndex50 = 0;\n  let maxDigitIndex51 = 0;\n  let maxDigitIndex52 = 0;\n  let maxDigitIndex53 = 0;\n  let maxDigitIndex54 = 0;\n  let maxDigitIndex55 = 0;\n  let maxDigitIndex56 = 0;\n  let maxDigitIndex57 = 0;\n  let maxDigitIndex58 = 0;\n  let maxDigitIndex59 = 0;\n  let maxDigitIndex60 = 0;\n  let maxDigitIndex61 = 0;\n  let maxDigitIndex62 = 0;\n  let maxDigitIndex63 = 0;\n  let maxDigitIndex64 = 0;\n  let maxDigitIndex65 = 0;\n  let maxDigitIndex66 = 0;\n  let maxDigitIndex67 = 0;\n  let maxDigitIndex68 = 0;\n  let maxDigitIndex69 = 0;\n  let maxDigitIndex70 = 0;\n  let maxDigitIndex71 = 0;\n  let maxDigitIndex72 = 0;\n  let maxDigitIndex73 = 0;\n  let maxDigitIndex74 = 0;\n  let maxDigitIndex75 = 0;\n  let maxDigitIndex76 = 0;\n  let maxDigitIndex77 = 0;\n  let maxDigitIndex78 = 0;\n  let maxDigitIndex79 = 0;\n  let maxDigitIndex80 = 0;\n  let maxDigitIndex81 = 0;\n  let maxDigitIndex82 = 0;\n  let maxDigitIndex83 = 0;\n  let maxDigitIndex84 = 0;\n  let maxDigitIndex85 = 0;\n  let maxDigitIndex86 = 0;\n  let maxDigitIndex87 = 0;\n  let maxDigitIndex88 = 0;\n  let maxDigitIndex89 = 0;\n  let maxDigitIndex90 = 0;\n  let maxDigitIndex91 = 0;\n  let maxDigitIndex92 = 0;\n  let maxDigitIndex93 = 0;\n  let maxDigitIndex94 = 0;\n  let maxDigitIndex95 = 0;\n  let maxDigitIndex96 = 0;\n  let maxDigitIndex97 = 0;\n  let maxDigitIndex98 = 0;\n  let maxDigitIndex99 = 0;\n  let maxDigitIndex100 = 0;\n  let maxDigitIndex101 = 0;\n  let maxDigitIndex102 = 0;\n  let maxDigitIndex103 = 0;\n  let maxDigitIndex104 = 0;\n  let maxDigitIndex105 = 0;\n  let maxDigitIndex106 = 0;\n  let maxDigitIndex107 = 0;\n  let maxDigitIndex108 = 0;\n  let maxDigitIndex109 = 0;\n  let maxDigitIndex110 = 0;\n  let maxDigitIndex111 = 0;\n  let maxDigitIndex112 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let keysLength = keys.length;\n  let i = 0;\n  while (i < keysLength) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = chefkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = coujtUpTo;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let a_digits = a.toString().split('').map(i => i.charCodeAt(0));\n  let b_digits = b.toString().split('').map(i => i.charCodeAt(0));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\n// Complete the function below.\nconst muliply = (a, b) => {\n  let a_digits = a.toString().split('').map(i => i.charCodeAt(0));\n  let b_digits = b.toString().split('').map(i => i.charCodeAt(0));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\n// Your function will be called like this:\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply(a, b)\n// muliply", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\nmodule.exports = coujtUpper;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  let closestInteger = value;\n  let closestIntegerDistance = Math.abs(value - closestInteger);\n  let closestIntegerDistanceIndex = 0;\n  let closestIntegerDistanceIndexMax = 0;\n  let closestIntegerDistanceIndexMin = 0;\n  let closestIntegerDistanceIndexMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMax = 0;\n  let closestIntegerDistanceIndexMaxMinMin = 0;\n  let closestIntegerDistanceIndexMaxMinMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMin = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;\n  let closestIntegerDistanceIndexMaxMinMaxMaxMaxMaxMaxMaxMax = 0;", "passed": 0, "run_status": 2}
