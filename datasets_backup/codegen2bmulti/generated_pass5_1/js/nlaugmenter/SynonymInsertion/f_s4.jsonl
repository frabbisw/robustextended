{"task_id": "JavaScript/0", "prompt": "/* Check discipline if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given afford threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check discipline if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given afford threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let minDistance = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const distance = getDistance(numbers[i], numbers[j]);\n      if (distance < minDistance && distance < threshold) {\n        minDistance = distance;\n        minIndex = i;\n      }\n    }\n  }\n  return minIndex!== -1;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input remark to this function is a string chain containing control multiple groups of nested nest parentheses parenthesis. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate groups are balanced (each open capable brace pair is properly by rights closed) and not nested within each other \n   Ignore dismiss any spaces outer space in the input stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain containing control multiple groups of nested nest parentheses parenthesis. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate groups are balanced (each open capable brace pair is properly by rights closed) and not nested within each other \n   Ignore dismiss any spaces outer space in the input stimulation string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let stack = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test screen if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length < prefix.length? postfix : prefix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length < prefix.length? postfix : prefix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length < prefix.length? postfix : prefix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length < prefix.length? postfix : prefix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length < prefix.length? postfix : prefix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive palindrome that begins get down with a supplied string.\n   Algorithm idea mind is simple childlike: \n   - Find determine the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes arrive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.length < prefix.length? postfix : prefix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest unretentive", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given move over a positive integer n, you have to make draw a pile voltaic pile of n levels of stones gem. \n   The first inaugural level floor has n stones. \n   The number phone number of stones in the next level is: \n       - the next following odd leftover number numeral if n is odd. \n       - the next even tied number numeral if n is even. \n   Return the number numeral of stones in each level in a list, where element at index \n   i represents represent the number act of stones stone in the level (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, you have to make draw a pile voltaic pile of n levels of stones gem. \n   The first inaugural level floor has n stones. \n   The number phone number of stones in the next level is: \n       - the next following odd leftover number numeral if n is odd. \n       - the next even tied number numeral if n is even. \n   Return the number numeral of stones in each level in a list, where element at index \n   i represents represent the number act of stones stone in the level (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const [floor, nextLevel] = [n, 0];\n  const [leftover, numeral] = [0, 0];\n  while (floor > 0) {\n    if (floor % 2 === 1) {\n      nextLevel = nextLevel + 1;\n      leftover = floor;\n    } else {\n      numeral = numeral + floor;\n      floor = floor / 2;\n    }\n  }\n  return [floor, nextLevel, numeral, leftover];\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given move over a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given move over a string of words bible separated distinguish by commas or spaces space. Your task undertaking is \n   to split burst the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/[,\\s]+/);\n  return words;\n}\n\n// Test Cases\n\n// Test Case 1\nconsole.log(wordsString(\"Hi, my name is John\"));\n// => [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n// Test Case 2\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 3\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 4\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 5\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 6\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 7\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 8\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 9\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 10\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 11\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 12\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 13\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 14\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 15\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 16\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 17\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 18\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 19\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 20\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 21\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 22\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 23\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 24\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 25\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 26\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 27\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 28\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n// Test Case 29\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\n// => [\"One\", \"two\", \"three\", \"four", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function routine takes two positive incontrovertible numbers numeral x and y and returns the \n   biggest bad even integer number numeral that is in the range stove [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function routine takes two positive incontrovertible numbers numeral x and y and returns the \n   biggest bad even integer number numeral that is in the range stove [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let x_ = x, y_ = y;\n  let x_minus_y = x - y;\n  let x_plus_y = x + y;\n  let x_minus_y_plus_x = x_minus_y + x;\n  let x_minus_y_minus_x = x_minus_y - x;\n  let x_plus_y_plus_x = x_plus_y + x;\n  let x_plus_y_minus_x = x_plus_y - x;\n  let x_minus_y_minus_x_plus_y = x_minus_y - x_plus_y;\n  let x_minus_y_plus_x_minus_y = x_minus_y + x_minus_y;\n  let x_minus_y_minus_x_plus_y_plus_x = x_minus_y_minus_x_plus_y + x;\n  let x_minus_y_plus_x_minus_y_minus_x = x_minus_y_plus_x_minus_y - x;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y = x_minus_y_plus_x_minus_y_minus_x + y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y + x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y + x_plus_y_plus_x;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y + x_plus_y_plus_x_plus_y_plus_x;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y + x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y + x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y + x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y;\n  let x_minus_y_plus_x_minus_y_minus_x_plus_y_minus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x_plus_y_plus_x = x_minus_y_plus_x_minus_y_minus_x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given move over two positive integers integer n and m, and your task undertaking is to compute the \n   average of the integers integer from n through m (including admit n and m). \n   Round the answer solution to the nearest integer and convert change that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given move over two positive integers integer n and m, and your task undertaking is to compute the \n   average of the integers integer from n through m (including admit n and m). \n   Round the answer solution to the nearest integer and convert change that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive incontrovertible integers x. return a sorted classify list of all \n   elements element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted screen in increasing increase order. \n  \n   For example exemplar:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive incontrovertible integers x. return a sorted classify list of all \n   elements element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted screen in increasing increase order. \n  \n   For example exemplar:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  const res = uniqueDigits([15, 33, 1422, 1]);\n  console.log(res);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given move over an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse overrule the resulting array, and then replace substitute each digit finger by its corresponding represent name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse overrule the resulting array, and then replace substitute each digit finger by its corresponding represent name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength12 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedArr[i]);\n  }\n  return result;\n};\n\nconst byLength13 = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let reversedArr = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    result.push(sortedArr[i] + reversedAr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement follow through the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index exponent i is the factorial of i if i is even \n   or the sum union of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement follow through the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index exponent i is the factorial of i if i is even \n   or the sum union of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 1];\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(1 + result[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given move over a positive integer n, return a tuple that has the number phone number of even and odd leftover \n   integer palindromes that fall precipitate within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return a tuple that has the number phone number of even and odd leftover \n   integer palindromes that fall precipitate within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let evenPalindrome = []\n  let oddPalindrome = []\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write spell a function countNums which takes fill an array of integers integer and returns \n   the number phone number of elements chemical element which has a sum union of digits > 0. \n   If a number phone number is negative, then its first signed digit finger will be negative minus: \n   e.g. for example -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function countNums which takes fill an array of integers integer and returns \n   the number phone number of elements chemical element which has a sum union of digits > 0. \n   If a number phone number is negative, then its first signed digit finger will be negative minus: \n   e.g. for example -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 1, -1]));\nconsole.log(countNums([-1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]));\nconsole.log(countNums([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered ordain. Your task undertaking is to determine if \n   it is possible potential to get contract an array sorted classify in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed admit to perform do right correct shift operation any number issue of times prison term. \n  \n   One right shift shift key operation means shifting all elements of the array by one \n   position stead in the right proper direction guidance. The last final element chemical element of the array will be moved to \n   the starting start position in the array i.e. 0th index exponent. \n\n   If it is possible potential to obtain the sorted grouped array by performing do the above operation \n   then return true truthful else return false. \n   If the given pass array is empty then return true. \n\n   Note: The given impart list is guaranteed to have unique singular elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N integers integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered ordain. Your task undertaking is to determine if \n   it is possible potential to get contract an array sorted classify in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed admit to perform do right correct shift operation any number issue of times prison term. \n  \n   One right shift shift key operation means shifting all elements of the array by one \n   position stead in the right proper direction guidance. The last final element chemical element of the array will be moved to \n   the starting start position in the array i.e. 0th index exponent. \n\n   If it is possible potential to obtain the sorted grouped array by performing do the above operation \n   then return true truthful else return false. \n   If the given pass array is empty then return true. \n\n   Note: The given impart list is guaranteed to have unique singular elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLength = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLength = arrTemp.length;\n  let arrTempTemp = arrTemp.slice();\n  let arrTempTempLength = arrTempTemp.length;\n  let arrTempTempTemp = arrTempTemp.slice();\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempTempTemp = arrTempTempTemp.slice();\n  let arrTempTempTempTempLength = arrTempTempTempTemp.length;\n  let arrTempTempTempTempTemp = arrTempTempTempTemp.slice();\n  let arrTempTempTempTempTempLength = arrTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempLength = arrTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLength = arrTempTempTempTempTempTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input remark are two strings a and b consisting consist only of 1s and 0s zero. \n   Perform binary XOR on these inputs remark and return result solution also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input remark are two strings a and b consisting consist only of 1s and 0s zero. \n   Perform binary XOR on these inputs remark and return result solution also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length && i < b.length) {\n    if (a[i] === '1' && b[i] === '1') {\n      result += '1';\n    } else if (a[i] === '1' && b[i] === '0') {\n      result += '0';\n    } else if (a[i] === '0' && b[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0' && b[i] === '0') {\n      result += '0';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '1';\n    } else if (a[i] === '0') {\n      result += '0';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor2 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result += '1';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor3 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result += '1';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor4 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result += '1';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor5 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result += '1';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor6 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result += '1';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor7 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result += '1';\n    } else {\n      throw new Error('Invalid input');\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Input: a string a consisting of only 1s and 0s.\n  Output: a string b consisting of only 1s and 0s.\n  Perform XOR on a and b and return result as a string.\n  */\nconst xor8 = (a) => {\n  let result = '';\n  let i = 0;\n  while (i < a.length) {\n    if (a[i] === '1') {\n      result += '0';\n    } else if (a[i] === '0') {\n      result +=", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem trouble, you will implement a function routine that takes claim two lists of numbers number, \n   and determines settle whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number numeral of exchanged change elements chemical element between lst1 and lst2.\n   If it is possible potential to exchange elements between the lst1 and lst2 to make have \n   all the elements chemical element of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem trouble, you will implement a function routine that takes claim two lists of numbers number, \n   and determines settle whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number numeral of exchanged change elements chemical element between lst1 and lst2.\n   If it is possible potential to exchange elements between the lst1 and lst2 to make have \n   all the elements chemical element of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    }\n  }\n  if (even === lst1.length) {\n    result = \"YES\";\n  }\n  return result;\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition repeat and containing incorporate the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string chain representing a space outer space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition repeat and containing incorporate the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let repeat = 0;\n  let letter = '';\n  let count = 0;\n  let index = 0;\n  let len = test.length;\n  while (index < len) {\n    let letter = test.charAt(index);\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    if (letter ==='') {\n      repeat++;\n    }\n    index++;\n  }\n  for (let key in histogram) {\n    if (histogram[key] === repeat) {\n      count++;\n    }\n  }\n  return {\n    count: count,\n    letters: histogram\n  };\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task necessitate \n   We are given two strings string section s and c, you have to deleted erase all the characters in s that are equal adequate to any character fictional character in c\n   then check determine if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward ahead. \n   You should return a tuple containing hold the result solution string bowed stringed instrument and true / false fake for the check check mark.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task necessitate \n   We are given two strings string section s and c, you have to deleted erase all the characters in s that are equal adequate to any character fictional character in c\n   then check determine if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward ahead. \n   You should return a tuple containing hold the result solution string bowed stringed instrument and true / false fake for the check check mark.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome2 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome3 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome4 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome5 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome6 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome7 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome8 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i] === c[0]) {\n        result += s[i];\n        i++;\n      }\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return [result, flag];\n};\n\nconst palindrome9 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n      while (i < s.length && s[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings string section, where each string consists consist of only digits digit, return a list.\n   Each element i of the output output signal should be \" the number numeral of odd curious elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd leftover digits digit in the i'th string drawstring of the input stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings string section, where each string consists consist of only digits digit, return a list.\n   Each element i of the output output signal should be \" the number numeral of odd curious elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd leftover digits digit in the i'th string drawstring of the input stimulation.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let len = str.length;\n    let odd = 0;\n    for (let j = 0; j < len; j++) {\n      let digit = str[j];\n      if (digit % 2) {\n        odd++;\n      }\n    }\n    num += odd;\n    res.push(`the number of odd elements ${odd}n the str${odd}ng ${odd} of the ${odd}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given move over an array of integers nums, find recover the minimum minimal sum of any non - empty sub submarine - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of integers nums, find recover the minimum minimal sum of any non - empty sub submarine - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) return 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSubArraySum(nums.slice(i)));\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given move over a rectangular grid of wells well. Each row rowing represents a single individual well, \n   and each 1 in a row course represents exemplify a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract excerpt water water system from it, \n   and all buckets have the same capacity.\n   Your task is to use practice the buckets to empty the wells well. \n   Output end product the number numeral of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a rectangular grid of wells well. Each row rowing represents a single individual well, \n   and each 1 in a row course represents exemplify a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract excerpt water water system from it, \n   and all buckets have the same capacity.\n   Your task is to use practice the buckets to empty the wells well. \n   Output end product the number numeral of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const bucket_capacity = capacity;\n  const bucket_capacity_count = [];\n  const bucket_capacity_count_max = 0;\n  const bucket_capacity_count_min = 0;\n  const bucket_capacity_count_sum = 0;\n  const bucket_capacity_count_sum_max = 0;\n  const bucket_capacity_count_sum_min = 0;\n  const bucket_capacity_count_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_min = 0;\n  const bucket_capacity_count_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_min = 0;\n  const bucket_capacity_count_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_min = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_min = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const bucket_capacity_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort classify an array of non - negative integers integer according accord to \n   number of ones one in their binary representation theatrical performance in ascending rise order. \n   For similar like number of ones, sort based on decimal value. \n\n   It must be implemented enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort classify an array of non - negative integers integer according accord to \n   number of ones one in their binary representation theatrical performance in ascending rise order. \n   For similar like number of ones, sort based on decimal value. \n\n   It must be implemented enforce like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let arrLength = arr.length;\n  let arrTemp = [];\n  let arrTempLength = 0;\n  let arrTempIndex = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arrTempIndex103 = 0;\n  let arrTempIndex104 = 0;\n  let arrTempIndex105 = 0;\n  let arrTempIndex106 = 0;\n  let arrTempIndex107 = 0;\n  let arrTempIndex108 = 0;\n  let arrTempIndex109 = 0;\n  let arrTempIndex110 = 0;\n  let arrTempIndex111 = 0;\n  let arrTempIndex112 = 0;\n  let arrTempIndex113 = 0;\n  let arrTempIndex114 = 0;\n  let arrTempIndex115 = 0;\n  let arrTempIndex116 = 0;\n  let arrTempIndex117 = 0;\n  let arrTempIndex118 = 0;\n  let arrTempIndex119 = 0;\n  let arrTempIndex120 = 0;\n  let arrTempIndex121 = 0;\n  let arrTempIndex122 = 0;\n  let arrTempIndex123 = 0;\n  let arrTempIndex124 = 0;\n  let arrTempIndex125 = 0;\n  let arrTempIndex126 = 0;\n  let arrTempIndex127 = 0;\n  let arrTempIndex128 = 0;\n  let arrTempIndex129 = 0;\n  let arrTempIndex130 = 0;\n  let arrTempIndex131 = 0;\n  let arrTempIndex132 = 0;\n  let arrTempIndex133 = 0;\n  let arrTempIndex134", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string chain s and a natural number phone number n, you have been tasked task to implement \n   a function routine that returns hark back a list of all words actor's line from string s that contain check exactly \n   n consonants, in order these words parole appear look in the string drawstring s.\n   If the string bowed stringed instrument s is empty then the function should return an empty list.\n   Note bill: you may assume wear the input string bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string chain s and a natural number phone number n, you have been tasked task to implement \n   a function routine that returns hark back a list of all words actor's line from string s that contain check exactly \n   n consonants, in order these words parole appear look in the string drawstring s.\n   If the string bowed stringed instrument s is empty then the function should return an empty list.\n   Note bill: you may assume wear the input string bowed stringed instrument contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given move over a word. Your task is to find recover the closest near vowel that stands between \n   two consonants consonant from the right correct side english of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition circumstance. \n\n   You may assume that the given string bowed stringed instrument contains contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are given move over a word. Your task is to find recover the closest near vowel that stands between \n   two consonants consonant from the right correct side english of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return refund empty string drawstring if you didn't \n   find any vowel met the above condition circumstance. \n\n   You may assume that the given string bowed stringed instrument contains contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"]\n  let result = \"\"\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let z = 0\n  let len = word.length\n  let word_arr = word.split(\"\")\n  let word_arr_len = word_arr.length\n  let word_arr_i = 0\n  let word_arr_j = 0\n  let word_arr_k = 0\n  let word_arr_l = 0\n  let word_arr_m = 0\n  let word_arr_n = 0\n  let word_arr_p = 0\n  let word_arr_q = 0\n  let word_arr_r = 0\n  let word_arr_s = 0\n  let word_arr_t = 0\n  let word_arr_u = 0\n  let word_arr_v = 0\n  let word_arr_w = 0\n  let word_arr_x = 0\n  let word_arr_z = 0\n  let word_arr_len_minus_1 = word_arr_len - 1\n  let word_arr_len_minus_2 = word_arr_len - 2\n  let word_arr_len_minus_3 = word_arr_len - 3\n  let word_arr_len_minus_4 = word_arr_len - 4\n  let word_arr_len_minus_5 = word_arr_len - 5\n  let word_arr_len_minus_6 = word_arr_len - 6\n  let word_arr_len_minus_7 = word_arr_len - 7\n  let word_arr_len_minus_8 = word_arr_len - 8\n  let word_arr_len_minus_9 = word_arr_len - 9\n  let word_arr_len_minus_10 = word_arr_len - 10\n  let word_arr_len_minus_11 = word_arr_len - 11\n  let word_arr_len_minus_12 = word_arr_len - 12\n  let word_arr_len_minus_13 = word_arr_len - 13\n  let word_arr_len_minus_14 = word_arr_len - 14\n  let word_arr_len_minus_15 = word_arr_len - 15\n  let word_arr_len_minus_16 = word_arr_len - 16\n  let word_arr_len_minus_17 = word_arr_len - 17\n  let word_arr_len_minus_18 = word_arr_len - 18\n  let word_arr_len_minus_19 = word_arr_len - 19\n  let word_arr_len_minus_20 = word_arr_len - 20\n  let word_arr_len_minus_21 = word_arr_len - 21\n  let word_arr_len_minus_22 = word_arr_len - 22\n  let word_arr_len_minus_23 = word_arr_len - 23\n  let word_arr_len_minus_24 = word_arr_len - 24\n  let word_arr_len_minus_25 = word_arr_len - 25\n  let word_arr_len_minus_26 = word_arr_len - 26\n  let word_arr_len_minus_27 = word_arr_len - 27\n  let word_arr_len_minus_28 = word_arr_len - 28\n  let word_arr_len_minus_29 = word_arr_len - 29\n  let word_arr_len_minus_30 = word_arr_len - 30\n  let word_arr_len_minus_31 = word_arr_len - 31\n  let word_arr_len_minus_32 = word_arr_len - 32\n  let word_arr_len_minus_33 = word_arr_len - 33\n  let word_arr_len_minus_34 = word_arr_len - 34\n  let word_arr_len_minus_35 = word_arr_len - 35\n  let word_arr_len_minus_36 = word_arr_len - 36\n  let word_arr_len_minus_37 = word_arr_len - 37\n  let word_arr_len_minus_38 = word_arr_len - 38\n  let word_arr_len_minus_39 = word_arr_len - 39\n  let word_arr_len_minus_40 = word_arr_len - 40\n  let word_arr_len_minus_41 = word_arr_len - 41\n  let word_arr_len_minus_42 = word_arr_len - 42\n  let word_arr_len_minus_43 = word_arr_len - 43\n  let word_arr_len_minus_44 = word_arr_len - 44\n  let word_arr_len_minus_45 = word_arr_len - 45\n  let word_arr_len_minus_46 = word_arr_len - 46\n  let word_arr_len_minus_47 = word_arr_len - 47\n  let word_arr_len_minus_48 = word_arr_len - 48\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given move over a list of two strings, both strings string section consist dwell of open \n   parentheses digression' (' or close near parentheses digression')' only. \n   Your job is to check discipline if it is possible to concatenate the two strings in\n   some order, that the resulting result string drawstring will be good. \n   A string S is considered see to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given move over a list of two strings, both strings string section consist dwell of open \n   parentheses digression' (' or close near parentheses digression')' only. \n   Your job is to check discipline if it is possible to concatenate the two strings in\n   some order, that the resulting result string drawstring will be good. \n   A string S is considered see to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    let l = lst[i];\n    let r = lst[i + 1];\n    if (l.length === 0 || r.length === 0) {\n      continue;\n    }\n    let lc = l.length;\n    let rc = r.length;\n    let lc_r = lc - rc;\n    let rc_l = rc - lc;\n    if (lc_r < 0 || rc_l < 0) {\n      continue;\n    }\n    let lc_r_plus_1 = lc_r + 1;\n    let rc_l_plus_1 = rc_l + 1;\n    let lc_r_plus_2 = lc_r_plus_1 + 1;\n    let rc_l_plus_2 = rc_l_plus_1 + 1;\n    let lc_r_plus_3 = lc_r_plus_2 + 1;\n    let rc_l_plus_3 = rc_l_plus_2 + 1;\n    let lc_r_plus_4 = lc_r_plus_3 + 1;\n    let rc_l_plus_4 = rc_l_plus_3 + 1;\n    let lc_r_plus_5 = lc_r_plus_4 + 1;\n    let rc_l_plus_5 = rc_l_plus_4 + 1;\n    let lc_r_plus_6 = lc_r_plus_5 + 1;\n    let rc_l_plus_6 = rc_l_plus_5 + 1;\n    let lc_r_plus_7 = lc_r_plus_6 + 1;\n    let rc_l_plus_7 = rc_l_plus_6 + 1;\n    let lc_r_plus_8 = lc_r_plus_7 + 1;\n    let rc_l_plus_8 = rc_l_plus_7 + 1;\n    let lc_r_plus_9 = lc_r_plus_8 + 1;\n    let rc_l_plus_9 = rc_l_plus_8 + 1;\n    let lc_r_plus_10 = lc_r_plus_9 + 1;\n    let rc_l_plus_10 = rc_l_plus_9 + 1;\n    let lc_r_plus_11 = lc_r_plus_10 + 1;\n    let rc_l_plus_11 = rc_l_plus_10 + 1;\n    let lc_r_plus_12 = lc_r_plus_11 + 1;\n    let rc_l_plus_12 = rc_l_plus_11 + 1;\n    let lc_r_plus_13 = lc_r_plus_12 + 1;\n    let rc_l_plus_13 = rc_l_plus_12 + 1;\n    let lc_r_plus_14 = lc_r_plus_13 + 1;\n    let rc_l_plus_14 = rc_l_plus_13 + 1;\n    let lc_r_plus_15 = lc_r_plus_14 + 1;\n    let rc_l_plus_15 = rc_l_plus_14 + 1;\n    let lc_r_plus_16 = lc_r_plus_15 + 1;\n    let rc_l_plus_16 = rc_l_plus_15 + 1;\n    let lc_r_plus_17 = lc_r_plus_16 + 1;\n    let rc_l_plus_17 = rc_l_plus_16 + 1;\n    let lc_r_plus_18 = lc_r_plus_17 + 1;\n    let rc_l_plus_18 = rc_l_plus_17 + 1;\n    let lc_r_plus_19 = lc_r_plus_18 + 1;\n    let rc_l_plus_19 = rc_l_plus_18 + 1;\n    let lc_r_plus_20 = lc_r_plus_19 + 1;\n    let rc_l_plus_20 = rc_l_plus_19 + 1;\n    let lc_r_plus_21 = lc_r_plus_20 + 1;\n    let rc_l_plus_21 = rc_l_plus_20 + 1;\n    let lc_r_plus_22 = lc_r_plus_21 + 1;\n    let rc_l_plus_22 = rc_l_plus_21 + 1;\n    let lc_r_plus_23 = lc_r_plus_22 + 1;\n    let rc_l_plus_23 = rc_l_plus_22 + 1;\n    let lc_r_plus_24 = lc_r_plus_23 + 1;\n    let rc_l_plus_24 = rc_l_plus_23 + 1;\n    let lc_r_plus_25 = lc_r_plus_24 + 1;\n    let rc_l_plus_25 = rc_l_plus_24 + 1;\n    let lc_r_plus_26 = lc_r_plus_25 + 1;\n    let rc_l_plus_26 = rc_l_plus_25 + 1;\n    let lc_r_plus_27 = lc_r_plus_26 + 1;\n    let rc_l_plus_27 = rc_l_plus_26 + 1;\n    let lc_r_plus_28", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return come back the first one in case casing of multiple \n   strings of the same length distance. Return null in case character the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return come back the first one in case casing of multiple \n   strings of the same length distance. Return null in case character the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given move over an array arr of integers and a positive incontrovertible integer k, return a sorted screen list \n   of length k with the maximum k numbers number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array arr of integers and a positive incontrovertible integer k, return a sorted screen list \n   of length k with the maximum k numbers number in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => a > b? a : b, -Infinity);\n  const maxIndex = arr.indexOf(max);\n  const screen = arr.slice(maxIndex - k + 1, maxIndex + 1);\n  return screen;\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers integer, return the sum of all of the odd curious elements element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers integer, return the sum of all of the odd curious elements element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((e) => e % 2 === 1);\n  const even = lst.filter((e) => e % 2 === 0);\n  return odd.reduce((sum, e) => sum + e, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given move over a non - empty array of integers arr and an integer k, return\n   the sum union of the elements element with at most two digits from the first beginning k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a non - empty array of integers arr and an integer k, return\n   the sum union of the elements element with at most two digits from the first beginning k elements chemical element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given move over a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence succession. \n\n   The Collatz conjecture guess is a conjecture speculation in mathematics that concerns a sequence succession defined \n   as follows: start with any positive cocksure integer n. Then each term terminus is obtained prevail from the \n   previous former term as follows be: if the previous former term terminus is even, the next term is one half of \n   the previous term terminus. If the previous former term terminus is odd, the next adjacent term terminus is 3 times the previous \n   term plus 1. The conjecture speculation is that no matter what value of n, the sequence succession will always reach achieve 1. \n\n   Note bill: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence succession. \n\n   The Collatz conjecture guess is a conjecture speculation in mathematics that concerns a sequence succession defined \n   as follows: start with any positive cocksure integer n. Then each term terminus is obtained prevail from the \n   previous former term as follows be: if the previous former term terminus is even, the next term is one half of \n   the previous term terminus. If the previous former term terminus is odd, the next adjacent term terminus is 3 times the previous \n   term plus 1. The conjecture speculation is that no matter what value of n, the sequence succession will always reach achieve 1. \n\n   Note bill: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing increase order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddCollatz = [];\n  let oddCollatzIndex = 0;\n  let oddCollatzLength = 0;\n  let oddCollatzCount = 0;\n  let oddCollatzIndexNext = 0;\n  let oddCollatzLengthNext = 0;\n  let oddCollatzCountNext = 0;\n  let oddCollatzIndexPrev = 0;\n  let oddCollatzLengthPrev = 0;\n  let oddCollatzCountPrev = 0;\n  let oddCollatzIndexPrevNext = 0;\n  let oddCollatzLengthPrevNext = 0;\n  let oddCollatzCountPrevNext = 0;\n  let oddCollatzIndexNextPrev = 0;\n  let oddCollatzLengthNextPrev = 0;\n  let oddCollatzCountNextPrev = 0;\n  let oddCollatzIndexPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzLengthPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzCountPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = 0;\n  let oddCollatzIndexPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write spell a function which validates validate a given afford date string and \n   returns restitution true truthful if the date is valid otherwise differently false. \n   The date is valid if all of the following take after rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number numeral of days sidereal day is not less than 1 or higher than 31 days for months calendar month 1,3,5,7,8,10,12. And the number numeral of days sidereal day is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days sidereal day is not less than 1 or higher high than 29 for the month calendar month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have to write spell a function which validates validate a given afford date string and \n   returns restitution true truthful if the date is valid otherwise differently false. \n   The date is valid if all of the following take after rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number numeral of days sidereal day is not less than 1 or higher than 31 days for months calendar month 1,3,5,7,8,10,12. And the number numeral of days sidereal day is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days sidereal day is not less than 1 or higher high than 29 for the month calendar month 2. \n   3. The months should not be less than 1 or higher high than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateString = date.split('-');\n  let months = dateString[0].split('-');\n  let days = dateString[1].split('-');\n  let years = dateString[2].split('-');\n  let monthsCalendar = months[0].toLowerCase();\n  let daysCalendar = days[0].toLowerCase();\n  let yearsCalendar = years[0].toLowerCase();\n  let monthsCalendar2 = months[1].toLowerCase();\n  let daysCalendar2 = days[1].toLowerCase();\n  let yearsCalendar2 = years[1].toLowerCase();\n  let monthsCalendar3 = months[2].toLowerCase();\n  let daysCalendar3 = days[2].toLowerCase();\n  let yearsCalendar3 = years[2].toLowerCase();\n  let monthsCalendar4 = months[3].toLowerCase();\n  let daysCalendar4 = days[3].toLowerCase();\n  let yearsCalendar4 = years[3].toLowerCase();\n  let monthsCalendar5 = months[4].toLowerCase();\n  let daysCalendar5 = days[4].toLowerCase();\n  let yearsCalendar5 = years[4].toLowerCase();\n  let monthsCalendar6 = months[5].toLowerCase();\n  let daysCalendar6 = days[5].toLowerCase();\n  let yearsCalendar6 = years[5].toLowerCase();\n  let monthsCalendar7 = months[6].toLowerCase();\n  let daysCalendar7 = days[6].toLowerCase();\n  let yearsCalendar7 = years[6].toLowerCase();\n  let monthsCalendar8 = months[7].toLowerCase();\n  let daysCalendar8 = days[7].toLowerCase();\n  let yearsCalendar8 = years[7].toLowerCase();\n  let monthsCalendar9 = months[8].toLowerCase();\n  let daysCalendar9 = days[8].toLowerCase();\n  let yearsCalendar9 = years[8].toLowerCase();\n  let monthsCalendar10 = months[9].toLowerCase();\n  let daysCalendar10 = days[9].toLowerCase();\n  let yearsCalendar10 = years[9].toLowerCase();\n  let monthsCalendar11 = months[10].toLowerCase();\n  let daysCalendar11 = days[10].toLowerCase();\n  let yearsCalendar11 = years[10].toLowerCase();\n  let monthsCalendar12 = months[11].toLowerCase();\n  let daysCalendar12 = days[11].toLowerCase();\n  let yearsCalendar12 = years[11].toLowerCase();\n  let monthsCalendar13 = months[12].toLowerCase();\n  let daysCalendar13 = days[12].toLowerCase();\n  let yearsCalendar13 = years[12].toLowerCase();\n  let monthsCalendar14 = months[13].toLowerCase();\n  let daysCalendar14 = days[13].toLowerCase();\n  let yearsCalendar14 = years[13].toLowerCase();\n  let monthsCalendar15 = months[14].toLowerCase();\n  let daysCalendar15 = days[14].toLowerCase();\n  let yearsCalendar15 = years[14].toLowerCase();\n  let monthsCalendar16 = months[15].toLowerCase();\n  let daysCalendar16 = days[15].toLowerCase();\n  let yearsCalendar16 = years[15].toLowerCase();\n  let monthsCalendar17 = months[16].toLowerCase();\n  let daysCalendar17 = days[16].toLowerCase();\n  let yearsCalendar17 = years[16].toLowerCase();\n  let monthsCalendar18 = months[17].toLowerCase();\n  let daysCalendar18 = days[17].toLowerCase();\n  let yearsCalendar18 = years[17].toLowerCase();\n  let monthsCalendar19 = months[18].toLowerCase();\n  let daysCalendar19 = days[18].toLowerCase();\n  let yearsCalendar19 = years[18].toLowerCase();\n  let monthsCalendar20 = months[19].toLowerCase();\n  let daysCalendar20 = days[19].toLowerCase();\n  let yearsCalendar20 = years[19].toLowerCase();\n  let monthsCalendar21 = months[20].toLowerCase();\n  let daysCalendar21 = days[20].toLowerCase();\n  let yearsCalendar21 = years[20].toLowerCase();\n  let monthsCalendar22 = months[21].toLowerCase();\n  let daysCalendar22 = days[21].toLowerCase();\n  let yearsCalendar22 = years[21].toLowerCase();\n  let monthsCalendar23 = months[22].toLowerCase();\n  let daysCalendar23 = days[22].toLowerCase();\n  let yearsCalendar23 = years[22].toLowerCase();\n  let monthsCalendar24 = months[23].toLowerCase();\n  let daysCalendar24 = days[23].toLowerCase();\n  let yearsCalendar24 = years[23].toLowerCase();\n  let monthsCalendar25 = months[24].toLowerCase();\n  let daysCalendar25 = days[24].toLowerCase();\n  let yearsCal", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given move over a string of words bible, return a list of words son split on whitespace, if no whitespaces exists exist in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given move over a string of words bible, return a list of words son split on whitespace, if no whitespaces exists exist in the text textbook you \n   should split burst on commas',' if no commas comma exists you should return the number of lower - case event letters letter with odd leftover order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords2 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords3 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords4 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords5 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords6 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords7 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords8 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords9 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords10 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords11 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords12 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nconst splitWords13 = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < txt.length) {\n    if (txt[i] === ',') {\n      words.push(word);\n      word = ''", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given move over a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate extra of the same \n   number numeral, return false. Assume simulate no negative numbers number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given move over a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate extra of the same \n   number numeral, return false. Assume simulate no negative numbers number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given move over two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are given move over two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  if (start1 >= start2 && start1 <= end2 && end1 >= start2 && end1 <= end2) {\n    return \"YES\";\n  }\n  if (start1 < start2 && end1 >= start2 && end1 <= end2) {\n    return \"NO\";\n  }\n  if (start1 >= start2 && end1 >= start2 && end1 <= end2) {\n    return \"YES\";\n  }\n  if (start1 >= start2 && end1 <= end2) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && end1 >= start2 && end1 <= end2) {\n    return \"YES\";\n  }\n  if (start1 <= start2 && end1 >= start2 && end1 <= end2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nexport default intersection;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over an array arr of integers and you need necessitate to return\n   sum kernel of magnitudes of integers integer multiplied reproduce by product intersection of all signs \n   of each number phone number in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i] * arr[i];\n  }\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given move over a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell of the grid contains check a value. Every integer in the range compass [ 1, N * N ] \n   inclusive appears look exactly once on the cells cellular telephone of the grid.\n\n   You have to find the minimum path of length distance k in the grid. You can start startle \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells cell, \n   in other words quarrel, you can go to cells cell which share an edge with you current \n   cell. \n   Please note that a path way of length duration k means mean visiting exactly precisely k cells cell (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path way A (of length duration k) is considered less than a path way B boron (of length duration k) if \n   after making the ordered ordain lists of the values value on the cells cellular telephone that A deoxyadenosine monophosphate and B barn go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed undertake that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells cell that the minimum minimal path way go function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell of the grid contains check a value. Every integer in the range compass [ 1, N * N ] \n   inclusive appears look exactly once on the cells cellular telephone of the grid.\n\n   You have to find the minimum path of length distance k in the grid. You can start startle \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells cell, \n   in other words quarrel, you can go to cells cell which share an edge with you current \n   cell. \n   Please note that a path way of length duration k means mean visiting exactly precisely k cells cell (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path way A (of length duration k) is considered less than a path way B boron (of length duration k) if \n   after making the ordered ordain lists of the values value on the cells cellular telephone that A deoxyadenosine monophosphate and B barn go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed undertake that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells cell that the minimum minimal path way go function through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const len2 = grid[0].length;\n  const path = [];\n  let min = Infinity;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len2) {\n    if (grid[i][j] === 1) {\n      path.push(grid[i][j]);\n      i++;\n      j++;\n    } else if (grid[i][j] === 2) {\n      path.push(grid[i][j]);\n      i++;\n    } else if (grid[i][j] === 3) {\n      path.push(grid[i][j]);\n      j++;\n    } else {\n      j++;\n    }\n  }\n  while (i < len) {\n    path.push(grid[i][j]);\n    i++;\n  }\n  while (j < len2) {\n    path.push(grid[i][j]);\n    j++;\n  }\n  path.sort((a, b) => a - b);\n  path.reverse();\n  return path.slice(0, k);\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return tax return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return tax return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  let gcd = 1;\n  while (a!== 0 && b!== 0) {\n    if (a < b) {\n      a = a % b;\n    } else {\n      b = b % a;\n    }\n    gcd = gcd % b;\n  }\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows sleep together Fibonacci sequence, it was studied study deeply profoundly by mathematicians in \n   the last final couple centuries hundred. However, what people citizenry don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows sleep together Fibonacci sequence, it was studied study deeply profoundly by mathematicians in \n   the last final couple centuries hundred. However, what people citizenry don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(a + b + c + d);\n    a = b;\n    b = c;\n    c = d;\n    d = arr[i - 1];\n  }\n  return arr;\n};\n\nconst test = (n) => {\n  let arr = tri(n);\n  console.log(arr);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive incontrovertible integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive incontrovertible integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  for (let i = 1; i <= n; i++) {\n    const digit = Math.floor(n / i)\n    if (digit % 2 === 0) {\n      digits.push(0)\n    } else {\n      digits.push(digit)\n    }\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create produce a function that takes fill a string as input stimulation which contains only square hearty brackets bracket. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create produce a function that takes fill a string as input stimulation which contains only square hearty brackets bracket. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let brackets = [...new Set(string.split(''))]\n  let nested = false\n  for (let bracket of brackets) {\n    if (bracket.length === 2 && bracket[0] === '[' && bracket[bracket.length - 1] === ']') {\n      nested = true\n    }\n  }\n  return nested\n }\n  \n  * / \n  Create a function that takes a string as input and returns true if and only if the string contains only square brackets. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n  const isNested = (string) = > {\n  let brackets = [...new Set(string.split(''))]\n  let nested = false\n  for (let bracket of brackets) {\n    if (bracket.length === 2 && bracket[0] === '[' && bracket[bracket.length - 1] === ']') {\n      nested = true\n    }\n  }\n  return nested\n }\n  \n  * / \n  Create a function that takes a string as input and returns true if and only if the string contains only square brackets. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n  const isNested = (string) = > {\n  let brackets = [...new Set(string.split(''))]\n  let nested = false\n  for (let bracket of brackets) {\n    if (bracket.length === 2 && bracket[0] === '[' && bracket[bracket.length - 1] === ']') {\n      nested = true\n    }\n  }\n  return nested\n }\n  \n  * / \n  Create a function that takes a string as input and returns true if and only if the string contains only square brackets. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n  const isNested = (string) = > {\n  let brackets = [...new Set(string.split(''))]\n  let nested = false\n  for (let bracket of brackets) {\n    if (bracket.length === 2 && bracket[0] === '[' && bracket[bracket.length - 1] === ']') {\n      nested = true\n    }\n  }\n  return nested\n }\n  \n  * / \n  Create a function that takes a string as input and returns true if and only if the string contains only square brackets. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n  const isNested = (string) = > {\n  let brackets = [...new Set(string.split(''))]\n  let nested = false\n  for (let bracket of brackets) {\n    if (bracket.length === 2 && bracket[0] === '[' && bracket[bracket.length - 1] === ']') {\n      nested = true\n    }\n  }\n  return nested\n }\n  \n  * / \n  Create a function that takes a string as input and returns true if and only if the string contains only square brackets. \n   The function routine should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true truthful \n   isNested('[]]]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true truthful \n   isNested('[[]][[') ➞ true \n   * / \n  const isNested = (string) = > {\n  let brackets = [...new Set(string.split(''))]\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given move over a list of numbers. \n   You need necessitate to return the sum kernel of squared numbers in the given hold list,\n   round each element chemical element in the list to the upper int(Ceiling) first foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given move over a list of numbers. \n   You need necessitate to return the sum kernel of squared numbers in the given hold list,\n   round each element chemical element in the list to the upper int(Ceiling) first foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create produce a function that returns come back true dependable if the last character quality \n   of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that returns come back true dependable if the last character quality \n   of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlpha &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character quality of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlpha &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character quality of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlpha &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character quality of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlpha &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character quality of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlpha &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character quality of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlpha &&!isNotALetter;\n};\n\n/**\n * Create a function that returns true if the last character quality of a given collapse string chain is an alphabetical character quality and is not \n   a part of a word, and false otherwise differently. \n   Note bill: \" word discussion \" is a group of characters quality separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function routine which returns the largest big index exponent of an element which \n   is not greater capital than or equal adequate to the element component immediately preceding it. If \n   no such element component exists then return -1. The given array will not contain \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function routine which returns the largest big index exponent of an element which \n   is not greater capital than or equal adequate to the element component immediately preceding it. If \n   no such element component exists then return -1. The given array will not contain \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[0];\n  let max = -1;\n  let maxIndex = -1;\n  let maxValue = arr[0];\n  while (i < j) {\n    if (arr[i] <= k) {\n      i++;\n    } else if (arr[j] >= k) {\n      j--;\n    } else {\n      if (arr[i] > arr[j]) {\n        max = arr[i];\n        maxIndex = i;\n      } else {\n        max = arr[j];\n        maxIndex = j;\n      }\n      if (max > maxValue) {\n        maxValue = max;\n      }\n      i++;\n      j--;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create produce a function that returns come back a tuple (a, b), where 'a' is \n   the largest large of negative integers integer, and 'b' is the smallest humble \n   of positive positivist integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that returns come back a tuple (a, b), where 'a' is \n   the largest large of negative integers integer, and 'b' is the smallest humble \n   of positive positivist integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  let max_pos = null;\n  let min_neg = null;\n  let max_pos_neg = null;\n  let min_neg_pos = null;\n  let max_pos_neg_neg = null;\n  let min_neg_pos_neg = null;\n  let max_pos_neg_neg_neg = null;\n  let min_neg_pos_neg_neg = null;\n  let max_pos_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let max_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg = null;\n  let min_neg_pos_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg_neg", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create produce a function that takes fill integers integer, floats, or strings string section representing map \n   real veridical numbers, and returns revert the larger variable in its given variable varying type character. \n   Return null nothing if the values are equal. \n   Note bill: If a real actual number is represented represent as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create produce a function that takes fill integers integer, floats, or strings string section representing map \n   real veridical numbers, and returns revert the larger variable in its given variable varying type character. \n   Return null nothing if the values are equal. \n   Note bill: If a real actual number is represented represent as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (a, b) = > {\n   if (a === b) return null;\n   if (a < b) return a;\n   return b;\n }\n \n const compareOne = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate measure whether the given number phone number n can be written publish as the sum of exactly precisely 4 positive plus even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate measure whether the given number phone number n can be written publish as the sum of exactly precisely 4 positive plus even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_1 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_2 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_3 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_4 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_5 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_6 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_7 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_8 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_9 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_10 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_11 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_12 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_13 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let i = 0; i < n; i++) {\n    if (isEven) {\n      sum += i;\n      isEven = false;\n    } else {\n      sum += i;\n      isEven = true;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSumEven_14 = (n) => {\n  let sum = 0;\n  let isEven = true;\n  for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  const retentive = string.split('').reverse();\n  const prefixes = [];\n  for (let i = 0; i < retentive.length; i++) {\n    prefixes.push(retentive[i]);\n  }\n  return prefixes;\n};\n\n/* Return tax return list of all prefixes from shortest to longest retentive of the input stimulation string\n  >>> all", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given move over a string text, replace substitute all spaces distance in it with underscores, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string text, replace substitute all spaces distance in it with underscores, \n   and if a string chain has more than 2 consecutive back-to-back spaces quad, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const result = text.replace(/\\s{2,}/g, '_');\n  return result;\n};\n\nmodule.exports = fixSpaces;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function routine which takes a string chain representing act a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns restitution' No' otherwise differently. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly precisely one dot acid'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function routine which takes a string chain representing act a file's name, and returns \n 'Yes' if the the file's name is valid, and returns restitution' No' otherwise differently. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly precisely one dot acid'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin romance alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.split(\".\").length === 3\n  let file_name_check_1 = file_name.split(\".\").length === 2\n  let file_name_check_2 = file_name.split(\".\").length === 1\n  let file_name_check_3 = file_name.split(\".\").length === 0\n  let file_name_check_4 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_5 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_6 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_7 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_8 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_9 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_10 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_11 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_12 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/) && file_name.charAt(0).match(/[a-zA-Z]/)\n  let file_name_check_13 = file_name.split(\".\").length === 1 && file_name.charAt(0).match(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function routine will take a list of integers integer. For all entries introduction in the list, the function shall square feather the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes index are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function routine will take a list of integers integer. For all entries introduction in the list, the function shall square feather the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes index are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0 && lst[i] % 6!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0 && lst[i] % 6!== 0 && lst[i] % 7!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0 && lst[i] % 6!== 0 && lst[i] % 7!== 0 && lst[i] % 8!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0 && lst[i] % 6!== 0 && lst[i] % 7!== 0 && lst[i] % 8!== 0 && lst[i] % 9!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0 && lst[i] % 6!== 0 && lst[i] % 7!== 0 && lst[i] % 8!== 0 && lst[i] % 9!== 0 && lst[i] % 10!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0 && lst[i] % 4!== 0 && lst[i] % 5!== 0 && lst[i] % 6!== 0 && lst[i] % 7!== 0 && lst[i] % 8!== 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given move over a string representing constitute a sentence,\n   the sentence contains control some words separated discriminate by a space distance, \n   and you have to return a string that contains incorporate the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words parole in the new fresh string drawstring should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a string representing constitute a sentence,\n   the sentence contains control some words separated discriminate by a space distance, \n   and you have to return a string that contains incorporate the words from the original sentence,\n   whose lengths duration are prime numbers, \n   the order of the words parole in the new fresh string drawstring should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let wordsLength = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordCount = 0;\n  let wordLengthCount = 0;\n  let wordLengthSum = 0;\n  let wordLengthMax = 0;\n  let wordLengthMin = 100000;\n  let wordLengthSumMax = 0;\n  let wordLengthSumMin = 100000;\n  let wordLengthSumMaxCount = 0;\n  let wordLengthSumMinCount = 0;\n  let wordLengthSumMinCountMax = 0;\n  let wordLengthSumMinCountMin = 100000;\n  let wordLengthSumMinCountMinMax = 0;\n  let wordLengthSumMinCountMinMin = 100000;\n  let wordLengthSumMinCountMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMin = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMinMinMinMax = 0;\n  let wordLengthSumMinCountMinMinMinMax = 100000;\n  let wordLengthSumMinCountMin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task job is to implement a function routine that will simplify the expression construction \n   x * n. The function returns revert true truthful if x * n evaluates measure to a whole number phone number and false \n   otherwise. Both x and n, are string representation theatrical performance of a fraction, and have the following surveil format, \n   < numerator>/<denominator > where both numerator and denominator are positive whole numbers. \n\n   You can assume wear that x, and n are valid fractions fraction, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false fake \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task job is to implement a function routine that will simplify the expression construction \n   x * n. The function returns revert true truthful if x * n evaluates measure to a whole number phone number and false \n   otherwise. Both x and n, are string representation theatrical performance of a fraction, and have the following surveil format, \n   < numerator>/<denominator > where both numerator and denominator are positive whole numbers. \n\n   You can assume wear that x, and n are valid fractions fraction, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false fake \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   if (x.length === n.length) {\n     let i = 0;\n     let j = 0;\n     let k = 0;\n     let l = 0;\n     let m = 0;\n     let n = 0;\n     let sum = 0;\n     while (i < x.length) {\n       while (j < n.length) {\n         if (x[i] === n[j]) {\n           sum = sum + x[i];\n           j = j + 1;\n         } else {\n           break;\n         }\n       }\n       if (j === n.length) {\n         sum = sum + x[i];\n         i = i + 1;\n       }\n     }\n     while (k < x.length) {\n       while (l < n.length) {\n         if (x[k] === n[l]) {\n           sum = sum + x[k];\n           l = l + 1;\n         } else {\n           break;\n         }\n       }\n       if (l === n.length) {\n         sum = sum + x[k];\n         k = k + 1;\n       }\n     }\n     while (m < n.length) {\n       while (l < x.length) {\n         if (n[m] === x[l]) {\n           sum = sum + n[m];\n           l = l + 1;\n         } else {\n           break;\n         }\n       }\n       if (l === x.length) {\n         sum = sum + n[m];\n         m = m + 1;\n       }\n     }\n     return sum === x.length && sum === n.length;\n   } else {\n     return false;\n   }\n }\n\n*/\n\nfunction simplify(x, n) {\n  if (x.length === n.length) {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let sum = 0;\n    while (i < x.length) {\n      while (j < n.length) {\n        if (x[i] === n[j]) {\n          sum = sum + x[i];\n          j = j + 1;\n        } else {\n          break;\n        }\n      }\n      if (j === n.length) {\n        sum = sum + x[i];\n        i = i + 1;\n      }\n    }\n    while (k < x.length) {\n      while (l < n.length) {\n        if (x[k] === n[l]) {\n          sum = sum + x[k];\n          l = l + 1;\n        } else {\n          break;\n        }\n      }\n      if (l === n.length) {\n        sum = sum + x[k];\n        k = k + 1;\n      }\n    }\n    while (m < n.length) {\n      while (l < x.length) {\n        if (n[m] === x[l]) {\n          sum = sum + n[m];\n          l = l + 1;\n        } else {\n          break;\n        }\n      }\n      if (l === x.length) {\n        sum = sum + n[m];\n        m = m + 1;\n      }\n    }\n    return sum === x.length && sum === n.length;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\nconsole.log(simplify(\"1/3\", \" 3/1 \"));\nconsole.log(simplify(\"1/4\", \" 4/1 \"));\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\nconsole.log(simplify(\"1/3\", \" 3/1 \"));\nconsole.log(simplify(\"1/4\", \" 4/1 \"));\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\nconsole.log(simplify(\"1/3\", \" 3/1 \"));\nconsole.log(simplify(\"1/4\", \" 4/1 \"));\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\nconsole.log(simplify(\"1/3\", \" 3/1 \"));\nconsole.log(simplify(\"1/4\", \" 4/1 \"));\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\nconsole.log(simplify(\"1/3\", \" 3/1 \"));\nconsole.log(simplify(\"1/4\", \" 4/1 \"));\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write spell a function which sorts classify the given afford list of integers \n   in ascending rise order orderliness according harmonize to the sum of their digits finger. \n   Note: if there are several items with similar exchangeable sum kernel of their digits digit, \n   order them based on their index exponent in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function which sorts classify the given afford list of integers \n   in ascending rise order orderliness according harmonize to the sum of their digits finger. \n   Note: if there are several items with similar exchangeable sum kernel of their digits digit, \n   order them based on their index exponent in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10);\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10);\n    if (aDigit === bDigit) {\n      return a.toString().split('').reverse().join('').localeCompare(b.toString().split('').reverse().join(''));\n    }\n    return aDigit - bDigit;\n  });\n  return sorted;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  console.log(orderByPoints(nums));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that takes an array of numbers number as input stimulation and returns \n   the number phone number of elements chemical element in the array that are greater big than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given move over a positive integer n. You have to create produce an integer array a of length distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a positive integer n. You have to create produce an integer array a of length distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples triple (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets planet in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes film two planet satellite names name calling as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located settle between the orbit eye socket of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun sunlight. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets planet in our solar system: the closerst to the Sun \n   is Mercury, the next adjacent one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes film two planet satellite names name calling as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located settle between the orbit eye socket of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun sunlight. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ]\n  const result = []\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i] || planet2 === planets[i]) {\n      result.push(planet1, planet2)\n    }\n  }\n  return result\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Jupiter\", \"Earth\"))\nconsole.log(bf(\"Jupiter\", \"Mars\"))\nconsole.log(bf(\"Jupiter\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Venus\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Mars\", \"Neptune\"))\nconsole.log(bf(\"Mars\", \"Saturn\"))\nconsole.log(bf(\"Mars\", \"Uranus\"))\nconsole.log(bf(\"Mars\", \"Venus\"))\nconsole.log(bf(\"Mars\", \"Jupiter\"))\nconsole.log(bf(\"Mars\", \"Earth\"))\nconsole.log(bf(\"Mars\", \"Mercury\"))\nconsole.log(bf(\"Mars\", \"Saturn\"))\nconsole.log(bf(\"Mars\", \"Jupiter\"))\nconsole.log(bf(\"Mars\", \"Earth\"))\nconsole.log(bf(\"Mars\", \"Mercury\"))\nconsole.log(bf(\"Jupiter\", \"Mars\"))\nconsole.log(bf(\"Jupiter\", \"Mercury\"))\nconsole.log(bf(\"Jupiter\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Jupiter\", \"Earth\"))\nconsole.log(bf(\"Jupiter\", \"Mars\"))\nconsole.log(bf(\"Jupiter\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Venus\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Earth\", \"Uranus\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function routine that accepts a list of strings string section as a parameter argument, \n   deletes the strings string section that have odd leftover lengths duration from it, \n   and returns the resulted leave list with a sorted order, \n   The list is always a list of strings drawstring and never an array of numbers act, \n   and it may contain duplicates. \n   The order orderliness of the list should be ascending ascend by length of each word son, and you \n   should return the list sorted screen by that rule convention. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order holy order. \n   You may assume bear that all words will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that accepts a list of strings string section as a parameter argument, \n   deletes the strings string section that have odd leftover lengths duration from it, \n   and returns the resulted leave list with a sorted order, \n   The list is always a list of strings drawstring and never an array of numbers act, \n   and it may contain duplicates. \n   The order orderliness of the list should be ascending ascend by length of each word son, and you \n   should return the list sorted screen by that rule convention. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order holy order. \n   You may assume bear that all words will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum2 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum3 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum4 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum5 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum6 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum7 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum8 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum9 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum10 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum11 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst[j + 1]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortedListSum12 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && lst[j] === lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let result = ''\n  for (let i = 0; i < n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Return come back a string containing check space quad - delimited numbers number starting begin from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple elementary program which should return the value of x if n is \n   a prime choice number issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple elementary program which should return the value of x if n is \n   a prime choice number issue and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given move over a list of numbers, return the sum union of squares square of the numbers \n   in the list that are odd curious. Ignore numbers phone number that are negative damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given move over a list of numbers, return the sum union of squares square of the numbers \n   in the list that are odd curious. Ignore numbers phone number that are negative damaging or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] % 2 === 1) {\n        sum += lst[i] * lst[i];\n      }\n    }\n    return sum;\n  }\n  */\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(lst) {\n  //   let sum = 0;\n  //   for (let i = 0; i < lst.length; i++) {\n  //     if (lst[i] % 2 === 1) {\n  //       sum += lst[i] * lst[i];\n  //     }\n  //   }\n  //   return sum;\n  // }\n  \n  // function doubleTheDifference(l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think intend we all remember that feeling impression when the result resultant role of some long - awaited \n   event consequence is finally last known sleep together. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting note down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results solution of a number numeral of matches catch. \n   You are given two arrays of scores and guesses of equal adequate length duration, where each index exponent shows a match couple. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score sexual conquest.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think intend we all remember that feeling impression when the result resultant role of some long - awaited \n   event consequence is finally last known sleep together. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting note down and comparing compare. \n   Your task undertaking is to determine if a person correctly guessed the results solution of a number numeral of matches catch. \n   You are given two arrays of scores and guesses of equal adequate length duration, where each index exponent shows a match couple. \n   Return an array of the same length distance denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score sexual conquest.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let score = [];\n  let guessScore = [];\n  let guessGuess = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given move over the name of a class (a string chain) and a list of extensions.\n   The extensions are to be used use to load additional classes class to the class course. The \n   strength force of the extension is as follows take after: Let lease CAP be the number of the uppercase \n   letters letter in the extension reference's name, and let lease SM be the number issue of lowercase letters letter \n   in the extension reference's name, the strength military capability is given by the fraction CAP - SM. \n   You should find the strongest extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength potency, you should \n   choose the one that comes arrive first foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be given move over the name of a class (a string chain) and a list of extensions.\n   The extensions are to be used use to load additional classes class to the class course. The \n   strength force of the extension is as follows take after: Let lease CAP be the number of the uppercase \n   letters letter in the extension reference's name, and let lease SM be the number issue of lowercase letters letter \n   in the extension reference's name, the strength military capability is given by the fraction CAP - SM. \n   You should find the strongest extension and return a string drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength potency, you should \n   choose the one that comes arrive first foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0\n  let strongest = ''\n  let extension_name = ''\n  let extension_strength = 0\n  let extension_index = 0\n  let extension_count = 0\n  let extension_length = 0\n  let extension_length_index = 0\n  let extension_length_count = 0\n  let extension_length_length = 0\n  let extension_length_length_index = 0\n  let extension_length_length_count = 0\n  let extension_length_length_length = 0\n  let extension_length_length_length_index = 0\n  let extension_length_length_length_count = 0\n  let extension_length_length_length_length = 0\n  let extension_length_length_length_length_index = 0\n  let extension_length_length_length_length_count = 0\n  let extension_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_count = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0\n  let extension_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given move over 2 words. You need necessitate to return true dependable if the second word or any of its rotations rotation is a substring in the first inaugural word bible \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are given move over 2 words. You need necessitate to return true dependable if the second word or any of its rotations rotation is a substring in the first inaugural word bible \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true truthful \n   * / \n const cycpatternCheck = (a, b) = > {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let aa = 0;\n    let bb = 0;\n    let cc = 0;\n    let dd = 0;\n    let ee = 0;\n    let ff = 0;\n    let gg = 0;\n    let hh = 0;\n    let ii = 0;\n    let jj = 0;\n    let kk = 0;\n    let ll = 0;\n    let mm = 0;\n    let nn = 0;\n    let oo = 0;\n    let pp = 0;\n    let qq = 0;\n    let rr = 0;\n    let ss = 0;\n    let tt = 0;\n    let uu = 0;\n    let vv = 0;\n    let ww = 0;\n    let xx = 0;\n    let yy = 0;\n    let zz = 0;\n    let aaa = 0;\n    let bbb = 0;\n    let ccc = 0;\n    let ddd = 0;\n    let eee = 0;\n    let fff = 0;\n    let ggg = 0;\n    let hhh = 0;\n    let iii = 0;\n    let jjj = 0;\n    let kkk = 0;\n    let lll = 0;\n    let mmm = 0;\n    let nnn = 0;\n    let ooo = 0;\n    let ppp = 0;\n    let qqq = 0;\n    let rrr = 0;\n    let sss = 0;\n    let ttt = 0;\n    let uuu = 0;\n    let vvv = 0;\n    let wwww = 0;\n    let xxx = 0;\n    let yyy = 0;\n    let zzz = 0;\n    let aaaa = 0;\n    let bbbb = 0;\n    let cccc = 0;\n    let dddd = 0;\n    let eeee = 0;\n    let ffff = 0;\n    let gggg = 0;\n    let hhhh = 0;\n    let iiiii = 0;\n    let jjjj = 0;\n    let kkkk = 0;\n    let llll = 0;\n    let mmmm = 0;\n    let nnnn = 0;\n    let oooo = 0;\n    let pppp = 0;\n    let qqqq = 0;\n    let rrrr = 0;\n    let ssss = 0;\n    let tttt = 0;\n    let uuuu = 0;\n    let vvvv = 0;\n    let wwwww = 0;\n    let xxxx = 0;\n    let yyyy = 0;\n    let zzzz = 0;\n    let aaaaa = 0;\n    let bbbbb = 0;\n    let ccccc = 0;\n    let ddddd = 0;\n    let eeeee = 0;\n    let fffff = 0;\n    let ggggg = 0;\n    let hhhhh = 0;\n    let iiiiii = 0;\n    let jjjjj = 0;\n    let kkkkk = 0;\n    let lllll = 0;\n    let mmmmm = 0;\n    let nnnnn = 0;\n    let ooooo = 0;\n    let ppppp = 0;\n    let qqqqq = 0;\n    let rrrrr = 0;\n    let sssss = 0;\n    let ttttt = 0;\n    let uuuuu = 0;\n    let vvvvv = 0;\n    let wwwwww = 0;\n    let xxxxxx = 0;\n    let yyyyyy = 0;\n    let zzzzzz = 0;\n    let aaaaaa = 0;\n    let bbbbbb = 0;\n    let cccccc = 0;\n    let dddddd = 0;\n    let eeeeee = 0;\n    let ffffff = 0;\n    let gggggg = 0;\n    let hhhhhh = 0;\n    let iiiiiiig = 0;\n    let jjjjjjjj = 0;\n    let kkkkkkkk = 0;\n    let llllllll = 0;\n    let mmmmmm = 0;\n    let nnnnnnnn = 0;\n    let oooooooo = 0;\n    let pppppppp = 0;\n    let qqqqqqqq = 0;\n    let rrrrrrrrr = 0;\n    let sssssssss = 0;\n    let ttttttttt = 0;\n    let uuuuuuuuu = 0;\n    let vvvvvvvvv = 0;\n    let wwwwwwwwww = 0;\n    let xxxxxxxxx = 0;\n    let yyyyyyyyyy = 0;\n    let zzzzzzzzzz = 0;\n    let aaaaaaaa = 0;\n    let bbbbbbbbb = 0;\n    let ccccccccc = 0;\n    let ddddddddd = 0;\n    let eeeeeeeee = 0;\n    let fffffffff = 0;\n    let ggggggggg = 0;\n    let hhhhhhhhh = 0;\n    let iiiiiiiiii = 0;\n    let jjjjjjjjjj = 0;\n    let kkkkkkkkkk = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number phone number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number phone number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given move over a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions limitation: 1 < = num < = 1000 \n\n   Examples case:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit > 4) {\n      result += digit + 'IV';\n    } else if (digit > 1) {\n      result += digit + 'V';\n    } else {\n      result += digit + 'I';\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given move over the lengths of the three sides side of a triangle triangulum. Return true genuine if the three \n   sides slope form shape a right - angled fish triangle, false otherwise. \n   A right correctly - angled lean triangle triangulum is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given move over the lengths of the three sides side of a triangle triangulum. Return true genuine if the three \n   sides slope form shape a right - angled fish triangle, false otherwise. \n   A right correctly - angled lean triangle triangulum is a triangle in which one angle is right proper angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const slope = (a + b + c) / 2;\n  return slope === Math.abs(Math.sin(Math.PI / 3));\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function routine that accepts a list of strings string section. \n   The list contains control different words. Return the word password with maximum maximal number act \n   of unique characters character. If multiple strings have maximum number of unique singular \n   characters fictional character, return the one which comes first in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that accepts a list of strings string section. \n   The list contains control different words. Return the word password with maximum maximal number act \n   of unique characters character. If multiple strings have maximum number of unique singular \n   characters fictional character, return the one which comes first in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string bowed stringed instrument \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let wordLength = word.length;\n        let wordUnique = 0;\n        for (let j = 0; j < wordLength; j++) {\n            let character = word[j];\n            if (character.toLowerCase()!== character) {\n                continue;\n            }\n            wordUnique++;\n        }\n        if (wordUnique > max) {\n            max = wordUnique;\n            maxIndex = i;\n        }\n    }\n    return words[maxIndex];\n}\n*/\n\n//Write a function that takes a string and returns the string with all characters in lower case.\n//* /\nconst toLowerCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toLowerCase()!== character) {\n            result += character.toLowerCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in upper case.\n//* /\nconst toUpperCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toUpperCase()!== character) {\n            result += character.toUpperCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in lower case.\n//* /\nconst toLowerCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toLowerCase()!== character) {\n            result += character.toLowerCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in upper case.\n//* /\nconst toUpperCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toUpperCase()!== character) {\n            result += character.toUpperCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in lower case.\n//* /\nconst toLowerCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toLowerCase()!== character) {\n            result += character.toLowerCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in upper case.\n//* /\nconst toUpperCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toUpperCase()!== character) {\n            result += character.toUpperCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in lower case.\n//* /\nconst toLowerCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toLowerCase()!== character) {\n            result += character.toLowerCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in upper case.\n//* /\nconst toUpperCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toUpperCase()!== character) {\n            result += character.toUpperCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in lower case.\n//* /\nconst toLowerCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toLowerCase()!== character) {\n            result += character.toLowerCase();\n        } else {\n            result += character;\n        }\n    }\n    return result;\n}\n\n//Write a function that takes a string and returns the string with all characters in upper case.\n//* /\nconst toUpperCase = (string) = > {\n    let result = \"\";\n    for (let i = 0; i < string.length; i++) {\n        let character = string[i];\n        if (character.toUpperCase()!== character) {\n            result += character.toUpperCase();\n        } else {\n            result += character;\n        }\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry athirst rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete dispatch the day sidereal day's meals. \n   you should return an array of [ total number of eaten corrode carrots after your meals, \n                                   the number of carrots left leave after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry athirst rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete dispatch the day sidereal day's meals. \n   you should return an array of [ total number of eaten corrode carrots after your meals, \n                                   the number of carrots left leave after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  if (number < need) {\n    result.push(number);\n    result.push(remaining);\n    return result;\n  }\n  let left = need;\n  while (left > 0) {\n    const left_eaten = Math.min(left, number);\n    const left_remaining = Math.max(0, remaining - left_eaten);\n    result.push(left_eaten);\n    result.push(left_remaining);\n    left -= left_eaten;\n  }\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given move over a string, find out how many distinct clear-cut characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given move over a string, find out how many distinct clear-cut characters quality (regardless of case) does it consist dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char === 'x' || char === 'X' || char === 'y' || char === 'Y' || char === 'z' || char === 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given move over two lists operator, and operand. The first beginning list has basic algebra operations process, and \n   the second list is a list of integers. Use practice the two given collapse lists list to build the algebric \n   expression formulation and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over two lists operator, and operand. The first beginning list has basic algebra operations process, and \n   the second list is a list of integers. Use practice the two given collapse lists list to build the algebric \n   expression formulation and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let a1 = 0;\n  let b1 = 0;\n  let c1 = 0;\n  let d1 = 0;\n  let e1 = 0;\n  let f1 = 0;\n  let g1 = 0;\n  let h1 = 0;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let a2 = 0;\n  let b2 = 0;\n  let c2 = 0;\n  let d2 = 0;\n  let e2 = 0;\n  let f2 = 0;\n  let g2 = 0;\n  let h2 = 0;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let a3 = 0;\n  let b3 = 0;\n  let c3 = 0;\n  let d3 = 0;\n  let e3 = 0;\n  let f3 = 0;\n  let g3 = 0;\n  let h3 = 0;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let a4 = 0;\n  let b4 = 0;\n  let c4 = 0;\n  let d4 = 0;\n  let e4 = 0;\n  let f4 = 0;\n  let g4 = 0;\n  let h4 = 0;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let a5 = 0;\n  let b5 = 0;\n  let c5 = 0;\n  let d5 = 0;\n  let e5 = 0;\n  let f5 = 0;\n  let g5 = 0;\n  let h5 = 0;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given move over a string s.\n   if s[i] is a letter, reverse revoke its case sheath from lower to upper or vise versa, \n   otherwise differently keep keep open it as it is. \n   If the string chain contains no letters letter, reverse the string. \n   The function should return the resulted result string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given move over a string s.\n   if s[i] is a letter, reverse revoke its case sheath from lower to upper or vise versa, \n   otherwise differently keep keep open it as it is. \n   If the string chain contains no letters letter, reverse the string. \n   The function should return the resulted result string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s.split('').reverse().join('');\n  if (result.length === 0) {\n    result = s;\n  }\n  return result;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given move over a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  let md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given move over two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending rise order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending rise order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i <= j) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input remark to this function is a string chain representing act musical notes eminence in a special limited ASCII american standard code for information interchange format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last concluding. \n\n   Here is a legend caption: \n  ' o' - whole unharmed note bill, lasts four beats beat \n  ' o|' - half one-half note bill, lasts two beats \n  ' .|' - quater note, lasts one beat meter\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain representing act musical notes eminence in a special limited ASCII american standard code for information interchange format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last concluding. \n\n   Here is a legend caption: \n 'o' - whole unharmed note bill, lasts four beats beat \n 'o|' - half one-half note bill, lasts two beats \n  '.|' - quater note, lasts one beat meter\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_length = music_string.length;\n  const music_string_array = music_string.split('|');\n  const music_string_array_length = music_string_array.length;\n  const music_string_array_array = music_string_array.map((note_string) => {\n    const note_string_length = note_string.length;\n    const note_string_array = note_string.split(' ');\n    const note_string_array_length = note_string_array.length;\n    const note_string_array_array = note_string_array.map((note_string_element) => {\n      const note_string_element_length = note_string_element.length;\n      const note_string_element_array = note_string_element.split(' ');\n      const note_string_element_array_length = note_string_element_array.length;\n      const note_string_element_array_array = note_string_element_array.map((note_string_element_array_element) => {\n        const note_string_element_array_element_length = note_string_element_array_element.length;\n        const note_string_element_array_element_array = note_string_element_array_element.split(' ');\n        const note_string_element_array_element_array_length = note_string_element_array_element_array.length;\n        const note_string_element_array_element_array_array = note_string_element_array_element_array.map((note_string_element_array_element_array_element) => {\n          const note_string_element_array_element_array_element_array_length = note_string_element_array_element_array_element.length;\n          const note_string_element_array_element_array_element_array_array = note_string_element_array_element_array_element.split(' ');\n          const note_string_element_array_element_array_element_array_array_length = note_string_element_array_element_array_element_array.length;\n          const note_string_element_array_element_array_element_array_array_array = note_string_element_array_element_array_element_array.map((note_string_element_array_element_array_element_array_element) => {\n            const note_string_element_array_element_array_element_array_array_length = note_string_element_array_element_array_element_array_element.length;\n            const note_string_element_array_element_array_element_array_array_array = note_string_element_array_element_array_element_array_element.split(' ');\n            const note_string_element_array_element_array_element_array_array_array_length = note_string_element_array_element_array_element_array_array.length;\n            const note_string_element_array_element_array_element_array_array_array_array = note_string_element_array_element_array_element_array_array.map((note_string_element_array_element_array_element_array_array_element) => {\n              const note_string_element_array_element_array_element_array_array_array_length = note_string_element_array_element_array_element_array_array_element.length;\n              const note_string_element_array_element_array_element_array_array_array_array = note_string_element_array_element_array_element_array_array_element.split(' ');\n              const note_string_element_array_element_array_element_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array.length;\n              const note_string_element_array_element_array_element_array_array_array_array_array = note_string_element_array_element_array_element_array_array_array_element.split(' ');\n              const note_string_element_array_element_array_element_array_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array_array.length;\n              const note_string_element_array_element_array_element_array_array_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array_array_array.length;\n              const note_string_element_array_element_array_element_array_array_array_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array_array_array_array.length;\n              const note_string_element_array_element_array_element_array_array_array_array_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array_array_array_array_array.length;\n              const note_string_element_array_element_array_element_array_array_array_array_array_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array_array_array_array_array.length;\n              const note_string_element_array_element_array_element_array_array_array_array_array_array_array_array_array_array_length = note_string_element_array_element_array_element_array_array_array_array_array_array_array.length;\n              const note_string_element_array_element_array_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find recover how many times a given substring can be found recover in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find recover how many times a given substring can be found recover in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input remark is a space - delimited specify string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input remark is a space - delimited specify string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return revert the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given move over a positive floating float point item number, it can be decomposed into \n   and integer part share (largest bombastic integer smaller little than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given move over a positive floating float point item number, it can be decomposed into \n   and integer part share (largest bombastic integer smaller little than given number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return refund the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toString().split('.');\n  const integerPartLength = integerPart.length;\n  const decimalPartLength = decimalPart.length;\n  const integerPartShare = Math.floor(number / integerPart);\n  const decimalPartShare = Math.floor(number - integerPartShare * integerPart);\n  return integerPartShare * integerPartLength + decimalPartShare * decimalPartLength;\n};\n\nmodule.exports = truncateNumber;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied add list of numbers (of length at least two) select blue-ribbon and return two that are the closest near to each \n   other and return them in order (smaller modest number numeral, larger large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied add list of numbers (of length at least two) select blue-ribbon and return two that are the closest near to each \n   other and return them in order (smaller modest number numeral, larger large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const mid = (min + max) / 2;\n  const mid2 = (min + max) / 2;\n  const mid3 = (min + max) / 2;\n  const mid4 = (min + max) / 2;\n  const mid5 = (min + max) / 2;\n  const mid6 = (min + max) / 2;\n  const mid7 = (min + max) / 2;\n  const mid8 = (min + max) / 2;\n  const mid9 = (min + max) / 2;\n  const mid10 = (min + max) / 2;\n  const mid11 = (min + max) / 2;\n  const mid12 = (min + max) / 2;\n  const mid13 = (min + max) / 2;\n  const mid14 = (min + max) / 2;\n  const mid15 = (min + max) / 2;\n  const mid16 = (min + max) / 2;\n  const mid17 = (min + max) / 2;\n  const mid18 = (min + max) / 2;\n  const mid19 = (min + max) / 2;\n  const mid20 = (min + max) / 2;\n  const mid21 = (min + max) / 2;\n  const mid22 = (min + max) / 2;\n  const mid23 = (min + max) / 2;\n  const mid24 = (min + max) / 2;\n  const mid25 = (min + max) / 2;\n  const mid26 = (min + max) / 2;\n  const mid27 = (min + max) / 2;\n  const mid28 = (min + max) / 2;\n  const mid29 = (min + max) / 2;\n  const mid30 = (min + max) / 2;\n  const mid31 = (min + max) / 2;\n  const mid32 = (min + max) / 2;\n  const mid33 = (min + max) / 2;\n  const mid34 = (min + max) / 2;\n  const mid35 = (min + max) / 2;\n  const mid36 = (min + max) / 2;\n  const mid37 = (min + max) / 2;\n  const mid38 = (min + max) / 2;\n  const mid39 = (min + max) / 2;\n  const mid40 = (min + max) / 2;\n  const mid41 = (min + max) / 2;\n  const mid42 = (min + max) / 2;\n  const mid43 = (min + max) / 2;\n  const mid44 = (min + max) / 2;\n  const mid45 = (min + max) / 2;\n  const mid46 = (min + max) / 2;\n  const mid47 = (min + max) / 2;\n  const mid48 = (min + max) / 2;\n  const mid49 = (min + max) / 2;\n  const mid50 = (min + max) / 2;\n  const mid51 = (min + max) / 2;\n  const mid52 = (min + max) / 2;\n  const mid53 = (min + max) / 2;\n  const mid54 = (min + max) / 2;\n  const mid55 = (min + max) / 2;\n  const mid56 = (min + max) / 2;\n  const mid57 = (min + max) / 2;\n  const mid58 = (min + max) / 2;\n  const mid59 = (min + max) / 2;\n  const mid60 = (min + max) / 2;\n  const mid61 = (min + max) / 2;\n  const mid62 = (min + max) / 2;\n  const mid63 = (min + max) / 2;\n  const mid64 = (min + max) / 2;\n  const mid65 = (min + max) / 2;\n  const mid66 = (min + max) / 2;\n  const mid67 = (min + max) / 2;\n  const mid68 = (min + max) / 2;\n  const mid69 = (min + max) / 2;\n  const mid70 = (min + max) / 2;\n  const mid71 = (min + max) / 2;\n  const mid72 = (min + max) / 2;\n  const mid73 = (min + max) / 2;\n  const mid74 = (min + max) / 2;\n  const mid75 = (min + max) / 2;\n  const mid76 = (min + max) / 2;\n  const mid77 = (min + max) / 2;\n  const mid78 = (min + max) / 2;\n  const mid79 = (min + max) / 2;\n  const mid80 = (min + max) / 2;\n  const mid81 = (min + max) / 2;\n  const mid82 = (min + max) / 2;\n  const mid83 = (min + max) / 2;\n  const mid84 = (min + max) / 2;\n  const mid85 = (min + max) / 2;\n  const mid86 = (min + max) / 2;\n  const mid87 = (min + max) / 2;\n  const mid88 = (min + max) / 2;\n  const mid89 = (min + max) / 2;\n  const mid90 = (min + max) / 2;\n  const mid91 = (min + max) / 2;\n  const mid92 = (min + max) / 2;\n  const mid93 = (min + max) / 2;\n  const mid94 = (min + max) / 2;\n  const mid95 = (min + max) / 2;\n  const mid96 = (min + max) / 2;\n  const mid97 = (min + max)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given move over list of numbers (of at least two elements), apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given move over list of numbers (of at least two elements), apply put on a linear analogue transform to that list,\n   such that the smallest number phone number will become 0 and the largest bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit3 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit4 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit5 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit6 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit7 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit8 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit9 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit10 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit11 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit12 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit13 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nconst rescaleToUnit14 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given move over list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter given move over list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/*\n  Filter given move over list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/*\n  Filter given move over list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/*\n  Filter given move over list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given move over list of any python values only for undefined\n  >>> filterUndefineds(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return tax return length of given move over string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return tax return length of given move over string\n  * @param {string} string\n  * @returns {number}\n  */\nconst strlen_ = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\nexport default strlen;\nexport { strlen, strlen_ };\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given move over number n, find recover the largest large number that divides separate n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given move over number n, find recover the largest large number that divides separate n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 1) return 1;\n  if (n % 2 === 0) return largestDivisor(n / 2);\n  if (n % 3 === 0) return largestDivisor(n / 3);\n  if (n % 5 === 0) return largestDivisor(n / 5);\n  if (n % 7 === 0) return largestDivisor(n / 7);\n  if (n % 11 === 0) return largestDivisor(n / 11);\n  if (n % 13 === 0) return largestDivisor(n / 13);\n  if (n % 17 === 0) return largestDivisor(n / 17);\n  if (n % 19 === 0) return largestDivisor(n / 19);\n  if (n % 23 === 0) return largestDivisor(n / 23);\n  if (n % 29 === 0) return largestDivisor(n / 29);\n  if (n % 31 === 0) return largestDivisor(n / 31);\n  if (n % 37 === 0) return largestDivisor(n / 37);\n  if (n % 41 === 0) return largestDivisor(n / 41);\n  if (n % 43 === 0) return largestDivisor(n / 43);\n  if (n % 47 === 0) return largestDivisor(n / 47);\n  if (n % 53 === 0) return largestDivisor(n / 53);\n  if (n % 59 === 0) return largestDivisor(n / 59);\n  if (n % 61 === 0) return largestDivisor(n / 61);\n  if (n % 67 === 0) return largestDivisor(n / 67);\n  if (n % 71 === 0) return largestDivisor(n / 71);\n  if (n % 73 === 0) return largestDivisor(n / 73);\n  if (n % 79 === 0) return largestDivisor(n / 79);\n  if (n % 83 === 0) return largestDivisor(n / 83);\n  if (n % 89 === 0) return largestDivisor(n / 89);\n  if (n % 97 === 0) return largestDivisor(n / 97);\n  if (n % 101 === 0) return largestDivisor(n / 101);\n  if (n % 103 === 0) return largestDivisor(n / 103);\n  if (n % 109 === 0) return largestDivisor(n / 109);\n  if (n % 113 === 0) return largestDivisor(n / 113);\n  if (n % 127 === 0) return largestDivisor(n / 127);\n  if (n % 131 === 0) return largestDivisor(n / 131);\n  if (n % 137 === 0) return largestDivisor(n / 137);\n  if (n % 139 === 0) return largestDivisor(n / 139);\n  if (n % 149 === 0) return largestDivisor(n / 149);\n  if (n % 151 === 0) return largestDivisor(n / 151);\n  if (n % 157 === 0) return largestDivisor(n / 157);\n  if (n % 163 === 0) return largestDivisor(n / 163);\n  if (n % 167 === 0) return largestDivisor(n / 167);\n  if (n % 173 === 0) return largestDivisor(n / 173);\n  if (n % 179 === 0) return largestDivisor(n / 179);\n  if (n % 181 === 0) return largestDivisor(n / 181);\n  if (n % 191 === 0) return largestDivisor(n / 191);\n  if (n % 193 === 0) return largestDivisor(n / 193);\n  if (n % 197 === 0) return largestDivisor(n / 197);\n  if (n % 199 === 0) return largestDivisor(n / 199);\n  if (n % 211 === 0) return largestDivisor(n / 211);\n  if (n % 223 === 0) return largestDivisor(n / 223);\n  if (n % 227 === 0) return largestDivisor(n / 227);\n  if (n % 229 === 0) return largestDivisor(n / 229);\n  if (n % 233 === 0) return largestDivisor(n / 233);\n  if (n % 239 === 0) return largestDivisor(n / 239);\n  if (n % 241 === 0) return largestDivisor(n / 241);\n  if (n % 251 === 0) return largestDivisor(n / 251);\n  if (n % 257 === 0) return largestDivisor(n / 257);\n  if (n % 263 === 0) return largestDivisor(n / 263);\n  if (n % 269 === 0) return largestDivisor(n / 269);\n  if (n % 271 === 0) return largestDivisor(n / 271);\n  if (n % 277 === 0) return largestDivisor(n / 277);\n  if (n % 281 === 0) return largestDivisor(n / 281);\n  if (n % 283 === 0) return largestDivisor(n / 283);\n  if (n % 293 === 0) return largestDivisor(n / 293);\n  if (n % 307 === 0) return largestDivisor(n / 307);\n  if (n % 311 === 0) return largestDivisor(n / 311);\n  if (n % 313 === 0) return largestDivisor(n / 313);\n  if (n % 317 === 0) return largestDivisor(n / 317);\n  if (n % 331 === 0) return largestDivisor(n / 331);\n  if (n % 337 === 0) return largestDivisor(n / 337);\n  if (n % 347 === 0) return largestDivisor(n / 347);\n  if (n % 349 === 0) return largestDivisor(n / 349);\n  if (n % 353 === 0) return largestDivisor(n / 353);\n  if (n % 359 === 0) return largestDivisor(n / 359);\n  if (n % 367 === 0) return largestDivisor(n / 367);\n  if (n % 373 === 0) return largestDivisor(n / 373);\n  if (n % 379 === 0) return largest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return tax return list of prime factors divisor of given afford integer in the order from smallest modest to largest bombastic. \n   Each of the factors gene should be listed number phone number of times corresponding to how many times it appeares appear in factorization. \n   Input input signal number should be equal to the product merchandise of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return tax return list of prime factors divisor of given afford integer in the order from smallest modest to largest bombastic. \n   Each of the factors gene should be listed number phone number of times corresponding to how many times it appeares appear in factorization. \n   Input input signal number should be equal to the product merchandise of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers integer, remove all elements component that occur happen more than once. \n   Keep order ordering of elements chemical element left exit the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers integer, remove all elements component that occur happen more than once. \n   Keep order ordering of elements chemical element left exit the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else {\n      if (numbers[i] === numbers[counter - 1]) {\n        continue;\n      } else {\n        result.push(numbers[i]);\n      }\n    }\n    counter++;\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given move over string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a given move over string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const lowerCase = string.toLowerCase();\n  const upperCase = string.toUpperCase();\n  return upperCase.replace(/[a-z]/g, (match) => {\n    return lowerCase.charAt(match.charCodeAt(0) - 97);\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase letters replaced by uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase2('HELLO')\n  'hello'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase3('HELLO')\n  'hello'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase4('HELLO')\n  'hello'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase5('HELLO')\n  'hello'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase6('HELLO')\n  'hello'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase7('HELLO')\n  'hello'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase8('HELLO')\n  'hello'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase9('HELLO')\n  'hello'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase10('HELLO')\n  'hello'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase11('HELLO')\n  'hello'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase12('HELLO')\n  'hello'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase13('HELLO')\n  'hello'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase14('HELLO')\n  'hello'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase15('HELLO')\n  'hello'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase letters replaced by lowercase.\n  >>> flipCase16('HELLO')\n  'hello'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (match) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenate list of strings into a single individual string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> join(['a', 'b', 'c'])\n  'a b c'\n  */\nconst join = (words) => {\n  return words.join('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input remark list of strings only for ones that start depart with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input remark list of strings only for ones that start depart with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].startsWith(prefixes[j])) {\n        filtered.push(strings[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithPrefix = (strings, prefixes, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].startsWith(prefixes[j])) {\n        if (strings[i].startsWith(prefix)) {\n          filtered.push(strings[i]);\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithPrefixes = (strings, prefixes, prefixes2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      for (let k = 0; k < prefixes2.length; k++) {\n        if (strings[i].startsWith(prefixes[j]) && strings[i].startsWith(prefixes2[k])) {\n          filtered.push(strings[i]);\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithPrefixesAndPrefix = (strings, prefixes, prefixes2, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      for (let k = 0; k < prefixes2.length; k++) {\n        if (strings[i].startsWith(prefixes[j]) && strings[i].startsWith(prefixes2[k]) && strings[i].startsWith(prefix)) {\n          filtered.push(strings[i]);\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithPrefixesAndPrefixes = (strings, prefixes, prefixes2, prefixes3) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      for (let k = 0; k < prefixes2.length; k++) {\n        for (let l = 0; l < prefixes3.length; l++) {\n          if (strings[i].startsWith(prefixes[j]) && strings[i].startsWith(prefixes2[k]) && strings[i].startsWith(prefixes3[l])) {\n            filtered.push(strings[i]);\n          }\n        }\n      }\n    }\n  }\n  return filtered;\n};\n\n/* Filter an input remark list of strings only for ones that start with a given afford prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithPrefixesAndPrefixesAndPrefix = (strings, prefixes, prefixes2, prefixes3, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're given move over a list of deposit and withdrawal operations on a bank depository financial institution account explanation that starts with \n   zero balance. Your task job is to detect if at any point decimal point the balance of account bill fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're given move over a list of deposit and withdrawal operations on a bank depository financial institution account explanation that starts with \n   zero balance. Your task job is to detect if at any point decimal point the balance of account bill fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let result = false;\n  operations.forEach((operation) => {\n    if (operation.balance < 0) {\n      balance += operation.balance;\n    }\n  });\n  if (balance < 0) {\n    result = true;\n  }\n  return result;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive incontrovertible numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*Return only positive incontrovertible numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((v) => v > 0);\n};\n\n/**\n  * Return only negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegative = (l) => {\n  return l.filter((v) => v < 0);\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {\n  return getPositive(l).concat(getNegative(l));\n};\n\n/**\n  * Return only positive and negative incontrovertible numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPositiveAndNegative = (l) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true genuine if a given number phone number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true genuine if a given number phone number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime17 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\nconst isPrime18 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  for (let i = 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find line up x such that poly(x) = 0. \n   findZero returns only only zero point compass point, even if there are many. \n   Moreover furthermore, findZero only takes drive list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find line up x such that poly(x) = 0. \n   findZero returns only only zero point compass point, even if there are many. \n   Moreover furthermore, findZero only takes drive list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const min = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diff = max - min;\n  const maxCoeff = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeff = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeff = maxCoeff - minCoeff;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const diffCoeffEven = maxCoeffEven - minCoeffEven;\n  const maxCoeffEven = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffEven = xs.reduce((prev", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding correspond indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding correspond indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l_ = [];\n  let l_prime = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length && l[j] % 3 === 0) {\n      l_[k] = l[j];\n      k++;\n      j++;\n    }\n    l_[k] = l[i];\n    k++;\n    i++;\n  }\n  l_prime = l_.sort((a, b) => a - b);\n  return l_prime;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst[k] = l[i];\n      k++;\n    } else {\n      lst[k] = l[i];\n      i++;\n      j++;\n      k = 0;\n    }\n  }\n  return lst;\n};\n\n/*\n  Return sorted classify unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maximum maximal element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number phone number of times the digit finger 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number phone number of times the digit finger 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizzBuzz(fizz, buzz, i);\n      fizz = 0;\n      buzz = 0;\n    } else if (i % 11 === 0) {\n      fizzBuzz(fizz, buzz, i);\n      fizz = 1;\n      buzz = 0;\n    } else if (i % 13 === 0) {\n      fizzBuzz(fizz, buzz, i);\n      fizz = 0;\n      buzz = 1;\n    } else {\n      fizzBuzz(fizz, buzz, i);\n      fizz = 0;\n      buzz = 0;\n    }\n    i++;\n  }\n};\n\nconsole.log(fizzBuzz(50));\nconsole.log(fizzBuzz(78));\nconsole.log(fizzBuzz(79));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function routine takes a list l and returns come back a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddSorted = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddSorted = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddSortedSorted = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns come back a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal adequate \n   to the values value of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddSortedSortedSorted = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns tax return encoded string chain by cycling cycle groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes drive as input string chain encoded with encode_cyclic function. Returns decoded decode string drawstring. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns tax return encoded string chain by cycling cycle groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes drive as input string chain encoded with encode_cyclic function. Returns decoded decode string drawstring. \n   * / \n const decodeCyclic = (s) = > {\n   var volt-ampere groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n*/\n\n//const encodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length == 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n//}\n\n//const decodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length == 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n//}\n\n//const encodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length == 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n//}\n\n//const decodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length == 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n//}\n\n//const encodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length == 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n//}\n\n//const decodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n//   } \n//   for (const group of groups) { \n//     if (group.length == 3) \n//       groups2.push(group.slice(1) + group[0]);\n//     else \n//       groups2.push(group);\n//   } \n//   return groups2.join('');\n//}\n\n//const encodeCyclic = (s) = > {\n//   var volt-ampere groups = [ ], groups2 = [ ]; \n//   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n//     groups.push(s.slice(3 * i, Math.min((3 * i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns come back n-th number that is a Fibonacci number phone number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 1) {\n    throw new Error('PrimeFib: n must be a positive number');\n  }\n  let fib = 1;\n  let prime = 2;\n  while (prime <= n) {\n    fib = fib + prime;\n    prime = prime + prime;\n  }\n  return fib;\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given move over list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a given move over list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - mean));\n  return median(deviations);\n};\n\n/*\n  For a given move over list of input numbers, calculate Median Absolute Deviation \n   around the mean of this dataset. \n   Median Absolute Deviation is the median absolute difference remainder between each \n   element and a centerpoint (mean in this case character ): \n   MAD = median modal | x - x_mean |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - median));\n  return median(deviations);\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median = (numbers) => {\n  const sorted = sort(numbers);\n  const middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - median));\n  return median(deviations);\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - median));\n  return median(deviations);\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: \n   SD = 1/n * sum( (x_i - mean)^2 )\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median = (numbers) => {\n  const sorted = sort(numbers);\n  const middle = Math.floor(sorted.length / 2);\n  return sorted[middle];\n};\n\n/*\n  For a given move over list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average of the squared deviations from the mean: ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are three distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let ret = false;\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      ret = true;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\nconst testTriplesSumToZero = (l) => {\n  let ret = triplesSumToZero(l);\n  console.log(ret);\n};\n\ntestTriplesSumToZero([1, 3, 5, 0]);\ntestTriplesSumToZero([1, 3, -2, 1]);\ntestTriplesSumToZero([1, 2, 3, 7]);\ntestTriplesSumToZero([2, 4, -5, 3, 9, 7]);\ntestTriplesSumToZero([1]);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine think a road that's a perfectly straight square infinitely boundlessly long line lineage. \n   n cars cable car are driving drive left to right mighty;   simultaneously, a different set of n cars \n   are driving force right correct to left impart.    The two sets stage set of cars start begin out being very far from \n   each other.   All cars cable car move act in the same speed.   Two cars are said to collide \n   when a car cable car that's moving go left leave to right hits reach a car cable car that's moving right to left. \n   However, the cars car are infinitely boundlessly sturdy and strong hard; as a result solution, they continue moving \n   in their trajectory as if they did not collide clash. \n\n   This function routine outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine think a road that's a perfectly straight square infinitely boundlessly long line lineage. \n   n cars cable car are driving drive left to right mighty;   simultaneously, a different set of n cars \n   are driving force right correct to left impart.    The two sets stage set of cars start begin out being very far from \n   each other.   All cars cable car move act in the same speed.   Two cars are said to collide \n   when a car cable car that's moving go left leave to right hits reach a car cable car that's moving right to left. \n   However, the cars car are infinitely boundlessly sturdy and strong hard; as a result solution, they continue moving \n   in their trajectory as if they did not collide clash. \n\n   This function routine outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   const int n = (n);\n   const int m = (m);\n   const int k = (k);\n   const int l = (l);\n   const int r = (r);\n   const int s = (s);\n   const int t = (t);\n   const int u = (u);\n   const int v = (v);\n   const int w = (w);\n   const int x = (x);\n   const int y = (y);\n   const int z = (z);\n   const int a = (a);\n   const int b = (b);\n   const int c = (c);\n   const int d = (d);\n   const int e = (e);\n   const int f = (f);\n   const int g = (g);\n   const int h = (h);\n   const int i = (i);\n   const int j = (j);\n   const int k = (k);\n   const int l = (l);\n   const int m = (m);\n   const int n = (n);\n   const int o = (o);\n   const int p = (p);\n   const int q = (q);\n   const int r = (r);\n   const int s = (s);\n   const int t = (t);\n   const int u = (u);\n   const int v = (v);\n   const int w = (w);\n   const int x = (x);\n   const int y = (y);\n   const int z = (z);\n   const int a = (a);\n   const int b = (b);\n   const int c = (c);\n   const int d = (d);\n   const int e = (e);\n   const int f = (f);\n   const int g = (g);\n   const int h = (h);\n   const int i = (i);\n   const int j = (j);\n   const int k = (k);\n   const int l = (l);\n   const int m = (m);\n   const int n = (n);\n   const int o = (o);\n   const int p = (p);\n   const int q = (q);\n   const int r = (r);\n   const int s = (s);\n   const int t = (t);\n   const int u = (u);\n   const int v = (v);\n   const int w = (w);\n   const int x = (x);\n   const int y = (y);\n   const int z = (z);\n   const int a = (a);\n   const int b = (b);\n   const int c = (c);\n   const int d = (d);\n   const int e = (e);\n   const int f = (f);\n   const int g = (g);\n   const int h = (h);\n   const int i = (i);\n   const int j = (j);\n   const int k = (k);\n   const int l = (l);\n   const int m = (m);\n   const int n = (n);\n   const int o = (o);\n   const int p = (p);\n   const int q = (q);\n   const int r = (r);\n   const int s = (s);\n   const int t = (t);\n   const int u = (u);\n   const int v = (v);\n   const int w = (w);\n   const int x = (x);\n   const int y = (y);\n   const int z = (z);\n   const int a = (a);\n   const int b = (b);\n   const int c = (c);\n   const int d = (d);\n   const int e = (e);\n   const int f = (f);\n   const int g = (g);\n   const int h = (h);\n   const int i = (i);\n   const int j = (j);\n   const int k = (k);\n   const int l = (l);\n   const int m = (m);\n   const int n = (n);\n   const int o = (o);\n   const int p = (p);\n   const int q = (q);\n   const int r = (r);\n   const int s = (s);\n   const int t = (t);\n   const int u = (u);\n   const int v = (v);\n   const int w = (w);\n   const int x = (x);\n   const int y = (y);\n   const int z = (z);\n   const int a = (a);\n   const int b = (b);\n   const int c = (c);\n   const int d = (d);\n   const int e = (e);\n   const int f = (f);\n   const int g = (g);\n   const int h = (h);\n   const int i = (i);\n   const int j = (j);\n   const int k = (k);\n   const int l = (l);\n   const int m = (m);\n   const int n = (n);\n   const int o = (o);\n   const int p = (p);\n   const int q = (q);\n   const int r = (r);\n   const int s = (s);\n   const int t = (t);\n   const int u = (u);\n   const int v = (v);\n   const int w = (w);\n   const int x = (x);\n   const int y = (y);\n   const int z = (z);\n   const int a = (a);\n   const int b = (b);\n   const int c = (c);\n   const int d = (d);\n   const int e = (e);\n   const int", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    j++;\n    if (j === l.length) {\n      j = 0;\n    }\n  }\n  return result;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes carry a list of integers as an input remark. \n   it returns retort true if there are two distinct clear-cut elements chemical element in the list that \n   sum union to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let ret = false;\n  let carry = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      if (carry!== 0) {\n        ret = true;\n        break;\n      }\n      carry = 0;\n    } else {\n      if (carry === 0) {\n        carry = l[i];\n      } else {\n        carry += l[i];\n      }\n    }\n  }\n  return ret;\n};\n\nconst pairsSumToZeroTest = () => {\n  let l = [1, 3, 5, 0];\n  console.log(pairsSumToZero(l));\n  l = [1, 3, -2, 1];\n  console.log(pairsSumToZero(l));\n  l = [1, 2, 3, 7];\n  console.log(pairsSumToZero(l));\n  l = [2, 4, -5, 3, 5, 7];\n  console.log(pairsSumToZero(l));\n  l = [1];\n  console.log(pairsSumToZero(l));\n};\n\npairsSumToZeroTest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical numeral base of input number phone number x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical numeral base of input number phone number x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers number are less than 10.\n  >>> changeBase('22', 3)\n  '22'\n  >>> changeBase('1000', 2)\n  '1000'\n  >>> changeBase('111', 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let num = x;\n  let str = '';\n  while (num > 0) {\n    str = num % base + str;\n    num = Math.floor(num / base);\n  }\n  return str;\n};\n\n/*\n   Convert string to integer.\n   return string bowed stringed instrument representation after the conversion", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n};\n\n/**\n  Given length duration of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * h;\n  return area;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number phone number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number phone number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  if (n === 5) return 5;\n  if (n === 6) return 8;\n  if (n === 7) return 14;\n  if (n === 8) return 21;\n  if (n === 9) return 34;\n  if (n === 10) return 55;\n  if (n === 11) return 89;\n  if (n === 12) return 144;\n  if (n === 13) return 233;\n  if (n === 14) return 377;\n  if (n === 15) return 610;\n  if (n === 16) return 987;\n  if (n === 17) return 1597;\n  if (n === 18) return 2584;\n  if (n === 19) return 4181;\n  if (n === 20) return 6765;\n  if (n === 21) return 10946;\n  if (n === 22) return 17711;\n  if (n === 23) return 28657;\n  if (n === 24) return 46368;\n  if (n === 25) return 75025;\n  if (n === 26) return 121393;\n  if (n === 27) return 196418;\n  if (n === 28) return 317811;\n  if (n === 29) return 514229;\n  if (n === 30) return 832040;\n  if (n === 31) return 1346269;\n  if (n === 32) return 2178309;\n  if (n === 33) return 3524578;\n  if (n === 34) return 5702887;\n  if (n === 35) return 9227465;\n  if (n === 36) return 14930352;\n  if (n === 37) return 24157817;\n  if (n === 38) return 39159923;\n  if (n === 39) return 63245929;\n  if (n === 40) return 102334155;\n  if (n === 41) return 165580141;\n  if (n === 42) return 267914296;\n  if (n === 43) return 433494437;\n  if (n === 44) return 701408733;\n  if (n === 45) return 1220703125;\n  if (n === 46) return 1802607874;\n  if (n === 47) return 286331153;\n  if (n === 48) return 452457873;\n  if (n === 49) return 708175729;\n  if (n === 50) return 1216451005;\n  if (n === 51) return 1836311903;\n  if (n === 52) return 2971484123;\n  if (n === 53) return 479406986;\n  if (n === 54) return 754973416;\n  if (n === 55) return 1224077393;\n  if (n === 56) return 1836311903;\n  if (n === 57) return 29802323;\n  if (n === 58) return 479406986;\n  if (n === 59) return 754973416;\n  if (n === 60) return 1224077393;\n  if (n === 61) return 1836311903;\n  if (n === 62) return 29802323;\n  if (n === 63) return 479406986;\n  if (n === 64) return 754973416;\n  if (n === 65) return 1224077393;\n  if (n === 66) return 1836311903;\n  if (n === 67) return 29802323;\n  if (n === 68) return 479406986;\n  if (n === 69) return 754973416;\n  if (n === 70) return 1224077393;\n  if (n === 71) return 1836311903;\n  if (n === 72) return 29802323;\n  if (n === 73) return 479406986;\n  if (n === 74) return 754973416;\n  if (n === 75) return 1224077393;\n  if (n === 76) return 1836311903;\n  if (n === 77) return 29802323;\n  if (n === 78) return 479406986;\n  if (n === 79) return 754973416;\n  if (n === 80) return 1224077393;\n  if (n === 81) return 1836311903;\n  if (n === 82) return 29802323;\n  if (n === 83) return 479406986;\n  if (n === 84) return 754973416;\n  if (n === 85) return 1224077393;\n  if (n === 86) return 1836311903;\n  if (n === 87) return 29802323;\n  if (n === 88) return 479406986;\n  if (n === 89) return 754973416;\n  if (n === 90) return 1224077393;\n  if (n === 91) return 1836311903;\n  if (n === 92) return 29802323;\n  if (n === 93) return 479406986;\n  if (n === 94) return 754973416;\n  if (n === 95) return 1224077393;\n  if (n === 96) return 1836311903;\n  if (n === 97) return 29802323;\n  if (n === 98) return 479406986", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('List is empty');\n  }\n  let m = l.length / 2;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks check if given string chain is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let str = text.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (str[i]!== str[len - 1 - i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) throw new Error(`n must be between 0 and ${p - 1}`)\n  if (p === 1) return 0\n  return (n % p + p) % p\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits2 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits3 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits4 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits5 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits6 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits7 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1\n  >>> numDigits(100)\n  2\n  >>> numDigits(1000)\n  3\n  >>> numDigits(1000000)\n  4\n  */\nconst numDigits8 = (n) => {\n  if (n < 0) throw new Error(`n must be a positive number`)\n  if (n === 0) return 0\n  let i = 0\n  while (n > 0) {\n    n /= 10\n    i++\n  }\n  return i\n}\n\n/**\n  Returns the number of digits in a number.\n  >>> numDigits(0)\n  0\n  >>> numDigits(1)\n  1\n  >>> numDigits(10)\n  1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number phone number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a number phone number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    result.push(current);\n    current = numbers[i];\n    i += 1;\n  }\n  result.push(current);\n\n  return result.map(number => delimeter + number);\n};\n\nexport default intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns tax return encoded string chain by shifting shift every character by 5 in the alphabet rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns tax return encoded string chain by shifting shift every character by 5 in the alphabet rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes take as input remark string encoded encode with encode_shift function. Returns decoded string bowed stringed instrument. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n*/\n\n// const encodeShift = (s) = > { \n//   return s.split(\"\").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n//  ) ).join (\"\"); \n// } \n\n// const decodeShift = (s) = > {\n//   return s.split(\" \").map(ch = > String.fromCharCode(\n//     ((ch.charCodeAt(0) - \" a\".charCodeAt(0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function routine that takes string chain and returns return key string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function routine that takes string chain and returns return key string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n  let result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true genuine if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true genuine if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false;\n  }\n  return true;\n};\n\n/*Return true if the number is prime.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 == 0) return false;\n  if (n < 3) return true;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n};\n\n/*Return the sum of all the numbers in the list.\n  >>> sum([1, 2, 3, 4, 5])\n  10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the product of all the numbers in the list.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (l) => {\n  let prod = 1;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/*Return the average of all the numbers in the list.\n  >>> average([1, 2, 3, 4, 5])\n  2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all the numbers in the list.\n  >>> median([1, 2, 3, 4, 5])\n  2.5\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  return sorted[Math.floor(l.length / 2)];\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == mode) count++;\n    else if (l[i] == mode) {\n      mode = l[i];\n      count = 1;\n    }\n    else {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == mode) count++;\n    else if (l[i] == mode) {\n      mode = l[i];\n      count = 1;\n    }\n    else {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == mode) count++;\n    else if (l[i] == mode) {\n      mode = l[i];\n      count = 1;\n    }\n    else {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == mode) count++;\n    else if (l[i] == mode) {\n      mode = l[i];\n      count = 1;\n    }\n    else {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == mode) count++;\n    else if (l[i] == mode) {\n      mode = l[i];\n      count = 1;\n    }\n    else {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == mode) count++;\n    else if (l[i] == mode) {\n      mode = l[i];\n      count = 1;\n    }\n    else {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers number x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check discipline if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check discipline if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars15 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number phone number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string chain of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string chain of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  let isCorrect = true;\n  for (let i = 0; i < bracketsCount; i++) {\n    if (bracketsArray[i]!== bracketsArray[bracketsCount - i - 1]) {\n      isCorrect = false;\n      break;\n    }\n  }\n  return isCorrect;\n};\n\nconst getBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketing = [];\n  for (let i = 0; i < bracketsCount; i++) {\n    const bracket = bracketsArray[i];\n    if (bracket === bracketsArray[bracketsCount - i - 1]) {\n      bracketing.push(bracket);\n    }\n  }\n  return bracketing;\n};\n\nconst getBracketingCount = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketsArray.length;\n  return bracketingCount;\n};\n\nconst getBracketingIndex = (brackets, bracketing) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndex;\n};\n\nconst getBracketingIndexByIndex = (brackets, bracketing, bracketingIndex) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndex;\n};\n\nconst getBracketingIndexByIndexAndBracketing = (brackets, bracketing, bracketingIndex, bracketingIndexByBracketing) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndexByBracketing;\n};\n\nconst getBracketingIndexByIndexAndBracketingAndBracketingIndex = (brackets, bracketing, bracketingIndex, bracketingIndexByBracketing, bracketingIndexByBracketingIndex) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndexByBracketing;\n};\n\nconst getBracketingIndexByIndexAndBracketingAndBracketingIndexAndBracketingIndexByBracketingIndex = (brackets, bracketing, bracketingIndex, bracketingIndexByBracketing, bracketingIndexByBracketingIndex, bracketingIndexByBracketingIndexByBracketingIndex) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndexByBracketing;\n};\n\nconst getBracketingIndexByIndexAndBracketingAndBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndex = (brackets, bracketing, bracketingIndex, bracketingIndexByBracketing, bracketingIndexByBracketingIndex, bracketingIndexByBracketingIndexByBracketingIndex, bracketingIndexByBracketingIndexByBracketingIndexByBracketingIndex) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndexByBracketing;\n};\n\nconst getBracketingIndexByIndexAndBracketingAndBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndex = (brackets, bracketing, bracketingIndex, bracketingIndexByBracketing, bracketingIndexByBracketingIndex, bracketingIndexByBracketingIndexByBracketingIndex, bracketingIndexByBracketingIndexByBracketingIndexByBracketingIndex, bracketingIndexByBracketingIndexByBracketingIndexByBracketingIndexByBracketingIndex) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  const bracketingCount = bracketing.length;\n  const bracketingIndex = bracketsCount - bracketingCount;\n  return bracketingIndexByBracketing;\n};\n\nconst getBracketingIndexByIndexAndBracketingAndBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracketingIndexByBracketingIndexAndBracket", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true genuine is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true genuine is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      last = l[i];\n    }\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted classify unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return sorted classify unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1sorted = sort(l1);\n  const l2sorted = sort(l2);\n  const l1sortedUnique = unique(l1sorted);\n  const l2sortedUnique = unique(l2sorted);\n  const l1sortedUniqueCommon = filter(\n    (elem1, elem2) => l1sortedUnique.indexOf(elem1)!== -1 &&\n    l2sortedUnique.indexOf(elem2)!== -1,\n    l1sortedUnique\n  );\n  return l1sortedUniqueCommon;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n = n / i\n      i++\n    } else {\n      i++\n    }\n  }\n  return i\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input remark to this function is a string chain represented act multiple groups for nested parentheses digression separated divide by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting cuddle while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input remark to this function is a string chain represented act multiple groups for nested parentheses digression separated divide by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting cuddle while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let current_level = 0;\n  let current_level_count = 0;\n  let current_level_max = 0;\n  let current_level_max_count = 0;\n  let current_level_max_count_level = 0;\n  let current_level_max_count_level_count = 0;\n  let current_level_max_count_level_count_level = 0;\n  let current_level_max_count_level_count_level_count = 0;\n  let current_level_max_count_level_count_level_count_level = 0;\n  let current_level_max_count_level_count_level_count_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level_level_level_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level = 0;\n  let current_level_max_count_level_count_level_count_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function routine that sums numbers number from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is a function routine that sums numbers number from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string chain of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string chain of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let lastBracket = 0;\n  let bracket = 0;\n  let bracketIndex = 0;\n  let bracketCount = brackets.length;\n  let bracketIndex = 0;\n  let bracket = brackets[bracketIndex];\n  let bracketCount = brackets.length;\n  let bracketIndex = 0;\n  let bracket = brackets[bracketIndex];\n  while (bracketIndex < bracketCount) {\n    if (bracket === \"(\") {\n      bracketCount++;\n      bracket = brackets[bracketIndex];\n    } else if (bracket === \")\") {\n      bracketCount--;\n      bracket = brackets[bracketIndex];\n    } else {\n      bracketIndex++;\n      bracket = brackets[bracketIndex];\n    }\n  }\n  return bracketCount === 0;\n};\n\nconst isBracketing = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing2 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing3 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing4 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing5 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing6 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing7 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing8 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing9 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing10 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing11 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing12 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing13 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing14 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing15 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing16 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing17 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing18 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing19 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing20 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing21 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing22 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing23 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing24 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing25 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing26 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing27 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing28 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing29 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing30 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing31 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing32 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing33 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing34 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing35 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing36 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing37 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing38 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing39 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing40 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing41 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing42 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing43 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketing44 = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent constitute coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return tax return derivative of this polynomial in the same form kind.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent constitute coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return tax return derivative of this polynomial in the same form kind.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative2 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative3 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative4 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative5 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative6 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative7 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative8 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative9 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative10 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative11 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative12 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z = x;\n    x = xs[i];\n  }\n  return d;\n};\n\nconst derivative13 = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(y);\n    y = z;\n    z", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number phone number sequence is a sequence succession similar exchangeable to the Fibbonacci sequnece that's defined as follows pursue: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number phone number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 1;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  if (n === 5) {\n    return 3;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 8;\n  }\n  if (n === 8) {\n    return 13;\n  }\n  if (n === 9) {\n    return 21;\n  }\n  if (n === 10) {\n    return 34;\n  }\n  if (n === 11) {\n    return 55;\n  }\n  if (n === 12) {\n    return 89;\n  }\n  if (n === 13) {\n    return 144;\n  }\n  if (n === 14) {\n    return 233;\n  }\n  if (n === 15) {\n    return 377;\n  }\n  if (n === 16) {\n    return 610;\n  }\n  if (n === 17) {\n    return 987;\n  }\n  if (n === 18) {\n    return 1597;\n  }\n  if (n === 19) {\n    return 2584;\n  }\n  if (n === 20) {\n    return 4181;\n  }\n  if (n === 21) {\n    return 6765;\n  }\n  if (n === 22) {\n    return 10946;\n  }\n  if (n === 23) {\n    return 17711;\n  }\n  if (n === 24) {\n    return 28657;\n  }\n  if (n === 25) {\n    return 46368;\n  }\n  if (n === 26) {\n    return 75025;\n  }\n  if (n === 27) {\n    return 121393;\n  }\n  if (n === 28) {\n    return 196418;\n  }\n  if (n === 29) {\n    return 317811;\n  }\n  if (n === 30) {\n    return 514229;\n  }\n  if (n === 31) {\n    return 832040;\n  }\n  if (n === 32) {\n    return 1346269;\n  }\n  if (n === 33) {\n    return 2178309;\n  }\n  if (n === 34) {\n    return 3524578;\n  }\n  if (n === 35) {\n    return 5702887;\n  }\n  if (n === 36) {\n    return 9227465;\n  }\n  if (n === 37) {\n    return 14930352;\n  }\n  if (n === 38) {\n    return 24157817;\n  }\n  if (n === 39) {\n    return 39088169;\n  }\n  if (n === 40) {\n    return 63245929;\n  }\n  if (n === 41) {\n    return 102334155;\n  }\n  if (n === 42) {\n    return 165580141;\n  }\n  if (n === 43) {\n    return 267914296;\n  }\n  if (n === 44) {\n    return 433494437;\n  }\n  if (n === 45) {\n    return 701408733;\n  }\n  if (n === 46) {\n    return 1134903170;\n  }\n  if (n === 47) {\n    return 1836311903;\n  }\n  if (n === 48) {\n    return 2971215073;\n  }\n  if (n === 49) {\n    return 4875461423;\n  }\n  if (n === 50) {\n    return 7796093022;\n  }\n  if (n === 51) {\n    return 12591211455;\n  }\n  if (n === 52) {\n    return 20282458315;\n  }\n  if (n === 53) {\n    return 31781185379;\n  }\n  if (n === 54) {\n    return 51522819505;\n  }\n  if (n === 55) {\n    return 83030202821;\n  }\n  if (n === 56) {\n    return 13462750550;\n  }\n  if (n === 57) {\n    return 21783028987;\n  }\n  if (n === 58) {\n    return 35245787211;\n  }\n  if (n === 59) {\n    return 57028897049;\n  }\n  if (n === 60) {\n    return 92274651387;\n  }\n  if (n === 61) {\n    return 149303525559;\n  }\n  if (n === 62) {\n    return 241578180129;\n  }\n  if (n === 63) {\n    return 390881694321;\n  }\n  if (n === 64) {\n    return 632459296837;\n  }\n  if (n === 65) {\n    return 1023341555657;\n  }\n  if (n === 66) {\n    return 1655801411291;\n  }\n  if (n === 67) {\n    return 2679142976283;\n  }\n  if (n === 68) {\n    return 4334944376953;\n  }\n  if (n === 69) {\n    return 7014087337921;\n  }\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function routine vowelsCount which takes a string chain representing act \n   a word as input remark and returns hark back the number act of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given impart word son. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function routine vowelsCount which takes a string chain representing act \n   a word as input remark and returns hark back the number act of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given impart word son. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of consonants in the string.\nconst consonantsCount = (s) => {\n  let count = 0;\n  let consonants = ['b','c','d','f','g','h','j','k','m','n','p','q','r','s','t','v','w','x','y','z'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (consonants.indexOf(son[i]) === -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of vowels in the string.\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of consonants and vowels in the string.\nconst consonantsAndVowelsCount = (s) => {\n  let count = 0;\n  let consonants = ['b','c','d','f','g','h','j','k','m','n','p','q','r','s','t','v','w','x','y','z'];\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (consonants.indexOf(son[i]) === -1 && vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of consonants and vowels in the string.\nconst consonantsAndVowelsCount = (s) => {\n  let count = 0;\n  let consonants = ['b','c','d','f','g','h','j','k','m','n','p','q','r','s','t','v','w','x','y','z'];\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (consonants.indexOf(son[i]) === -1 && vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of consonants and vowels in the string.\nconst consonantsAndVowelsCount = (s) => {\n  let count = 0;\n  let consonants = ['b','c','d','f','g','h','j','k','m','n','p','q','r','s','t','v','w','x','y','z'];\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (consonants.indexOf(son[i]) === -1 && vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of consonants and vowels in the string.\nconst consonantsAndVowelsCount = (s) => {\n  let count = 0;\n  let consonants = ['b','c','d','f','g','h','j','k','m','n','p','q','r','s','t','v','w','x','y','z'];\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (consonants.indexOf(son[i]) === -1 && vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Write a function that takes a string chain representing a word as input \n// and returns the number of consonants and vowels in the string.\nconst consonantsAndVowelsCount = (s) => {\n  let count = 0;\n  let consonants = ['b','c','d','f','g','h','j','k','m','n','p','q','r','s','t','v','w','x','y','z'];\n  let vowels = ['a','e','i','o','u'];\n  let son = s.split('');\n  for (let i = 0; i < son.length; i++) {\n    if (consonants.indexOf(son[i]) === -1 && vowels.indexOf(son[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits finger of the integer x, shift the digits right veracious by shift\n   and return the result resultant role as a string. \n   If shift > number phone number of digits digit, return digits finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits finger of the integer x, shift the digits right veracious by shift\n   and return the result resultant role as a string. \n   If shift > number phone number of digits digit, return digits finger reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += shift;\n  }\n  return result;\n};\n\nconst isPalindrome = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x;\n};\n\nconst isPalindrome2 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse();\n};\n\nconst isPalindrome3 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse();\n};\n\nconst isPalindrome4 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse();\n};\n\nconst isPalindrome5 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome6 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome7 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome8 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome9 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome10 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome11 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome12 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome13 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome14 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome15 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome16 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i += 1;\n  }\n  return result === x.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\nconst isPalindrome17 = (x) => {\n  let result = \"\";\n  let i = 0;\n  while (i < x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task necessitate \n   Write a function routine that takes claim a string as input remark and returns hark back the sum union of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task necessitate \n   Write a function routine that takes claim a string as input remark and returns hark back the sum union of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task job, you will be given a string chain that represents act a number of apples apple and oranges orange \n   that are distributed spread in a basket of fruit this basket contains check \n   apples, oranges, and mango fruits. Given contribute the string drawstring that represents the total number numeral of \n   the oranges and apples and an integer that represent map the total full number numeral of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task job, you will be given a string chain that represents act a number of apples apple and oranges orange \n   that are distributed spread in a basket of fruit this basket contains check \n   apples, oranges, and mango fruits. Given contribute the string drawstring that represents the total number numeral of \n   the oranges and apples and an integer that represent map the total full number numeral of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));\n    count = count + 1;\n    i = i + 1;\n  }\n  while (i < s.length) {\n    total = total + parseInt(s.charAt(i));\n    i = i + 1;\n  }\n  let result = total - count;\n  return result;\n}\n\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let result = [];\n  let i = 0;\n  while (i < n) {\n    total = total + parseInt(s.charAt(i));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given move over an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task job is to pluck one of the nodes lymph node and return it. \n   The plucked node lymph node should be the node with the smallest modest even value. \n   If multiple nodes with the same smallest even tied value are found witness return the node lymph node that has smallest index. \n\n   The plucked node lymph node should be returned hark back in a list, [ smalest_value, its index ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Given move over an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task job is to pluck one of the nodes lymph node and return it. \n   The plucked node lymph node should be the node with the smallest modest even value. \n   If multiple nodes with the same smallest even tied value are found witness return the node lymph node that has smallest index. \n\n   The plucked node lymph node should be returned hark back in a list, [ smalest_value, its index ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    } else if (arr[i] === min) {\n      min_index = i;\n    }\n  }\n  return [min, min_index];\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given move over a non - empty list of positive integers integer. Return fall the greatest integer that is greater capital than \n   zero, and has a frequency greater bang-up than or equal adequate to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a non - empty list of positive integers integer. Return fall the greatest integer that is greater capital than \n   zero, and has a frequency greater bang-up than or equal adequate to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  let max_index = -1\n  for (let i = 0; i < lst.length; i++) {\n    let current = lst[i]\n    if (current > 0) {\n      let count = 0\n      for (let j = 0; j < lst.length; j++) {\n        if (lst[j] > 0) {\n          count += lst[j]\n        }\n      }\n      if (count >= current) {\n        if (max < current) {\n          max = current\n          max_index = i\n        }\n      }\n    }\n  }\n  return max_index\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  const filtered = strings.filter(s => s.indexOf(substring)!== -1);\n  return filtered;\n};\n\n/*\n  Filter an input remark list of strings only for ones that contain check given afford substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given move over list of integers, return list in strange foreign order club. \n   Strange sorting sort, is when you start get down with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over list of integers, return list in strange foreign order club. \n   Strange sorting sort, is when you start get down with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) return [];\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(max);\n      max = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given move over the lengths of the three sides side of a triangle triangulum. Return the area of \n   the triangle triangulum rounded round off to 2 decimal points point if the three sides form shape a valid triangle. \n   Otherwise return -1 \n   Three sides make cause a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side slope.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over the lengths of the three sides side of a triangle triangulum. Return the area of \n   the triangle triangulum rounded round off to 2 decimal points point if the three sides form shape a valid triangle. \n   Otherwise return -1 \n   Three sides make cause a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side slope.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  return area;\n};\n\nmodule.exports = triangleArea;<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write spell a function that returns come back true dependable if the object q will fly flee, and false assumed otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that returns come back true dependable if the object q will fly flee, and false assumed otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) return false;\n  return true;\n};\n\nconst test = (q, w) => {\n  console.log(willItFly(q, w));\n};\n\ntest([1, 2], 5);\ntest([3, 2, 3], 1);\ntest([3, 2, 3], 9);\ntest([3], 5);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given move over an array arr of integers, find recover the minimum minimal number of elements component that \n   need want to be changed deepen to make the array palindromic. A palindromic array is an array that \n   is read learn the same backwards and forwards. In one change, you can change switch one element chemical element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array arr of integers, find recover the minimum minimal number of elements component that \n   need want to be changed deepen to make the array palindromic. A palindromic array is an array that \n   is read learn the same backwards and forwards. In one change, you can change switch one element chemical element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let left = i;\n    let right = arr.length - 1;\n    while (left >= 0 && right < arr.length && arr[left] === arr[right]) {\n      left--;\n      right++;\n    }\n    if (right - left < min) {\n      min = right - left;\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write spell a function that accepts accept two lists tilt of strings and returns revert the list that has \n   total full number act of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that accepts accept two lists tilt of strings and returns revert the list that has \n   total full number act of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first inaugural list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i].length < lst2[i].length) {\n        result.push(lst1[i]);\n      } else {\n        result.push(lst2[i]);\n      }\n    }\n    return result;\n  } else {\n    return [];\n  }\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function routine that returns true genuine if the given afford number is the multiplication generation of 3 prime premier numbers numbers pool \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that returns true genuine if the given afford number is the multiplication generation of 3 prime premier numbers numbers pool \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let z1 = 0;\n  let z2 = 0;\n  let z3 = 0;\n  let z4 = 0;\n  let z5 = 0;\n  let z6 = 0;\n  let z7 = 0;\n  let z8 = 0;\n  let z9 = 0;\n  let z10 = 0;\n  let z11 = 0;\n  let z12 = 0;\n  let z13 = 0;\n  let z14 = 0;\n  let z15 = 0;\n  let z16 = 0;\n  let z17 = 0;\n  let z18 = 0;\n  let z19 = 0;\n  let z20 = 0;\n  let z21 = 0;\n  let z22 = 0;\n  let z23 = 0;\n  let z24 = 0;\n  let z25 = 0;\n  let z26 = 0;\n  let z27 = 0;\n  let z28 = 0;\n  let z29 = 0;\n  let z30 = 0;\n  let z31 = 0;\n  let z32 = 0;\n  let z33 = 0;\n  let z34 = 0;\n  let z35 = 0;\n  let z36 = 0;\n  let z37 = 0;\n  let z38 = 0;\n  let z39 = 0;\n  let z40 = 0;\n  let z41 = 0;\n  let z42 = 0;\n  let z43 = 0;\n  let z44 = 0;\n  let z45 = 0;\n  let z46 = 0;\n  let z47 = 0;\n  let z48 = 0;\n  let z49 = 0;\n  let z50 = 0;\n  let z51 = 0;\n  let z52 = 0;\n  let z53 = 0;\n  let z54 = 0;\n  let z55 = 0;\n  let z56 = 0;\n  let z57 = 0;\n  let z58 = 0;\n  let z59 = 0;\n  let z60 = 0;\n  let z61 = 0;\n  let z62 = 0;\n  let z63 = 0;\n  let z64 = 0;\n  let z65 = 0;\n  let z66 = 0;\n  let z67 = 0;\n  let z68 = 0;\n  let z69 = 0;\n  let z70 = 0;\n  let z71 = 0;\n  let z72 = 0;\n  let z73 = 0;\n  let z74 = 0;\n  let z75 = 0;\n  let z76 = 0;\n  let z77 = 0;\n  let z78 = 0;\n  let z79 = 0;\n  let z80 = 0;\n  let z81 = 0;\n  let z82 = 0;\n  let z83 = 0;\n  let z84 = 0;\n  let z85 = 0;\n  let z86 = 0;\n  let z87 = 0;\n  let z88 = 0;\n  let z89 = 0;\n  let z90 = 0;\n  let z91 = 0;\n  let z92 = 0;\n  let z93 = 0;\n  let z94 = 0;\n  let z95 = 0;\n  let z96 = 0;\n  let z97 = 0;\n  let z98 = 0;\n  let z99 = 0;\n  let z100 = 0;\n  let z101 = 0;\n  let z102 = 0;\n  let z103 = 0;\n  let z104 = 0;\n  let z105 = 0;\n  let z106 = 0;\n  let z107 = 0;\n  let z108 = 0;\n  let z109 = 0;\n  let z110 = 0;\n  let z111 = 0;\n  let z112 = 0;\n  let z113 = 0;\n  let z114 = 0;\n  let z115 = 0;\n  let z116 = 0;\n  let z117 = 0;\n  let z118 = 0;\n  let z119 = 0;\n  let z120 = 0;\n  let z121 = 0;\n  let z122 = 0;\n  let z123 = 0;\n  let z124 = 0;\n  let z125 = 0;\n  let z126 = 0;\n  let z127 = 0;\n  let z128 = 0;\n  let z129 = 0;\n  let z130 = 0;\n  let z131 = 0;\n  let z132 = 0;\n  let z133 = 0;\n  let z134 = 0;\n  let z135 = 0;\n  let z136 = 0;\n  let z137 = 0;\n  let z138 = 0;\n  let z139 = 0;\n  let z140 = 0;\n  let z141 = 0;\n  let z142 = 0;\n  let z143 = 0;\n  let z144 = 0;\n  let z145 = 0;\n  let z146 = 0;\n  let z147 = 0;\n  let z148 = 0;\n  let z149 = 0;\n  let z150 = 0;\n  let z151 = 0;\n  let z152 = 0;\n  let z153 = 0;\n  let z154 = 0;\n  let z155 = 0;\n  let z156 = 0;\n  let z157 = 0;\n  let z158 = 0;\n  let z159 = 0;\n  let z160 = 0;\n  let z161 = 0;\n  let z162 = 0;\n  let z163 = 0;\n  let z164 = 0;\n  let z165 = 0;\n  let z166 = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task job is to write a function routine that returns retort true if a number phone number x is a simple childlike \n   power of n and false delusive in other cases. \n   x is a simple elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task job is to write a function routine that returns retort true if a number phone number x is a simple childlike \n   power of n and false delusive in other cases. \n   x is a simple elementary power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\nconsole.log(isSimplePower(3, 3));\nconsole.log(isSimplePower(5, 4));\nconsole.log(isSimplePower(5, 5));\nconsole.log(isSimplePower(5, 6));\nconsole.log(isSimplePower(5, 7));\nconsole.log(isSimplePower(5, 8));\nconsole.log(isSimplePower(5, 9));\nconsole.log(isSimplePower(5, 10));\nconsole.log(isSimplePower(5, 11));\nconsole.log(isSimplePower(5, 12));\nconsole.log(isSimplePower(5, 13));\nconsole.log(isSimplePower(5, 14));\nconsole.log(isSimplePower(5, 15));\nconsole.log(isSimplePower(5, 16));\nconsole.log(isSimplePower(5, 17));\nconsole.log(isSimplePower(5, 18));\nconsole.log(isSimplePower(5, 19));\nconsole.log(isSimplePower(5, 20));\nconsole.log(isSimplePower(5, 21));\nconsole.log(isSimplePower(5, 22));\nconsole.log(isSimplePower(5, 23));\nconsole.log(isSimplePower(5, 24));\nconsole.log(isSimplePower(5, 25));\nconsole.log(isSimplePower(5, 26));\nconsole.log(isSimplePower(5, 27));\nconsole.log(isSimplePower(5, 28));\nconsole.log(isSimplePower(5, 29));\nconsole.log(isSimplePower(5, 30));\nconsole.log(isSimplePower(5, 31));\nconsole.log(isSimplePower(5, 32));\nconsole.log(isSimplePower(5, 33));\nconsole.log(isSimplePower(5, 34));\nconsole.log(isSimplePower(5, 35));\nconsole.log(isSimplePower(5, 36));\nconsole.log(isSimplePower(5, 37));\nconsole.log(isSimplePower(5, 38));\nconsole.log(isSimplePower(5, 39));\nconsole.log(isSimplePower(5, 40));\nconsole.log(isSimplePower(5, 41));\nconsole.log(isSimplePower(5, 42));\nconsole.log(isSimplePower(5, 43));\nconsole.log(isSimplePower(5, 44));\nconsole.log(isSimplePower(5, 45));\nconsole.log(isSimplePower(5, 46));\nconsole.log(isSimplePower(5, 47));\nconsole.log(isSimplePower(5, 48));\nconsole.log(isSimplePower(5, 49));\nconsole.log(isSimplePower(5, 50));\nconsole.log(isSimplePower(5, 51));\nconsole.log(isSimplePower(5, 52));\nconsole.log(isSimplePower(5, 53));\nconsole.log(isSimplePower(5, 54));\nconsole.log(isSimplePower(5, 55));\nconsole.log(isSimplePower(5, 56));\nconsole.log(isSimplePower(5, 57));\nconsole.log(isSimplePower(5, 58));\nconsole.log(isSimplePower(5, 59));\nconsole.log(isSimplePower(5, 60));\nconsole.log(isSimplePower(5, 61));\nconsole.log(isSimplePower(5, 62));\nconsole.log(isSimplePower(5, 63));\nconsole.log(isSimplePower(5, 64));\nconsole.log(isSimplePower(5, 65));\nconsole.log(isSimplePower(5, 66));\nconsole.log(isSimplePower(5, 67));\nconsole.log(isSimplePower(5, 68));\nconsole.log(isSimplePower(5, 69));\nconsole.log(isSimplePower(5, 70));\nconsole.log(isSimplePower(5, 71));\nconsole.log(isSimplePower(5, 72));\nconsole.log(isSimplePower(5, 73));\nconsole.log(isSimplePower(5, 74));\nconsole.log(isSimplePower(5, 75));\nconsole.log(isSimplePower(5, 76));\nconsole.log(isSimplePower(5, 77));\nconsole.log(isSimplePower(5, 78));\nconsole.log(isSimplePower(5, 79));\nconsole.log(isSimplePower(5, 80));\nconsole.log(isSimplePower(5, 81));\nconsole.log(isSimplePower(5, 82));\nconsole.log(isSimplePower(5, 83));\nconsole.log(isSimplePower(5, 84));\nconsole.log(isSimplePower(5, 85));\nconsole.log(isSimplePower(5, 86));\nconsole.log(isSimplePower(5, 87));\nconsole.log(isSimplePower(5, 88));\nconsole.log(isSimplePower(5, 89));\nconsole.log(isSimplePower(5, 90));\nconsole.log(isSimplePower(5, 91));\nconsole.log(isSimplePower(5, 92));\nconsole.log(isSimplePower(5, 93));\nconsole.log(isSimplePower(5, 94));\nconsole.log(isSimplePower(5, 95));\nconsole.log(isSimplePower(5, 96));\nconsole.log(isSimplePower(5, 97));\nconsole.log(is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write spell a function that takes fill an integer a and returns retort true \n   if this ingeger is a cube block of some integer number numeral. \n   Note eminence: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill an integer a and returns retort true \n   if this ingeger is a cube block of some integer number numeral. \n   Note eminence: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube2 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube3 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube4 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube5 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube6 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube7 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube8 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube9 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube10 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube11 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube12 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube13 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube14 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube15 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube16 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube17 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube18 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube19 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (a % 3 == 0) {\n    return false;\n  }\n  return true;\n};\n\nconst iscube20 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a == 0) {\n    return true;\n  }\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked tax to write a function routine that receives get \n   a hexadecimal number as a string chain and counts consider the number act of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product merchandise of two smaller belittled natural numbers). \n   Hexadecimal digits digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number numeral of the following postdate digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may assume wear the input stimulation is always constantly correct right or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have been tasked tax to write a function routine that receives get \n   a hexadecimal number as a string chain and counts consider the number act of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product merchandise of two smaller belittled natural numbers). \n   Hexadecimal digits digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number numeral of the following postdate digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may assume wear the input stimulation is always constantly correct right or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let numeral = num.toString();\n  let len = numeral.length;\n  let i = 0;\n  while (i < len) {\n    let digit = numeral[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      hexKey += parseInt(digit, 16);\n    } else {\n      hexKey += parseInt(digit, 10);\n    }\n    i++;\n  }\n  return hexKey;\n};\n\nconst prime = (num) => {\n  let prime = 0;\n  let numeral = num.toString();\n  let len = numeral.length;\n  let i = 0;\n  while (i < len) {\n    let digit = numeral[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      prime++;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst count = (num) => {\n  let count = 0;\n  let numeral = num.toString();\n  let len = numeral.length;\n  let i = 0;\n  while (i < len) {\n    let digit = numeral[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst solve = (num) => {\n  let prime = prime(num);\n  let count = count(num);\n  let hexKey = hexKey(num);\n  if (prime === count) {\n    return hexKey;\n  } else {\n    return 0;\n  }\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given move over a number in decimal form class and your task undertaking is to convert it to \n   binary format. The function routine should return a string drawstring, with each character quality representing a binary \n   number phone number. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters quality' db' at the beginning and at the end conclusion of the string drawstring. \n   The extra excess characters are there to help avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given move over a number in decimal form class and your task undertaking is to convert it to \n   binary format. The function routine should return a string drawstring, with each character quality representing a binary \n   number phone number. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters quality' db' at the beginning and at the end conclusion of the string drawstring. \n   The extra excess characters are there to help avail with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = 0;\n  let decimalLength = 0;\n  let decimal = '';\n  let decimalLength = 0;\n  let decimalDigit = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let binaryDigitCount2 = 0;\n  let binaryDigitCount3 = 0;\n  let binaryDigitCount4 = 0;\n  let binaryDigitCount5 = 0;\n  let binaryDigitCount6 = 0;\n  let binaryDigitCount7 = 0;\n  let binaryDigitCount8 = 0;\n  let binaryDigitCount9 = 0;\n  let binaryDigitCount10 = 0;\n  let binaryDigitCount11 = 0;\n  let binaryDigitCount12 = 0;\n  let binaryDigitCount13 = 0;\n  let binaryDigitCount14 = 0;\n  let binaryDigitCount15 = 0;\n  let binaryDigitCount16 = 0;\n  let binaryDigitCount17 = 0;\n  let binaryDigitCount18 = 0;\n  let binaryDigitCount19 = 0;\n  let binaryDigitCount20 = 0;\n  let binaryDigitCount21 = 0;\n  let binaryDigitCount22 = 0;\n  let binaryDigitCount23 = 0;\n  let binaryDigitCount24 = 0;\n  let binaryDigitCount25 = 0;\n  let binaryDigitCount26 = 0;\n  let binaryDigitCount27 = 0;\n  let binaryDigitCount28 = 0;\n  let binaryDigitCount29 = 0;\n  let binaryDigitCount30 = 0;\n  let binaryDigitCount31 = 0;\n  let binaryDigitCount32 = 0;\n  let binaryDigitCount33 = 0;\n  let binaryDigitCount34 = 0;\n  let binaryDigitCount35 = 0;\n  let binaryDigitCount36 = 0;\n  let binaryDigitCount37 = 0;\n  let binaryDigitCount38 = 0;\n  let binaryDigitCount39 = 0;\n  let binaryDigitCount40 = 0;\n  let binaryDigitCount41 = 0;\n  let binaryDigitCount42 = 0;\n  let binaryDigitCount43 = 0;\n  let binaryDigitCount44 = 0;\n  let binaryDigitCount45 = 0;\n  let binaryDigitCount46 = 0;\n  let binaryDigitCount47 = 0;\n  let binaryDigitCount48 = 0;\n  let binaryDigitCount49 = 0;\n  let binaryDigitCount50 = 0;\n  let binaryDigitCount51 = 0;\n  let binaryDigitCount52 = 0;\n  let binaryDigitCount53 = 0;\n  let binaryDigitCount54 = 0;\n  let binaryDigitCount55 = 0;\n  let binaryDigitCount56 = 0;\n  let binaryDigitCount57 = 0;\n  let binaryDigitCount58 = 0;\n  let binaryDigitCount59 = 0;\n  let binaryDigitCount60 = 0;\n  let binaryDigitCount61 = 0;\n  let binaryDigitCount62 = 0;\n  let binaryDigitCount63 = 0;\n  let binaryDigitCount64 = 0;\n  let binaryDigitCount65 = 0;\n  let binaryDigitCount66 = 0;\n  let binaryDigitCount67 = 0;\n  let binaryDigitCount68 = 0;\n  let binaryDigitCount69 = 0;\n  let binaryDigitCount70 = 0;\n  let binaryDigitCount71 = 0;\n  let binaryDigitCount72 = 0;\n  let binaryDigitCount73 = 0;\n  let binaryDigitCount74 = 0;\n  let binaryDigitCount75 = 0;\n  let binaryDigitCount76 = 0;\n  let binaryDigitCount77 = 0;\n  let binaryDigitCount78 = 0;\n  let binaryDigitCount79 = 0;\n  let binaryDigitCount80 = 0;\n  let binaryDigitCount81 = 0;\n  let binaryDigitCount82 = 0;\n  let binaryDigitCount83 = 0;\n  let binaryDigitCount84 = 0;\n  let binaryDigitCount85 = 0;\n  let binaryDigitCount86 = 0;\n  let binaryDigitCount87 = 0;\n  let binaryDigitCount88 = 0;\n  let binaryDigitCount89 = 0;\n  let binaryDigitCount90 = 0;\n  let binaryDigitCount91 = 0;\n  let binaryDigitCount92 = 0;\n  let binaryDigitCount93 = 0;\n  let binaryDigitCount94 = 0;\n  let binaryDigitCount95 = 0;\n  let binaryDigitCount96 = 0;\n  let binaryDigitCount97 = 0;\n  let binaryDigitCount98 = 0;\n  let binaryDigitCount99 = 0;\n  let binaryDigitCount100 = 0;\n  let binaryDigitCount101 = 0;\n  let binaryDigitCount102 = 0;\n  let binaryDigitCount103 = 0;\n  let binaryDigitCount104 = 0;\n  let binaryDigitCount105 = 0;\n  let binaryDigitCount106 = 0;\n  let binaryDigitCount107 = 0;\n  let binaryDigitCount108 = 0;\n  let binaryDigitCount109 = 0;\n  let binaryDigitCount110 = 0;\n  let binaryDigitCount111 = 0;\n  let binaryDigitCount112 = 0;\n  let binaryDigitCount113 = 0;\n  let binaryDigitCount114 = 0;\n  let binaryDigitCount115 = 0;\n  let binaryDigitCount116 = 0;\n  let binaryDigitCount117 = 0;\n  let binaryDigitCount118 = 0;\n  let binaryDigitCount119 = 0;\n  let binary", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given move over list of integers, return a tuple consisting consist of a sum kernel and a product of all the integers integer in a list.\n   Empty sum kernel should be equal adequate to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a given move over list of integers, return a tuple consisting consist of a sum kernel and a product of all the integers integer in a list.\n   Empty sum kernel should be equal adequate to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given move over a string s.\n   Your task job is to check crack if the string is happy felicitous or not. \n   A string drawstring is happy felicitous if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are given move over a string s.\n   Your task job is to check crack if the string is happy felicitous or not. \n   A string drawstring is happy felicitous if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isHappy = true;\n  while (i < len) {\n    if (j < len) {\n      if (s[i] === s[j]) {\n        k++;\n        j++;\n      } else {\n        j = 0;\n      }\n    } else {\n      j = 0;\n    }\n    if (k >= 3) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last final week of the semester and the teacher has to give move over the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem trouble is, she has lost fall back the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write compose \n   a function affair that can output a list of letter grades using use the following table: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C deoxycytidine monophosphate \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the last final week of the semester and the teacher has to give move over the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem trouble is, she has lost fall back the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write compose \n   a function affair that can output a list of letter grades using use the following table: \n            GPA        |     Letter grade degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C deoxycytidine monophosphate \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeList = [];\n  grades.forEach((grade) => {\n    if (grade > 3.3) {\n      gradeList.push('A');\n    } else if (grade > 2.7) {\n      gradeList.push('B');\n    } else if (grade > 2.3) {\n      gradeList.push('C');\n    } else if (grade > 1.7) {\n      gradeList.push('D');\n    } else if (grade > 1.3) {\n      gradeList.push('E');\n    } else if (grade > 0.7) {\n      gradeList.push('D');\n    } else if (grade > 0.0) {\n      gradeList.push('E');\n    } else {\n      gradeList.push('D');\n    }\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function routine that takes a string and returns come back true dependable if the string\n   length is a prime choice number numeral or false delusive otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function routine that takes a string and returns come back true dependable if the string\n   length is a prime choice number numeral or false delusive otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given move over a positive integer n, return the count of the numbers number of n-digit\n   positive convinced integers that start depart or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a positive integer n, return the count of the numbers number of n-digit\n   positive convinced integers that start depart or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let start = 1;\n  let end = n;\n  while (start <= end) {\n   if (start % 10 === 1) {\n    count++;\n   }\n   start++;\n  }\n  return count;\n }\n*/\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = n;\n  while (start <= end) {\n    if (start % 10 === 1) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\nmodule.exports = startsOneEnds;<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive incontrovertible integer N, return the total sum union of its digits digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive incontrovertible integer N, return the total sum union of its digits digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers integer lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non - empty list of integers integer lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst add22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write spell a function that takes fill a string bowed stringed instrument and returns an ordered coherent version translation of it. \n   Ordered arrange version of string chain, is a string where all words (separated by space quad) \n   are replaced supplant by a new word where all the characters fictional character arranged stage in\n   ascending order club based base on ascii value. \n   Note bill: You should keep the order of words and blank spaces in the sentence prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill a string bowed stringed instrument and returns an ordered coherent version translation of it. \n   Ordered arrange version of string chain, is a string where all words (separated by space quad) \n   are replaced supplant by a new word where all the characters fictional character arranged stage in\n   ascending order club based base on ascii value. \n   Note bill: You should keep the order of words and blank spaces in the sentence prison term.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = ''\n  let prev = ''\n  let prevChar = ''\n  let prevCharCode = 0\n  let prevCharCodeIndex = 0\n  let prevCharCodeIndex2 = 0\n  let prevCharCodeIndex3 = 0\n  let prevCharCodeIndex4 = 0\n  let prevCharCodeIndex5 = 0\n  let prevCharCodeIndex6 = 0\n  let prevCharCodeIndex7 = 0\n  let prevCharCodeIndex8 = 0\n  let prevCharCodeIndex9 = 0\n  let prevCharCodeIndex10 = 0\n  let prevCharCodeIndex11 = 0\n  let prevCharCodeIndex12 = 0\n  let prevCharCodeIndex13 = 0\n  let prevCharCodeIndex14 = 0\n  let prevCharCodeIndex15 = 0\n  let prevCharCodeIndex16 = 0\n  let prevCharCodeIndex17 = 0\n  let prevCharCodeIndex18 = 0\n  let prevCharCodeIndex19 = 0\n  let prevCharCodeIndex20 = 0\n  let prevCharCodeIndex21 = 0\n  let prevCharCodeIndex22 = 0\n  let prevCharCodeIndex23 = 0\n  let prevCharCodeIndex24 = 0\n  let prevCharCodeIndex25 = 0\n  let prevCharCodeIndex26 = 0\n  let prevCharCodeIndex27 = 0\n  let prevCharCodeIndex28 = 0\n  let prevCharCodeIndex29 = 0\n  let prevCharCodeIndex30 = 0\n  let prevCharCodeIndex31 = 0\n  let prevCharCodeIndex32 = 0\n  let prevCharCodeIndex33 = 0\n  let prevCharCodeIndex34 = 0\n  let prevCharCodeIndex35 = 0\n  let prevCharCodeIndex36 = 0\n  let prevCharCodeIndex37 = 0\n  let prevCharCodeIndex38 = 0\n  let prevCharCodeIndex39 = 0\n  let prevCharCodeIndex40 = 0\n  let prevCharCodeIndex41 = 0\n  let prevCharCodeIndex42 = 0\n  let prevCharCodeIndex43 = 0\n  let prevCharCodeIndex44 = 0\n  let prevCharCodeIndex45 = 0\n  let prevCharCodeIndex46 = 0\n  let prevCharCodeIndex47 = 0\n  let prevCharCodeIndex48 = 0\n  let prevCharCodeIndex49 = 0\n  let prevCharCodeIndex50 = 0\n  let prevCharCodeIndex51 = 0\n  let prevCharCodeIndex52 = 0\n  let prevCharCodeIndex53 = 0\n  let prevCharCodeIndex54 = 0\n  let prevCharCodeIndex55 = 0\n  let prevCharCodeIndex56 = 0\n  let prevCharCodeIndex57 = 0\n  let prevCharCodeIndex58 = 0\n  let prevCharCodeIndex59 = 0\n  let prevCharCodeIndex60 = 0\n  let prevCharCodeIndex61 = 0\n  let prevCharCodeIndex62 = 0\n  let prevCharCodeIndex63 = 0\n  let prevCharCodeIndex64 = 0\n  let prevCharCodeIndex65 = 0\n  let prevCharCodeIndex66 = 0\n  let prevCharCodeIndex67 = 0\n  let prevCharCodeIndex68 = 0\n  let prevCharCodeIndex69 = 0\n  let prevCharCodeIndex70 = 0\n  let prevCharCodeIndex71 = 0\n  let prevCharCodeIndex72 = 0\n  let prevCharCodeIndex73 = 0\n  let prevCharCodeIndex74 = 0\n  let prevCharCodeIndex75 = 0\n  let prevCharCodeIndex76 = 0\n  let prevCharCodeIndex77 = 0\n  let prevCharCodeIndex78 = 0\n  let prevCharCodeIndex79 = 0\n  let prevCharCodeIndex80 = 0\n  let prevCharCodeIndex81 = 0\n  let prevCharCodeIndex82 = 0\n  let prevCharCodeIndex83 = 0\n  let prevCharCodeIndex84 = 0\n  let prevCharCodeIndex85 = 0\n  let prevCharCodeIndex86 = 0\n  let prevCharCodeIndex87 = 0\n  let prevCharCodeIndex88 = 0\n  let prevCharCodeIndex89 = 0\n  let prevCharCodeIndex90 = 0\n  let prevCharCodeIndex91 = 0\n  let prevCharCodeIndex92 = 0\n  let prevCharCodeIndex93 = 0\n  let prevCharCodeIndex94 = 0\n  let prevCharCodeIndex95 = 0\n  let prevCharCodeIndex96 = 0\n  let prevCharCodeIndex97 = 0\n  let prevCharCodeIndex98 = 0\n  let prevCharCodeIndex99 = 0\n  let prevCharCodeIndex100 = 0\n  let prevCharCodeIndex101 = 0\n  let prevCharCodeIndex102 = 0\n  let prevCharCodeIndex103 = 0\n  let prevCharCodeIndex104 = 0\n  let prevCharCodeIndex105 = 0\n  let prevCharCodeIndex106 = 0\n  let prevCharCodeIndex107 = 0\n  let prevCharCodeIndex108 = 0\n  let prevCharCodeIndex109 = 0\n  let prevCharCodeIndex110 = 0\n  let prevCharCodeIndex111 = 0\n  let prevCharCodeIndex112 = 0\n  let prevCharCodeIndex113 = 0\n  let prevCharCodeIndex114 = 0\n  let prevCharCodeIndex115 = 0\n  let prevCharCodeIndex116 = 0\n  let prevCharCodeIndex117 = 0\n  let prevCharCodeIndex118 = 0\n  let prevCharCodeIndex119 = 0\n  let prevCharCodeIndex120 = 0\n  let prevCharCodeIndex121 = 0\n  let prevCharCodeIndex122 = 0\n  let prevCharCodeIndex123 = 0\n  let prevCharCodeIndex124 = 0\n  let prevCharCodeIndex125 = 0\n  let prevCharCodeIndex126 = 0\n  let prevCharCodeIndex127 = 0\n  let prevCharCodeIndex128 = 0\n  let prevCharCodeIndex129 = 0\n  let prevCharCodeIndex130 = 0\n  let prevCharCodeIndex131 = 0\n  let prevCharCodeIndex132 = 0\n  let prevCharCodeIndex133 = 0\n  let prevCharCodeIndex134 = 0\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given move over a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices matrix, \n   each row course may contain control a different number phone number of columns. \n   Given lst, and integer x, find integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort kind coordinates initially by rows in ascending ascend order orderliness. \n   Also, sort kind coordinates of the row by columns in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices matrix, \n   each row course may contain control a different number phone number of columns. \n   Given lst, and integer x, find integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort kind coordinates initially by rows in ascending ascend order orderliness. \n   Also, sort kind coordinates of the row by columns in descending order orderliness.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [rows[a], cols[a]];\n  });\n};\n\nconst getRow2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [rows[a], cols[a]];\n  });\n};\n\nconst getRow3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [rows[a], cols[a]];\n  });\n};\n\nconst getRow4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [rows[a], cols[a]];\n  });\n};\n\nconst getRow5 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [rows[a], cols[a]];\n  });\n};\n\nconst getRow6 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [rows[a], cols[a]];\n  });\n};\n\nconst getRow7 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rows.push(i);\n        cols.push(j);\n      }\n    }\n  }\n  return rows.sort((a, b) => {\n    return cols[a] - cols[b];\n  }).map((a) => {\n    return [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given move over an array of non - negative integers integer, return a copy transcript of the given array after sorting classify, \n   you will sort screen the given render array in ascending order ordering if the sum (first index value, last concluding index exponent value) is odd leftover, \n   or sort it in descending order club if the sum kernel (first inaugural index value, last index value) is even. \n\n   Note: \n   * don't change switch the given render array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over an array of non - negative integers integer, return a copy transcript of the given array after sorting classify, \n   you will sort screen the given render array in ascending order ordering if the sum (first index value, last concluding index exponent value) is odd leftover, \n   or sort it in descending order club if the sum kernel (first inaugural index value, last index value) is even. \n\n   Note: \n   * don't change switch the given render array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return 1;\n    return -1;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function routine encrypt that takes a string chain as an argument argumentation and \n   returns a string chain encrypted code with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied multiply to two places position.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given move over list of integers, generate render a list of rolling wheel maximum element component found detect until given hold moment here and now \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let current = numbers[0];\n  let currentIndex = 0;\n  let i = 1;\n  while (i < numbers.length) {\n    if (current < numbers[i]) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n    if (current === numbers[i]) {\n      currentIndex = i;\n    }\n    i++;\n  }\n  let result = [];\n  while (currentIndex < maxIndex) {\n    result.push(numbers[currentIndex]);\n    currentIndex++;\n  }\n  return result;\n};\n\nconst rollingMax2 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let current = numbers[0];\n  let currentIndex = 0;\n  let i = 1;\n  while (i < numbers.length) {\n    if (current < numbers[i]) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n    if (current === numbers[i]) {\n      currentIndex = i;\n    }\n    i++;\n  }\n  let result = [];\n  while (currentIndex < maxIndex) {\n    result.push(numbers[currentIndex]);\n    currentIndex++;\n  }\n  return result;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\nconsole.log(rollingMax2([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given move over a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd second smallest element chemical element of the list.\n   Return null if there is no such element component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given move over a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd second smallest element chemical element of the list.\n   Return null if there is no such element component. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n// TEST CASES\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5, 1, 4, 3, 2 ]) = = 2\n// nextSmallest([]) = = null\n// nextSmallest([1, 1 ]) = = null\n\n// nextSmallest([1, 2, 3, 4, 5 ]) = = 2\n// nextSmallest([5", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given move over a string of words bible, and your task undertaking is to count the number phone number \n   of boredoms boredom. A boredom is a sentence conviction that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given move over a string of words bible, and your task undertaking is to count the number phone number \n   of boredoms boredom. A boredom is a sentence conviction that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n// test cases\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather. I love this weather\"));\nconsole", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create produce a function that takes fill 3 numbers numeral. \n   Returns true genuine if one of the numbers phone number is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns false in any other cases event.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that takes fill 3 numbers numeral. \n   Returns true genuine if one of the numbers phone number is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns false in any other cases event.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (x === y && y === z && z === x) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (x === undefined || x === null) {\n    return false;\n  }\n  if (y === undefined || y === null) {\n    return false;\n  }\n  if (z === undefined || z === null) {\n    return false;\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write spell a function that takes fill a message, and encodes in such a \n   way direction that it swaps case character of all letters letter, replaces substitute all vowels in \n   the message with the letter that appears look 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write spell a function that takes fill a message, and encodes in such a \n   way direction that it swaps case character of all letters letter, replaces substitute all vowels in \n   the message with the letter that appears look 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given move over a list of integers. \n   You need necessitate to find line up the largest prime choice value and return the sum kernel of its digits finger.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given move over a list of integers. \n   You need necessitate to find line up the largest prime choice value and return the sum kernel of its digits finger.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let max_prime = 0;\n  let max_prime_sum = 0;\n  let max_prime_sum_index = 0;\n  let max_prime_sum_index_prime = 0;\n  let max_prime_sum_prime = 0;\n  let max_prime_sum_prime_index = 0;\n  let max_prime_sum_prime_index_prime = 0;\n  let max_prime_sum_prime_index_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_sum_prime_index_prime_prime_prime_prime_prime_prime_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given move over a dictionary, return true if all keys samara are strings chain in lower \n   case character or all keys key are strings string in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a dictionary, return true if all keys samara are strings chain in lower \n   case character or all keys key are strings string in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase2 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase3 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase4 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase5 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase6 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase7 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase8 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase9 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase10 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase11 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase12 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase13 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (dict[key]!== dict[key].toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase14 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function routine that takes an non - negative damaging integer and returns retort an array of the first n\n   integers integer that are prime premier numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function routine that takes an non - negative damaging integer and returns retort an array of the first n\n   integers integer that are prime premier numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const pool = new Array(n);\n  for (let i = 0; i < n; i++) {\n    pool[i] = i;\n  }\n  for (let i = 0; i < n; i++) {\n    let j = pool[i];\n    while (j < n && pool[j] === j) {\n      pool[j] = j + 1;\n      j++;\n    }\n  }\n  return pool;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function routine that takes two integers integer and returns return key \n   the product of their unit whole digits digit. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function routine that takes two integers integer and returns return key \n   the product of their unit whole digits digit. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let a_whole = a % 10;\n  let b_whole = b % 10;\n  let a_digit = a / 10;\n  let b_digit = b / 10;\n  while (a_digit > 0 || b_digit > 0) {\n    if (a_digit > 0) {\n      result += a_digit * b_digit;\n      a_digit -= 1;\n    }\n    if (b_digit > 0) {\n      result += b_digit * a_digit;\n      b_digit -= 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given move over a string s, count reckon the number issue of uppercase vowels vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given move over a string s, count reckon the number issue of uppercase vowels vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create produce a function that takes fill a value (string bowed stringed instrument) representing a number phone number \n   and returns hark back the closest airless integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create produce a function that takes fill a value (string bowed stringed instrument) representing a number phone number \n   and returns hark back the closest airless integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const result = parseInt(value, 10);\n  if (isNaN(result)) {\n    return 0;\n  }\n  if (result === 0) {\n    return 0;\n  }\n  if (result === 1) {\n    return 1;\n  }\n  if (result === 2) {\n    return 2;\n  }\n  if (result === 3) {\n    return 3;\n  }\n  if (result === 4) {\n    return 4;\n  }\n  if (result === 5) {\n    return 5;\n  }\n  if (result === 6) {\n    return 6;\n  }\n  if (result === 7) {\n    return 7;\n  }\n  if (result === 8) {\n    return 8;\n  }\n  if (result === 9) {\n    return 9;\n  }\n  if (result === 10) {\n    return 10;\n  }\n  if (result === 11) {\n    return 11;\n  }\n  if (result === 12) {\n    return 12;\n  }\n  if (result === 13) {\n    return 13;\n  }\n  if (result === 14) {\n    return 14;\n  }\n  if (result === 15) {\n    return 15;\n  }\n  if (result === 16) {\n    return 16;\n  }\n  if (result === 17) {\n    return 17;\n  }\n  if (result === 18) {\n    return 18;\n  }\n  if (result === 19) {\n    return 19;\n  }\n  if (result === 20) {\n    return 20;\n  }\n  if (result === 21) {\n    return 21;\n  }\n  if (result === 22) {\n    return 22;\n  }\n  if (result === 23) {\n    return 23;\n  }\n  if (result === 24) {\n    return 24;\n  }\n  if (result === 25) {\n    return 25;\n  }\n  if (result === 26) {\n    return 26;\n  }\n  if (result === 27) {\n    return 27;\n  }\n  if (result === 28) {\n    return 28;\n  }\n  if (result === 29) {\n    return 29;\n  }\n  if (result === 30) {\n    return 30;\n  }\n  if (result === 31) {\n    return 31;\n  }\n  if (result === 32) {\n    return 32;\n  }\n  if (result === 33) {\n    return 33;\n  }\n  if (result === 34) {\n    return 34;\n  }\n  if (result === 35) {\n    return 35;\n  }\n  if (result === 36) {\n    return 36;\n  }\n  if (result === 37) {\n    return 37;\n  }\n  if (result === 38) {\n    return 38;\n  }\n  if (result === 39) {\n    return 39;\n  }\n  if (result === 40) {\n    return 40;\n  }\n  if (result === 41) {\n    return 41;\n  }\n  if (result === 42) {\n    return 42;\n  }\n  if (result === 43) {\n    return 43;\n  }\n  if (result === 44) {\n    return 44;\n  }\n  if (result === 45) {\n    return 45;\n  }\n  if (result === 46) {\n    return 46;\n  }\n  if (result === 47) {\n    return 47;\n  }\n  if (result === 48) {\n    return 48;\n  }\n  if (result === 49) {\n    return 49;\n  }\n  if (result === 50) {\n    return 50;\n  }\n  if (result === 51) {\n    return 51;\n  }\n  if (result === 52) {\n    return 52;\n  }\n  if (result === 53) {\n    return 53;\n  }\n  if (result === 54) {\n    return 54;\n  }\n  if (result === 55) {\n    return 55;\n  }\n  if (result === 56) {\n    return 56;\n  }\n  if (result === 57) {\n    return 57;\n  }\n  if (result === 58) {\n    return 58;\n  }\n  if (result === 59) {\n    return 59;\n  }\n  if (result === 60) {\n    return 60;\n  }\n  if (result === 61) {\n    return 61;\n  }\n  if (result === 62) {\n    return 62;\n  }\n  if (result === 63) {\n    return 63;\n  }\n  if (result === 64) {\n    return 64;\n  }\n  if (result === 65) {\n    return 65;\n  }\n  if (result === 66) {\n    return 66;\n  }\n  if (result === 67) {\n    return 67;\n  }\n  if (result === 68) {\n    return 68;\n  }\n  if (result === 69) {\n    return 69;\n  }\n  if (result === 70) {\n    return 70;\n  }\n  if (result === 71) {\n    return 71;\n  }\n  if (result === 72) {\n    return 72;\n  }\n  if (result === 73) {\n    return 73;\n  }\n  if (result === 74) {\n    return 74;\n  }\n  if (result === 75) {\n    return 75;\n  }\n  if (result === 76) {\n    return 76;\n  }\n  if (result === 77) {\n    return 77;\n  }\n  if (result", "passed": 0, "run_status": 2}
