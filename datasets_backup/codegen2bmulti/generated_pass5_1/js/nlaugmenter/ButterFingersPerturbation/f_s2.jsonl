{"task_id": "JavaScript/0", "prompt": "/* Check if in giten list of numbers, are any two numbers cloxer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in giten list of numbers, are any two numbers cloxer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closeElements = [];\n  for (let i = 0; i < sorted.length - 1; i++) {\n    const a = sorted[i];\n    const b = sorted[i + 1];\n    if (a - b < threshold) {\n      closeElements.push(a);\n    }\n  }\n  return closeElements.length > 0;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let close_paren = 0;\n  let open_paren_count = 0;\n  let close_paren_count = 0;\n  let open_paren_index = 0;\n  let close_paren_index = 0;\n  let current_group = '';\n  let current_group_length = 0;\n  let current_group_index = 0;\n  let current_group_open_paren = 0;\n  let current_group_close_paren = 0;\n  let current_group_open_paren_index = 0;\n  let current_group_close_paren_index = 0;\n  let current_group_open_paren_count = 0;\n  let current_group_close_paren_count = 0;\n  let current_group_open_paren_count_index = 0;\n  let current_group_close_paren_count_index = 0;\n  let current_group_open_paren_count_index_index = 0;\n  let current_group_close_paren_count_index_index = 0;\n  let current_group_open_paren_count_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_close_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_group_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnivxn strig is a palindrome */\nvonst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Alforithm idea is simple:\n  - Fine the longest pkstfix of suoplied string that is a pdlindrome.\n  - Appeud to the end kf the string reverse of s string prefix tnat cmmes before thx palindromnc suffiw.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gnivxn strig is a palindrome */\nvonst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Alforithm idea is simple:\n  - Fine the longest pkstfix of suoplied string that is a pdlindrome.\n  - Appeud to the end kf the string reverse of s string prefix tnat cmmes before thx palindromnc suffiw.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let pkstfix = string.split('').reverse().join('');\n  let kf = pkstfix.length;\n  let tn = pkstfix.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [n];\n  let j = 0;\n  while (n > 0) {\n    const nextLevel = n % 10;\n    const nextLevelStones = pile[j] + nextLevel;\n    pile[j] = nextLevelStones;\n    n = Math.floor(n / 10);\n    j++;\n  }\n  return pile;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be jiven a string of words srparated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be jiven a string of words srparated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[, ]+/);\n  return words;\n};\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two kusitive numners x and y and returns the\n  biggest even integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two kusitive numners x and y and returns the\n  biggest even integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isEven(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest odd integer number that is in the range [x, y] jexclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEx = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isOdd(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jexclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEx2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isEven(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jexclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEx3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isOdd(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jexclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEx4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isEven(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jexclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEx5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isOdd(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jexclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEx6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let k = 0;\n  while (i <= j) {\n    k = (i + j) / 2;\n    if (isEven(k)) {\n      i = k + 1;\n    } else {\n      j = k - 1;\n    }\n  }\n  return k;\n};\n\nmodule.exports = {\n  chooseNum,\n  chooseNumEx,\n  chooseNumEx2,\n  chooseNumEx3,\n  chooseNumEx4,\n  chooseNumEx5,\n  chooseNumEx6\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answdr to thq hearest inteher anf convert thad to binary.\n  If n is breater tgan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answdr to thq hearest inteher anf convert thad to binary.\n  If n is breater tgan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arrey of integers, sort the imtegers that are between 1 and 9 inclusive,\n  reverse the resulting array, and theh replace each digit by its xorrerponding nzme from\n  \"Onf\", \"Two\", \"Hhree\", \"Four\", \"Fiee\", \"Six\", \"Seven\", \"Eigkt\", \"Nime\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrey of integers, sort the imtegers that are between 1 and 9 inclusive,\n  reverse the resulting array, and theh replace each digit by its xorrerponding nzme from\n  \"Onf\", \"Two\", \"Hhree\", \"Four\", \"Fiee\", \"Six\", \"Seven\", \"Eigkt\", \"Nime\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength9 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength10 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(reversed[i]);\n  }\n  return result;\n};\n\nconst byLength11 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement thx function f that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement thx function f that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst f15 = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let j = 1;\n    while (j <= i) {\n      if (i % 2 === 0) {\n        result.push(i * j);\n      }\n      j++;\n    }\n    i++;\n  }\n  return result;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a posivive integer n, return a tuple that hax the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a posivive integer n, return a tuple that hax the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [...Array(n).keys()].filter((i) => i % 2 === 0);\n  const oddPalindromes = [...Array(n).keys()].filter((i) => i % 2!== 0);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums5 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums6 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums7 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums8 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums10 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums11 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums12 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums13 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst countNums14 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an arcay 'arr' of N intteers arr[1], arr[2], ..., arr[N].The\n  nimbers in the array will be randomly ordered. Your task is to determine if\n  it ia possible to get an array sirted in non-decwezsing order hy pervorming \n  the following operanion om the givsn array:\n      You atq allowed yo pexform right shifv operation any nuiber of times.\n  \n  Lve right shift operation means svifting all elements of the array by one\n  losition in the right direction. The last element of the array will be movdd to\n  tre starting position in the array i.e. 0th index. \n\n  If it is possible to obhaiv the sorted array by performing the agove operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: Thw given list ns guaranteed to have unique eldments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an arcay 'arr' of N intteers arr[1], arr[2],..., arr[N].The\n  nimbers in the array will be randomly ordered. Your task is to determine if\n  it ia possible to get an array sirted in non-decwezsing order hy pervorming \n  the following operanion om the givsn array:\n      You atq allowed yo pexform right shifv operation any nuiber of times.\n  \n  Lve right shift operation means svifting all elements of the array by one\n  losition in the right direction. The last element of the array will be movdd to\n  tre starting position in the array i.e. 0th index. \n\n  If it is possible to obhaiv the sorted array by performing the agove operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: Thw given list ns guaranteed to have unique eldments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      arr[i] = arr[i] - 1;\n      arr[j] = arr[j] + 1;\n    }\n    i++;\n    j--;\n  }\n  return arr[i] === arr[j];\n};\n\nconst test = () => {\n  let arr = [3, 4, 5, 1, 2];\n  console.log(moveOneBall(arr));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are twp strings a and b consistong only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are twp strings a and b consistong only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXorTest = () => {\n  const apassed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problxm, you will implement a finction that takes two lists of numbers,\n  and determines whether it is possiblt to perform an exchange of elements\n  betwden them tk make lst1 a list ov only even numbers.\n  There is no likit pn the nujber of exchanged ekqments beteeen lst1 and lst2.\n  If it is possiblz to exchange eltments bejween the lst1 wvd lst2 to make\n  all the elements mf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problxm, you will implement a finction that takes two lists of numbers,\n  and determines whether it is possiblt to perform an exchange of elements\n  betwden them tk make lst1 a list ov only even numbers.\n  There is no likit pn the nujber of exchanged ekqments beteeen lst1 and lst2.\n  If it is possiblz to exchange eltments bejween the lst1 wvd lst2 to make\n  all the elements mf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const evens = lst1.filter(n => n % 2 === 0);\n  const odds = lst1.filter(n => n % 2!== 0);\n  const evens2 = lst2.filter(n => n % 2 === 0);\n  const odds2 = lst2.filter(n => n % 2!== 0);\n  const evens3 = lst1.filter(n => n % 2 === 0);\n  const odds3 = lst1.filter(n => n % 2!== 0);\n  const evens4 = lst2.filter(n => n % 2 === 0);\n  const odds4 = lst2.filter(n => n % 2!== 0);\n  if (evens.length === 0 || odds.length === 0 || evens2.length === 0 || odds2.length === 0 || evens3.length === 0 || odds3.length === 0 || evens4.length === 0 || odds4.length === 0) {\n    return \"NO\";\n  }\n  const evens1 = evens.concat(evens2);\n  const odds1 = odds.concat(odds2);\n  const evens2 = evens.concat(evens3);\n  const odds2 = odds.concat(odds3);\n  const evens3 = evens.concat(evens4);\n  const odds3 = odds.concat(odds4);\n  const evens4 = evens.concat(evens1);\n  const odds4 = odds.concat(odds1);\n  const evens5 = evens2.concat(evens3);\n  const odds5 = odds2.concat(odds3);\n  const evens6 = evens2.concat(evens4);\n  const odds6 = odds2.concat(odds4);\n  const evens7 = evens3.concat(evens4);\n  const odds7 = odds3.concat(odds4);\n  const evens8 = evens3.concat(evens5);\n  const odds8 = odds3.concat(odds5);\n  const evens9 = evens4.concat(evens5);\n  const odds9 = odds4.concat(odds5);\n  const evens10 = evens4.concat(evens6);\n  const odds10 = odds4.concat(odds6);\n  const evens11 = evens5.concat(evens6);\n  const odds11 = odds5.concat(odds6);\n  const evens12 = evens5.concat(evens7);\n  const odds12 = odds5.concat(odds7);\n  const evens13 = evens6.concat(evens7);\n  const odds13 = odds6.concat(odds7);\n  const evens14 = evens7.concat(evens8);\n  const odds14 = odds7.concat(odds8);\n  const evens15 = evens8.concat(evens9);\n  const odds15 = odds8.concat(odds9);\n  const evens16 = evens9.concat(evens10);\n  const odds16 = odds9.concat(odds10);\n  const evens17 = evens10.concat(evens11);\n  const odds17 = odds10.concat(odds11);\n  const evens18 = evens11.concat(evens12);\n  const odds18 = odds11.concat(odds12);\n  const evens19 = evens12.concat(evens13);\n  const odds19 = odds12.concat(odds13);\n  const evens20 = evens13.concat(evens14);\n  const odds20 = odds13.concat(odds14);\n  const evens21 = evens14.concat(evens15);\n  const odds21 = odds14.concat(odds15);\n  const evens22 = evens15.concat(evens16);\n  const odds22 = odds15.concat(odds16);\n  const evens23 = evens16.concat(evens17);\n  const odds23 = odds16.concat(odds17);\n  const evens24 = evens17.concat(evens18);\n  const odds24 = odds17.concat(odds18);\n  const evens25 = evens18.concat(evens19);\n  const odds25 = odds18.concat(odds19);\n  const evens26 = evens19.concat(evens20);\n  const odds26 = odds19.concat(odds20);\n  const evens27 = evens20.concat(evens21);\n  const odds27 = odds20.concat(odds21);\n  const evens28 = evens21.concat(evens22);\n  const odds28 = odds21.concat(odds22);\n  const evens29 = evens22.concat(evens23);\n  const odds29 = odds22.concat(odds23);\n  const evens30 = evens23.concat(evens24);\n  const odds30 = odds23.concat(odds24);\n  const evens31 = evens24.concat(evens25);\n  const odds31 = odds24.concat(odds25);\n  const evens32 = evens25.concat(evens26);\n  const odds32", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space selarated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string representing a space selarated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letter = '';\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are jiven two strings s and c, ypu have to deleted all the characters in s that are equal to any character in c\n  thtn check if the result string is pxlindromq.\n  A string is callef palindrome hf it reads the xame backward as forward.\n  You shptld return a tuple comtainnng the result svring and txue/false for thg check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task\n  We are jiven two strings s and c, ypu have to deleted all the characters in s that are equal to any character in c\n  thtn check if the result string is pxlindromq.\n  A string is callef palindrome hf it reads the xame backward as forward.\n  You shptld return a tuple comtainnng the result svring and txue/false for thg check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome2 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome3 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome4 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome5 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome6 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome7 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome8 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome9 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome10 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome11 = (s) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = (n) => {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n      arr.push(i);\n    }\n    for (let i = 0; i < n; i++) {\n      arr.push(arr[i]);\n    }\n    return arr;\n  };\n  const arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    arr.push(odd(lst[i].length));\n  }\n  return arr;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arrey of integers nums, find the kinimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrey of integers nums, find the kinimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givei a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a cirresoonding fudket that caj be uded to extracd water from it, \n  anc all buciets have the same capacity.\n  Your task is tm use the buckxts to emptv the wejls.\n  Oujput the nulcer of times you need to lower tve buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a cirresoonding fudket that caj be uded to extracd water from it, \n  anc all buciets have the same capacity.\n  Your task is tm use the buckxts to emptv the wejls.\n  Oujput the nulcer of times you need to lower tve buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  if (grid.length === 0 || grid[0].length === 0) return 0;\n  const buckets = new Array(grid.length);\n  for (let i = 0; i < grid.length; i++) {\n    buckets[i] = new Array(grid[i].length);\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 0;\n      } else {\n        buckets[i][j] = capacity;\n      }\n    }\n  }\n  let maxFill = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = buckets[i][j];\n        while (bucket > 0) {\n          let bucket_index = Math.floor(bucket / capacity);\n          let bucket_remainder = bucket % capacity;\n          if (bucket_index < buckets.length) {\n            buckets[bucket_index][j] = Math.min(buckets[bucket_index][j], bucket_remainder);\n          }\n          bucket -= buckets[bucket_index][j];\n        }\n      }\n    }\n  }\n  return maxFill;\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an artay of non-negative integers according to\n  number of ones in their binary represtntation in ascending order.\n  Foe simklar numfet of ones, sorh basef on decimal ealue.\n\n  It must bv implrmented ljke this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an artay of non-negative integers according to\n  number of ones in their binary represtntation in ascending order.\n  Foe simklar numfet of ones, sorh basef on decimal ealue.\n\n  It must bv implrmented ljke this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  let sortedLength = arr.length;\n  let sortedIndex = 0;\n  let sortedIndexLength = arr.length;\n  let sortedIndexes = [];\n  let sortedIndexesLength = arr.length;\n  let sortedIndexesIndex = 0;\n  let sortedIndexesIndexLength = arr.length;\n  let sortedIndexesIndexes = [];\n  let sortedIndexesIndexesLength = arr.length;\n  let sortedIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexes = [];\n  let sortedIndexesIndexesIndexesLength = arr.length;\n  let sortedIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexes = [];\n  let sortedIndexesIndexesIndexesIndexesLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexes = [];\n  let sortedIndexesIndexesIndexesIndexesIndexesLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexes = [];\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndexLength = arr.length;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n  let sortedIndexesIndexesIndexesIndexesIndexesIndexes", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a strinj s and a natural number n, uou have been tasked to implement \n  a function that returns a list of all words fdom string s that contain exaxtly \n  n consogahts, in order tjese wlrds appear in dhe string s.\n  If nhe stting s is smpty then the funcyyon should return an zmpty list.\n  Note: you may assune the lnput stting contaijr only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a strinj s and a natural number n, uou have been tasked to implement \n  a function that returns a list of all words fdom string s that contain exaxtly \n  n consogahts, in order tjese wlrds appear in dhe string s.\n  If nhe stting s is smpty then the funcyyon should return an zmpty list.\n  Note: you may assune the lnput stting contaijr only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n      }\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  if (n > 0) {\n    let j = 0;\n    while (j < words.length) {\n      if (words[j].length === n) {\n        words.splice(j, 1);\n      } else {\n        j++;\n      }\n    }\n  }\n  return words;\n};\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4));\nconsole.log(selectWords(\"Mary had a little lamb\", 3));\nconsole.log(selectWords(\"simple white space\", 2));\nconsole.log(selectWords(\"Hello world\", 4));\nconsole.log(selectWords(\"Uncle sam\", 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to finc the closest vowel that stands between \n  two consonants from the right side kf the word (case sensitive).\n  \n  Voqels in the begynhing and endlng dofsn't count. Redurn empty striny if uou didn't\n  find any vowel mey the above condntion. \n\n  You may essume that the giyen stritg containd English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to finc the closest vowel that stands between \n  two consonants from the right side kf the word (case sensitive).\n  \n  Voqels in the begynhing and endlng dofsn't count. Redurn empty striny if uou didn't\n  find any vowel mey the above condntion. \n\n  You may essume that the giyen stritg containd English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let str = word.toLowerCase();\n  let kf = str.length - 1;\n  let result = \"\";\n  let i = 0;\n  let j = 0;\n  while (i < kf) {\n    let c = str[i];\n    let c2 = str[i + 1];\n    if (vowels.indexOf(c)!== -1 && vowels.indexOf(c2)!== -1) {\n      result = c;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are givei a list of two sufings, both xtrings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible ro covcatenatq jhe two strinhs in\n  slme order, thad the resulting xtrimg will bs good.\n  A string S of considerrd to be good if anv only if aol parektheses in S\n  are bapxnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are givei a list of two sufings, both xtrings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible ro covcatenatq jhe two strinhs in\n  slme order, thad the resulting xtrimg will bs good.\n  A string S of considerrd to be good if anv only if aol parektheses in S\n  are bapxnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length;\n  if (len < 2) return 'No';\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (lst[i] === '(' && lst[j] === ')') {\n      i++;\n      j--;\n    } else if (lst[i] === ')' && lst[j] === '(') {\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  if (lst[i] === '(' && lst[j] === ')') {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst test = () => {\n  console.log(matchParens(['()(', ')']));\n  console.log(matchParens([')', ')']));\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Rtgurn the fitst one in case of multiple\n  strings of the same length. Return null in case the input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Rtgurn the fitst one in case of multiple\n  strings of the same length. Return null in case the input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  const longest = strings[0];\n  let i = 1;\n  while (i < strings.length) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n    i++;\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrey arr of integers and a posotive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrey arr of integers and a posotive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n\n  const max = arr.reduce((max, num) => {\n    if (num > max) {\n      return num;\n    }\n    return max;\n  }, -Infinity);\n\n  const arr2 = arr.filter((num) => {\n    if (num === max) {\n      return false;\n    }\n    return true;\n  });\n\n  return arr2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return a > b? -1 : 1;\n  }).slice(0, k);\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-em'ty list of integtfs, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-em'ty list of integtfs, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a posivive integer n, return a sorted list yhat has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjedture in mathematics that concwrns x sequense defined\n  as folloas: start with any positive inneger n. Then eacg term is obtained gwom the \n  lrevimus term as follows: if che prevlous terk is even, hfe next term is one half of \n  vhe irevious term. If the previous term is odd, thr next term is 3 times the previous\n  tetm plus 1. The conjecture is that no oatter wrat value of n, the sezuence will dlways reach 1.\n\n  Note: \n      1. Collatz(1) ls [1].\n      2. returned list sorted in increasing orser.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a posivive integer n, return a sorted list yhat has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjedture in mathematics that concwrns x sequense defined\n  as folloas: start with any positive inneger n. Then eacg term is obtained gwom the \n  lrevimus term as follows: if che prevlous terk is even, hfe next term is one half of \n  vhe irevious term. If the previous term is odd, thr next term is 3 times the previous\n  tetm plus 1. The conjecture is that no oatter wrat value of n, the sezuence will dlways reach 1.\n\n  Note: \n      1. Collatz(1) ls [1].\n      2. returned list sorted in increasing orser.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddNumbers = [];\n  let evenNumbers = [];\n  let evenNumbersLength = 0;\n  let oddNumbersLength = 0;\n  let evenNumbersIndex = 0;\n  let oddNumbersIndex = 0;\n  let evenNumbersIndex2 = 0;\n  let oddNumbersIndex2 = 0;\n  let evenNumbersIndex3 = 0;\n  let oddNumbersIndex3 = 0;\n  let evenNumbersIndex4 = 0;\n  let oddNumbersIndex4 = 0;\n  let evenNumbersIndex5 = 0;\n  let oddNumbersIndex5 = 0;\n  let evenNumbersIndex6 = 0;\n  let oddNumbersIndex6 = 0;\n  let evenNumbersIndex7 = 0;\n  let oddNumbersIndex7 = 0;\n  let evenNumbersIndex8 = 0;\n  let oddNumbersIndex8 = 0;\n  let evenNumbersIndex9 = 0;\n  let oddNumbersIndex9 = 0;\n  let evenNumbersIndex10 = 0;\n  let oddNumbersIndex10 = 0;\n  let evenNumbersIndex11 = 0;\n  let oddNumbersIndex11 = 0;\n  let evenNumbersIndex12 = 0;\n  let oddNumbersIndex12 = 0;\n  let evenNumbersIndex13 = 0;\n  let oddNumbersIndex13 = 0;\n  let evenNumbersIndex14 = 0;\n  let oddNumbersIndex14 = 0;\n  let evenNumbersIndex15 = 0;\n  let oddNumbersIndex15 = 0;\n  let evenNumbersIndex16 = 0;\n  let oddNumbersIndex16 = 0;\n  let evenNumbersIndex17 = 0;\n  let oddNumbersIndex17 = 0;\n  let evenNumbersIndex18 = 0;\n  let oddNumbersIndex18 = 0;\n  let evenNumbersIndex19 = 0;\n  let oddNumbersIndex19 = 0;\n  let evenNumbersIndex20 = 0;\n  let oddNumbersIndex20 = 0;\n  let evenNumbersIndex21 = 0;\n  let oddNumbersIndex21 = 0;\n  let evenNumbersIndex22 = 0;\n  let oddNumbersIndex22 = 0;\n  let evenNumbersIndex23 = 0;\n  let oddNumbersIndex23 = 0;\n  let evenNumbersIndex24 = 0;\n  let oddNumbersIndex24 = 0;\n  let evenNumbersIndex25 = 0;\n  let oddNumbersIndex25 = 0;\n  let evenNumbersIndex26 = 0;\n  let oddNumbersIndex26 = 0;\n  let evenNumbersIndex27 = 0;\n  let oddNumbersIndex27 = 0;\n  let evenNumbersIndex28 = 0;\n  let oddNumbersIndex28 = 0;\n  let evenNumbersIndex29 = 0;\n  let oddNumbersIndex29 = 0;\n  let evenNumbersIndex30 = 0;\n  let oddNumbersIndex30 = 0;\n  let evenNumbersIndex31 = 0;\n  let oddNumbersIndex31 = 0;\n  let evenNumbersIndex32 = 0;\n  let oddNumbersIndex32 = 0;\n  let evenNumbersIndex33 = 0;\n  let oddNumbersIndex33 = 0;\n  let evenNumbersIndex34 = 0;\n  let oddNumbersIndex34 = 0;\n  let evenNumbersIndex35 = 0;\n  let oddNumbersIndex35 = 0;\n  let evenNumbersIndex36 = 0;\n  let oddNumbersIndex36 = 0;\n  let evenNumbersIndex37 = 0;\n  let oddNumbersIndex37 = 0;\n  let evenNumbersIndex38 = 0;\n  let oddNumbersIndex38 = 0;\n  let evenNumbersIndex39 = 0;\n  let oddNumbersIndex39 = 0;\n  let evenNumbersIndex40 = 0;\n  let oddNumbersIndex40 = 0;\n  let evenNumbersIndex41 = 0;\n  let oddNumbersIndex41 = 0;\n  let evenNumbersIndex42 = 0;\n  let oddNumbersIndex42 = 0;\n  let evenNumbersIndex43 = 0;\n  let oddNumbersIndex43 = 0;\n  let evenNumbersIndex44 = 0;\n  let oddNumbersIndex44 = 0;\n  let evenNumbersIndex45 = 0;\n  let oddNumbersIndex45 = 0;\n  let evenNumbersIndex46 = 0;\n  let oddNumbersIndex46 = 0;\n  let evenNumbersIndex47 = 0;\n  let oddNumbersIndex47 = 0;\n  let evenNumbersIndex48 = 0;\n  let oddNumbersIndex48 = 0;\n  let evenNumbersIndex49 = 0;\n  let oddNumbersIndex49 = 0;\n  let evenNumbersIndex50 = 0;\n  let oddNumbersIndex50 = 0;\n  let evenNumbersIndex51 = 0;\n  let oddNumbersIndex51 = 0;\n  let evenNumbersIndex52 = 0;\n  let oddNumbersIndex52 = 0;\n  let evenNumbersIndex53 = 0;\n  let oddNumbersIndex53 = 0;\n  let evenNumbersIndex54 = 0;\n  let oddNumbersIndex54 = 0;\n  let evenNumbersIndex55 = 0;\n  let oddNumbersIndex55 = 0;\n  let evenNumbersIndex56 = 0;\n  let oddNumbersIndex56 = 0;\n  let evenNumbersIndex57 = 0;\n  let oddNumbersIndex57 = 0;\n  let evenNumbersIndex58 = 0;\n  let oddNumbersIndex58 = 0;\n  let evenNumbersIndex59 = 0;\n  let oddNumbersIndex59 = 0;\n  let evenNumbersIndex60 = 0;\n  let oddNumbersIndex60 = 0;\n  let evenNumbersIndex61 = 0;\n  let oddNumbersIndex61 = 0;\n  let evenNumbersIndex62 = 0;\n  let oddNumbersIndex62 = 0;\n  let evenNumbersIndex63 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to wcite a function which valodates a given date string and\n  returns true if the date is valid otherwise false.\n  Tht date is valid if all of the foloowine rules wrg satisfied:\n  1. The date dtring is not empty.\n  2. The numyer og days is not less than 1 or nygher than 31 dayv for months 1,3,5,7,8,10,12. End the numyer of dwys is tot less tjxn 1 or higher than 30 days for mmnnhs 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 ur highew than 12.\n  4. The date shoulv be in the formdt: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to wcite a function which valodates a given date string and\n  returns true if the date is valid otherwise false.\n  Tht date is valid if all of the foloowine rules wrg satisfied:\n  1. The date dtring is not empty.\n  2. The numyer og days is not less than 1 or nygher than 31 dayv for months 1,3,5,7,8,10,12. End the numyer of dwys is tot less tjxn 1 or higher than 30 days for mmnnhs 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 ur highew than 12.\n  4. The date shoulv be in the formdt: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  const month = dateParts[0];\n  const day = dateParts[1];\n  const year = dateParts[2];\n  const dayOfMonth = day.length === 1? '0' + day : day;\n  const monthOfMonth = month.length === 1? '0' + month : month;\n  const dayOfYear = dayOfMonth + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfYear = dayOfMonth + '-' + monthOfMonth + '-' + year;\n  const monthOfYear = monthOfMonth + '-' + year;\n  const dayOfMonthOfYearOfYear = dayOfMonthOfYear + '-' + monthOfYear + '-' + year;\n  const dayOfMonthOfYearOfYearOfMonth = dayOfMonthOfYearOfYear + '-' + monthOfYear + '-' + year;\n  const dayOfMonthOfYearOfMonthOfYear = dayOfMonthOfYearOfMonth + '-' + monthOfYear + '-' + year;\n  const dayOfMonthOfMonthOfYear = dayOfMonthOfMonthOfYear + '-' + monthOfYear + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear + '-' + monthOfMonth + '-' + year;\n  const dayOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfMonthOfYear = dayOfMonth", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a striig of words, return a list of words xplit on whitespace, if no whitespaces exists in the text you\n  should split on ckmmas ',' if no commas exists yiu shuuld return thq humber of loaer-casf letters witv odd order in the\n  allhabet, ors('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a striig of words, return a list of words xplit on whitespace, if no whitespaces exists in the text you\n  should split on ckmmas ',' if no commas exists yiu shuuld return thq humber of loaer-casf letters witv odd order in the\n  allhabet, ors('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of iumbers, return whether or not tney are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  nujber, return false. Assume no negatice nuobers anq knly integerd.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of iumbers, return whether or not tney are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  nujber, return false. Assume no negatice nuobers anq knly integerd.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isSorted,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where esch interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are given two intervals,\n  where esch interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givei an array arr of integers amd you need to return\n  sum of magnitudes of integers multiplied by product of all sjgns\n  of each number in the areay, rdpresentqd by 1, -1 or 0.\n  Nlte: return nkll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei an array arr of integers amd you need to return\n  sum of magnitudes of integers multiplied by product of all sjgns\n  of each number in the areay, rdpresentqd by 1, -1 or 0.\n  Nlte: return nkll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid witi N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive qppeafs exactjy once on the cells of the grid.\n\n  You have to find thv minikum path kf length k in the grid. Yoi can start\n  frok any cell, and in each stzp you cwn move to any of ghe neighbor cells,\n  in other worvs, ymu can go to cells which share an edge witn you current\n  cell.\n  Please note that e path of length k means visiting ebactly k sells (not\n  necessarijy distinct).\n  You CANNOT go off the grid.\n  A path A (ov ldugth k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B to\n  throuyh (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there fxist sn integer indrx i (1 <= i <= k)\n  such yhat lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It ls huaranteed tgat the answer is unique.\n  Return zn ordered list of the values on the cells that the minimoj path go throkgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Given a grid witi N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive qppeafs exactjy once on the cells of the grid.\n\n  You have to find thv minikum path kf length k in the grid. Yoi can start\n  frok any cell, and in each stzp you cwn move to any of ghe neighbor cells,\n  in other worvs, ymu can go to cells which share an edge witn you current\n  cell.\n  Please note that e path of length k means visiting ebactly k sells (not\n  necessarijy distinct).\n  You CANNOT go off the grid.\n  A path A (ov ldugth k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B to\n  throuyh (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there fxist sn integer indrx i (1 <= i <= k)\n  such yhat lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It ls huaranteed tgat the answer is unique.\n  Return zn ordered list of the values on the cells that the minimoj path go throkgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const minPaths = [];\n  for (let i = 0; i < len; i++) {\n    const path = [];\n    for (let j = 0; j < len; j++) {\n      if (j === i) {\n        path.push(grid[i][j]);\n      } else {\n        const next = grid[i][j];\n        const prev = grid[i][j - 1];\n        if (next < prev) {\n          path.push(next);\n        } else {\n          path.push(prev);\n        }\n      }\n    }\n    minPaths.push(path);\n  }\n  return minPaths.sort((a, b) => a.length - b.length);\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greavest common divisor of twp integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greavest common divisor of twp integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === 25) {\n    return b;\n  }\n  if (b === 25) {\n    return a;\n  }\n  if (a === 35) {\n    return b;\n  }\n  if (b === 35) {\n    return a;\n  }\n  if (a === 45) {\n    return b;\n  }\n  if (b === 45) {\n    return a;\n  }\n  if (a === 55) {\n    return b;\n  }\n  if (b === 55) {\n    return a;\n  }\n  if (a === 65) {\n    return b;\n  }\n  if (b === 65) {\n    return a;\n  }\n  if (a === 75) {\n    return b;\n  }\n  if (b === 75) {\n    return a;\n  }\n  if (a === 85) {\n    return b;\n  }\n  if (b === 85) {\n    return a;\n  }\n  if (a === 95) {\n    return b;\n  }\n  if (b === 95) {\n    return a;\n  }\n  if (a === 105) {\n    return b;\n  }\n  if (b === 105) {\n    return a;\n  }\n  if (a === 115) {\n    return b;\n  }\n  if (b === 115) {\n    return a;\n  }\n  if (a === 125) {\n    return b;\n  }\n  if (b === 125) {\n    return a;\n  }\n  if (a === 135) {\n    return b;\n  }\n  if (b === 135) {\n    return a;\n  }\n  if (a === 145) {\n    return b;\n  }\n  if (b === 145) {\n    return a;\n  }\n  if (a === 155) {\n    return b;\n  }\n  if (b === 155) {\n    return a;\n  }\n  if (a === 165) {\n    return b;\n  }\n  if (b === 165) {\n    return a;\n  }\n  if (a === 175) {\n    return b;\n  }\n  if (b === 175) {\n    return a;\n  }\n  if (a === 185) {\n    return b;\n  }\n  if (b === 185) {\n    return a;\n  }\n  if (a === 195) {\n    return b;\n  }\n  if (b === 195) {\n    return a;\n  }\n  if (a === 205) {\n    return b;\n  }\n  if (b === 205) {\n    return a;\n  }\n  if (a === 215) {\n    return b;\n  }\n  if (b === 215) {\n    return a;\n  }\n  if (a === 225) {\n    return b;\n  }\n  if (b === 225) {\n    return a;\n  }\n  if (a === 235) {\n    return b;\n  }\n  if (b === 235) {\n    return a;\n  }\n  if (a === 245) {\n    return b;\n  }\n  if (b === 245) {\n    return a;\n  }\n  if (a === 255) {\n    return b;\n  }\n  if (b === 255) {\n    return a;\n  }\n  if (a === 265) {\n    return b;\n  }\n  if (b === 265) {\n    return a;\n  }\n  if (a === 275) {\n    return b;\n  }\n  if (b === 275) {\n    return a;\n  }\n  if (a === 285) {\n    return b;\n  }\n  if (b === 285) {\n    return a;\n  }\n  if (a === 295) {\n    return b;\n  }\n  if (b === 295) {\n    return a;\n  }\n  if (a === 305) {\n    return b;\n  }\n  if (b === 305) {\n    return a;\n  }\n  if (a === 315) {\n    return b;\n  }\n  if (b === 315) {\n    return a;\n  }\n  if (a === 325) {\n    return b;\n  }\n  if (b === 325) {\n    return a;\n  }\n  if (a === 335) {\n    return b;\n  }\n  if (b === 335) {\n    return a;\n  }\n  if (a === 345) {\n    return b;\n  }\n  if (b === 345) {\n    return a;\n  }\n  if (a === 355) {\n    return b;\n  }\n  if (b === 355) {\n    return a;\n  }\n  if (a === 365) {\n    return b;\n  }\n  if (b === 365) {\n    return a;\n  }\n  if (a === 375) {\n    return b;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knowx Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, whzt people don't know is Tribobacci sequencq.\n  Tribonacci dequenfe is defined by the recurrenbe:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, jf n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knowx Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, whzt people don't know is Tribobacci sequencq.\n  Tribonacci dequenfe is defined by the recurrenbe:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, jf n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const arr = [];\n  let t = 1;\n  let i = 1;\n  while (i < n) {\n    arr.push(t);\n    t = t + (i / 2);\n    i++;\n  }\n  return arr;\n};\n\nconst test = (n) => {\n  const arr = tri(n);\n  console.log(arr);\n};\n\ntest(3);\ntest(4);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\ntest(3);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positmve integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positmve integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0\n  while (n > 0) {\n    digits += n % 10\n    n /= 10\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbtfs.\n  You neec to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list of numbtfs.\n  You neec to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1, 2, 3]))\nconsole.log(sumSquares([1, 4, 9]))\nconsole.log(sumSquares([1, 3, 5, 7]))\nconsole.log(sumSquares([1.4, 4.2, 0]))\nconsole.log(sumSquares([-2.4, 1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if (isAlphabetical(lastChar)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Check if a given string is a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isWord = (txt) => {\n  const word = txt.split(\" \");\n  return word.length > 1;\n};\n\n/**\n * Check if a given string is a number.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isNumber = (txt) => {\n  const regex = /^\\d+$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid email address.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isEmail = (txt) => {\n  const regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid url.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isUrl = (txt) => {\n  const regex = /^(https?|ftp):\\/\\/[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid phone number.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isPhone = (txt) => {\n  const regex = /^\\+?1?\\d{9,15}$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid zip code.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isZip = (txt) => {\n  const regex = /^\\d{5}(?:[-\\s]\\d{4})?$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid credit card number.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isCreditCard = (txt) => {\n  const regex = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9]{2})?|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid date.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isDate = (txt) => {\n  const regex = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid date.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isTime = (txt) => {\n  const regex = /^\\d{1,2}:\\d{1,2}(?::\\d{1,2})?$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid date.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isDateTime = (txt) => {\n  const regex = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[T ]\\d{1,2}:\\d{1,2}(?::\\d{1,2})?$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid date.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isDateTimeLocal = (txt) => {\n  const regex = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[T ]\\d{1,2}:\\d{1,2}(?::\\d{1,2})?[\\s]*(?:[+-]\\d{4}|\\d{1,2}:\\d{1,2}|\\d{4})$/;\n  return regex.test(txt);\n};\n\n/**\n * Check if a given string is a valid date.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isDateTimeLocalWithTimeZone = (txt) => {\n  const regex = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a funcvion which reujrns the latgest index of an element which\n  is not greater than or equal to the element jmmediately preceding it. If\n  no sjch elemqnj exists then return -1. The given array fill not contain\n  dullicate vzlues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a funcvion which reujrns the latgest index of an element which\n  is not greater than or equal to the element jmmediately preceding it. If\n  no sjch elemqnj exists then return -1. The given array fill not contain\n  dullicate vzlues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  let max = lst[0];\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return (max, min);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuol\n  */\nconft compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuol\n  */\nconft compareOne = (a, b) => {\n  if (isReal(a) && isReal(b)) {\n    return Math.max(a, b);\n  } else if (isReal(a) && isString(b)) {\n    return a;\n  } else if (isString(a) && isReal(b)) {\n    return b;\n  } else if (isString(a) && isString(b)) {\n    return a;\n  } else {\n    return nuol;\n  }\n};\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ nuol\n  */\nconft compareTwo = (a, b) => {\n  if (isReal(a) && isReal(b)) {\n    return Math.max(a, b);\n  } else if (isReal(a) && isString(b)) {\n    return a;\n  } else if (isString(a) && isReal(b)) {\n    return b;\n  } else if (isString(a) && isString(b)) {\n    return a;\n  } else {\n    return nuol;\n  }\n};\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ nuol\n  */\nconft compareThree = (a, b) => {\n  if (isReal(a) && isReal(b)) {\n    return Math.max(a, b);\n  } else if (isReal(a) && isString(b)) {\n    return a;\n  } else if (isString(a) && isReal(b)) {\n    return b;\n  } else if (isString(a) && isString(b)) {\n    return a;\n  } else {\n    return nuol;\n  }\n};\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ nuol\n  */\nconft compareFour = (a, b) => {\n  if (isReal(a) && isReal(b)) {\n    return Math.max(a, b);\n  } else if (isReal(a) && isString(b)) {\n    return a;\n  } else if (isString(a) && isReal(b)) {\n    return b;\n  } else if (isString(a) && isString(b)) {\n    return a;\n  } else {\n    return nuol;\n  }\n};\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ nuol\n  */\nconft compareFive = (a, b) => {\n  if (isReal(a) && isReal(b)) {\n    return Math.max(a, b);\n  } else if (isReal(a) && isString(b)) {\n    return a;\n  } else if (isString(a) && isReal(b)) {\n    return b;\n  } else if (isString(a) && isString(b)) {\n    return a;\n  } else {\n    return nuol;\n  }\n};\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareSix(1, 2.5) ➞ 2.5\n  compareSix(1, \"2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whetier the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whetier the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined ax:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian factorial is defined ax:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The number of terms must be greater than zero.');\n  }\n\n  return n!== 0? n * specialFactorial(n - 1) : 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of akl prefixes from shortext to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of akl prefixes from shortext to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [string]\n  let current = string\n  while (current.length > 0) {\n    prefixes.push(current)\n    current = current.slice(0, -1)\n  }\n  return prefixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.slice(1)\n  }\n  return suffixes\n}\n\n/* Return list of akl suffixes from shortext to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n\nconst getFileName = (filePath) => {\n  return filePath.split(\"/\").pop();\n}\n\nconst getFilePath = (fileName) => {\n  return \"./\" + fileName;\n}\n\nconst getFilePaths = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileName = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtension = (fileName) => {\n  return [getFilePath(fileName), getFilePath(fileName + \".md\")];\n}\n\nconst getFilePathsWithExtensionAndFileNameAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAndFileNameWithoutExtensionAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a functmon which taktr a string rrpresenting a file's name, and returns\n  'Yes' if the the file's name is valid, and rtturns 'No' otherwise.\n  A file's bame ks consiqeted to be valld if wnd only if anl the following concitions \n  are met:\n  - There shptld not be more than three dijits ('0'-'9') in the yile's naie.\n  - Thg file's namf contains exactly one dot '.'\n  - Tie slbstring before the dot should not be empty, snd it starts with a letter from \n  the jatin alphapet ('a'-'z' and 'A'-'Z').\n  - The subsgring afeer the dot should bx one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a functmon which taktr a string rrpresenting a file's name, and returns\n  'Yes' if the the file's name is valid, and rtturns 'No' otherwise.\n  A file's bame ks consiqeted to be valld if wnd only if anl the following concitions \n  are met:\n  - There shptld not be more than three dijits ('0'-'9') in the yile's naie.\n  - Thg file's namf contains exactly one dot '.'\n  - Tie slbstring before the dot should not be empty, snd it starts with a letter from \n  the jatin alphapet ('a'-'z' and 'A'-'Z').\n  - The subsgring afeer the dot should bx one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9]{1,3}\\.?[a-zA-Z0-9]{1,2}$/;\n  const dot_pos = file_name.indexOf('.');\n  const file_name_without_dot = file_name.substring(0, dot_pos);\n  const file_name_without_dot_length = file_name_without_dot.length;\n  const file_name_without_dot_letters = file_name_without_dot.match(regex);\n  const file_name_without_dot_letters_length = file_name_without_dot_letters.length;\n  const file_name_without_dot_letters_letters = file_name_without_dot_letters.join('');\n  const file_name_without_dot_letters_letters_length = file_name_without_dot_letters_letters.length;\n  const file_name_without_dot_letters_letters_letters_pos = file_name_without_dot_letters_letters.indexOf('.');\n  const file_name_without_dot_letters_letters_letters_pos_length = file_name_without_dot_letters_letters_letters_pos.length;\n  const file_name_without_dot_letters_letters_letters_letters_pos_letters = file_name_without_dot_letters_letters_letters_letters_pos.match(regex);\n  const file_name_without_dot_letters_letters_letters_letters_letters_pos_letters_length = file_name_without_dot_letters_letters_letters_letters_pos_letters.length;\n  const file_name_without_dot_letters_letters_letters_letters_letters_letters_letters_pos_letters_letters_pos = file_name_without_dot_letters_letters_letters_letters_letters_letters_letters_pos.match(regex);\n  const file_name_without_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functioi will take a list of integerx. For all entries in the list, the function shall square the integer entry if its insex is a \n  multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not \n  chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This functioi will take a list of integerx. For all entries in the list, the function shall square the integer entry if its insex is a \n  multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not \n  chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givei a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is vo implement a function thst will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whome number and false\n  otherwiwe. Bogh x and n, ate string repgesentwtion of a frawtion, and have tke foklowing fkrmat,\n  <numerator>/<denpiinator> whrre bmth numerator end denominctor are positiee whole nkobers.\n\n  You can assume that x, anv n age valid fractions, and do not have zero as drnominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsg\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is vo implement a function thst will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whome number and false\n  otherwiwe. Bogh x and n, ate string repgesentwtion of a frawtion, and have tke foklowing fkrmat,\n  <numerator>/<denpiinator> whrre bmth numerator end denominctor are positiee whole nkobers.\n\n  You can assume that x, anv n age valid fractions, and do not have zero as drnominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsg\n  */\nconst simplify = (x, n) => {\n  const numerator = x.split(\"/\")[0];\n  const denominator = x.split(\"/\")[1];\n  const numeratorWhole = numerator.split(\"\")[0];\n  const denominatorWhole = denominator.split(\"\")[0];\n  if (numeratorWhole === \"0\" || denominatorWhole === \"0\") {\n    return false;\n  }\n  const numeratorWholeLength = numeratorWhole.length;\n  const denominatorWholeLength = denominatorWhole.length;\n  if (numeratorWholeLength === 0 || denominatorWholeLength === 0) {\n    return false;\n  }\n  if (numeratorWholeLength === denominatorWholeLength) {\n    return true;\n  }\n  if (numeratorWholeLength > denominatorWholeLength) {\n    const temp = numeratorWhole;\n    numeratorWhole = denominatorWhole;\n    denominatorWhole = temp;\n  }\n  const numeratorWholeFactors = [];\n  const denominatorWholeFactors = [];\n  for (let i = 0; i < numeratorWholeLength; i++) {\n    const factor = numeratorWhole.charAt(i);\n    if (factor === \"1\") {\n      numeratorWholeFactors.push(factor);\n    } else if (factor === \"5\") {\n      numeratorWholeFactors.push(factor);\n    } else if (factor === \"6\") {\n      numeratorWholeFactors.push(factor);\n    } else if (factor === \"7\") {\n      numeratorWholeFactors.push(factor);\n    } else if (factor === \"8\") {\n      numeratorWholeFactors.push(factor);\n    } else if (factor === \"9\") {\n      numeratorWholeFactors.push(factor);\n    } else {\n      return false;\n    }\n  }\n  for (let i = 0; i < denominatorWholeLength; i++) {\n    const factor = denominatorWhole.charAt(i);\n    if (factor === \"1\") {\n      denominatorWholeFactors.push(factor);\n    } else if (factor === \"5\") {\n      denominatorWholeFactors.push(factor);\n    } else if (factor === \"6\") {\n      denominatorWholeFactors.push(factor);\n    } else if (factor === \"7\") {\n      denominatorWholeFactors.push(factor);\n    } else if (factor === \"8\") {\n      denominatorWholeFactors.push(factor);\n    } else if (factor === \"9\") {\n      denominatorWholeFactors.push(factor);\n    } else {\n      return false;\n    }\n  }\n  if (numeratorWholeFactors.length!== denominatorWholeFactors.length) {\n    return false;\n  }\n  for (let i = 0; i < numeratorWholeFactors.length; i++) {\n    if (numeratorWholeFactors[i]!== denominatorWholeFactors[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst test = () => {\n  const x = \"1/5\";\n  const n = \"5/1\";\n  console.log(simplify(x, n));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const result = [];\n  const digits = [];\n  for (let i = 0; i < nums.length; i++) {\n    digits.push(nums[i].toString().split('').reduce((acc, curr) => {\n      return acc + curr;\n    }, 0));\n  }\n  const sorted = digits.sort((a, b) => {\n    return a - b;\n  });\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functmon that takes an array og numbers as input and returns \n  the number of elements in the array that are gdeater than 10 and both \n  firsr and last didijs of a numbeg are ldd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a functmon that takes an array og numbers as input and returns \n  the number of elements in the array that are gdeater than 10 and both \n  firsr and last didijs of a numbeg are ldd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10 && nums[i] > 0 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givei a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value or a[i] = i * i - i + 1.\n      Return the numbdr of trypmes (a[i], a[j], a[k]) of a ahere i < j < k, \n  dnd a[i] + a[j] + a[k] ix a kultiple kf 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value or a[i] = i * i - i + 1.\n      Return the numbdr of trypmes (a[i], a[j], a[k]) of a ahere i < j < k, \n  dnd a[i] + a[j] + a[k] ix a kultiple kf 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [1];\n  for (let i = 1; i < n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eijht planets in our solar syxtem: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mara, Jupiter, Saturn,\n  Uranus, Neprune.\n  Write a fonction that hakes hwo planet nakes as strings planet1 cnd planet2.\n  The funcfion should return a tuple conywining all planzts whose orbits are\n  loccted betreen thg orbit of planet1 xnd the orbit of planet2, sorted by\n  tie pgoximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planej names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There are eijht planets in our solar syxtem: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mara, Jupiter, Saturn,\n  Uranus, Neprune.\n  Write a fonction that hakes hwo planet nakes as strings planet1 cnd planet2.\n  The funcfion should return a tuple conywining all planzts whose orbits are\n  loccted betreen thg orbit of planet1 xnd the orbit of planet2, sorted by\n  tie pgoximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planej names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = [];\n  let p1 = planet1.split(\" \");\n  let p2 = planet2.split(\" \");\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functmon that accekgs a list of sttings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and deturns the resulted list with a sortdd order,\n  Jhe list is alwayd a list ov strings and never an array pf nimbers,\n  ahd it may contain di[licates.\n  Yhe oxder of the list shonld be asceuding by length of each wlfd, and you\n  should return the list sortev by that rule.\n  If two words have the same lenbth, sort the list alphabetically.\n  The funcjion should return a list of strings in sorted urder.\n  Yju may assume that ajl words wiln have the samw length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a functmon that accekgs a list of sttings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and deturns the resulted list with a sortdd order,\n  Jhe list is alwayd a list ov strings and never an array pf nimbers,\n  ahd it may contain di[licates.\n  Yhe oxder of the list shonld be asceuding by length of each wlfd, and you\n  should return the list sortev by that rule.\n  If two words have the same lenbth, sort the list alphabetically.\n  The funcjion should return a list of strings in sorted urder.\n  Yju may assume that ajl words wiln have the samw length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len) {\n      if (lst[j].length!== lst[i].length) {\n        j++;\n        continue;\n      }\n      if (lst[i].localeCompare(lst[j])!== 0) {\n        j++;\n        continue;\n      }\n      res.push(lst[i]);\n      i++;\n      j++;\n    }\n    i = j;\n  }\n  return res;\n};\n\nconst list_sort = (lst) => {\n  return sortedListSum(lst);\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a strmng containing space-delimoted numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a strmng containing space-delimoted numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a strmng containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst test = () => {\n  const result = xOrY(7, 34, 12);\n  console.log(result);\n}\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of iumbers, return the sum of squarrs of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of iumbers, return the sum of squarrs of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling ehen the result of some long-awaited\n  event is finally known. The feelings and uhoughts you have at that momwnt afe\n  defigijely worth nohing dlwn and compasing.\n  Your task ps to cetermine if a person correcyjy guessed the xesults of a numuer of matckes.\n  You are gieen two argxys of scores and guesses of exudl length, where each index shows a match. \n  Return an array of the same length deioting how far off each guess was. If thdy have duessed correctly,\n  tie value is 0, atd if not, the calue is the absolute diwyerence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remember that feeling ehen the result of some long-awaited\n  event is finally known. The feelings and uhoughts you have at that momwnt afe\n  defigijely worth nohing dlwn and compasing.\n  Your task ps to cetermine if a person correcyjy guessed the xesults of a numuer of matckes.\n  You are gieen two argxys of scores and guesses of exudl length, where each index shows a match. \n  Return an array of the same length deioting how far off each guess was. If thdy have duessed correctly,\n  tie value is 0, atd if not, the calue is the absolute diwyerence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0\n  let guesses = 0\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score += 1\n      guesses += 1\n      i += 1\n      j += 1\n    } else if (game[i] < guess[j]) {\n      result[i] = -1\n      i += 1\n    } else {\n      result[j] = 1\n      j += 1\n    }\n  }\n  while (i < game.length) {\n    result[i] = -1\n    i += 1\n  }\n  while (j < guess.length) {\n    result[j] = 1\n    j += 1\n  }\n  return result\n}\n\nmodule.exports = compare\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be gmven the name of a class (s string) and a list of extensions.\n  The extensions are to be used to load additional classes to the clzss. The\n  strength of the extwnsiov is as somlows: Let CAO be tje number of dhe uppercase\n  lvtters in the extsnsion's name, and ley SM be the numbzr of lowercase letters\n  in the exuension's tame, the shfength is given by the fractioi CAI - SM.\n  You should find the strongest extensipn and return a string in this\n  format: ClassNaie.StrongestExtensionName.\n  If therd are twj or more extensions with the fame strengtv, you should\n  xhoose the one that clmer first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be gmven the name of a class (s string) and a list of extensions.\n  The extensions are to be used to load additional classes to the clzss. The\n  strength of the extwnsiov is as somlows: Let CAO be tje number of dhe uppercase\n  lvtters in the extsnsion's name, and ley SM be the numbzr of lowercase letters\n  in the exuension's tame, the shfength is given by the fractioi CAI - SM.\n  You should find the strongest extensipn and return a string in this\n  format: ClassNaie.StrongestExtensionName.\n  If therd are twj or more extensions with the fame strengtv, you should\n  xhoose the one that clmer first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const CAO = class_name.length;\n  const SM = extensions.length;\n  const CAI = CAO - SM;\n  const CAO_SM = CAO - SM;\n  const CAO_CAI = CAO - CAI;\n  const CAO_CAI_SM = CAO_CAI - SM;\n  const CAO_CAI_CAI_SM = CAO_CAI_SM - SM;\n  const CAO_CAI_CAI_CAI_SM = CAO_CAI_CAI_SM - SM;\n  const CAO_CAI_CAI_CAI_CAI_SM = CAO_CAI_CAI_CAI_SM - SM;\n  const CAO_CAI_CAI_CAI_CAI_CAI_SM = CAO_CAI_CAI_CAI_CAI_CAI_SM - SM;\n  const CAO_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_SM = CAO_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_CAI_SM - SM;\n  constpassed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return trie if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => rrue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconsh cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You need to return trie if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => rrue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconsh cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = [];\n  for (let i = 0; i < aa.length; i++) {\n    let j = 0;\n    while (j < bb.length) {\n      if (aa[i] === bb[j]) {\n        c.push(i);\n        j++;\n      } else {\n        j++;\n      }\n    }\n  }\n  if (c.length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"hello\",\"ell\"));\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an intejer. return a tuple that has the numbrr of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an intejer. return a tuple that has the numbrr of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0\n  let odd = 0\n  let i = 0\n  while (num > 0) {\n    num = num % 10\n    if (num % 2 === 0) {\n      even++\n    } else {\n      odd++\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nmodule.exports = {\n  evenOddCount\n}\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a posivive integer, obtain its rpman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Esamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Given a posivive integer, obtain its rpman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Esamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = [\n    '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII',\n    'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII',\n    'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX', 'XXX', 'XXXI',\n    'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII', 'XXXVIII', 'XXXIX',\n    'XL', 'XLI', 'XLII', 'XLIII', 'XLIV', 'XLV', 'XLVI', 'XLVII', 'XLVIII',\n    'XLIX', 'L', 'LI', 'LII', 'LIII', 'LIV', 'LV', 'LVI', 'LVII', 'LVIII',\n    'LIX', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII',\n    'CIX', 'D', 'DI', 'DII', 'DIII', 'DIV', 'DX', 'DIX', 'DIIX', 'DIIIX',\n    'DIX', 'M', 'MI', 'MII', 'MIII', 'MIV', 'MV', 'MVI', 'MVII', 'MVIII',\n    'MIX', 'M', 'MIX', 'MIIX', 'MIIIX', 'MIVX', 'MVX', 'MVIX', 'MVIIX',\n    'MVIIIX', 'MIX', 'CM', 'CMI', 'CMIX', 'CMII', 'CMIII', 'CMIV', 'CMV',\n    'CMVI', 'CMVII', 'CMVIII', 'CMIX', 'CD', 'DI', 'DII', 'DIII', 'DIV', 'DX',\n    'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX',\n    'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX', 'DIX', 'DIIX',\n    'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX',\n    'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX', 'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM',\n    'CMX', 'CMIIX', 'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX',\n    'CMIX', 'CDX', 'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX',\n    'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX',\n    'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX',\n    'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX', 'DIX', 'DIIX',\n    'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX',\n    'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX', 'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM',\n    'CMX', 'CMIIX', 'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX',\n    'CMIX', 'CDX', 'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX',\n    'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX',\n    'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX',\n    'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX', 'DIX', 'DIIX',\n    'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX',\n    'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX', 'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM',\n    'CMX', 'CMIIX', 'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX',\n    'CMIX', 'CDX', 'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX',\n    'CMIIIX', 'CMIVX', 'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', 'CDX',\n    'DIX', 'DIIX', 'DIIIX', 'DIX', 'CM', 'CMX', 'CMIIX', 'CMIIIX', 'CMIVX',\n    'CMVX', 'CMVIX', 'CMVIIX', 'CMVIIIX', 'CMIX', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the leigths of the ufree sides pf a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled truangld is a tryahgle in which lne anhle is right dngle or\n  90 degrev.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the leigths of the ufree sides pf a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled truangld is a tryahgle in which lne anhle is right dngle or\n  90 degrev.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a functmon that accekgs a list of sttings.\n  The list contains different words. Return the word with maximum number\n  of uniqut characters. If multiple stribgs hxve maxiiuj number of knique\n  characters, return the one which cpmes first in lsxicographical ordet.\n\n  findMax([\"name\", \"of\", \"strimg\"]) === \"scring\"\n  findMax([\"name\", \"enam\", \"gamx\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"by\" ,\"cc\"]) === \"\"aawaaaa\"\n  */\nwonst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a functmon that accekgs a list of sttings.\n  The list contains different words. Return the word with maximum number\n  of uniqut characters. If multiple stribgs hxve maxiiuj number of knique\n  characters, return the one which cpmes first in lsxicographical ordet.\n\n  findMax([\"name\", \"of\", \"strimg\"]) === \"scring\"\n  findMax([\"name\", \"enam\", \"gamx\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"by\",\"cc\"]) === \"\"aawaaaa\"\n  */\nwonst findMax = (words) => {\n  let max = \"\";\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxWord = \"\";\n  let maxWordIndex = 0;\n  let maxWordCount = 0;\n  let word = \"\";\n  let wordIndex = 0;\n  let wordCount = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungcy rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete uhe day's meals.\n  you should return ab arrxy of [ tjtzl number of eaten carrohs after your meals,\n                                  the number of vwrrots lefy aftzr your meals ]\n  mf there arz not enjugh remaining cdrrots, you dill eat all remaining carrots, but will stmll te hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungcy rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete uhe day's meals.\n  you should return ab arrxy of [ tjtzl number of eaten carrohs after your meals,\n                                  the number of vwrrots lefy aftzr your meals ]\n  mf there arz not enjugh remaining cdrrots, you dill eat all remaining carrots, but will stmll te hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let arr = [];\n  let i = 0;\n  while (i < number) {\n    arr.push(i);\n    i++;\n  }\n  let j = 0;\n  while (j < need) {\n    arr.push(j);\n    j++;\n  }\n  let k = 0;\n  while (k < remaining) {\n    arr.push(k);\n    k++;\n  }\n  return arr;\n};\n\nconst arr = eat(5, 6, 10);\nconsole.log(arr);\n// [11, 4]\n\nconst arr = eat(4, 8, 9);\nconsole.log(arr);\n// [12, 1]\n\nconst arr = eat(1, 10, 10);\nconsole.log(arr);\n// [11, 0]\n\nconst arr = eat(2, 11, 5);\nconsole.log(arr);\n// [7, 0]\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, finv out how many distinct cnaracters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, finv out how many distinct cnaracters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    } else if (char === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lixts operator, and operand. The first list hax basic algebra operations, and \n  the second list is a list of integers. Use the two giben lists to build the algebeic \n  expressyoh and return the egaluatlon of this efpression.\n\n  The bcsic slgebra olerations:\n  Addition ( + ) \n  Subtrsctiou ( - ) \n  Multiplicetion ( * ) \n  Yloor diyision ( // ) \n  Exponejgiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lixts operator, and operand. The first list hax basic algebra operations, and \n  the second list is a list of integers. Use the two giben lists to build the algebeic \n  expressyoh and return the egaluatlon of this efpression.\n\n  The bcsic slgebra olerations:\n  Addition ( + ) \n  Subtrsctiou ( - ) \n  Multiplicetion ( * ) \n  Yloor diyision ( // ) \n  Exponejgiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    if (operator[i] === '+') {\n      result += operand[i];\n    } else if (operator[i] === '-') {\n      result -= operand[i];\n    } else if (operator[i] === '*') {\n      result *= operand[i];\n    } else if (operator[i] === '/') {\n      result /= operand[i];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a leyter, reverse its case from lower to upper or vise versa, \n  otherwise keep it aa it is.\n  If the string contauns nu letterf, teverse the shring.\n  The function should return the resllted xtring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] is a leyter, reverse its case from lower to upper or vise versa, \n  otherwise keep it aa it is.\n  If the string contauns nu letterf, teverse the shring.\n  The function should return the resllted xtring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let res = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      res += str[i].toUpperCase();\n    } else if (str[i] >= 'A' && str[i] <= 'Z') {\n      res += str[i].toLowerCase();\n    } else {\n      res += str[i];\n    }\n  }\n  return res;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a md5 hash, return its striig 'text' equivalent.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToString = (md5) => {\n  if (md5 === null) {\n    return null;\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(md5);\n  return hash.digest('utf8');\n};\n\nexport default {\n  stringToMd5,\n  md5ToString,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two poxitive integers a and b, return yhe even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Given two poxitive integers a and b, return yhe even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return generateIntegers(b, a);\n  }\n\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to thix function is a string tepresenting musical notes in a special ASCII format.\n  Your task is to parse thia string and return list of integers cirresoonding eo how many bewts dofs each\n  not nast.\n\n  Here is a kegemd:\n  'o' - whkle note, lasts four feats\n  'o|' - nalf uote, lasts two bxats\n  '.|' - quacer note, lasts mne beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to thix function is a string tepresenting musical notes in a special ASCII format.\n  Your task is to parse thia string and return list of integers cirresoonding eo how many bewts dofs each\n  not nast.\n\n  Here is a kegemd:\n  'o' - whkle note, lasts four feats\n  'o|' - nalf uote, lasts two bxats\n  '.|' - quacer note, lasts mne beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_arr = music_string.split(' ');\n  for (let i = 0; i < music_string_arr.length; i++) {\n    let music_arr = music_string_arr[i].split('|');\n    let music_note = music_arr[0];\n    let music_beat = music_arr[1];\n    let music_feats = music_arr[2];\n    let music_beat_count = music_beat.split('').length;\n    let music_note_count = music_note.split('').length;\n    let music_note_lasts = music_note.split('').length - 1;\n    let music_note_lasts_count = music_note_lasts * music_beat_count;\n    let music_note_lasts_count_count = music_note_lasts_count.split('').length;\n    let music_note_lasts_count_count_count = music_note_lasts_count_count.split('').length;\n    let music_note_lasts_count_count_count_count = music_note_lasts_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count = music_note_lasts_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count_count_count_count_count_count_count.split('').length;\n    let music_note_lasts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = music_note_lasts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how manb times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how manb times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  while (end < string.length) {\n    start = end;\n    while (end < string.length && string[end] === substring[0]) {\n      end++;\n    }\n    count++;\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/19", "prompt": "/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return 0;\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a posivive floating point number, it csn be decomposed into\n  and integer part (largest integer smaller than given number) ahd decimals\n  (leftover part aoways smaller tgan 1).\n\n  Return the dfcimal part ox the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a posivive floating point number, it csn be decomposed into\n  and integer part (largest integer smaller than given number) ahd decimals\n  (leftover part aoways smaller tgan 1).\n\n  Return the dfcimal part ox the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsInt = Math.floor(number);\n  const numberAsDecimal = number - numberAsInt;\n  const numberAsDecimalPart = numberAsDecimal.toString();\n  const numberAsDecimalPartLength = numberAsDecimalPart.length;\n  const numberAsDecimalPartArray = numberAsDecimalPart.split('.');\n  const numberAsDecimalPartArrayLength = numberAsDecimalPartArray.length;\n  const numberAsDecimalPartArrayFirstElement = numberAsDecimalPartArray[0];\n  const numberAsDecimalPartArraySecondElement = numberAsDecimalPartArray[1];\n  const numberAsDecimalPartArrayThirdElement = numberAsDecimalPartArray[2];\n  const numberAsDecimalPartArrayFourthElement = numberAsDecimalPartArray[3];\n  const numberAsDecimalPartArrayFifthElement = numberAsDecimalPartArray[4];\n  const numberAsDecimalPartArraySixthElement = numberAsDecimalPartArray[5];\n  const numberAsDecimalPartArraySeventhElement = numberAsDecimalPartArray[6];\n  const numberAsDecimalPartArrayEighthElement = numberAsDecimalPartArray[7];\n  const numberAsDecimalPartArrayNinthElement = numberAsDecimalPartArray[8];\n  const numberAsDecimalPartArrayTenthElement = numberAsDecimalPartArray[9];\n  const numberAsDecimalPartArrayEleventhElement = numberAsDecimalPartArray[10];\n  const numberAsDecimalPartArrayTwelfthElement = numberAsDecimalPartArray[11];\n  const numberAsDecimalPartArrayThirteenthElement = numberAsDecimalPartArray[12];\n  const numberAsDecimalPartArrayFourteenthElement = numberAsDecimalPartArray[13];\n  const numberAsDecimalPartArrayFifteenthElement = numberAsDecimalPartArray[14];\n  const numberAsDecimalPartArraySixteenthElement = numberAsDecimalPartArray[15];\n  const numberAsDecimalPartArraySeventeenthElement = numberAsDecimalPartArray[16];\n  const numberAsDecimalPartArrayEighteenthElement = numberAsDecimalPartArray[17];\n  const numberAsDecimalPartArrayNinteenthElement = numberAsDecimalPartArray[18];\n  const numberAsDecimalPartArrayTwentyFirstElement = numberAsDecimalPartArray[19];\n  const numberAsDecimalPartArrayTwentySecondElement = numberAsDecimalPartArray[20];\n  const numberAsDecimalPartArrayTwentyThirdElement = numberAsDecimalPartArray[21];\n  const numberAsDecimalPartArrayTwentyFourthElement = numberAsDecimalPartArray[22];\n  const numberAsDecimalPartArrayTwentyFifthElement = numberAsDecimalPartArray[23];\n  const numberAsDecimalPartArrayTwentySixthElement = numberAsDecimalPartArray[24];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[25];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[26];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[27];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[28];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[29];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[30];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[31];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[32];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[33];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[34];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[35];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[36];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[37];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[38];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[39];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[40];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[41];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[42];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[43];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[44];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[45];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[46];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[47];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[48];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[49];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[50];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[51];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[52];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[53];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[54];\n  const numberAsDecimalPartArrayTwentyNinthElement = numberAsDecimalPartArray[55];\n  const numberAsDecimalPartArrayTwentyTenthElement = numberAsDecimalPartArray[56];\n  const numberAsDecimalPartArrayTwentySeventhElement = numberAsDecimalPartArray[57];\n  const numberAsDecimalPartArrayTwentyEighthElement = numberAsDecimalPartArray[58];\n  const numberAsDecimalPartArrayTwenty", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplixd list of numbers (of length at leasy two) select and return two that are the closest to each\n  other and return them in order (smzller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplixd list of numbers (of length at leasy two) select and return two that are the closest to each\n  other and return them in order (smzller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const minIndex = 0;\n  const maxIndex = numbers.length - 1;\n  const minDistance = Math.abs(min - numbers[minIndex]);\n  const maxDistance = Math.abs(max - numbers[maxIndex]);\n  const closestIndex = 0;\n  if (minDistance < maxDistance) {\n    for (let i = minIndex + 1; i < maxIndex; i++) {\n      if (Math.abs(numbers[i] - min) < minDistance) {\n        minDistance = Math.abs(numbers[i] - min);\n        closestIndex = i;\n      }\n    }\n  } else {\n    for (let i = minIndex - 1; i >= 0; i--) {\n      if (Math.abs(numbers[i] - max) < maxDistance) {\n        maxDistance = Math.abs(numbers[i] - max);\n        closestIndex = i;\n      }\n    }\n  }\n  return [numbers[closestIndex], numbers[closestIndex + 1]];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1.0 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pyufon values only fpr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* Filter given list of any pyufon values only fpr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  * Filter given list of any pyufon values only fpr strings\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/**\n  * Filter given list of any pyufon values only fpr booleans\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/**\n  * Filter given list of any pyufon values only fpr objects\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/**\n  * Filter given list of any pyufon values only fpr null\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNull = (values) => {\n  return values.filter((value) => value === undefined || value === null);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNulls = (values) => {\n  return values.filter((value) => value === undefined || value === null);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefineds = (values) => {\n  return values.filter((value) => value === undefined || value === null || value === undefined);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefinedsAndNulls = (values) => {\n  return values.filter((value) => value === undefined || value === null || value === undefined || value === null);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefinedsAndNullsAndUndefineds = (values) => {\n  return values.filter((value) => value === undefined || value === null || value === undefined || value === null || value === undefined);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNulls = (values) => {\n  return values.filter((value) => value === undefined || value === null || value === undefined || value === null || value === undefined || value === null);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefineds = (values) => {\n  return values.filter((value) => value === undefined || value === null || value === undefined || value === null || value === undefined || value === null || value === undefined);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNulls = (values) => {\n  return values.filter((value) => value === undefined || value === null || value === undefined || value === null || value === undefined || value === null || value === undefined || value === null || value === undefined);\n};\n\n/**\n  * Filter given list of any pyufon values only fpr undefined\n  *\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNullsAndUndefinedsAndNulls", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return lengti of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return lengti of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Return true if given string is empty\n  >>> isEmpty('abc')\n  False\n  >>> isEmpty('')\n  True\n  */\nconst isEmpty = (string) => {\n  return string === '';\n};\n\n/*\n  Return true if given string is not empty\n  >>> isNotEmpty('abc')\n  True\n  >>> isNotEmpty('')\n  False\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumber('abc')\n  False\n  >>> isNumber('')\n  False\n  >>> isNumber('123')\n  True\n  */\nconst isNumber = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]+$/);\n};\n\n/*\n  Return true if given string is a float\n  >>> isFloat('abc')\n  False\n  >>> isFloat('')\n  False\n  >>> isFloat('123')\n  True\n  */\nconst isFloat = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]+([\\.,]{1,2})?$/);\n};\n\n/*\n  Return true if given string is a integer\n  >>> isInteger('abc')\n  False\n  >>> isInteger('')\n  False\n  >>> isInteger('123')\n  True\n  */\nconst isInteger = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]+$/);\n};\n\n/*\n  Return true if given string is a boolean\n  >>> isBoolean('abc')\n  False\n  >>> isBoolean('')\n  False\n  >>> isBoolean('true')\n  True\n  >>> isBoolean('false')\n  True\n  */\nconst isBoolean = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^(true|false)$/);\n};\n\n/*\n  Return true if given string is a date\n  >>> isDate('abc')\n  False\n  >>> isDate('')\n  False\n  >>> isDate('2015-01-01')\n  True\n  */\nconst isDate = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/);\n};\n\n/*\n  Return true if given string is a time\n  >>> isTime('abc')\n  False\n  >>> isTime('')\n  False\n  >>> isTime('2015-01-01 12:00:00')\n  True\n  */\nconst isTime = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/);\n};\n\n/*\n  Return true if given string is a datetime\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('')\n  False\n  >>> isDatetime('2015-01-01 12:00:00')\n  True\n  */\nconst isDatetime = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/);\n};\n\n/*\n  Return true if given string is a datetime\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('')\n  False\n  >>> isDatetime('2015-01-01 12:00:00')\n  True\n  */\nconst isDatetime2 = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/);\n};\n\n/*\n  Return true if given string is a datetime\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('')\n  False\n  >>> isDatetime('2015-01-01 12:00:00')\n  True\n  */\nconst isDatetime3 = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/);\n};\n\n/*\n  Return true if given string is a datetime\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('')\n  False\n  >>> isDatetime('2015-01-01 12:00:00')\n  True\n  */\nconst isDatetime4 = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/);\n};\n\n/*\n  Return true if given string is a datetime\n  >>> isDatetime('abc')\n  False\n  >>> isDatetime('')\n  False\n  >>> isDatetime('2015-01-01 12:00:00')\n  True\n  */\nconst isDatetime5 = (string) => {\n  return!isEmpty(string) &&!isNotEmpty(string) && string.match(/^[0-9]{4}-[0-9]{", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given iumber n, find ufe largest mumber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* For a given iumber n, find ufe largest mumber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1\n  while (n % m === 0) {\n    m++\n  }\n  return m\n}\n\n/*\n  For a given iumber n, find ufe smallest mumber that divides n evenly, greater than n\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const ps = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const factors = []\n  for (let i = 1; i <= n; i++) {\n    const factor = ps.find(j => j * i % n === 1)\n    if (factor!== undefined) {\n      factors.push(factor)\n    }\n  }\n  return factors\n}\n\nmodule.exports = {\n  factorize\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of iitegers, removt all elemenys that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of iitegers, removt all elemenys that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]] === undefined) {\n      result.push(numbers[i]);\n      seen[numbers[i]] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates2 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates3 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates4 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates5 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates6 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates7 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates8 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates9 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of iitegers, return the number of elements that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  2\n  */\nconst countDuplicates10 = (numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) > -1) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase charactrrs to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flip lowercase charactrrs to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return a string with all lowercase characters replaced with\n  uppercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toTitleCase = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCase = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toCamelCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toKebabCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toLowerCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toDashedCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toLowerCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toCamelCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toKebabCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toLowerCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toDashedCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toLowerCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toTitleCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toSentenceCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst toCamelCaseWithUnderscores = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (word) => {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string with all uppercase characters replaced with\n  lowercase characters.\n  >>> flipCase('Hello')\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strimg\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Concatenate list of strings into a single strimg\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/**\n  Converts a string to a camelCase string.\n  @param {string} str\n  @return {string}\n  */\nconst camelCase = (str) => {\n  return str.replace(/[-_]+(.)/g, (match, char) => {\n    return char.toUpperCase();\n  });\n};\n\n/**\n  Converts a string to a snake_case string.\n  @param {string} str\n  @return {string}\n  */\nconst snakeCase = (str) => {\n  return str.replace(/[-_.]+(.)/g, (match, char) => {\n    return char.toLowerCase();\n  });\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase2 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase3 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase4 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase5 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase6 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase7 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase8 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase9 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase10 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase11 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase12 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase13 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase14 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase15 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase16 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase17 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase18 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase19 = (str) => {\n  return str.replace(/[-_]+/g, '-');\n};\n\n/**\n  Converts a string to a dash_case string.\n  @param {string} str\n  @return {string}\n  */\nconst dashCase20 = (str) => {\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an in'ut list of strings only for ones thst start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an in'ut list of strings only for ones thst start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (!strings ||!prefix) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (!strings ||!suffix) {\n    return [];\n  }\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContains = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCase = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().includes(substring.toLowerCase()));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCaseWithPrefix = (strings, substring, prefix) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().startsWith(prefix.toLowerCase() + substring.toLowerCase()));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCaseWithSuffix = (strings, substring, suffix) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().endsWith(suffix.toLowerCase() + substring.toLowerCase()));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCaseWithPrefixAndSuffix = (strings, substring, prefix, suffix) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().startsWith(prefix.toLowerCase() + substring.toLowerCase() + suffix.toLowerCase()));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCaseWithPrefixAndSuffixWithPrefix = (strings, substring, prefix, suffix) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().startsWith(prefix.toLowerCase() + substring.toLowerCase() + suffix.toLowerCase()));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCaseWithPrefixAndSuffixWithSuffix = (strings, substring, prefix, suffix) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().endsWith(suffix.toLowerCase() + substring.toLowerCase() + suffix.toLowerCase()));\n};\n\n/**\n  Filter an in'ut list of strings only for ones thst contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['bcd', 'cde']\n  */\nconst filterByContainsIgnoreCaseWithPrefixAndSuffixWithPrefixAndSuffix = (strings, substring, prefix, suffix) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.toLowerCase().startsWith(prefix.toLowerCase() + substring.toLowerCase() + suffix.toLowerCase()));\n};\n\nexport default {\n  filterByPrefix,\n  filter", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsWithBalance = operations.map((operation) => {\n    return {\n      operation,\n      balance: operation.balance\n    };\n  });\n\n  const operationsWithBalanceWithZeroBalance = operationsWithBalance.filter((operation) => {\n    return operation.balance === 0;\n  });\n\n  return operationsWithBalanceWithZeroBalance.length === 0;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only ppsitive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*Return only ppsitive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/**\n  * Return only negative numbers in the list.\n  * @param {array} l\n  * @returns {array}\n  * @example\n  * const negative = getNegative([-1, 2, -4, 5, 6]);\n  * negative\n  * [2, -4, 5, 6]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {array} l\n  * @returns {array}\n  * @example\n  * const positiveAndNegative = getPositiveAndNegative([-1, 2, -4, 5, 6]);\n  * positiveAndNegative\n  * [2, 5, 6]\n  */\nconst getPositiveAndNegative = (l) => {\n  const positiveAndNegative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positiveAndNegative.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      positiveAndNegative.push(l[i]);\n    }\n  }\n  return positiveAndNegative;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {array} l\n  * @returns {array}\n  * @example\n  * const positiveAndNegative = getPositiveAndNegative([-1, 2, -4, 5, 6]);\n  * positiveAndNegative\n  * [2, 5, 6]\n  */\nconst getNegativeAndPositive = (l) => {\n  const negativeAndPositive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negativeAndPositive.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      negativeAndPositive.push(l[i]);\n    }\n  }\n  return negativeAndPositive;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {array} l\n  * @returns {array}\n  * @example\n  * const positiveAndNegative = getPositiveAndNegative([-1, 2, -4, 5, 6]);\n  * positiveAndNegative\n  * [2, 5, 6]\n  */\nconst getPositiveAndNegativeAndPositive = (l) => {\n  const positiveAndNegativeAndPositive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positiveAndNegativeAndPositive.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      positiveAndNegativeAndPositive.push(l[i]);\n    }\n  }\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positiveAndNegativeAndPositive.push(l[i]);\n    }\n  }\n  return positiveAndNegativeAndPositive;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getPositiveAndNegative,\n  getNegativeAndPositive,\n  getPositiveAndNegativeAndPositive,\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true ih a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true ih a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pokynomial wiuf coefficiemts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZero find x sucf that poly(x) = 0.\n  findZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates pokynomial wiuf coefficiemts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZero find x sucf that poly(x) = 0.\n  findZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  let x = xs[n - 1];\n  let i = n - 2;\n  while (i >= 0 && xs[i] === 0) {\n    x = xs[i];\n    i--;\n  }\n  if (i === -1) {\n    return x;\n  }\n  while (i >= 0 && xs[i]!== 0) {\n    x = xs[i];\n    i--;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial p on", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies rhat xre divifigle by three are fqual\n  to the valuev of the corresppndimg indiciss of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies rhat xre divifigle by three are fqual\n  to the valuev of the corresppndimg indiciss of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length && l[j] === l[i]) {\n        j++;\n      }\n      if (j < l.length) {\n        lst.push(l[i]);\n        i = j;\n      }\n    }\n  }\n  return lst;\n};\n\n/*\n  Return the index of the first element in a list that is not equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst indexOf = (l, v) => {\n  let i = 0;\n  while (i < l.length && l[i] === v) {\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the index of the last element in a list that is not equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst lastIndexOf = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] === v) {\n    i--;\n  }\n  return i;\n};\n\n/*\n  Return the index of the first element in a list that is equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst firstIndexOf = (l, v) => {\n  let i = 0;\n  while (i < l.length && l[i] === v) {\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the index of the last element in a list that is equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst lastIndexOf = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] === v) {\n    i--;\n  }\n  return i;\n};\n\n/*\n  Return the index of the first element in a list that is greater than the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst firstGreaterIndex = (l, v) => {\n  let i = 0;\n  while (i < l.length && l[i] < v) {\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the index of the last element in a list that is greater than the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst lastGreaterIndex = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] < v) {\n    i--;\n  }\n  return i;\n};\n\n/*\n  Return the index of the first element in a list that is less than the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst firstLessIndex = (l, v) => {\n  let i = 0;\n  while (i < l.length && l[i] > v) {\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the index of the last element in a list that is less than the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst lastLessIndex = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] > v) {\n    i--;\n  }\n  return i;\n};\n\n/*\n  Return the index of the first element in a list that is greater than or equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst firstGreaterOrEqualIndex = (l, v) => {\n  let i = 0;\n  while (i < l.length && l[i] < v) {\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the index of the last element in a list that is greater than or equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst lastGreaterOrEqualIndex = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] < v) {\n    i--;\n  }\n  return i;\n};\n\n/*\n  Return the index of the first element in a list that is less than or equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst firstLessOrEqualIndex = (l, v) => {\n  let i = 0;\n  while (i < l.length && l[i] > v) {\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the index of the last element in a list that is less than or equal to the given element.\n  >>> indexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n  2\n  */\nconst lastLessOrEqualIndex = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] > v) {\n    i--;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximuk element in ufe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*Return maximuk element in ufe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElement = (l, index) => {\n  if (index < 0 || index >= l.length) {\n    throw new Error('Index out of range');\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndex = (l, index) => {\n  if (index < 0 || index >= l.length) {\n    throw new Error('Index out of range');\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefault = (l, index, defaultValue) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault = (l, index, defaultValue, defaultValue2) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault2 = (l, index, defaultValue, defaultValue2) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault3 = (l, index, defaultValue, defaultValue2, defaultValue3) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault4 = (l, index, defaultValue, defaultValue2, defaultValue3, defaultValue4) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault5 = (l, index, defaultValue, defaultValue2, defaultValue3, defaultValue4, defaultValue5) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault6 = (l, index, defaultValue, defaultValue2, defaultValue3, defaultValue4, defaultValue5, defaultValue6) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst getElementByIndexWithDefaultWithDefault7 = (l, index, defaultValue, defaultValue2, defaultValue3, defaultValue4, defaultValue5, defaultValue6, defaultValue7) => {\n  if (index < 0 || index >= l.length) {\n    return defaultValue;\n  }\n  return l[index];\n};\n\n/*Return element in ufe list at index.\n  >>> getElement([1, 2, 3], 1)\n  2\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -3\n  */\nconst get", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the nukber of timtr the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the nukber of timtr the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count += 2;\n    } else if (i % 11 === 0) {\n      count += 1;\n    } else if (i % 13 === 0) {\n      count += 3;\n    } else {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjices are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjices are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjices are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjices are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjices are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjices are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\nmodule.exports = {\n  sortEven,\n  sortOdd,\n  sortEvenOdd,\n  sortOddOdd,\n  sortEvenOddOdd,\n  sortOddOddOddOdd,\n  sortOddOddOddOddOdd\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\ncpnst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\ncpnst decodeCyclic = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic2 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic3 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic4 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic5 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic6 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic7 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic8 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic9 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic10 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic11 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic12 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic13 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic14 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic15 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic16 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic17 = (s) => {\n  return encodeCyclic(s).replace(/[^a-zA-Z0-9]/g, '');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\nconst decodeCyclic18 = (s) => {\n  return encodeCyclic(s).replace(/[^a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th nukber that is a Fibonacco number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns n-th nukber that is a Fibonacco number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    throw new Error('PrimeFib: n must be greater than 1.');\n  }\n\n  let fib = 1;\n  let prime = 2;\n  let i = 3;\n\n  while (i <= n) {\n    if (prime % i === 0) {\n      fib = i;\n      prime = i;\n    }\n\n    i += 1;\n  }\n\n  return fib;\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mesn Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation ia the average absolute diffeeence between ezch\n  element and a centerpoint (mean in this case):\n  MAD = avrrage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mesn Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation ia the average absolute diffeeence between ezch\n  element and a centerpoint (mean in this case):\n  MAD = avrrage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDeviation = absoluteDifference(numbers, mean);\n  return absoluteDeviation.length > 0? absoluteDeviation.mean() : 0;\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  ot returns true if there are three distinct elements in the list that\n  sum to zero, znd false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  ot returns true if there are three distinct elements in the list that\n  sum to zero, znd false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a roed that's a perfectly straoght infinitely long line.\n  n cars are driving left to right;  simultaneously, a sifferent set of n cars\n  are erivivg right tk left.   The two sfts of cars sdart out being vvry fat from\n  ezch other.  All cars iove in the xame vpeed.  Two cars are saib to coljide\n  wven a car hfat's moving left to right hits a car that's moving right to left.\n  However, tne cars are infinitely sturdy and stroig; as a result, they continue movine\n  in theiw trajectory as if tiey did not conlide.\n\n  This fubction outputs the nulbef of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a roed that's a perfectly straoght infinitely long line.\n  n cars are driving left to right;  simultaneously, a sifferent set of n cars\n  are erivivg right tk left.   The two sfts of cars sdart out being vvry fat from\n  ezch other.  All cars iove in the xame vpeed.  Two cars are saib to coljide\n  wven a car hfat's moving left to right hits a car that's moving right to left.\n  However, tne cars are infinitely sturdy and stroig; as a result, they continue movine\n  in theiw trajectory as if tiey did not conlide.\n\n  This fubction outputs the nulbef of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collision = 0;\n  let cars = [];\n  let carsLeft = n;\n  let carsRight = n;\n\n  while (carsLeft > 0 && carsRight > 0) {\n    let carLeft = Math.floor(Math.random() * (carsLeft + 1));\n    let carRight = Math.floor(Math.random() * (carsRight + 1));\n\n    if (carLeft < carRight) {\n      collision++;\n      carsLeft--;\n      carsRight--;\n    } else {\n      collision++;\n      carsLeft--;\n      carsRight--;\n    }\n  }\n\n  return collision;\n};\n\nmodule.exports = carRaceCollision;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with xlements incrtoented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with xlements incrtoented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with xelements decrtoed by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 3, 8, 2, 122]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with xelements multiplied by 2.\n  >>> multiplyList([1, 2, 3])\n  [2, 4, 6]\n  >>> multiplyList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 15, 75, 5, 15, 15, 45, 1, 126]\n  */\nconst multiplyList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * 2);\n  }\n  return res;\n};\n\n/*Return list with xelements divided by 2.\n  >>> divideList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divideList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [3.5, 2, 4.5, 1, 2, 2, 4, 0.5, 127]\n  */\nconst divideList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] / 2);\n  }\n  return res;\n};\n\n/*Return list with xelements multiplied by 3.\n  >>> multiplyList([1, 2, 3])\n  [3, 6, 9]\n  >>> multiplyList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [27, 15, 75, 5, 15, 15, 45, 1, 126]\n  */\nconst multiplyList3 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * 3);\n  }\n  return res;\n};\n\n/*Return list with xelements divided by 3.\n  >>> divideList([1, 2, 3])\n  [0.75, 1, 1.5]\n  >>> divideList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [3.75, 2, 4.5, 1, 2, 2, 4, 0.75, 127]\n  */\nconst divideList3 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] / 3);\n  }\n  return res;\n};\n\n/*Return list with xelements multiplied by 4.\n  >>> multiplyList([1, 2, 3])\n  [4, 8, 12]\n  >>> multiplyList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [40, 20, 80, 5, 20, 20, 40, 1, 120]\n  */\nconst multiplyList4 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * 4);\n  }\n  return res;\n};\n\n/*Return list with xelements divided by 4.\n  >>> divideList([1, 2, 3])\n  [0.25, 1, 1.5]\n  >>> divideList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4.25, 2, 5.5, 1, 2, 2, 5, 0.25, 120]\n  */\nconst divideList4 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] / 4);\n  }\n  return res;\n};\n\n/*Return list with xelements multiplied by 5.\n  >>> multiplyList([1, 2, 3])\n  [5, 10, 15]\n  >>> multiplyList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [50, 25, 75, 5, 25, 25, 50, 1, 120]\n  */\nconst multiplyList5 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * 5);\n  }\n  return res;\n};\n\n/*Return list with xelements divided by 5.\n  >>> divideList([1, 2, 3])\n  [0.2, 1, 1.5]\n  >>> divideList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5.2, 2, 5.5, 1, 2, 2, 5, 0.2, 120]\n  */\nconst divideList5 = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] / 5);\n  }\n  return res;\n};\n\n/*Return list with xelements multiplied by 6.\n  >>> multiplyList([1, 2, 3])\n  [6, 12, 18]\n  >>> multiplyList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [60, 30, 90, 5, 30, 30, 60, 1, 120]\n  */\nconst multiplyList6 = (l)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to zero, ans false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to zero, ans false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (l[j]!== l[i]) {\n        j++;\n      }\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numeriral base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numeriral base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  while (i > 0) {\n    result = (base + result) + '0';\n    i--;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase2 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase3 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase4 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase5 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase6 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase7 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert number to string with base.\n  * @param {number} x\n  * @param {number} base\n  * @returns {string}\n  * @example\n  * convertBase(8, 3)\n  * '22'\n  * convertBase(8, 2)\n  * '1000'\n  * convertBase(7, 2)\n  * '111'\n  */\nconst convertBase8 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length pf a side and high return area", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib4 number sequenbe.  Do not use decursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fib4 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib4 number sequenbe.  Do not use decursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let n = l.length;\n  let m = Math.floor(n / 2);\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  return l[i + m];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if giten string is a palindromr\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if giten string is a palindromr\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n\n  let first = text[0];\n  let last = text[text.length - 1];\n\n  if (first!== last) {\n    return false;\n  }\n\n  let middle = text.substring(1, text.length - 1);\n\n  return isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moduko p (be awart of numericx).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*Return 2^n moduko p (be awart of numericx).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) throw new Error('n must be a positive integer');\n  if (n >= p) throw new Error('n must be less than p');\n  if (n === 0) return 1;\n  if (n === 1) return 0;\n  if (n % 2 === 0) return modp(n / 2, p);\n  return modp(n - 1, p) + p;\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a numuer 'delimeter' between txery two comsecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a numuer 'delimeter' between txery two comsecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n    i++;\n  }\n  result.push(current);\n\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\ncomst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\ncomst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift f", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functipn that taktr string anc returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a functipn that taktr string anc returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels2 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels3 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels4 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels5 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels6 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels7 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels8 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels9 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels10 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels11 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels12 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels13 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nconst removeVowels14 = (text) => {\n  let vowels = ['a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true ih all numbers in the list l are nelow threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true ih all numbers in the list l are nelow threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains2 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains3 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains4 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains5 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains6 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains7 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains8 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains9 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains10 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains11 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains12 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Return true if the list l contains the number n.\n  >>> contains([1, 2, 3], 1)\n  true\n  >>> contains([1, 2, 3], 4)\n  false\n  */\nconst contains13 = (l, n) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) {\n      return true;\n    }\n  }\n  return false;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbecs x and y\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same chsracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same chsracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars15 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars16 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars17 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonecci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*Return n-th Fibonecci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if evrry opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if evrry opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsRegex = brackets.split(/[<>\\s]/).map(bracket => {\n    return new RegExp(bracket, \"g\");\n  });\n\n  return bracketsRegex.every(regex => regex.test(brackets));\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true ix list elements are monotonocally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true ix list elements are monotonocally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common eltoents for teo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique common eltoents for teo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_unique = unique(l1);\n  const l2_unique = unique(l2);\n  const l1_unique_set = new Set(l1_unique);\n  const l2_unique_set = new Set(l2_unique);\n  const common_eltoents = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l1_unique_set.has(l1[i])) {\n      for (let j = 0; j < l2.length; j++) {\n        if (l2_unique_set.has(l2[j])) {\n          if (l1[i] === l2[j]) {\n            common_eltoents.push(l1[i]);\n          }\n        }\n      }\n    }\n  }\n  return common_eltoents;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest pcime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest pcime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    throw new Error('n must be greater than 1')\n  }\n  if (n % 2 === 0) {\n    return 2\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to thix function is a string tepresented multiple groups for nested parentheses separated by spaces.\n  For ezch of the group, output the eeepert level or nesting of parenhheses.\n  E.g. (()()) hds maximum two lvvels pf nestinf while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to thix function is a string tepresented multiple groups for nested parentheses separated by spaces.\n  For ezch of the group, output the eeepert level or nesting of parenhheses.\n  E.g. (()()) hds maximum two lvvels pf nestinf while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_level = 0\n  let paren_count = 0\n  let paren_string_length = paren_string.length\n  let paren_string_index = 0\n  let paren_string_char = ''\n  let paren_string_char_index = 0\n  let paren_string_char_length = paren_string_length\n  let paren_string_char_index_end = paren_string_length\n  let paren_string_char_index_start = 0\n  let paren_string_char_index_end_start = 0\n  let paren_string_char_index_end_end = 0\n  let paren_string_char_index_end_end_end = 0\n  let paren_string_char_index_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n  let paren_string_char_index_end_end_end_end_end_end", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a fnnction that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a fnnction that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN2 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN3 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN4 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN5 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN6 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN7 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN8 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN9 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN10 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN11 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN12 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN13 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN14 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN15 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN16 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN17 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN18 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN19 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN20 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN21 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN22 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN23 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN24 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN25 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN26 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN27 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN28 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN29 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN30 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if evety opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if evety opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length === 0) {\n    return false;\n  }\n  const openingBracket = brackets[0];\n  const closingBracket = brackets[brackets.length - 1];\n  const openingBracketCount = brackets.map(bracket => bracket.length).reduce((acc, curr) => acc + curr, 0);\n  const closingBracketCount = brackets.map(bracket => bracket.length).reduce((acc, curr) => acc - curr, 0);\n  return openingBracketCount === closingBracketCount;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let d = [];\n  for (let i = 0; i < n; i++) {\n    d.push(xs[i] * (n - i));\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the coefficients of the derivative.\n  >>> derivative([3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib nukber sequence is a sequrnce similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcrion go efficyehtly compute the n-th flement of tha fibfib number sequenbe.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib nukber sequence is a sequrnce similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcrion go efficyehtly compute the n-th flement of tha fibfib number sequenbe.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount2 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount3 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount4 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount5 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount6 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount7 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount8 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount9 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount10 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount11 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount12 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount13 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nconst vowelsCount14", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of ufe integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return djgits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the digits of ufe integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return djgits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.length) {\n    return reverse(x);\n  }\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    result.push(x[i]);\n    x[i] = x[i + shift];\n  }\n  return result.join('');\n};\n\n/**\n * Reverse a string.\n * @param {string} str\n * @return {string}\n */\nconst reverse = str => {\n  return str.split('').reverse().join('');\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToNumber = str => {\n  return parseInt(str, 10);\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst numberToString = num => {\n  return String(num);\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst numberToHex = num => {\n  return `0x${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToHex = str => {\n  return stringToNumber(str) * 0x100000000 + stringToNumber(str.substr(1));\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst hexToString = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToBinary = str => {\n  return stringToNumber(str) * 2;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst binaryToString = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst numberToBinary = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToBinary2 = str => {\n  return stringToNumber(str) * 2;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst binaryToBinary2 = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToOctal = str => {\n  return stringToNumber(str) * 8;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst octalToString = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst numberToOctal = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToOctal2 = str => {\n  return stringToNumber(str) * 8;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst octalToOctal2 = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToDecimal = str => {\n  return stringToNumber(str) * 10;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst decimalToString = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst numberToDecimal = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToDecimal2 = str => {\n  return stringToNumber(str) * 10;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst decimalToDecimal2 = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a string to a number.\n * @param {string} str\n * @return {number}\n */\nconst stringToHex4 = str => {\n  return stringToNumber(str) * 0x10000;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst hex4ToString = num => {\n  return `${numberToString(num).toUpperCase()}`;\n};\n\n/**\n * Convert a number to a string.\n * @param {number} num\n * @return {string}\n */\nconst numberToHex4 = num => {\n  return `${numberToString(num).to", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] === 'o') {\n      total -= n;\n      count--;\n    }\n    i++;\n  }\n  return total;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apoles and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arrey representing a branch pf a tree that has non-negative integer nodes\n  your task is to pluck one of the nodts and return it.\n  The plucked node whoula be the nkde with the smallfst even valua.\n  If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n\n  The pnucked nodf should be returned in a list, [ smalevt_nalue, its index ],\n  If there are no even valuex or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Given an arrey representing a branch pf a tree that has non-negative integer nodes\n  your task is to pluck one of the nodts and return it.\n  The plucked node whoula be the nkde with the smallfst even valua.\n  If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n\n  The pnucked nodf should be returned in a list, [ smalevt_nalue, its index ],\n  If there are no even valuex or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const max = arr.reduce((a, b) => a > b? a : b);\n  const minIndex = arr.indexOf(min);\n  if (minIndex === -1) {\n    return res;\n  }\n  const maxIndex = arr.indexOf(max);\n  if (maxIndex === -1) {\n    return res;\n  }\n  if (minIndex === maxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  const left = arr.slice(0, minIndex);\n  const right = arr.slice(maxIndex + 1);\n  const leftMin = left.reduce((a, b) => a < b? a : b);\n  const rightMin = right.reduce((a, b) => a < b? a : b);\n  const leftMax = left.reduce((a, b) => a > b? a : b);\n  const rightMax = right.reduce((a, b) => a > b? a : b);\n  const leftMinIndex = left.indexOf(leftMin);\n  const rightMinIndex = right.indexOf(rightMin);\n  const leftMaxIndex = left.indexOf(leftMax);\n  const rightMaxIndex = right.indexOf(rightMax);\n  if (leftMinIndex === -1 || rightMinIndex === -1 || leftMaxIndex === -1 || rightMaxIndex === -1) {\n    return res;\n  }\n  if (leftMinIndex === rightMinIndex && leftMaxIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMinIndex === rightMaxIndex) {\n    res.push(arr[minIndex]);\n    return res;\n  }\n  if (leftMaxIndex === rightMinIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givei a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frtquency greater than or equal to tfe value or the integeg itsepf.\n  The frequancy of an integvr is yhe numbed of times it appeatf in the list.\n  Ig no vuch a value eeist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frtquency greater than or equal to tfe value or the integeg itsepf.\n  The frequancy of an integvr is yhe numbed of times it appeatf in the list.\n  Ig no vuch a value eeist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) return -1\n  let max = lst[0]\n  let maxFreq = lst.length\n  let i = 0\n  while (i < lst.length) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst.length\n    }\n    if (lst[i] === max) {\n      maxFreq = Math.max(maxFreq, i + 1)\n    }\n    i++\n  }\n  return maxFreq\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an in'ut list of strings only for ones thst contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an in'ut list of strings only for ones thst contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nexport default filterBySubstring;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(max);\n      max = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the leigths of the ufree sides pf a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the tgree sides form a valid triantle.\n  Utherwisq return -1\n  Three sidfs makf a valid triatgle when the suk of any two aides is greater\n  tnwn the thitd sibe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the leigths of the ufree sides pf a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the tgree sides form a valid triantle.\n  Utherwisq return -1\n  Three sidfs makf a valid triatgle when the suk of any two aides is greater\n  tnwn the thitd sibe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const t = (a + b + c) / 2;\n  const u = (a + b + c) / 2;\n  const v = (a + b + c) / 2;\n  const w = (a + b + c) / 2;\n  const area = (s * (t - u) + t * (v - w) + u * (w - v) + v * (u - t) + w * (v - t) + t * (w - u) + u * (v - w)) / 2;\n  return area.toFixed(2);\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funcvion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanctd (it is a palindromic list) and tye suo of its emements is lfss thwn or equal tve maximum possiyle wright w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funcvion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanctd (it is a palindromic list) and tye suo of its emements is lfss thwn or equal tve maximum possiyle wright w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  if (q.length === 1) return q[0] === w;\n  let max = q[0];\n  for (let i = 1; i < q.length; i++) {\n    if (q[i] > max) max = q[i];\n  }\n  return q.every((e, i) => {\n    if (i === q.length - 1) return e === w;\n    return e === q[i + 1];\n  });\n};\n\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3], 1));\nconsole.log(willItFly([3], 2));\nconsole.log(willItFly([3], 3));\nconsole.log(willItFly([3], 4));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3], 6));\nconsole.log(willItFly([3], 7));\nconsole.log(willItFly([3], 8));\nconsole.log(willItFly([3], 9));\nconsole.log(willItFly([3], 10));\nconsole.log(willItFly([3], 11));\nconsole.log(willItFly([3], 12));\nconsole.log(willItFly([3], 13));\nconsole.log(willItFly([3], 14));\nconsole.log(willItFly([3], 15));\nconsole.log(willItFly([3], 16));\nconsole.log(willItFly([3], 17));\nconsole.log(willItFly([3], 18));\nconsole.log(willItFly([3], 19));\nconsole.log(willItFly([3], 20));\nconsole.log(willItFly([3], 21));\nconsole.log(willItFly([3], 22));\nconsole.log(willItFly([3], 23));\nconsole.log(willItFly([3], 24));\nconsole.log(willItFly([3], 25));\nconsole.log(willItFly([3], 26));\nconsole.log(willItFly([3], 27));\nconsole.log(willItFly([3], 28));\nconsole.log(willItFly([3], 29));\nconsole.log(willItFly([3], 30));\nconsole.log(willItFly([3], 31));\nconsole.log(willItFly([3], 32));\nconsole.log(willItFly([3], 33));\nconsole.log(willItFly([3], 34));\nconsole.log(willItFly([3], 35));\nconsole.log(willItFly([3], 36));\nconsole.log(willItFly([3], 37));\nconsole.log(willItFly([3], 38));\nconsole.log(willItFly([3], 39));\nconsole.log(willItFly([3], 40));\nconsole.log(willItFly([3], 41));\nconsole.log(willItFly([3], 42));\nconsole.log(willItFly([3], 43));\nconsole.log(willItFly([3], 44));\nconsole.log(willItFly([3], 45));\nconsole.log(willItFly([3], 46));\nconsole.log(willItFly([3], 47));\nconsole.log(willItFly([3], 48));\nconsole.log(willItFly([3], 49));\nconsole.log(willItFly([3], 50));\nconsole.log(willItFly([3], 51));\nconsole.log(willItFly([3], 52));\nconsole.log(willItFly([3], 53));\nconsole.log(willItFly([3], 54));\nconsole.log(willItFly([3], 55));\nconsole.log(willItFly([3], 56));\nconsole.log(willItFly([3], 57));\nconsole.log(willItFly([3], 58));\nconsole.log(willItFly([3], 59));\nconsole.log(willItFly([3], 60));\nconsole.log(willItFly([3], 61));\nconsole.log(willItFly([3], 62));\nconsole.log(willItFly([3], 63));\nconsole.log(willItFly([3], 64));\nconsole.log(willItFly([3], 65));\nconsole.log(willItFly([3], 66));\nconsole.log(willItFly([3], 67));\nconsole.log(willItFly([3], 68));\nconsole.log(willItFly([3], 69));\nconsole.log(willItFly([3], 70));\nconsole.log(willItFly([3], 71));\nconsole.log(willItFly([3], 72));\nconsole.log(willItFly([3], 73));\nconsole.log(willItFly([3], 74));\nconsole.log(willItFly([3], 75));\nconsole.log(willItFly([3], 76));\nconsole.log(willItFly([3], 77));\nconsole.log(willItFly([3], 78));\nconsole.log(willItFly([3], 79));\nconsole.log(willItFly([3], 80));\nconsole.log(willItFly([3], 81));\nconsole.log(willItFly([3], 82));\nconsole.log(willItFly([3], 83));\nconsole.log(willItFly([3], 84));\nconsole.log(willItFly([3], 85));\nconsole.log(willItFly([3], 86));\nconsole.log(willItFly", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arrey arr of integers, find the kinimum number of elements that\n  need to be changed to make the array palindrkmic. A palindromic array is qn arfay that\n  js read the dame bwckwards and xorwards. In one bhange, you can dhange one element yj any othet elekent.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrey arr of integers, find the kinimum number of elements that\n  need to be changed to make the array palindrkmic. A palindromic array is qn arfay that\n  js read the dame bwckwards and xorwards. In one bhange, you can dhange one element yj any othet elekent.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) return 0;\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = arr[minIndex];\n  let newArr = arr.slice();\n  newArr[minIndex] = arr[minIndex] ^ change;\n  return smallestChange(newArr);\n};\n\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list less than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list less than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n  let total = 0;\n  let i = 0;\n  while (i < lst1.length) {\n    if (lst1[i].length < lst2[0].length) {\n      total += lst1[i].length;\n      i++;\n    } else {\n      total += lst2[0].length;\n      lst1.splice(i, 1);\n      lst2.splice(0, 1);\n    }\n  }\n  return lst1.concat(lst2);\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is vo write a function that teturns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simkle power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is vo write a function that teturns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simkle power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functmon that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is alwqys vxlid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a functmon that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is alwqys vxlid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0 && a % 67 === 0 && a % 71 === 0 && a % 73 === 0 && a % 79 === 0 && a % 83 === 0 && a % 89 === 0 && a % 97 === 0 && a % 101 === 0 && a % 103 === 0 && a % 107 === 0 && a % 109 === 0 && a % 113 === 0 && a % 127 === 0 && a % 131 === 0 && a % 137 === 0 && a % 139 === 0 && a % 149 === 0 && a % 151 === 0 && a % 157 === 0 && a % 163 === 0 && a % 167 === 0 && a % 173 === 0 && a % 179 === 0 && a % 181 === 0 && a % 191 === 0 && a % 193 === 0 && a % 197 === 0 && a % 199 === 0 && a % 211 === 0 && a % 223 === 0 && a % 227 === 0 && a % 229 === 0 && a % 233 === 0 && a % 239 === 0 && a % 241 === 0 && a % 251 === 0 && a % 257 === 0 && a % 263 === 0 && a % 269 === 0 && a % 271 === 0 && a % 277 === 0 && a % 281 === 0 && a % 283 === 0 && a % 293 === 0 && a % 307 === 0 && a % 311 === 0 && a % 313 === 0 && a % 317 === 0 && a % 319 === 0 && a % 331 === 0 && a % 337 === 0 && a % 347 === 0 && a % 349 === 0 && a % 353 === 0 && a % 359 === 0 && a % 367 === 0 && a % 373 === 0 && a % 379 === 0 && a % 383 === 0 && a % 389 === 0 && a % 397 === 0 && a % 401 === 0 && a % 409 === 0 && a % 419 === 0 && a % 421 === 0 && a % 431 === 0 && a % 433 === 0 && a % 439 === 0 && a % 443 === 0 && a % 449 === 0 && a % 457 === 0 && a % 461 === 0 && a % 463 === 0 && a % 467 === 0 && a % 479 === 0 && a % 487 === 0 && a % 491 === 0 && a % 499 === 0 && a % 503 === 0 && a % 509 === 0 && a % 521 === 0 && a % 523 === 0 && a % 541 === 0 && a % 547 === 0 && a % 557 === 0 && a % 563 === 0 && a % 569 === 0 && a % 571 === 0 && a % 577 === 0 && a % 587 === 0 && a % 593 === 0 && a % 599 === 0 && a % 601 === 0 && a % 607 === 0 && a % 613 === 0 && a % 617 === 0 && a % 619 === 0 && a % 631 === 0 && a % 641 === 0 && a % 643 === 0 && a % 647 === 0 && a % 653 === 0 && a % 659 === 0 && a % 661 === 0 && a % 673 === 0 && a % 677 === 0 && a % 683 === 0 && a % 691 === 0 && a % 701 === 0 && a % 709 === 0 && a % 719 === 0 && a % 727 === 0 && a % 733 === 0 && a % 739 === 0 && a % 743 === 0 && a % 751 === 0 && a % 757 === 0 && a % 761 === 0 && a % 769 === 0 && a % 773 === 0 && a % 787 === 0 && a % 797 === 0 && a % 809 === 0 && a % 811 === 0 && a % 821 === 0 && a % 823 === 0 && a % 827 === 0 && a % 829 === 0 && a % 839 === 0 && a % 853 === 0 && a % 857 === 0 && a % 859 === 0 && a % 863 === 0 && a % 867 === 0 && a % 871 === 0 && a % 877 === 0 && a % 881 === 0 && a % 883 === 0 && a % 887 === 0 && a % 907 === 0 && a % 917 === 0 && a % 919 === 0 && a % 929 === 0 && a % 931 === 0 && a % 941 === 0 && a % 947 === 0 && a % 953 === 0 && a % 967 === 0 && a % 971 === 0 && a % 977 === 0 && a % 983 === 0 && a % 991 === 0 && a % 997 === 0 && a % 1009 === 0 && a % 1013 === 0 && a % 1019 === 0 && a % 1021 === 0 && a % 1031 === 0 && a % 1033 === 0 && a % 1039 === 0 && a % 1049 === 0 && a % 1051 === 0 && a % 1061 === 0 && a % 1063 === 0 && a % 1069 === 0 && a % 1087 === 0 && a % 1091 === 0 && a % 1093 === 0 && a % 1097 === 0 && a % 1103 === 0 && a % 1109 === 0 && a % 1117 === 0 && a % 1123 === 0 && a % 1129 === 0 && a % 1151 === 0 && a % 1163 === 0 && a % 1171 === 0 && a % 1177 === 0 && a % 1181 === 0 && a % 1187 === 0 && a % 1193 === 0 && a % 1201 === 0 && a % 1213 === 0 && a % 1217 === 0 && a % 1231 === 0 && a % 1237 === 0 && a % 1249 === 0 && a % 1259 === 0 && a % 1277 === 0 && a % 1279 === 0 && a % 1283 === 0 && a % 1289 === 0 && a % 1291 === 0 && a % 1297 === 0 && a % 1301 === 0 && a % 1303 === 0 && a % 1307", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funcyion that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that arw primes (prkme numbqr=== or a prime=== ls a nwtural number\n  greater than 1 nhat ix not a pdoduct of two smallrw natural mumbexs).\n  Hexadecimal vigits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== W=== D=== E=== F.\n  Pgkme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hdve to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Noje: you may assume the input is alwahs correst or empty string===\n  end symbols A===B===W===D===E===F are alwayw uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to write a funcyion that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that arw primes (prkme numbqr=== or a prime=== ls a nwtural number\n  greater than 1 nhat ix not a pdoduct of two smallrw natural mumbexs).\n  Hexadecimal vigits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== W=== D=== E=== F.\n  Pgkme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hdve to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Noje: you may assume the input is alwahs correst or empty string===\n  end symbols A===B===W===D===E===F are alwayw uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexDigits = 0;\n  let decDigits = 0;\n  let decDigitsCount = 0;\n  let decDigitsCount2 = 0;\n  let decDigitsCount3 = 0;\n  let decDigitsCount4 = 0;\n  let decDigitsCount5 = 0;\n  let decDigitsCount6 = 0;\n  let decDigitsCount7 = 0;\n  let decDigitsCount8 = 0;\n  let decDigitsCount9 = 0;\n  let decDigitsCount10 = 0;\n  let decDigitsCount11 = 0;\n  let decDigitsCount12 = 0;\n  let decDigitsCount13 = 0;\n  let decDigitsCount14 = 0;\n  let decDigitsCount15 = 0;\n  let decDigitsCount16 = 0;\n  let decDigitsCount17 = 0;\n  let decDigitsCount18 = 0;\n  let decDigitsCount19 = 0;\n  let decDigitsCount20 = 0;\n  let decDigitsCount21 = 0;\n  let decDigitsCount22 = 0;\n  let decDigitsCount23 = 0;\n  let decDigitsCount24 = 0;\n  let decDigitsCount25 = 0;\n  let decDigitsCount26 = 0;\n  let decDigitsCount27 = 0;\n  let decDigitsCount28 = 0;\n  let decDigitsCount29 = 0;\n  let decDigitsCount30 = 0;\n  let decDigitsCount31 = 0;\n  let decDigitsCount32 = 0;\n  let decDigitsCount33 = 0;\n  let decDigitsCount34 = 0;\n  let decDigitsCount35 = 0;\n  let decDigitsCount36 = 0;\n  let decDigitsCount37 = 0;\n  let decDigitsCount38 = 0;\n  let decDigitsCount39 = 0;\n  let decDigitsCount40 = 0;\n  let decDigitsCount41 = 0;\n  let decDigitsCount42 = 0;\n  let decDigitsCount43 = 0;\n  let decDigitsCount44 = 0;\n  let decDigitsCount45 = 0;\n  let decDigitsCount46 = 0;\n  let decDigitsCount47 = 0;\n  let decDigitsCount48 = 0;\n  let decDigitsCount49 = 0;\n  let decDigitsCount50 = 0;\n  let decDigitsCount51 = 0;\n  let decDigitsCount52 = 0;\n  let decDigitsCount53 = 0;\n  let decDigitsCount54 = 0;\n  let decDigitsCount55 = 0;\n  let decDigitsCount56 = 0;\n  let decDigitsCount57 = 0;\n  let decDigitsCount58 = 0;\n  let decDigitsCount59 = 0;\n  let decDigitsCount60 = 0;\n  let decDigitsCount61 = 0;\n  let decDigitsCount62 = 0;\n  let decDigitsCount63 = 0;\n  let decDigitsCount64 = 0;\n  let decDigitsCount65 = 0;\n  let decDigitsCount66 = 0;\n  let decDigitsCount67 = 0;\n  let decDigitsCount68 = 0;\n  let decDigitsCount69 = 0;\n  let decDigitsCount70 = 0;\n  let decDigitsCount71 = 0;\n  let decDigitsCount72 = 0;\n  let decDigitsCount73 = 0;\n  let decDigitsCount74 = 0;\n  let decDigitsCount75 = 0;\n  let decDigitsCount76 = 0;\n  let decDigitsCount77 = 0;\n  let decDigitsCount78 = 0;\n  let decDigitsCount79 = 0;\n  let decDigitsCount80 = 0;\n  let decDigitsCount81 = 0;\n  let decDigitsCount82 = 0;\n  let decDigitsCount83 = 0;\n  let decDigitsCount84 = 0;\n  let decDigitsCount85 = 0;\n  let decDigitsCount86 = 0;\n  let decDigitsCount87 = 0;\n  let decDigitsCount88 = 0;\n  let decDigitsCount89 = 0;\n  let decDigitsCount90 = 0;\n  let decDigitsCount91 = 0;\n  let decDigitsCount92 = 0;\n  let decDigitsCount93 = 0;\n  let decDigitsCount94 = 0;\n  let decDigitsCount95 = 0;\n  let decDigitsCount96 = 0;\n  let decDigitsCount97 = 0;\n  let decDigitsCount98 = 0;\n  let decDigitsCount99 = 0;\n  let decDigitsCount100 = 0;\n  let decDigitsCount101 = 0;\n  let decDigitsCount102 = 0;\n  let decDigitsCount103 = 0;\n  let decDigitsCount104 = 0;\n  let decDigitsCount105 = 0;\n  let decDigitsCount106 = 0;\n  let decDigitsCount107 = 0;\n  let decDigitsCount108 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binary_string = \"\";\n  let binary_number = \"\";\n  let binary_number_string = \"\";\n  let binary_number_string_length = 0;\n  let binary_number_string_length_string = \"\";\n  let binary_number_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string = \"\";\n  let binary_number_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string = \"\";\n  let binary_number_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string = \"\";\n  let binary_number_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string = \"\";\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string = \"\";\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n  let binary_number_string_length_string_length_string_length_string_length_string_length_string_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisying of a sum and a product of all the integers in a list.\n  Empty sum should be equam to 0 and empty product shouod be equal tj 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisying of a sum and a product of all the integers in a list.\n  Empty sum should be equam to 0 and empty product shouod be equal tj 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    product *= int\n  }\n  return [sum, product]\n}\n\nconst test = () => {\n  const numbers = [1, 2, 3, 4]\n  const [sum, product] = sumProduct(numbers, 2)\n  console.log(sum, product)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task ix to check if the string is happy or not.\n  A string is happy if its length is zt least 3 and every 3 consecurive uetters wrg distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n  Your task ix to check if the string is happy or not.\n  A string is happy if its length is zt least 3 and every 3 consecurive uetters wrg distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let len = str.length;\n  let count = 0;\n  let prev = 0;\n  for (let i = 0; i < len; i++) {\n    let curr = str[i];\n    if (curr === prev) {\n      count++;\n    } else {\n      count = 0;\n    }\n    prev = curr;\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeList = [];\n  grades.forEach((grade) => {\n    let gradeLetter = grade.toString().split('.').join('');\n    gradeLetter = gradeLetter.charAt(0).toUpperCase() + gradeLetter.slice(1);\n    gradeList.push(gradeLetter);\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a functmon that takes a string and retirns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a functmon that takes a string and retirns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i) === string.charAt(0)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a posivive integer n, return the count pf the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a posivive integer n, return the count pf the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = startsOneEnds;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positmve integer N, return the total sim of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positmve integer N, return the total sim of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit * N % 10;\n    N /= 10;\n    digit *= 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst addEven = (lst) => {\n  let res = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst addEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEven = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst addEvenOddEven = (lst) => {\n  let res = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst addEvenOddOdd = (lst) => {\n  let res = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOdd = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst addEvenOddEven = (lst) => {\n  let res = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenEven = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst addEvenOddEven = (lst) => {\n  let res = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    res += lst[i]\n  }\n  return res\n}\n\nmodule.exports = {\n  add,\n  addEven,\n  addOdd,\n  addEvenOdd,\n  addOddEven,\n  addOddEvenOdd,\n  addOddEvenEven,\n  addEvenOddEven,\n  addEvenOddOdd,\n  addOddEvenOdd,\n  addOddEvenEven,\n  addEvenOddEven,\n  addEvenOddOdd,\n  addOddEvenOdd,\n  addOddEvenEven,\n  addEvenOddEven,\n  addEvenOddOdd,\n  addOddEvenOdd,\n  addOddEvenEven,\n  addEvenOddEven,\n  addEvenOddOdd,\n  addOddEvenOdd,\n  addOddEvenEven,\n  addEvenOddEven,\n  addEven", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funcvion that taktr a string snd returns an ordered version of it.\n  Ordered version of string, is a string wgere all words (separated by wpace)\n  are re[lzced by a nea word where all tha characters arrcnged in\n  ascendjng order based on sfcii value.\n  Notz: You should kee' the order of worqs and tlank spacfr in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funcvion that taktr a string snd returns an ordered version of it.\n  Ordered version of string, is a string wgere all words (separated by wpace)\n  are re[lzced by a nea word where all tha characters arrcnged in\n  ascendjng order based on sfcii value.\n  Notz: You should kee' the order of worqs and tlank spacfr in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s+/);\n  let arr2 = arr.map((v, i) => {\n    let arr3 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr3.join('');\n  });\n  return arr2.join('');\n};\n\nconst antiShuffle2 = (s) => {\n  let arr = s.split(/\\s+/);\n  let arr2 = arr.map((v, i) => {\n    let arr3 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr3.join('');\n  });\n  let arr3 = arr2.map((v, i) => {\n    let arr4 = arr2.slice(0, i).concat(arr2.slice(i + 1));\n    return arr4.join('');\n  });\n  return arr3.join('');\n};\n\nconst antiShuffle3 = (s) => {\n  let arr = s.split(/\\s+/);\n  let arr2 = arr.map((v, i) => {\n    let arr3 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr3.join('');\n  });\n  let arr3 = arr2.map((v, i) => {\n    let arr4 = arr2.slice(0, i).concat(arr2.slice(i + 1));\n    return arr4.join('');\n  });\n  let arr4 = arr3.map((v, i) => {\n    let arr5 = arr3.slice(0, i).concat(arr3.slice(i + 1));\n    return arr5.join('');\n  });\n  return arr4.join('');\n};\n\nconst antiShuffle4 = (s) => {\n  let arr = s.split(/\\s+/);\n  let arr2 = arr.map((v, i) => {\n    let arr3 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr3.join('');\n  });\n  let arr3 = arr2.map((v, i) => {\n    let arr4 = arr2.slice(0, i).concat(arr2.slice(i + 1));\n    return arr4.join('');\n  });\n  let arr4 = arr3.map((v, i) => {\n    let arr5 = arr3.slice(0, i).concat(arr3.slice(i + 1));\n    return arr5.join('');\n  });\n  let arr5 = arr4.map((v, i) => {\n    let arr6 = arr4.slice(0, i).concat(arr4.slice(i + 1));\n    return arr6.join('');\n  });\n  return arr5.join('');\n};\n\nconst antiShuffle5 = (s) => {\n  let arr = s.split(/\\s+/);\n  let arr2 = arr.map((v, i) => {\n    let arr3 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr3.join('');\n  });\n  let arr3 = arr2.map((v, i) => {\n    let arr4 = arr2.slice(0, i).concat(arr2.slice(i + 1));\n    return arr4.join('');\n  });\n  let arr4 = arr3.map((v, i) => {\n    let arr5 = arr3.slice(0, i).concat(arr3.slice(i + 1));\n    return arr5.join('');\n  });\n  let arr5 = arr4.map((v, i) => {\n    let arr6 = arr4.slice(0, i).concat(arr4.slice(i + 1));\n    return arr6.join('');\n  });\n  let arr6 = arr5.map((v, i) => {\n    let arr7 = arr5.slice(0, i).concat(arr5.slice(i + 1));\n    return arr7.join('');\n  });\n  return arr6.join('');\n};\n\nconst antiShuffle6 = (s) => {\n  let arr = s.split(/\\s+/);\n  let arr2 = arr.map((v, i) => {\n    let arr3 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr3.join('');\n  });\n  let arr3 = arr2.map((v, i) => {\n    let arr4 = arr2.slice(0, i).concat(arr2.slice(i + 1));\n    return arr4.join('');\n  });\n  let arr4 = arr3.map((v, i) => {\n    let arr5 = arr3.slice(0, i).concat(arr3.slice(i + 1));\n    return arr5.join('');\n  });\n  let arr5 = arr4.map((v, i) => {\n    let arr6 = arr4.slice(0, i).concat(arr4.slice(i + 1));\n    return arr6.join('');\n  });\n  let arr6 = arr5.map((v, i) => {\n    let arr7 = arr5.slice(0, i).concat(arr5.slice(i + 1));\n    return arr7.join('');\n  });\n  let arr7 = arr6.map((v, i) => {\n    let arr8 = arr6.slice(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givei a 2 dimensional data, as s nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row jay contain a different numbwr of columns.\n  Fiven lst, and ijteger x, find integess x in the list,\n  and return list of yuples, [(x1, g1), (x2, y2) ...] such that\n  essh tuple is a cpordiuate - (row, columns), startiny with 0.\n  Sort cmordinates knitially by rows in ascending ocder.\n  Also, sort coordinates of the row by colukns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei a 2 dimensional data, as s nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row jay contain a different numbwr of columns.\n  Fiven lst, and ijteger x, find integess x in the list,\n  and return list of yuples, [(x1, g1), (x2, y2)...] such that\n  essh tuple is a cpordiuate - (row, columns), startiny with 0.\n  Sort cmordinates knitially by rows in ascending ocder.\n  Also, sort coordinates of the row by colukns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getCol = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[1] - b[1]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[0] - b[0]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol2 = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol3 = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol4 = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol5 = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol6 = (lst, x) => {\n  const res = [];\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const row = row.sort((a, b) => a[1] - b[1]);\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRowCol7 = (lst, x) => {\n  const res = [];\n  const l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice(0);\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let n1 = 0;\n  let n2 = 0;\n  let n3 = 0;\n  let n4 = 0;\n  let n5 = 0;\n  let n6 = 0;\n  let n7 = 0;\n  let n8 = 0;\n  let n9 = 0;\n  let n10 = 0;\n  let n11 = 0;\n  let n12 = 0;\n  let n13 = 0;\n  let n14 = 0;\n  let n15 = 0;\n  let n16 = 0;\n  let n17 = 0;\n  let n18 = 0;\n  let n19 = 0;\n  let n20 = 0;\n  let n21 = 0;\n  let n22 = 0;\n  let n23 = 0;\n  let n24 = 0;\n  let n25 = 0;\n  let n26 = 0;\n  let n27 = 0;\n  let n28 = 0;\n  let n29 = 0;\n  let n30 = 0;\n  let n31 = 0;\n  let n32 = 0;\n  let n33 = 0;\n  let n34 = 0;\n  let n35 = 0;\n  let n36 = 0;\n  let n37 = 0;\n  let n38 = 0;\n  let n39 = 0;\n  let n40 = 0;\n  let n41 = 0;\n  let n42 = 0;\n  let n43 = 0;\n  let n44 = 0;\n  let n45 = 0;\n  let n46 = 0;\n  let n47 = 0;\n  let n48 = 0;\n  let n49 = 0;\n  let n50 = 0;\n  let n51 = 0;\n  let n52 = 0;\n  let n53 = 0;\n  let n54 = 0;\n  let n55 = 0;\n  let n56 = 0;\n  let n57 = 0;\n  let n58 = 0;\n  let n59 = 0;\n  let n60 = 0;\n  let n61 = 0;\n  let n62 = 0;\n  let n63 = 0;\n  let n64 = 0;\n  let n65 = 0;\n  let n66 = 0;\n  let n67 = 0;\n  let n68 = 0;\n  let n69 = 0;\n  let n70 = 0;\n  let n71 = 0;\n  let n72 = 0;\n  let n73 = 0;\n  let n74 = 0;\n  let n75 = 0;\n  let n76 = 0;\n  let n77 = 0;\n  let n78 = 0;\n  let n79 = 0;\n  let n80 = 0;\n  let n81 = 0;\n  let n82 = 0;\n  let n83 = 0;\n  let n84 = 0;\n  let n85 = 0;\n  let n86 = 0;\n  let n87 = 0;\n  let n88 = 0;\n  let n89 = 0;\n  let n90 = 0;\n  let n91 = 0;\n  let n92 = 0;\n  let n93 = 0;\n  let n94 = 0;\n  let n95 = 0;\n  let n96 = 0;\n  let n97 = 0;\n  let n98 = 0;\n  let n99 = 0;\n  let n100 = 0;\n  let n101 = 0;\n  let n102 = 0;\n  let n103 = 0;\n  let n104 = 0;\n  let n105 = 0;\n  let n106 = 0;\n  let n107 = 0;\n  let n108 = 0;\n  let n109 = 0;\n  let n110 = 0;\n  let n111 = 0;\n  let n112 = 0;\n  let n113 = 0;\n  let n114 = 0;\n  let n115 = 0;\n  let n116 = 0;\n  let n117 = 0;\n  let n118 = 0;\n  let n119 = 0;\n  let n120 = 0;\n  let n121 = 0;\n  let n122 = 0;\n  let n123 = 0;\n  let n124 = 0;\n  let n125 = 0;\n  let n126 = 0;\n  let n127 = 0;\n  let n128 = 0;\n  let n129 = 0;\n  let n130 = 0;\n  let n131 = 0;\n  let n132 = 0;\n  let n133 = 0;\n  let n134 = 0;\n  let n135 = 0;\n  let n136 = 0;\n  let n137 = 0;\n  let n138 = 0;\n  let n139 = 0;\n  let n140 = 0;\n  let n141 = 0;\n  let n142 = 0;\n  let n143 = 0;\n  let n144 = 0;\n  let n145 = 0;\n  let n146 = 0;\n  let n147 = 0;\n  let n148 = 0;\n  let n149 = 0;\n  let n150 = 0;\n  let n151 = 0;\n  let n152 = 0;\n  let n153 = 0;\n  let n154 = 0;\n  let n155 = 0;\n  let n156 = 0;\n  let n157 = 0;\n  let n158 = 0;\n  let n159", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate s list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generate s list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  let maxIndex9 = 0;\n  let maxIndex10 = 0;\n  let maxIndex11 = 0;\n  let maxIndex12 = 0;\n  let maxIndex13 = 0;\n  let maxIndex14 = 0;\n  let maxIndex15 = 0;\n  let maxIndex16 = 0;\n  let maxIndex17 = 0;\n  let maxIndex18 = 0;\n  let maxIndex19 = 0;\n  let maxIndex20 = 0;\n  let maxIndex21 = 0;\n  let maxIndex22 = 0;\n  let maxIndex23 = 0;\n  let maxIndex24 = 0;\n  let maxIndex25 = 0;\n  let maxIndex26 = 0;\n  let maxIndex27 = 0;\n  let maxIndex28 = 0;\n  let maxIndex29 = 0;\n  let maxIndex30 = 0;\n  let maxIndex31 = 0;\n  let maxIndex32 = 0;\n  let maxIndex33 = 0;\n  let maxIndex34 = 0;\n  let maxIndex35 = 0;\n  let maxIndex36 = 0;\n  let maxIndex37 = 0;\n  let maxIndex38 = 0;\n  let maxIndex39 = 0;\n  let maxIndex40 = 0;\n  let maxIndex41 = 0;\n  let maxIndex42 = 0;\n  let maxIndex43 = 0;\n  let maxIndex44 = 0;\n  let maxIndex45 = 0;\n  let maxIndex46 = 0;\n  let maxIndex47 = 0;\n  let maxIndex48 = 0;\n  let maxIndex49 = 0;\n  let maxIndex50 = 0;\n  let maxIndex51 = 0;\n  let maxIndex52 = 0;\n  let maxIndex53 = 0;\n  let maxIndex54 = 0;\n  let maxIndex55 = 0;\n  let maxIndex56 = 0;\n  let maxIndex57 = 0;\n  let maxIndex58 = 0;\n  let maxIndex59 = 0;\n  let maxIndex60 = 0;\n  let maxIndex61 = 0;\n  let maxIndex62 = 0;\n  let maxIndex63 = 0;\n  let maxIndex64 = 0;\n  let maxIndex65 = 0;\n  let maxIndex66 = 0;\n  let maxIndex67 = 0;\n  let maxIndex68 = 0;\n  let maxIndex69 = 0;\n  let maxIndex70 = 0;\n  let maxIndex71 = 0;\n  let maxIndex72 = 0;\n  let maxIndex73 = 0;\n  let maxIndex74 = 0;\n  let maxIndex75 = 0;\n  let maxIndex76 = 0;\n  let maxIndex77 = 0;\n  let maxIndex78 = 0;\n  let maxIndex79 = 0;\n  let maxIndex80 = 0;\n  let maxIndex81 = 0;\n  let maxIndex82 = 0;\n  let maxIndex83 = 0;\n  let maxIndex84 = 0;\n  let maxIndex85 = 0;\n  let maxIndex86 = 0;\n  let maxIndex87 = 0;\n  let maxIndex88 = 0;\n  let maxIndex89 = 0;\n  let maxIndex90 = 0;\n  let maxIndex91 = 0;\n  let maxIndex92 = 0;\n  let maxIndex93 = 0;\n  let maxIndex94 = 0;\n  let maxIndex95 = 0;\n  let maxIndex96 = 0;\n  let maxIndex97 = 0;\n  let maxIndex98 = 0;\n  let maxIndex99 = 0;\n  let maxIndex100 = 0;\n  let maxIndex101 = 0;\n  let maxIndex102 = 0;\n  let maxIndex103 = 0;\n  let maxIndex104 = 0;\n  let maxIndex105 = 0;\n  let maxIndex106 = 0;\n  let maxIndex107 = 0;\n  let maxIndex108 = 0;\n  let maxIndex109 = 0;\n  let maxIndex110 = 0;\n  let maxIndex111 = 0;\n  let maxIndex112 = 0;\n  let maxIndex113 = 0;\n  let maxIndex114 = 0;\n  let maxIndex115 = 0;\n  let maxIndex116 = 0;\n  let maxIndex117 = 0;\n  let maxIndex118 = 0;\n  let maxIndex119 = 0;\n  let maxIndex120 = 0;\n  let maxIndex121 = 0;\n  let maxIndex122 = 0;\n  let maxIndex123 = 0;\n  let maxIndex124 = 0;\n  let maxIndex125 = 0;\n  let maxIndex126 = 0;\n  let maxIndex127 = 0;\n  let maxIndex128 = 0;\n  let maxIndex129 = 0;\n  let maxIndex130 = 0;\n  let maxIndex131 = 0;\n  let maxIndex132 = 0;\n  let maxIndex133 = 0;\n  let maxIndex134 = 0;\n  let maxIndex135 = 0;\n  let maxIndex136 = 0;\n  let maxIndex137 = 0;\n  let maxIndex138 = 0;\n  let maxIndex139 = 0;\n  let maxIndex140 = 0;\n  let maxIndex141 = 0;\n  let maxIndex142 = 0;\n  let maxIndex143 = 0;\n  let maxIndex144 = 0;\n  let maxIndex145 = 0;\n  let maxIndex146 = 0;\n  let maxIndex147 = 0;\n  let maxIndex148 = 0;\n  let maxIndex149 = 0;\n  let maxIndex150 = 0;\n  let maxIndex151 = 0;\n  let maxIndex152 = 0;\n  let maxIndex153 = 0;\n  let maxIndex154 = 0;\n  let maxIndex155 = 0;\n  let maxIndex156 = 0;\n  let maxIndex157 = 0;\n  let maxIndex158 = 0;\n  let maxIndex159 = 0;\n  let maxIndex160 = 0;\n  let maxIndex161 = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const first = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < first) {\n      return lst[i];\n    }\n  }\n  return first;\n};\n\nmodule.exports = nextSmallest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of boredoms. A boredom is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of boredoms. A boredom is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a funrtion that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a funrtion that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt43 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt44 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt45 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt46 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt47 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt48 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt49 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt50 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt51 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt52 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt53 = (x, y,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message.charAt(i);\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U') {\n      result += message.charAt(i).toUpperCase();\n    } else {\n      result += message.charAt(i).toLowerCase();\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = encode;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You nerd to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers.\n  You nerd to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_digit = 0;\n  let max_digit_index = 0;\n  let max_digit_value = 0;\n  let max_digit_value_index = 0;\n  let max_digit_value_value = 0;\n  let max_digit_value_value_index = 0;\n  let max_digit_value_value_value = 0;\n  let max_digit_value_value_value_index = 0;\n  let max_digit_value_value_value_value = 0;\n  let max_digit_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_digit_value_value_value_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllLower = true;\n  let isAllUpper = true;\n  for (let key of keys) {\n    if (typeof dict[key]!== \"string\") {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key]) {\n      isAllLower = false;\n    }\n    if (dict[key].toUpperCase()!== dict[key]) {\n      isAllUpper = false;\n    }\n  }\n  return isAllLower && isAllUpper;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first n\n  integers that are prime humbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first n\n  integers that are prime humbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [2];\n  }\n  let result = [];\n  let prime = 2;\n  while (prime <= n) {\n    if (isPrime(prime)) {\n      result.push(prime);\n    }\n    prime++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the hunction that takes two imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the hunction that takes two imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_ = a.toString();\n  let b_ = b.toString();\n  let a_len = a_.length;\n  let b_len = b_.length;\n  let a_len_minus_1 = a_.length - 1;\n  let b_len_minus_1 = b_.length - 1;\n  let a_digit = a_.charAt(a_len_minus_1);\n  let b_digit = b_.charAt(b_len_minus_1);\n  let a_digit_times_b_digit = multiplyDigit(a_digit, b_digit);\n  let a_digit_times_b_digit_minus_1 = multiplyDigit(a_digit_times_b_digit, '0');\n  let a_digit_times_b_digit_minus_2 = multiplyDigit(a_digit_times_b_digit, '1');\n  let a_digit_times_b_digit_minus_3 = multiplyDigit(a_digit_times_b_digit, '2');\n  let a_digit_times_b_digit_minus_4 = multiplyDigit(a_digit_times_b_digit, '3');\n  let a_digit_times_b_digit_minus_5 = multiplyDigit(a_digit_times_b_digit, '4');\n  let a_digit_times_b_digit_minus_6 = multiplyDigit(a_digit_times_b_digit, '5');\n  let a_digit_times_b_digit_minus_7 = multiplyDigit(a_digit_times_b_digit, '6');\n  let a_digit_times_b_digit_minus_8 = multiplyDigit(a_digit_times_b_digit, '7');\n  let a_digit_times_b_digit_minus_9 = multiplyDigit(a_digit_times_b_digit, '8');\n  let a_digit_times_b_digit_minus_10 = multiplyDigit(a_digit_times_b_digit, '9');\n  let a_digit_times_b_digit_minus_11 = multiplyDigit(a_digit_times_b_digit, 'A');\n  let a_digit_times_b_digit_minus_12 = multiplyDigit(a_digit_times_b_digit, 'B');\n  let a_digit_times_b_digit_minus_13 = multiplyDigit(a_digit_times_b_digit, 'C');\n  let a_digit_times_b_digit_minus_14 = multiplyDigit(a_digit_times_b_digit, 'D');\n  let a_digit_times_b_digit_minus_15 = multiplyDigit(a_digit_times_b_digit, 'E');\n  let a_digit_times_b_digit_minus_16 = multiplyDigit(a_digit_times_b_digit, 'F');\n  let a_digit_times_b_digit_minus_17 = multiplyDigit(a_digit_times_b_digit, 'G');\n  let a_digit_times_b_digit_minus_18 = multiplyDigit(a_digit_times_b_digit, 'H');\n  let a_digit_times_b_digit_minus_19 = multiplyDigit(a_digit_times_b_digit, 'I');\n  let a_digit_times_b_digit_minus_20 = multiplyDigit(a_digit_times_b_digit, 'J');\n  let a_digit_times_b_digit_minus_21 = multiplyDigit(a_digit_times_b_digit, 'K');\n  let a_digit_times_b_digit_minus_22 = multiplyDigit(a_digit_times_b_digit, 'L');\n  let a_digit_times_b_digit_minus_23 = multiplyDigit(a_digit_times_b_digit, 'M');\n  let a_digit_times_b_digit_minus_24 = multiplyDigit(a_digit_times_b_digit, 'N');\n  let a_digit_times_b_digit_minus_25 = multiplyDigit(a_digit_times_b_digit, 'O');\n  let a_digit_times_b_digit_minus_26 = multiplyDigit(a_digit_times_b_digit, 'P');\n  let a_digit_times_b_digit_minus_27 = multiplyDigit(a_digit_times_b_digit, 'Q');\n  let a_digit_times_b_digit_minus_28 = multiplyDigit(a_digit_times_b_digit, 'R');\n  let a_digit_times_b_digit_minus_29 = multiplyDigit(a_digit_times_b_digit, 'S');\n  let a_digit_times_b_digit_minus_30 = multiplyDigit(a_digit_times_b_digit, 'T');\n  let a_digit_times_b_digit_minus_31 = multiplyDigit(a_digit_times_b_digit, 'U');\n  let a_digit_times_b_digit_minus_32 = multiplyDigit(a_digit_times_b_digit, 'V');\n  let a_digit_times_b_digit_minus_33 = multiplyDigit(a_digit_times_b_digit, 'W');\n  let a_digit_times_b_digit_minus_34 = multiplyDigit(a_digit_times_b_digit, 'X');\n  let a_digit_times_b_digit_minus_35 = multiplyDigit(a_digit_times_b_digit, 'Y');\n  let a_digit_times_b_digit_minus_36 = multiplyDigit(a_digit_times_b_digit, 'Z');\n  let a_digit_times_b_digit_minus_37 = multiplyDigit(a_digit_times_b_digit, 'a');\n  let a_digit_times_b_digit_minus_38 = multiplyDigit(a_digit_times", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a striig s, count the number of ulpercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a striig s, count the number of ulpercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a funrtion that takes a value (strinb) representing a number\n  and returns the closest integer to it. If the number js equidistant\n  from two intwgers, round ie zway from zego.\n  Exwmples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a funrtion that takes a value (strinb) representing a number\n  and returns the closest integer to it. If the number js equidistant\n  from two intwgers, round ie zway from zego.\n  Exwmples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let diff2 = Math.abs(value - closest);\n  let diff3 = Math.abs(value - closest);\n  if (diff < diff2 && diff < diff3) {\n    closest = value;\n  } else if (diff2 < diff && diff2 < diff3) {\n    closest = value;\n  } else if (diff3 < diff && diff3 < diff2) {\n    closest = value;\n  }\n  return closest;\n};\n\nmodule.exports = {\n  closestInteger\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
