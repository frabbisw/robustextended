{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        count++\n      }\n    }\n  }\n  return count > 0\n}\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  let count = 0\n  for (let i = 0; i < numbers.length; i++) {\n    for (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_list = paren_string.split('');\n  let paren_list_length = paren_list.length;\n  let paren_list_index = 0;\n  let paren_list_length_minus_1 = paren_list_length - 1;\n  let paren_list_index_minus_1 = paren_list_index;\n  let paren_list_index_plus_1 = paren_list_index;\n  let paren_list_index_minus_2 = paren_list_index;\n  let paren_list_index_plus_2 = paren_list_index;\n  let paren_list_index_minus_3 = paren_list_index;\n  let paren_list_index_plus_3 = paren_list_index;\n  let paren_list_index_minus_4 = paren_list_index;\n  let paren_list_index_plus_4 = paren_list_index;\n  let paren_list_index_minus_5 = paren_list_index;\n  let paren_list_index_plus_5 = paren_list_index;\n  let paren_list_index_minus_6 = paren_list_index;\n  let paren_list_index_plus_6 = paren_list_index;\n  let paren_list_index_minus_7 = paren_list_index;\n  let paren_list_index_plus_7 = paren_list_index;\n  let paren_list_index_minus_8 = paren_list_index;\n  let paren_list_index_plus_8 = paren_list_index;\n  let paren_list_index_minus_9 = paren_list_index;\n  let paren_list_index_plus_9 = paren_list_index;\n  let paren_list_index_minus_10 = paren_list_index;\n  let paren_list_index_plus_10 = paren_list_index;\n  let paren_list_index_minus_11 = paren_list_index;\n  let paren_list_index_plus_11 = paren_list_index;\n  let paren_list_index_minus_12 = paren_list_index;\n  let paren_list_index_plus_12 = paren_list_index;\n  let paren_list_index_minus_13 = paren_list_index;\n  let paren_list_index_plus_13 = paren_list_index;\n  let paren_list_index_minus_14 = paren_list_index;\n  let paren_list_index_plus_14 = paren_list_index;\n  let paren_list_index_minus_15 = paren_list_index;\n  let paren_list_index_plus_15 = paren_list_index;\n  let paren_list_index_minus_16 = paren_list_index;\n  let paren_list_index_plus_16 = paren_list_index;\n  let paren_list_index_minus_17 = paren_list_index;\n  let paren_list_index_plus_17 = paren_list_index;\n  let paren_list_index_minus_18 = paren_list_index;\n  let paren_list_index_plus_18 = paren_list_index;\n  let paren_list_index_minus_19 = paren_list_index;\n  let paren_list_index_plus_19 = paren_list_index;\n  let paren_list_index_minus_20 = paren_list_index;\n  let paren_list_index_plus_20 = paren_list_index;\n  let paren_list_index_minus_21 = paren_list_index;\n  let paren_list_index_plus_21 = paren_list_index;\n  let paren_list_index_minus_22 = paren_list_index;\n  let paren_list_index_plus_22 = paren_list_index;\n  let paren_list_index_minus_23 = paren_list_index;\n  let paren_list_index_plus_23 = paren_list_index;\n  let paren_list_index_minus_24 = paren_list_index;\n  let paren_list_index_plus_24 = paren_list_index;\n  let paren_list_index_minus_25 = paren_list_index;\n  let paren_list_index_plus_25 = paren_list_index;\n  let paren_list_index_minus_26 = paren_list_index;\n  let paren_list_index_plus_26 = paren_list_index;\n  let paren_list_index_minus_27 = paren_list_index;\n  let paren_list_index_plus_27 = paren_list_index;\n  let paren_list_index_minus_28 = paren_list_index;\n  let paren_list_index_plus_28 = paren_list_index;\n  let paren_list_index_minus_29 = paren_list_index;\n  let paren_list_index_plus_29 = paren_list_index;\n  let paren_list_index_minus_30 = paren_list_index;\n  let paren_list_index_plus_30 = paren_list_index;\n  let paren_list_index_minus_31 = paren_list_index;\n  let paren_list_index_plus_31 = paren_list_index;\n  let paren_list_index_minus_32 = paren_list_index;\n  let paren_list_index_plus_32 = paren_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let result = '';\n  let suffix = '';\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let nn = 0;\n  let nnn = 0;\n  let nnnn = 0;\n  let nnnnn = 0;\n  let nnnnnn = 0;\n  let nnnnnnn = 0;\n  let nnnnnnnn = 0;\n  let nnnnnnnnn = 0;\n  let nnnnnnnnnn = 0;\n  let nnnnnnnnnnn = 0;\n  let nnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n  let left = 0\n  let right = 0\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result.push(left)\n      left += 1\n    } else {\n      result.push(right)\n      right += 1\n    }\n    n -= 1\n  }\n  return result\n}\n\nmodule.exports = makeAPile\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString9 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString10 = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x < y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x === 0) {\n    return -1\n  }\n  if (x === 1) {\n    return x\n  }\n  if (x === 2) {\n    return x\n  }\n  if (x === 3) {\n    return x\n  }\n  if (x === 4) {\n    return x\n  }\n  if (x === 5) {\n    return x\n  }\n  if (x === 6) {\n    return x\n  }\n  if (x === 7) {\n    return x\n  }\n  if (x === 8) {\n    return x\n  }\n  if (x === 9) {\n    return x\n  }\n  if (x === 10) {\n    return x\n  }\n  if (x === 11) {\n    return x\n  }\n  if (x === 12) {\n    return x\n  }\n  if (x === 13) {\n    return x\n  }\n  if (x === 14) {\n    return x\n  }\n  if (x === 15) {\n    return x\n  }\n  return -1\n}\n\nmodule.exports = {\n  chooseNum\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  let i = 0;\n  while (i < x.length) {\n    const current = x[i];\n    const j = i + 1;\n    while (j < x.length && x[j] === current) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(current);\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n\n  arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n\n  return result;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f(i - 1));\n    } else {\n      result.push(i * (f(i - 1) + f(i - 2)));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even += 1\n    } else {\n      odd += 1\n    }\n    i += 1\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      sign = arr[i];\n    }\n  }\n  return {\n    count,\n    sign\n  };\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let result = true;\n  let index = 0;\n  while (index < arr.length) {\n    let temp = arr[index];\n    arr[index] = arr[index + 1];\n    arr[index + 1] = temp;\n    index++;\n    if (index === arr.length) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor2('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor3('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor4('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor5('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor6('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor7('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor8('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor9('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor10('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor11('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero.\n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor12('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_even = [];\n  let lst2_even = [];\n  let lst1_odd = [];\n  let lst2_odd = [];\n  let lst1_odd_even = [];\n  let lst2_odd_even = [];\n  let lst1_odd_odd = [];\n  let lst2_odd_odd = [];\n  let lst1_odd_odd_even = [];\n  let lst2_odd_odd_even = [];\n  let lst1_odd_odd_odd = [];\n  let lst2_odd_odd_odd = [];\n  let lst1_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst2_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = [];\n  let lst1_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letter = '';\n  let repeat = 0;\n  let letterCount = 0;\n  let letterCounts = {};\n  let letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] === letters[i + 1]) {\n      repeat++;\n    } else {\n      if (repeat > 0) {\n        letter = letters[i];\n        count = repeat;\n        repeat = 0;\n        if (letterCounts[letter] === undefined) {\n          letterCounts[letter] = 1;\n        } else {\n          letterCounts[letter]++;\n        }\n      } else {\n        letter = letters[i];\n        count = 1;\n      }\n    }\n    letterCount = letterCounts[letter];\n    letterCounts[letter] = letterCount + 1;\n  }\n  return letterCounts;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i] < c[j]) {\n      result += s[i];\n      i++;\n    } else {\n      result += c[j];\n      j--;\n    }\n  }\n  if (s[i] === c[j]) {\n    result += s[i];\n    i++;\n    j--;\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i] < c[j]) {\n      result += s[i];\n      i++;\n    } else {\n      result += c[j];\n      j--;\n    }\n  }\n  if (s[i] === c[j]) {\n    result += s[i];\n    i++;\n    j--;\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome2 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i] < c[j]) {\n      result += s[i];\n      i++;\n    } else {\n      result += c[j];\n      j--;\n    }\n  }\n  if (s[i] === c[j]) {\n    result += s[i];\n    i++;\n    j--;\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome3 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i] < c[j]) {\n      result += s[i];\n      i++;\n    } else {\n      result += c[j];\n      j--;\n    }\n  }\n  if (s[i] === c[j]) {\n    result += s[i];\n    i++;\n    j--;\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome4 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i] < c[j]) {\n      result += s[i];\n      i++;\n    } else {\n      result += c[j];\n      j--;\n    }\n  }\n  if (s[i] === c[j]) {\n    result += s[i];\n    i++;\n    j--;\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome5 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i] < c[j]) {\n      result += s[i];\n      i++;\n    } else {\n      result += c[j];\n      j--;\n    }\n  }\n  if (s[i] === c[j]) {\n    result += s[i];\n    i++;\n    j--;\n  }\n  if (i < s.length && j < c.length) {\n    isPalindrome = false;\n  }\n  return [result, isPalindrome];\n};\n\nconst palindrome6 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let n = lst.length;\n  for (let i = 0; i < n; i++) {\n    let str = lst[i];\n    let nn = str.length;\n    let nn2 = nn / 2;\n    let nn3 = nn / 3;\n    let nn4 = nn / 4;\n    let nn5 = nn / 5;\n    let nn6 = nn / 6;\n    let nn7 = nn / 7;\n    let nn8 = nn / 8;\n    let nn9 = nn / 9;\n    let nn10 = nn / 10;\n    let nn11 = nn / 11;\n    let nn12 = nn / 12;\n    let nn13 = nn / 13;\n    let nn14 = nn / 14;\n    let nn15 = nn / 15;\n    let nn16 = nn / 16;\n    let nn17 = nn / 17;\n    let nn18 = nn / 18;\n    let nn19 = nn / 19;\n    let nn20 = nn / 20;\n    let nn21 = nn / 21;\n    let nn22 = nn / 22;\n    let nn23 = nn / 23;\n    let nn24 = nn / 24;\n    let nn25 = nn / 25;\n    let nn26 = nn / 26;\n    let nn27 = nn / 27;\n    let nn28 = nn / 28;\n    let nn29 = nn / 29;\n    let nn30 = nn / 30;\n    let nn31 = nn / 31;\n    let nn32 = nn / 32;\n    let nn33 = nn / 33;\n    let nn34 = nn / 34;\n    let nn35 = nn / 35;\n    let nn36 = nn / 36;\n    let nn37 = nn / 37;\n    let nn38 = nn / 38;\n    let nn39 = nn / 39;\n    let nn40 = nn / 40;\n    let nn41 = nn / 41;\n    let nn42 = nn / 42;\n    let nn43 = nn / 43;\n    let nn44 = nn / 44;\n    let nn45 = nn / 45;\n    let nn46 = nn / 46;\n    let nn47 = nn / 47;\n    let nn48 = nn / 48;\n    let nn49 = nn / 49;\n    let nn50 = nn / 50;\n    let nn51 = nn / 51;\n    let nn52 = nn / 52;\n    let nn53 = nn / 53;\n    let nn54 = nn / 54;\n    let nn55 = nn / 55;\n    let nn56 = nn / 56;\n    let nn57 = nn / 57;\n    let nn58 = nn / 58;\n    let nn59 = nn / 59;\n    let nn60 = nn / 60;\n    let nn61 = nn / 61;\n    let nn62 = nn / 62;\n    let nn63 = nn / 63;\n    let nn64 = nn / 64;\n    let nn65 = nn / 65;\n    let nn66 = nn / 66;\n    let nn67 = nn / 67;\n    let nn68 = nn / 68;\n    let nn69 = nn / 69;\n    let nn70 = nn / 70;\n    let nn71 = nn / 71;\n    let nn72 = nn / 72;\n    let nn73 = nn / 73;\n    let nn74 = nn / 74;\n    let nn75 = nn / 75;\n    let nn76 = nn / 76;\n    let nn77 = nn / 77;\n    let nn78 = nn / 78;\n    let nn79 = nn / 79;\n    let nn80 = nn / 80;\n    let nn81 = nn / 81;\n    let nn82 = nn / 82;\n    let nn83 = nn / 83;\n    let nn84 = nn / 84;\n    let nn85 = nn / 85;\n    let nn86 = nn / 86;\n    let nn87 = nn / 87;\n    let nn88 = nn / 88;\n    let nn89 = nn / 89;\n    let nn90 = nn / 90;\n    let nn91 = nn / 91;\n    let nn92 = nn / 92;\n    let nn93 = nn / 93;\n    let nn94 = nn / 94;\n    let nn95 = nn / 95;\n    let nn96 = nn / 96;\n    let nn97 = nn / 97;\n    let nn98 = nn / 98;\n    let nn99 = nn / 99;\n    let nn100 = nn / 100;\n    let nn101 = nn / 101;\n    let nn102 = nn / 102;\n    let nn103 = nn / 103;\n    let nn104 = nn / 104;\n    let nn105 = nn / 105;\n    let nn106 = nn / 106;\n    let nn107 = nn / 107;\n    let nn108 = nn / 108;\n    let nn109 = nn / 109;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + minSubArraySum(nums.slice(i)));\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantCount = consonants.length;\n  const vowelCount = vowels.length;\n  const words = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let word = '';\n  while (i < s.length) {\n    if (j < n) {\n      if (s[i] === s[j]) {\n        if (k === 0) {\n          word = s.slice(j, i);\n          words.push(word);\n          k++;\n        } else {\n          word = word + s.slice(j, i);\n          words.push(word);\n          k++;\n        }\n        j++;\n      } else {\n        if (k === 0) {\n          word = s.slice(j, i);\n          words.push(word);\n          k++;\n        } else {\n          word = word + s.slice(j, i);\n          words.push(word);\n          k++;\n        }\n        j = i;\n      }\n    } else {\n      if (k === 0) {\n        word = s.slice(j, i);\n        words.push(word);\n        k++;\n      } else {\n        word = word + s.slice(j, i);\n        words.push(word);\n        k++;\n      }\n      j = i;\n    }\n    i++;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  let minDistance = Number.MAX_SAFE_INTEGER;\n  let distance = 0;\n  let index = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let wordLength = word.length;\n  for (i = 0; i < wordLength; i++) {\n    if (vowels.includes(word[i])) {\n      distance = 0;\n      for (j = 0; j < wordLength; j++) {\n        if (j === i) {\n          continue;\n        }\n        if (consonants.includes(word[j])) {\n          distance += 1;\n        }\n      }\n      if (distance < minDistance) {\n        minDistance = distance;\n        minIndex = i;\n      }\n    }\n  }\n  if (minDistance === Number.MAX_SAFE_INTEGER) {\n    return '';\n  }\n  return word[minIndex];\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = false;\n  let stack = [];\n  let stackSize = 0;\n  let stackIndex = 0;\n  let stackIndex2 = 0;\n  let stackIndex3 = 0;\n  let stackIndex4 = 0;\n  let stackIndex5 = 0;\n  let stackIndex6 = 0;\n  let stackIndex7 = 0;\n  let stackIndex8 = 0;\n  let stackIndex9 = 0;\n  let stackIndex10 = 0;\n  let stackIndex11 = 0;\n  let stackIndex12 = 0;\n  let stackIndex13 = 0;\n  let stackIndex14 = 0;\n  let stackIndex15 = 0;\n  let stackIndex16 = 0;\n  let stackIndex17 = 0;\n  let stackIndex18 = 0;\n  let stackIndex19 = 0;\n  let stackIndex20 = 0;\n  let stackIndex21 = 0;\n  let stackIndex22 = 0;\n  let stackIndex23 = 0;\n  let stackIndex24 = 0;\n  let stackIndex25 = 0;\n  let stackIndex26 = 0;\n  let stackIndex27 = 0;\n  let stackIndex28 = 0;\n  let stackIndex29 = 0;\n  let stackIndex30 = 0;\n  let stackIndex31 = 0;\n  let stackIndex32 = 0;\n  let stackIndex33 = 0;\n  let stackIndex34 = 0;\n  let stackIndex35 = 0;\n  let stackIndex36 = 0;\n  let stackIndex37 = 0;\n  let stackIndex38 = 0;\n  let stackIndex39 = 0;\n  let stackIndex40 = 0;\n  let stackIndex41 = 0;\n  let stackIndex42 = 0;\n  let stackIndex43 = 0;\n  let stackIndex44 = 0;\n  let stackIndex45 = 0;\n  let stackIndex46 = 0;\n  let stackIndex47 = 0;\n  let stackIndex48 = 0;\n  let stackIndex49 = 0;\n  let stackIndex50 = 0;\n  let stackIndex51 = 0;\n  let stackIndex52 = 0;\n  let stackIndex53 = 0;\n  let stackIndex54 = 0;\n  let stackIndex55 = 0;\n  let stackIndex56 = 0;\n  let stackIndex57 = 0;\n  let stackIndex58 = 0;\n  let stackIndex59 = 0;\n  let stackIndex60 = 0;\n  let stackIndex61 = 0;\n  let stackIndex62 = 0;\n  let stackIndex63 = 0;\n  let stackIndex64 = 0;\n  let stackIndex65 = 0;\n  let stackIndex66 = 0;\n  let stackIndex67 = 0;\n  let stackIndex68 = 0;\n  let stackIndex69 = 0;\n  let stackIndex70 = 0;\n  let stackIndex71 = 0;\n  let stackIndex72 = 0;\n  let stackIndex73 = 0;\n  let stackIndex74 = 0;\n  let stackIndex75 = 0;\n  let stackIndex76 = 0;\n  let stackIndex77 = 0;\n  let stackIndex78 = 0;\n  let stackIndex79 = 0;\n  let stackIndex80 = 0;\n  let stackIndex81 = 0;\n  let stackIndex82 = 0;\n  let stackIndex83 = 0;\n  let stackIndex84 = 0;\n  let stackIndex85 = 0;\n  let stackIndex86 = 0;\n  let stackIndex87 = 0;\n  let stackIndex88 = 0;\n  let stackIndex89 = 0;\n  let stackIndex90 = 0;\n  let stackIndex91 = 0;\n  let stackIndex92 = 0;\n  let stackIndex93 = 0;\n  let stackIndex94 = 0;\n  let stackIndex95 = 0;\n  let stackIndex96 = 0;\n  let stackIndex97 = 0;\n  let stackIndex98 = 0;\n  let stackIndex99 = 0;\n  let stackIndex100 = 0;\n  let stackIndex101 = 0;\n  let stackIndex102 = 0;\n  let stackIndex103 = 0;\n  let stackIndex104 = 0;\n  let stackIndex105 = 0;\n  let stackIndex106 = 0;\n  let stackIndex107 = 0;\n  let stackIndex108 = 0;\n  let stackIndex109 = 0;\n  let stackIndex110 = 0;\n  let stackIndex111 = 0;\n  let stackIndex112 = 0;\n  let stackIndex113 = 0;\n  let stackIndex114 = 0;\n  let stackIndex115 = 0;\n  let stackIndex116 = 0;\n  let stackIndex117 = 0;\n  let stackIndex118 = 0;\n  let stackIndex119 = 0;\n  let stackIndex120 = 0;\n  let stackIndex121 = 0;\n  let stackIndex122 = 0;\n  let stackIndex123 = 0;\n  let stackIndex124 = 0;\n  let stackIndex125 = 0;\n  let stackIndex126 = 0;\n  let stackIndex127 = 0;\n  let stackIndex128 = 0;\n  let stackIndex129 = 0;\n  let stackIndex130 = 0;\n  let stackIndex131 = 0;\n  let stackIndex132 = 0;\n  let stackIndex133 = 0;\n  let stackIndex134 = 0;\n  let stackIndex135 = 0;\n  let stackIndex136 = 0;\n  let stackIndex137 = 0;\n  let stackIndex138 = 0;\n  let stackIndex139 = 0;\n  let stackIndex140 = 0;\n  let stackIndex141 = 0;\n  let stackIndex142 = 0;\n  let stackIndex143 = 0;\n  let stackIndex144 = 0;\n  let stackIndex145 = 0;\n  let stackIndex146 = 0;\n  let stackIndex147 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest([])\n  ''\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList([])\n  ''\n  >>> longestInList(['a', 'b', 'c'])\n  'a'\n  >>> longestInList(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList2 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList2([])\n  ''\n  >>> longestInList2(['a', 'b', 'c'])\n  'a'\n  >>> longestInList2(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList3 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList3([])\n  ''\n  >>> longestInList3(['a', 'b', 'c'])\n  'a'\n  >>> longestInList3(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList4 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList4([])\n  ''\n  >>> longestInList4(['a', 'b', 'c'])\n  'a'\n  >>> longestInList4(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList5 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList5([])\n  ''\n  >>> longestInList5(['a', 'b', 'c'])\n  'a'\n  >>> longestInList5(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList6 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList6([])\n  ''\n  >>> longestInList6(['a', 'b', 'c'])\n  'a'\n  >>> longestInList6(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList7 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList7([])\n  ''\n  >>> longestInList7(['a', 'b', 'c'])\n  'a'\n  >>> longestInList7(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList8 = (list) => {\n  if (list.length === 0) {\n    return '';\n  }\n  let longest = list[0];\n  for (let i = 1; i < list.length; i++) {\n    if (list[i].length > longest.length) {\n      longest = list[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longestInList8([])\n  ''\n  >>> longestInList8(['a', 'b', 'c'])\n  'a'\n  >>> longestInList8(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longestInList9 = (list) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = arr.sort((a, b) => a - b);\n  let max = result[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return result.slice(maxIndex, maxIndex + k);\n};\n\nexport { maximum };\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nexport default addElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  let current = n;\n  while (current > 1) {\n    if (current % 2 === 0) {\n      result.push(current);\n    }\n    current = current / 2;\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateString = date.split('-').join('/');\n  let day = dateString.split('-')[2];\n  let month = dateString.split('-')[1];\n  let year = dateString.split('-')[0];\n  let dayOfMonth = day.split('-').join('/');\n  let monthOfMonth = month.split('-').join('/');\n  let yearOfMonth = year.split('-').join('/');\n  let dayOfWeek = day.split('-')[3];\n  let monthOfWeek = month.split('-')[3];\n  let yearOfWeek = year.split('-')[3];\n  let dayOfWeek = dayOfWeek.split('-').join('/');\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.split('-').join('/');\n  let dayOfWeek = dayOfWeek.split('-')[3];\n  let monthOfWeek = monthOfWeek.split('-').join('/');\n  let yearOfWeek = yearOfWeek.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let last = \"\";\n  let i = 0;\n  while (i < txt.length) {\n    let c = txt[i];\n    if (c === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += c;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst getWord = (txt) => {\n  let words = splitWords(txt);\n  let word = \"\";\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      word += c.toLowerCase();\n    }\n    i++;\n  }\n  return word;\n};\n\nconst getWordCount = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount2 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount3 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount4 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount5 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount6 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount7 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount8 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount9 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount10 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount11 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount12 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n    if (c.length > 0) {\n      wordCount++;\n    }\n    i++;\n  }\n  return wordCount;\n};\n\nconst getWordCount13 = (txt) => {\n  let words = splitWords(txt);\n  let wordCount = 0;\n  let i = 0;\n  while (i < words.length) {\n    let c = words[i];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted14 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted15 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted16 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted17 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted18 = (lst) => {\n  let i = 0;\n  while (i < lst.length - 1) {\n    if (lst[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.start || interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconst test = () => {\n  const interval1 = {start: 1, end: 2}\n  const interval2 = {start: 2, end: 3}\n  console.log(intersection(interval1, interval2))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let prod = 0;\n  for (let i = 0; i < arr.length; i++) {\n    prod += arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst = []\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const lst_A = []\n      const lst_B = []\n      for (let i_ = 0; i_ < grid.length; i_++) {\n        for (let j_ = 0; j_ < grid[i_].length; j_++) {\n          if (i_ === i && j_ === j) {\n            lst_A.push(grid[i_][j_])\n          } else if (i_ === i) {\n            lst_B.push(grid[i_][j_])\n          } else if (j_ === j) {\n            lst_A.push(grid[i_][j_])\n          } else {\n            lst_B.push(grid[i_][j_])\n          }\n        }\n      }\n      lst.push(lst_A.sort().join(''))\n      lst.push(lst_B.sort().join(''))\n    }\n  }\n  return lst.sort().join('')\n}\n\nmodule.exports = minPath\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n\n  if (a === b) {\n    return a;\n  }\n\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  }\n\n  if (a === 1) {\n    return b;\n  }\n\n  if (b === 1) {\n    return a;\n  }\n\n  if (a === 2) {\n    return b;\n  }\n\n  if (b === 2) {\n    return a;\n  }\n\n  if (a === 3) {\n    return b;\n  }\n\n  if (b === 3) {\n    return a;\n  }\n\n  if (a === 4) {\n    return b;\n  }\n\n  if (b === 4) {\n    return a;\n  }\n\n  if (a === 5) {\n    return b;\n  }\n\n  if (b === 5) {\n    return a;\n  }\n\n  if (a === 6) {\n    return b;\n  }\n\n  if (b === 6) {\n    return a;\n  }\n\n  if (a === 7) {\n    return b;\n  }\n\n  if (b === 7) {\n    return a;\n  }\n\n  if (a === 8) {\n    return b;\n  }\n\n  if (b === 8) {\n    return a;\n  }\n\n  if (a === 9) {\n    return b;\n  }\n\n  if (b === 9) {\n    return a;\n  }\n\n  if (a === 10) {\n    return b;\n  }\n\n  if (b === 10) {\n    return a;\n  }\n\n  if (a === 11) {\n    return b;\n  }\n\n  if (b === 11) {\n    return a;\n  }\n\n  if (a === 12) {\n    return b;\n  }\n\n  if (b === 12) {\n    return a;\n  }\n\n  if (a === 13) {\n    return b;\n  }\n\n  if (b === 13) {\n    return a;\n  }\n\n  if (a === 14) {\n    return b;\n  }\n\n  if (b === 14) {\n    return a;\n  }\n\n  if (a === 15) {\n    return b;\n  }\n\n  if (b === 15) {\n    return a;\n  }\n\n  if (a === 16) {\n    return b;\n  }\n\n  if (b === 16) {\n    return a;\n  }\n\n  if (a === 17) {\n    return b;\n  }\n\n  if (b === 17) {\n    return a;\n  }\n\n  if (a === 18) {\n    return b;\n  }\n\n  if (b === 18) {\n    return a;\n  }\n\n  if (a === 19) {\n    return b;\n  }\n\n  if (b === 19) {\n    return a;\n  }\n\n  if (a === 20) {\n    return b;\n  }\n\n  if (b === 20) {\n    return a;\n  }\n\n  if (a === 21) {\n    return b;\n  }\n\n  if (b === 21) {\n    return a;\n  }\n\n  if (a === 22) {\n    return b;\n  }\n\n  if (b === 22) {\n    return a;\n  }\n\n  if (a === 23) {\n    return b;\n  }\n\n  if (b === 23) {\n    return a;\n  }\n\n  if (a === 24) {\n    return b;\n  }\n\n  if (b === 24) {\n    return a;\n  }\n\n  if (a === 25) {\n    return b;\n  }\n\n  if (b === 25) {\n    return a;\n  }\n\n  if (a === 26) {\n    return b;\n  }\n\n  if (b === 26) {\n    return a;\n  }\n\n  if (a === 27) {\n    return b;\n  }\n\n  if (b === 27) {\n    return a;\n  }\n\n  if (a === 28) {\n    return b;\n  }\n\n  if (b === 28) {\n    return a;\n  }\n\n  if (a === 29) {\n    return b;\n  }\n\n  if (b === 29) {\n    return a;\n  }\n\n  if (a === 30) {\n    return b;\n  }\n\n  if (b === 30) {\n    return a;\n  }\n\n  if (a === 31) {\n    return b;\n  }\n\n  if (b === 31) {\n    return a;\n  }\n\n  if (a === 32) {\n    return b;\n  }\n\n  if (b === 32) {\n    return a;\n  }\n\n  if (a === 33) {\n    return b;\n  }\n\n  if (b === 33) {\n    return a;\n  }\n\n  if (a === 34) {\n    return b;\n  }\n\n  if (b === 34) {\n    return a;\n  }\n\n  if (a === 35) {\n    return b;\n  }\n\n  if (b === 35) {\n    return a;\n  }\n\n  if (a === 36) {\n    return b;\n  }\n\n  if (b === 36) {\n    return a;\n  }\n\n  if (a === 37) {\n    return b;\n  }\n\n  if (b === 37) {\n    return a;\n  }\n\n  if (a === 38) {\n    return b;\n  }\n\n  if (b === 38) {\n    return a;\n  }\n\n  if (a === 39) {\n    return b;\n  }\n\n  if (b === 39) {\n    return a;\n  }\n\n  if (a === 40) {\n    return b;\n  }\n\n  if (b === 40) {\n    return a;\n  }\n\n  if (a === 41) {\n    return b;\n  }\n\n  if (b === 41) {\n    return a;\n  }\n\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [a, b, c] = [1, 2, 3];\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = result[i - 1];\n  }\n  return result;\n};\n\nconst test = (n) => {\n  console.log(tri(n));\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest(235);\ntest(236);\ntest(237", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  let result = 1;\n  for (let i = 1; i <= Math.floor(n / 2); i++) {\n    result *= i;\n  }\n  if (n % 2 === 0) {\n    return result;\n  }\n  return result * 2;\n};\n\nmodule.exports = digits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n  let brackets = string.split('').filter(function (char) {\n    return char === '[' || char === ']';\n  });\n  return brackets.length > 0 && brackets.every(function (bracket) {\n    let bracketIndex = brackets.indexOf(bracket);\n    return bracketIndex > 0 && brackets.slice(0, bracketIndex).every(function (bracket) {\n      return bracket === bracketIndex;\n    });\n  });\n}\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n\n// * /\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/**\n * Create a function that return true if the final quality \n   of a give string encompass a number of characters and is \n   not a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsANumber = false;\n  if (lastChar.match(/[0-9]/)) {\n    lastCharIsANumber = true;\n  }\n  return lastCharIsANumber;\n};\n\n/**\n * Create a function that return true if the final quality \n   of a give string encompass a number of characters and is \n   not a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsANumberOrALetter = false;\n  if (lastChar.match(/[0-9a-zA-Z]/)) {\n    lastCharIsANumberOrALetter = true;\n  }\n  return lastCharIsANumberOrALetter;\n};\n\n/**\n * Create a function that return true if the final quality \n   of a give string encompass a number of characters and is \n   not a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrNumber = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsANumberOrALetterOrNumber = false;\n  if (lastChar.match(/[0-9a-zA-Z]/)) {\n    lastCharIsANumberOrALetterOrNumber = true;\n  }\n  if (lastChar.match(/[0-9]/)) {\n    lastCharIsANumberOrALetterOrNumber = true;\n  }\n  return lastCharIsANumberOrALetterOrNumber;\n};\n\n/**\n * Create a function that return true if the final quality \n   of a give string encompass a number of characters and is \n   not a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrNumberOrShare = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsANumberOrALetterOrNumberOrShare = false;\n  if (lastChar.match(/[0-9a-zA-Z]/)) {\n    lastCharIsANumberOrALetterOrNumberOrShare = true;\n  }\n  if (lastChar.match(/[0-9]/)) {\n    lastCharIsANumberOrALetterOrNumberOrShare = true;\n  }\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsANumberOrALetterOrNumberOrShare = true;\n  }\n  return lastCharIsANumberOrALetterOrNumberOrShare;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsANumber,\n  checkIfLastCharIsANumberOrALetter,\n  checkIfLastCharIsANumberOrALetterOrNumber,\n  checkIfLastCharIsANumberOrALetterOrNumberOrShare\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let result = -1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = lst.reduce((max, val) => {\n    if (val < 0) {\n      return val;\n    }\n    if (val > max) {\n      return val;\n    }\n    return max;\n  }, -Infinity);\n  const min = lst.reduce((min, val) => {\n    if (val > 0) {\n      return val;\n    }\n    if (val < min) {\n      return val;\n    }\n    return min;\n  }, Infinity);\n  return [max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n  if (a === b) {\n    return a;\n  }\n  if (a === null || b === null) {\n    return null;\n  }\n  if (a === undefined || b === undefined) {\n    return null;\n  }\n  if (a === 0 || b === 0) {\n    return null;\n  }\n  if (a === NaN || b === NaN) {\n    return null;\n  }\n  if (a === Infinity || b === Infinity) {\n    return null;\n  }\n  if (a === -Infinity || b === -Infinity) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a === Number.MIN_VALUE || b === Number.MIN_VALUE) {\n    return null;\n  }\n  if (a === Number.NaN || b === Number.NaN) {\n    return null;\n  }\n  if (a === Number.POSITIVE_INFINITY || b === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.NEGATIVE_INFINITY || b === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  if (a === Number.MAX_VALUE || b === Number.MAX_VALUE) {\n    return null;\n  }\n  if (a ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return n % 4 === 0;\n  }\n  return n % 4 === 0 && n % 8 === 0;\n};\n\nconst isEqualToSumEven2 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\nconst isEqualToSumEven3 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0;\n};\n\nconst isEqualToSumEven4 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0;\n};\n\nconst isEqualToSumEven5 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0;\n};\n\nconst isEqualToSumEven6 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0;\n};\n\nconst isEqualToSumEven7 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0;\n};\n\nconst isEqualToSumEven8 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0;\n};\n\nconst isEqualToSumEven9 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0;\n};\n\nconst isEqualToSumEven10 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0;\n};\n\nconst isEqualToSumEven11 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0;\n};\n\nconst isEqualToSumEven12 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0 && n % 8192 === 0;\n};\n\nconst isEqualToSumEven13 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0 && n % 8192 === 0 && n % 16384 === 0;\n};\n\nconst isEqualToSumEven14 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0 && n % 8192 === 0 && n % 16384 === 0;\n};\n\nconst isEqualToSumEven15 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0 && n % 8192 === 0 && n % 16384 === 0 && n % 32768 === 0;\n};\n\nconst isEqualToSumEven16 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0 && n % 8192 === 0 && n % 16384 === 0 && n % 32768 === 0 && n % 65536 === 0;\n};\n\nconst isEqualToSumEven17 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0 && n % 2048 === 0 && n % 4096 === 0 && n % 8192 === 0 && n % 16384 === 0 && n % 32768 === 0 && n % 65536 === 0 && n % 131072 === 0;\n};\n\nconst isEqualToSumEven18 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0 && n % 1024 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial2 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial3 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial4 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial5 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial6 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial7 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial8 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial9 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial10 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial11 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial12 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial13 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial14 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial15 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial16 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial17 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial18 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial19 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial20 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial21 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial22 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial23 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial24 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial25 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial26 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial27 = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst specialFactorial28 = (n) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.slice(0, i);\n    prefixes.push(prefix);\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = string.length - 1;\n  while (i >= 0) {\n    suffix = string.slice(i, string.length);\n    suffixes.push(suffix);\n    i--;\n  }\n  return suffixes;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstrings = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStart = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromEnd = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = string.length - 1;\n  while (i >= 0) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i--;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEnd = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEndAndMiddle = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEndAndMiddleAndEnd = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEndAndMiddleAndEndAndMiddle = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEndAndMiddleAndEndAndMiddleAndEnd = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEndAndMiddleAndEndAndMiddleAndEndAndMiddle = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    substrings.push(sub);\n    i++;\n  }\n  return substrings;\n};\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allSubstringsFromStartAndEndAndMiddleAndEndAndMiddleAndEndAndMiddleAndEnd = (string) => {\n  let substrings = [];\n  let sub = '';\n  let i = 0;\n  while (i < string.length) {\n    sub = string.slice(i, i + 1);\n    sub", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \"_\")\n   .replace(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which take a string represent a file's name, and return \n  ' Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.replace(/[^a-zA-Z0-9.]/g, '');\n  if (file_name_check.length > 3) return 'No';\n  if (file_name_check.length < 3) return 'No';\n  if (file_name_check.indexOf('.') === -1) return 'No';\n  if (file_name_check.indexOf('.')!== 0) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 1) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 2) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 3) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 4) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 5) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 6) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 7) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 8) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 9) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 10) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 11) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 12) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 13) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 14) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 15) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 16) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 17) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 18) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 19) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 20) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 21) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 22) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 23) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 24) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 25) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 26) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 27) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 28) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 29) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 30) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 31) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 32) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 33) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 34) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 35) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 36) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 37) return 'No';\n  if (file_name_check.indexOf('.')!== file_name_check.length - 38) return 'No';", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let result = [];\n  let words = sentence.split('');\n  let len = words.length;\n  let i = 0;\n  while (i < len) {\n    let word = words[i];\n    let len = word.length;\n    let j = i + 1;\n    while (j < len) {\n      let nextWord = words[j];\n      if (word === nextWord) {\n        result.push(word);\n        j++;\n      } else {\n        break;\n      }\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst findChain = (sentence, words) => {\n  let result = [];\n  let len = words.length;\n  let i = 0;\n  while (i < len) {\n    let word = words[i];\n    let len = word.length;\n    let j = i + 1;\n    while (j < len) {\n      let nextWord = words[j];\n      if (word === nextWord) {\n        result.push(word);\n        j++;\n      } else {\n        break;\n      }\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = {\n  wordsInSentence,\n  findChain\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   const x = x.split(\"/\");\n   const n = n.split(\"/\");\n   const x_n = x.length > 1? x.slice(0, x.length - 1) : x;\n   const n_x = n.length > 1? n.slice(0, n.length - 1) : n;\n   const x_n_n = x_n.length > 1? x_n.slice(0, x_n.length - 1) : x_n;\n   const n_x_n = n_x.length > 1? n_x.slice(0, n_x.length - 1) : n_x;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_n_n;\n   const n_x_n_n = n_x_n.length > 1? n_x_n.slice(0, n_x_n.length - 1) : n_x_n;\n   const x_n_n_n = x_n_n.length > 1? x_n_n.slice(0, x_n_n.length - 1) : x_", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints2 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints3 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints4 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints5 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints6 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints7 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n    numsArr.push(nums[i]);\n  }\n  numsArr.sort((a, b) => {\n    let aDigit = a.toString().charCodeAt(0);\n    let bDigit = b.toString().charCodeAt(0);\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n  for (let i = 0; i < numsArr.length; i++) {\n    res.push(numsArr[i]);\n  }\n  return res;\n};\n\nconst orderByPoints8 = (nums) => {\n  let res = [];\n  let numsArr = [];\n  for (let i = 0; i < nums.length; i++) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n        result++;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let maxTriples = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          maxTriples++;\n        }\n      }\n    }\n  }\n  return maxTriples;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = [...planet1,...planet2]\n  let result = []\n  let i = 0\n  while (i < planets.length) {\n    let j = i\n    while (j < planets.length) {\n      if (planets[i].name < planets[j].name) {\n        result.push(planets[i])\n        i++\n      } else if (planets[i].name > planets[j].name) {\n        result.push(planets[j])\n        j++\n      } else {\n        result.push(planets[i])\n        i++\n        j++\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Mercury\", \"Earth\"))\nconsole.log(bf(\"Mercury\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum2 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum3 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum4 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum5 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum6 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum7 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum8 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum9 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum10 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum11 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum12 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum13 = (lst) => {\n  const sorted = lst.sort((a, b) => {\n    const a_len = a.length;\n    const b_len = b.length;\n    if (a_len!== b_len) {\n      return a_len - b_len;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n};\n\nconst sortedListSum14 = (lst) => {\n  const sorted = lst.sort", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s +=", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrY = (n, x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    if (lst.length == 0) {\n        return 0;\n    }\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let curr = lst[i];\n        if (isNaN(curr)) {\n            continue;\n        }\n        let diff = Math.pow(curr, 2);\n        result += diff;\n    }\n    return result;\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game.map(guess => {\n    return guess - guess;\n  });\n  let guesses = game.map(guess => {\n    return guess - guess;\n  });\n  let result = [];\n  for (let i = 0; i < score.length; i++) {\n    let diff = Math.abs(score[i] - guesses[i]);\n    if (diff === 0) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_list = extensions.map(extension => extension.toLowerCase());\n  let extension_list_length = extension_list.length;\n  let extension_list_index = 0;\n  let extension_list_strength = 0;\n  let extension_list_index_strongest = 0;\n  let extension_list_strength_strongest = 0;\n  let extension_list_index_strongest_strength = 0;\n  let extension_list_strength_strongest_strength = 0;\n  let extension_list_index_strongest_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_index_strongest_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength = 0;\n  let extension_list_strength_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0,\n    leftover = 0;\n  if (num < 0) {\n    even = -1;\n    num = -num;\n  }\n  for (let i = 0; i < num; i++) {\n    if (num % 10 === 0) {\n      even++;\n    }\n    num /= 10;\n  }\n  return {even, leftover};\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let miniRoman = '';\n  let num = number;\n  let i = 0;\n  while (num > 0) {\n    miniRoman = num % 10 + miniRoman;\n    num = Math.floor(num / 10);\n    i++;\n  }\n  miniRoman = miniRoman.toUpperCase();\n  miniRoman = miniRoman.substring(0, i);\n  return miniRoman;\n};\n\nconst miniRomanToInt = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt2 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt3 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt4 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt5 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt6 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt7 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt8 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt9 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt10 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt11 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt12 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt13 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt14 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt15 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt16 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt17 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n};\n\nconst miniRomanToInt18 = (miniRoman) => {\n  let num = 0;\n  let i = 0;\n  while (i < miniRoman.length) {\n    num += miniRoman.charAt(i) - 'A' + 1;\n    i++;\n  }\n  return num;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const ab = a * b;\n  const ac = a * c;\n  const bc = b * c;\n  const abc = ab + ac + bc;\n  const ab2 = ab * ab;\n  const bc2 = bc * bc;\n  const abc2 = abc * abc;\n  const abbc = ab2 + bc2 + abc2;\n  const abbc2 = abbc * abbc;\n  const abcbc2 = abbc2 * abbc2;\n  const abcabc = abbc * abcabc;\n  const abcabc2 = abcabc * abcabc2;\n  const abcabcbc = abcabc * abcabcbc;\n  const abcabcabc2 = abcabcabc * abcabcabc2;\n  const abcabcabcbc2 = abcabcabcbc * abcabcabcbc2;\n  const abcabcabcabcbc2 = abcabcabcabcbc * abcabcabcabcbc2;\n  const abcabcabcabcabcbc2 = abcabcabcabcabcbc * abcabcabcabcabcbc2;\n  const abcabcabcabcabcabcbc2 = abcabcabcabcabcabcbc * abcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabcabcabcabcbc2 = abcabcabcabcabcabcabcabcabcbc * abcabcabcabcabcabcabcabcabcbc2;\n  const abcabcabcabcabcabcabc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = words[0];\n   let maxIndex = 0;\n   for (let i = 1; i < words.length; i++) {\n     if (words[i].length > max.length) {\n       max = words[i];\n       maxIndex = i;\n     }\n     else if (words[i].length === max.length && words[i].localeCompare(max) > 0) {\n       max = words[i];\n       maxIndex = i;\n     }\n   }\n   return max;\n }\n*/\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n    else if (words[i].length === max.length && words[i].localeCompare(max) > 0) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [0, 0];\n  }\n\n  let total = 0;\n  let carrot = 0;\n  while (carrot < need) {\n    total += number;\n    carrot += number;\n    number--;\n  }\n\n  let left = carrot - need;\n  let result = [total, left];\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount = string.charCodeAt(i);\n    if (charCount < 128) {\n      count++;\n    } else {\n      count += 26;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let index = 0;\n  while (index < operand.length) {\n    let op = operator[index];\n    let op1 = operand[index];\n    let op2 = operand[index + 1];\n    if (op === '+') {\n      result += op1 * op2;\n    } else if (op === '-') {\n      result -= op1 * op2;\n    } else if (op === '*') {\n      result *= op1 * op2;\n    } else if (op === '/') {\n      result /= op1 * op2;\n    } else if (op === '//') {\n      result = Math.floor(result / op1 * op2);\n    }\n    index += 2;\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  let temp = s.split('');\n  let i = 0;\n  while (i < temp.length) {\n    if (temp[i].match(/[a-z]/)) {\n      temp[i] = temp[i].toLowerCase();\n    } else if (temp[i].match(/[A-Z]/)) {\n      temp[i] = temp[i].toUpperCase();\n    } else {\n      temp[i] = temp[i].toUpperCase();\n      temp[i] = temp[i].toLowerCase();\n    }\n    i++;\n  }\n  result = temp.join('');\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(s", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  const a_ = a;\n  const b_ = b;\n  while (a_ <= b_) {\n    result.push(a_);\n    a_ += 2;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n  ' o' - whole eminence, last four meter \n  ' o|' - half note, last two beatnik \n  ' .|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n 'o' - whole eminence, last four meter \n 'o|' - half note, last two beatnik \n  '.|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_string_array = music_string.split(' ');\n  let music_string_array_length = music_string_array.length;\n  let music_string_array_length_minus_one = music_string_array_length - 1;\n  let music_string_array_length_minus_one_minus_one = music_string_array_length_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one = music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one - 1;\n  let music_string_array_length_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count += 1\n    }\n    index += 1\n  }\n  return count\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring) => {\n  let index = 0\n  let max = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index\n      }\n    }\n    index += 1\n  }\n  return max\n}\n\n/* Find the longest substring in the original string.\n  >>> longestSubstring('', 'a')\n  ''\n  >>> longestSubstring('aaa', 'a')\n  'a'\n  >>> longestSubstring('aaaa', 'aa')\n  'aa'\n  */\nconst longestSubstring = (string, substring)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  for (let i = 0; i < numbers.length; i++) {\n    result += numbers[i];\n    if (i < numbers.length - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber11 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber12 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber13 = (number) => {\n  const decimalPart = number - Math.floor(number);\n  return Math.floor(number);\n};\n\n/*\n  Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closest = numbers[0]\n  let closestIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - closest)\n    if (diff < 0.1) {\n      closest = numbers[i]\n      closestIndex = i\n    }\n  }\n  return [closest, numbers[closestIndex]]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let closest = numbers[0]\n  let closestIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - closest)\n    if (diff < 0.1) {\n      closest = numbers[i]\n      closestIndex = i\n    }\n  }\n  return [closest, numbers[closestIndex]]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  let closest = numbers[0]\n  let closestIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - closest)\n    if (diff < 0.1) {\n      closest = numbers[i]\n      closestIndex = i\n    }\n  }\n  return [closest, numbers[closestIndex]]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  let closest = numbers[0]\n  let closestIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - closest)\n    if (diff < 0.1) {\n      closest = numbers[i]\n      closestIndex = i\n    }\n  }\n  return [closest, numbers[closestIndex]]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  let closest = numbers[0]\n  let closestIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - closest)\n    if (diff < 0.1) {\n      closest = numbers[i]\n      closestIndex = i\n    }\n  }\n  return [closest, numbers[closestIndex]]\n}\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  let closest = numbers[0]\n  let closestIndex = 0\n  for (let i = 1; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - closest)\n    if (diff < 0.1) {\n      closest = numbers[i]\n      closestIndex = i\n    }\n  }\n  return [closest, numbers[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] / numbers[i].length)\n  }\n  return result\n}\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst getRandomFloat = (min, max) => {\n  return Math.random() * (max - min) + min\n}\n\nconst getRandomColor = (min, max) => {\n  return `rgb(${Math.floor(Math.random() * (max - min + 1)) + min}, ${Math.floor(Math.random() * (max - min + 1)) + min}, ${Math.floor(Math.random() * (max - min + 1)) + min})`\n}\n\nconst getRandomString = (min, max) => {\n  return Math.random().toString(36).substr(2, max)\n}\n\nconst getRandomArray = (min, max) => {\n  return Math.random().toString(36).substr(2, max)\n}\n\nconst getRandomObject = (min, max) => {\n  return {\n    id: getRandomInt(min, max),\n    name: getRandomString(min, max),\n    age: getRandomInt(min, max),\n    color: getRandomColor(min, max),\n    email: getRandomString(min, max),\n    phone: getRandomString(min, max),\n    address: getRandomString(min, max),\n    city: getRandomString(min, max),\n    state: getRandomString(min, max),\n    zip: getRandomString(min, max),\n    country: getRandomString(min, max),\n    latitude: getRandomFloat(min, max),\n    longitude: getRandomFloat(min, max),\n    createdAt: new Date(),\n    updatedAt: new Date()\n  }\n}\n\nconst getRandomList = (min, max) => {\n  return [getRandomObject(min, max) for (let i = 0; i < min; i++) {\n    getRandomObject(min, max)\n  }]\n}\n\nconst getRandomObjects = (min, max) => {\n  return [getRandomObject(min, max) for (let i = 0; i < min; i++) {\n    getRandomObject(min, max)\n  }]\n}\n\nconst getRandomLists = (min, max) => {\n  return [getRandomList(min, max) for (let i = 0; i < min; i++) {\n    getRandomList(min, max)\n  }]\n}\n\nconst getRandomObjectsAndLists = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArrays = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColors = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColorsAndStrings = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max), getRandomString(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColorsAndStringsAndNumbers = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max), getRandomString(min, max), getRandomInt(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColorsAndStringsAndNumbersAndBooleans = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max), getRandomString(min, max), getRandomInt(min, max), getRandomFloat(min, max), getRandomBoolean(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColorsAndStringsAndNumbersAndBooleansAndObjects = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max), getRandomString(min, max), getRandomInt(min, max), getRandomFloat(min, max), getRandomBoolean(min, max), getRandomObject(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColorsAndStringsAndNumbersAndBooleansAndObjectsAndLists = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max), getRandomString(min, max), getRandomInt(min, max), getRandomFloat(min, max), getRandomBoolean(min, max), getRandomObject(min, max), getRandomList(min, max)]\n}\n\nconst getRandomObjectsAndListsAndArraysAndColorsAndStringsAndNumbersAndBooleansAndObjectsAndListsAndArrays = (min, max) => {\n  return [getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max), getRandomColor(min, max), getRandomString(min, max), getRandomInt(min, max), getRandomFloat(min, max), getRandomBoolean(min, max), getRandomObject(min, max), getRandomList(min, max), getRandomArray(min, max)]\n}\n\nconst getRandom", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of given string without last character\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * console.log(strlen('abc'));\n  * // 3\n  * console.log(strlen('abcdef'));\n  * // 4\n  * console.log(strlen('abcdefgh'));\n  * // 5\n  * console.log(strlen('abcdefghij'));\n  * // 6\n  * console.log(strlen('abcdefghijkl'));\n  * // 7\n  * console.log(strlen('abcdefghijklm'));\n  * // 8\n  * console.log(strlen('abcdefghijklmn'));\n  * // 9\n  * console.log(strlen('abcdefghijklmnop'));\n  * // 10\n  * console.log(strlen('abcdefghijklmnopq'));\n  * // 11\n  * console.log(strlen('abcdefghijklmnopqr'));\n  * // 12\n  * console.log(strlen('abcdefghijklmnopqrs'));\n  * // 13\n  * console.log(strlen('abcdefghijklmnopqrsx'));\n  * // 14\n  * console.log(strlen('abcdefghijklmnopqrsxu'));\n  * // 15\n  * console.log(strlen('abcdefghijklmnopqrsxux'));\n  * // 16\n  * console.log(strlen('abcdefghijklmnopqrsxuxy'));\n  * // 17\n  * console.log(strlen('abcdefghijklmnopqrsxuxyz'));\n  * // 18\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzx'));\n  * // 19\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxz'));\n  * // 20\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzy'));\n  * // 21\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyx'));\n  * // 22\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxz'));\n  * // 23\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxy'));\n  * // 24\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz'));\n  * // 25\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01'));\n  * // 26\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz0123'));\n  * // 27\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz012345'));\n  * // 28\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01234567'));\n  * // 29\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz0123456789'));\n  * // 30\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz012345678901'));\n  * // 31\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01234567890123'));\n  * // 32\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz0123456789012345'));\n  * // 33\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz012345678901234567'));\n  * // 34\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01234567890123456789'));\n  * // 35\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz0123456789012345678901'));\n  * // 36\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz012345678901234567890123'));\n  * // 37\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01234567890123456789012345'));\n  * // 38\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz0123456789012345678901234567'));\n  * // 39\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01234567890123456789012345678901'));\n  * // 40\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz012345678901234567890123456789012345'));\n  * // 41\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz012345678901234567890123456789012345678901'));\n  * // 42\n  * console.log(strlen('abcdefghijklmnopqrsxuxyzxzyxzxyz01234567890123456789012345678901234567890123", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 0\n  let largestDivisor = 0\n  let divisor = 1\n  while (divisor <= n) {\n    let divisorCount = 0\n    let divisorDivisor = 1\n    while (divisorDivisor <= n) {\n      if (n % divisorDivisor === 0) {\n        divisorCount += 1\n      }\n      divisorDivisor += 1\n    }\n    if (divisorCount > largestDivisor) {\n      largestDivisor = divisorCount\n      largest = divisor\n    }\n    divisor += 1\n  }\n  return largest\n}\n\nmodule.exports = largestDivisor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let numeral = n;\n  let i = 2;\n  while (numeral > 1) {\n    while (numeral % i === 0) {\n      factors.push(i);\n      numeral /= i;\n    }\n    i++;\n  }\n  factors.push(numeral);\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number] === undefined) {\n      result.push(number);\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toUpperCase('Hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toUpperCase('Hello')\n  'HELLO'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toUpperCase('Hello')\n  'HELLO'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase characters replaced with their lowercase equivalent.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase characters replaced with their uppercase equivalent", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  if (strings.length === 1) {\n    return strings[0];\n  }\n  return strings.join('');\n};\n\n/*\n  Convert a string to a list of characters\n  >>> stringToList('abc')\n  ['a', 'b', 'c']\n  */\nconst stringToList = (string) => {\n  return string.split('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of characters to a string\n  >>> listToString(['", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (strings[0].indexOf(prefix) === 0) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const prefixLength = prefix.length;\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input list of strings only for one that end with a give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (strings[0].indexOf(suffix) === strings[0].length - suffix.length) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const suffixLength = suffix.length;\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(suffix) === strings[i].length - suffixLength) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (strings[0].indexOf(substring)!== -1) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input list of strings only for one that does not contain a given substring.\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (strings[0].indexOf(substring) === -1) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) === -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input list of strings only for one that contains a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (strings[0].match(regex)) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Filter an input list of strings only for one that does not contain a given substring.\n  >>> filterByNotRegex([], 'a')\n  []\n  >>> filterByNotRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filterByNotRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    if (!strings[0].match(regex)) {\n      return [strings[0]];\n    }\n    return [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].match(regex)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nexport default {\n  filterByPrefix,\n  filterBySuffix,\n  filterByContains,\n  filterByNotContains,\n  filterByRegex,\n  filterByNotRegex,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum < 0\n}\n\n/*\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\n\nconst aboveZero = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum > 0\n}\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced([1, 2, 3])\n  false\n  >>> isBalanced([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced2 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced2([1, 2, 3])\n  false\n  >>> isBalanced2([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced3 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced3([1, 2, 3])\n  false\n  >>> isBalanced3([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced4 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced4([1, 2, 3])\n  false\n  >>> isBalanced4([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced5 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced5([1, 2, 3])\n  false\n  >>> isBalanced5([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced6 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced6([1, 2, 3])\n  false\n  >>> isBalanced6([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced7 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced7([1, 2, 3])\n  false\n  >>> isBalanced7([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced8 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced8([1, 2, 3])\n  false\n  >>> isBalanced8([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced9 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced9([1, 2, 3])\n  false\n  >>> isBalanced9([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced10 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced10([1, 2, 3])\n  false\n  >>> isBalanced10([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced11 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced11([1, 2, 3])\n  false\n  >>> isBalanced11([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced12 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\n/*\n  >>> isBalanced12([1, 2, 3])\n  false\n  >>> isBalanced12([1, 2, -4, 5])\n  true\n  */\n\nconst isBalanced13 = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((x) => x > 0 && x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = xs[0];\n  let y = xs[1];\n  let z = xs[2];\n  let n = xs.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let xs2 = [];\n  let xs3 = [];\n  let xs4 = [];\n  let xs5 = [];\n  let xs6 = [];\n  let xs7 = [];\n  let xs8 = [];\n  let xs9 = [];\n  let xs10 = [];\n  let xs11 = [];\n  let xs12 = [];\n  let xs13 = [];\n  let xs14 = [];\n  let xs15 = [];\n  let xs16 = [];\n  let xs17 = [];\n  let xs18 = [];\n  let xs19 = [];\n  let xs20 = [];\n  let xs21 = [];\n  let xs22 = [];\n  let xs23 = [];\n  let xs24 = [];\n  let xs25 = [];\n  let xs26 = [];\n  let xs27 = [];\n  let xs28 = [];\n  let xs29 = [];\n  let xs30 = [];\n  let xs31 = [];\n  let xs32 = [];\n  let xs33 = [];\n  let xs34 = [];\n  let xs35 = [];\n  let xs36 = [];\n  let xs37 = [];\n  let xs38 = [];\n  let xs39 = [];\n  let xs40 = [];\n  let xs41 = [];\n  let xs42 = [];\n  let xs43 = [];\n  let xs44 = [];\n  let xs45 = [];\n  let xs46 = [];\n  let xs47 = [];\n  let xs48 = [];\n  let xs49 = [];\n  let xs50 = [];\n  let xs51 = [];\n  let xs52 = [];\n  let xs53 = [];\n  let xs54 = [];\n  let xs55 = [];\n  let xs56 = [];\n  let xs57 = [];\n  let xs58 = [];\n  let xs59 = [];\n  let xs60 = [];\n  let xs61 = [];\n  let xs62 = [];\n  let xs63 = [];\n  let xs64 = [];\n  let xs65 = [];\n  let xs66 = [];\n  let xs67 = [];\n  let xs68 = [];\n  let xs69 = [];\n  let xs70 = [];\n  let xs71 = [];\n  let xs72 = [];\n  let xs73 = [];\n  let xs74 = [];\n  let xs75 = [];\n  let xs76 = [];\n  let xs77 = [];\n  let xs78 = [];\n  let xs79 = [];\n  let xs80 = [];\n  let xs81 = [];\n  let xs82 = [];\n  let xs83 = [];\n  let xs84 = [];\n  let xs85 = [];\n  let xs86 = [];\n  let xs87 = [];\n  let xs88 = [];\n  let xs89 = [];\n  let xs90 = [];\n  let xs91 = [];\n  let xs92 = [];\n  let xs93 = [];\n  let xs94 = [];\n  let xs95 = [];\n  let xs96 = [];\n  let xs97 = [];\n  let xs98 = [];\n  let xs99 = [];\n  let xs100 = [];\n  let xs101 = [];\n  let xs102 = [];\n  let xs103 = [];\n  let xs104 = [];\n  let xs105 = [];\n  let xs106 = [];\n  let xs107 = [];\n  let xs108 = [];\n  let xs109 = [];\n  let xs110 = [];\n  let xs111 = [];\n  let xs112 = [];\n  let xs113 = [];\n  let xs114 = [];\n  let xs115 = [];\n  let xs116 = [];\n  let xs117 = [];\n  let xs118 = [];\n  let xs119 = [];\n  let xs120 = [];\n  let xs121 = [];\n  let xs122 = [];\n  let xs123 = [];\n  let xs124 = [];\n  let xs125 = [];\n  let xs126 = [];\n  let xs127 = [];\n  let xs128 = [];\n  let xs129 = [];\n  let xs130 = [];\n  let xs131 = [];\n  let xs132 = [];\n  let xs133 = [];\n  let xs134 = [];\n  let xs135 = [];\n  let xs136 = [];\n  let xs137 = [];\n  let xs138 = [];\n  let xs139 = [];\n  let xs140 = [];\n  let xs141 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = 0;\n    while (j < l.length && l[i] % 3 === 0) {\n      l3.push(l[i]);\n      i++;\n      j++;\n    }\n    l3.push(l[i]);\n    i++;\n  }\n  return l3;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = 0;\n    while (j < l.length && l[i] % 3 === 0) {\n      l3.push(l[i]);\n      i++;\n      j++;\n    }\n    l3.push(l[i]);\n    i++;\n  }\n  return l3;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = 0;\n    while (j < l.length && l[i] % 3 === 0) {\n      l3.push(l[i]);\n      i++;\n      j++;\n    }\n    l3.push(l[i]);\n    i++;\n  }\n  return l3;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = 0;\n    while (j < l.length && l[i] % 3 === 0) {\n      l3.push(l[i]);\n      i++;\n      j++;\n    }\n    l3.push(l[i]);\n    i++;\n  }\n  return l3;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = 0;\n    while (j < l.length && l[i] % 3 === 0) {\n      l3.push(l[i]);\n      i++;\n      j++;\n    }\n    l3.push(l[i]);\n    i++;\n  }\n  return l3;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = 0;\n    while (j < l.length && l[i] % 3 === 0) {\n      l3.push(l[i]);\n      i++;\n      j++;\n    }\n    l3.push(l[i]);\n    i++;\n  }\n  return l3;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      i++;\n    } else if (l[i] === l[j]) {\n      i++;\n      j++;\n    } else {\n      k++;\n      j = i;\n      i++;\n    }\n  }\n  return u;\n};\n\n/*\n  Return the index of the first element in a list that is not equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst firstNotEqual = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i]!== e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is not equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst lastNotEqual = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i]!== e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst firstEqual = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] === e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst lastEqual = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] === e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is greater than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst firstGreater = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] > e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is greater than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst lastGreater = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] > e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is less than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst firstLess = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] < e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is less than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst lastLess = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] < e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is greater than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst firstGreaterEqual = (l, e) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] >= e) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the last element in a list that is greater than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst lastGreaterEqual = (l, e) => {\n  let i = l.length - 1;\n  while (i >= 0) {\n    if (l[i] >= e) {\n      return i;\n    }\n    i--;\n  }\n  return -1;\n};\n\n/*\n  Return the index of the first element in a list that is less than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      count += 2;\n      n = Math.floor(n / 11);\n      n = Math.floor(n / 13);\n    } else if (n % 11 === 0) {\n      count += 1;\n      n = Math.floor(n / 11);\n    } else if (n % 13 === 0) {\n      count += 1;\n      n = Math.floor(n / 13);\n    } else {\n      count += 1;\n      n = Math.floor(n / 10);\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 3, 2]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 1) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven2 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 3, 2]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd2 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 1) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven3 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  >>> sortOdd([1, 2, 3])\n  [1, 3, 2]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd3 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 1) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEven4 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 2 === 0) {\n      j++;\n    }\n    l2.push(l[i]);\n    i = j;\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the odd indicies embody adequate \n   to the value of the odd indicies of l, but classify.\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ];\n   for (const group of s.split('')) {\n     if (group.length == 3) \n       groups.push(group.slice(0, 3));\n     else \n       groups.push(group);\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all consonants replaced by an underscore. \n   * / \n const removeConsonants = (s) = > {\n   return s.replace(/[^aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all vowels replaced by an underscore. \n   * / \n const removeVowels = (s) = > {\n   return s.replace(/[aeiou]/g, '_');\n}\n\n*/\n\n/*\n   takes as input a string and returns a string with all conson", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib10 = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers))\n    sumSquared += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return sum / n\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this \n  dataset. \n  Standard deviation is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SD = average | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SE = standard deviation / sqrt(n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SE = standard deviation / sqrt(n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError2 = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SE = standard deviation / sqrt(n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError3 = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SE = standard deviation / sqrt(n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError4 = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SE = standard deviation / sqrt(n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError5 = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error is the average absolute remainder between each component \n  and a centerpoint (mean in this subject ): \n  SE = standard deviation / sqrt(n)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError6 = (numbers) => {\n  let sum = 0.0\n  let sumSquared = 0.0\n  let n = numbers.length\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2)\n  }\n  return Math.sqrt(sum / n)\n}\n\n/*\n  For a given list of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  if (count === 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  if (count === 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  if (count === 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  if (count === 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  if (count === 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero6 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  if (count === 3) {\n    return true;\n  } else {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n  n = n cable car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n  n = n car;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 3, 8, 2, 122]\n  */\nconst decrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mult2List([1, 2, 3])\n  [2, 4, 6]\n  >>> mult2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 12, 8, 6, 6, 16, 4, 120]\n  */\nconst mult2List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> div2List([1, 2, 3])\n  [1, 2, 3]\n  >>> div2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div2List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 15, 4, 6, 6, 18, 2, 120]\n  */\nconst mult3List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 2, 3]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div3List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mult5List([1, 2, 3])\n  [5, 10, 15]\n  >>> mult5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 10, 25, 5, 10, 10, 20, 3, 120]\n  */\nconst mult5List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 5);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [1, 2, 3]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div5List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 5);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 7.\n  >>> mult7List([1, 2, 3])\n  [7, 14, 21]\n  >>> mult7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [35, 14, 35, 7, 14, 14, 21, 7, 120]\n  */\nconst mult7List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 7);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 7.\n  >>> div7List([1, 2, 3])\n  [1, 2, 3]\n  >>> div7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst div7List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 7);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 11.\n  >>> mult11List([1, 2, 3])\n  [11, 22, 33]\n  >>> mult11List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [55, 33, 55, 11, 22, 22, 33, 11, 120]\n  */\nconst mult11List = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 11);\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  let pairs = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      pairs++;\n    }\n  }\n  return pairs === 2 && sum === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase2 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase3 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase4 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase5 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase6 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase7 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase8 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase9 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase10 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase11 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase12 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase13 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion. \n  base phone number are less than 10.\n  */\nconst changeBase14 = (x, base) => {\n  let num = x\n  let str = ''\n  while (num > 0) {\n    str = num % base + str\n    num = Math.floor(num / base)\n  }\n  return str\n}\n\n/*\n  Change numerical base of input signal number x to base.\n  return drawstring theatrical performance after the conversion", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  const area = a * (a + h) / 2;\n  return area;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 2)\n  7.5\n  */\nconst triangleArea22 = (a, h) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a positive integer.');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 4;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 6) {\n    return 6;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 8) {\n    return 8;\n  }\n  if (n === 9) {\n    return 9;\n  }\n  if (n === 10) {\n    return 10;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 12) {\n    return 12;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 14) {\n    return 14;\n  }\n  if (n === 15) {\n    return 15;\n  }\n  if (n === 16) {\n    return 16;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 18) {\n    return 18;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 20) {\n    return 20;\n  }\n  if (n === 21) {\n    return 21;\n  }\n  if (n === 22) {\n    return 22;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 24) {\n    return 24;\n  }\n  if (n === 25) {\n    return 25;\n  }\n  if (n === 26) {\n    return 26;\n  }\n  if (n === 27) {\n    return 27;\n  }\n  if (n === 28) {\n    return 28;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 30) {\n    return 30;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 32) {\n    return 32;\n  }\n  if (n === 33) {\n    return 33;\n  }\n  if (n === 34) {\n    return 34;\n  }\n  if (n === 35) {\n    return 35;\n  }\n  if (n === 36) {\n    return 36;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 38) {\n    return 38;\n  }\n  if (n === 39) {\n    return 39;\n  }\n  if (n === 40) {\n    return 40;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 42) {\n    return 42;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 44) {\n    return 44;\n  }\n  if (n === 45) {\n    return 45;\n  }\n  if (n === 46) {\n    return 46;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 48) {\n    return 48;\n  }\n  if (n === 49) {\n    return 49;\n  }\n  if (n === 50) {\n    return 50;\n  }\n  if (n === 51) {\n    return 51;\n  }\n  if (n === 52) {\n    return 52;\n  }\n  if (n === 53) {\n    return 53;\n  }\n  if (n === 54) {\n    return 54;\n  }\n  if (n === 55) {\n    return 55;\n  }\n  if (n === 56) {\n    return 56;\n  }\n  if (n === 57) {\n    return 57;\n  }\n  if (n === 58) {\n    return 58;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 60) {\n    return 60;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 62) {\n    return 62;\n  }\n  if (n === 63) {\n    return 63;\n  }\n  if (n === 64) {\n    return 64;\n  }\n  if (n === 65) {\n    return 65;\n  }\n  if (n === 66) {\n    return 66;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 68) {\n    return 68;\n  }\n  if (n === 69) {\n    return 69;\n  }\n  if (n === 70) {\n    return 70;\n  }\n  if (n === 71) {\n    return 71;\n  }\n  if (n === 72) {\n    return 72;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 74) {\n    return 74;\n  }\n  if (n === 75) {\n    return 75;\n  }\n  if (n === 76) {\n    return 76;\n  }\n  if (n === 77", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  while (l[m] < l[0]) {\n    m--;\n  }\n  while (l[m] > l[0]) {\n    m++;\n  }\n  return l[m];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n\n  let first = text[0];\n  let last = text[text.length - 1];\n\n  if (first!== last) {\n    return false;\n  }\n\n  return isPalindrome(text.slice(1, -1));\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) throw new Error('n must be between 0 and p-1')\n  if (n === 0) return 1\n  if (n === p) return 0\n  if (n % 2 === 0) return modp(n - 1, p)\n  return modp(n + 1, p)\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    result.push(current);\n    current = numbers[i];\n    i += 1;\n  }\n\n  result.push(current);\n  return result.map(item => item);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let index = 0;\n  while (index < text.length) {\n    if (vowels[vowelsIndex] === text[index]) {\n      vowelsIndex++;\n      if (vowelsIndex === vowelsCount) {\n        vowelsIndex = 0;\n      }\n    } else {\n      text = text.substring(0, index) + text.substring(index + 1);\n    }\n    index++;\n  }\n  return text;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(v => v < t);\n};\n\n/*Return true if all numbers pool in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(v => v > t);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold2 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold3 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold4 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold5 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold6 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold7 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold8 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold9 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold10 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold11 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold12 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  */\nconst betweenThreshold13 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n*/\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) {\n    return n;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketPairs = brackets.split(\"<>\").map((bracket) => {\n    return bracket.split(\"<\").map((leftBracket) => {\n      return leftBracket.split(\">\").map((rightBracket) => {\n        return { left: leftBracket, right: rightBracket };\n      });\n    });\n  });\n  const isComparableBracket = (bracketPair) => {\n    const left = bracketPair.left.length;\n    const right = bracketPair.right.length;\n    return left === right;\n  };\n  const isBracketPairComparable = bracketPairs.map(isComparableBracket);\n  return!isBracketPairComparable.some(isComparableBracket);\n};\n\nconst isValid = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nmodule.exports = {\n  isValid,\n  correctBracketing\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      last = l[i];\n    }\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  const commonLen = Math.min(l1Len, l2Len);\n  const common = [];\n  for (let i = 0; i < commonLen; i++) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_2 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_3 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_4 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_5 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_6 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_7 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_8 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_9 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_10 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_11 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_12 = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = paren_string;\n  while (nested_paren_string.length > 0) {\n    nested_paren_count += 1;\n    nested_paren_string = nested_paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n  }\n  return nested_paren_count;\n}\n\nconst parseNestedParens_13", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracket = brackets.charAt(0);\n  let bracketCount = 0;\n  let i = 0;\n  let j = brackets.length - 1;\n  let bracketPair = brackets.substring(i, j);\n  let bracketPairCount = bracketPair.length;\n  let bracketPairIndex = 0;\n  let bracketPairIndexCount = bracketPair.length;\n  let bracketPairIndexIndex = 0;\n  let bracketPairIndexIndexCount = bracketPair.length;\n  let bracketPairIndexIndexCount2 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount3 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount4 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount5 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount6 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount7 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount8 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount9 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount10 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount11 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount12 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount13 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount14 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount15 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount16 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount17 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount18 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount19 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount20 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount21 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount22 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount23 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount24 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount25 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount26 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount27 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount28 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount29 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount30 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount31 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount32 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount33 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount34 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount35 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount36 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount37 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount38 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount39 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount40 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount41 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount42 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount43 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount44 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount45 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount46 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount47 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount48 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount49 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount50 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount51 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount52 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount53 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount54 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount55 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount56 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount57 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount58 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount59 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount60 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount61 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount62 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount63 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount64 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount65 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount66 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount67 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount68 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount69 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount70 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount71 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount72 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount73 = bracketPairIndexIndexCount;\n  let bracketPairIndexIndexCount74 = bracketPairIndexIndexCount;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  if (len === 0) {\n    return [];\n  }\n  const deriv = [];\n  for (let i = 1; i < len; i++) {\n    deriv.push(xs[i] / xs[i - 1]);\n  }\n  return deriv;\n};\n\n/*\n  x^2 + x + 1\n  x^3 + x^2 + x + 1\n  x^4 + x^3 + x^2 + x + 1\n  x^5 + x^4 + x^3 + x^2 + x + 1\n  x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^26 + x^25 + x^24 + x^23 + x^22 + x^21 +", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    i++;\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  let i = 0;\n  while (i < x.length) {\n    result += x[i];\n    i++;\n    if (i % shift === 0) {\n      result += x[i % x.length];\n    }\n  }\n  return result;\n};\n\nmodule.exports = circularShift;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a') {\n      total += 1;\n      count += 1;\n    }\n    else if (s[i] === 'o') {\n      total += 1;\n      count += 2;\n    }\n    else if (s[i] ==='m') {\n      total += 1;\n      count += 3;\n    }\n    i += 1;\n  }\n  return total + count;\n}\n\n// Driver Code\n\nfunction main() {\n  // Test Case 1\n  let s = \"5 apple and 6 orange \";\n  let n = 19;\n  let expected = 19;\n  let actual = fruitDistribution(s, n);\n  assert(expected === actual);\n  console.log(\"Test Case 1: \" + expected + \" passed\");\n\n  // Test Case 2\n  s = \"0 apples and 1 oranges\";\n  n = 3;\n  expected = 3;\n  actual = fruitDistribution(s, n);\n  assert(expected === actual);\n  console.log(\"Test Case 2: \" + expected + \" passed\");\n\n  // Test Case 3\n  s = \"2 apples and 3 oranges \";\n  n = 100;\n  expected = 95;\n  actual = fruitDistribution(s, n);\n  assert(expected === actual);\n  console.log(\"Test Case 3: \" + expected + \" passed\");\n\n  // Test Case 4\n  s = \"100 apple and 1 oranges\";\n  n = 120;\n  expected = 19;\n  actual = fruitDistribution(s, n);\n  assert(expected === actual);\n  console.log(\"Test Case 4: \" + expected + \" passed\");\n}\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  let min_exp = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n      min_exp = arr[i];\n    } else if (arr[i] === min) {\n      min_exp = Math.max(min_exp, arr[i]);\n    }\n  }\n  return [min, min_exp];\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (lst[i] > 0 && lst[i] > lst[i + 1]) {\n      return lst[i];\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst test = () => {\n  console.log(search([4, 1, 2, 2, 3, 1]));\n  console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n  console.log(search([5, 5, 4, 4, 4]))\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringFirst = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[0] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the last one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringLast = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[filtered.length - 1] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringFirstNot = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[0] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the last one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringLastNot = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[filtered.length - 1] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringFirstNotFirst = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[0] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the last one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringLastNotLast = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[filtered.length - 1] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringFirstNotLast = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[0] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the last one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringLastNotFirst = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[filtered.length - 1] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringFirstNotFirst = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[0] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the last one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringLastNotLast = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[filtered.length - 1] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringFirstNotLast = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[0] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the last one.\n * @param {Array} strings\n * @param {String} substring\n * @returns {String}\n */\nconst filterBySubstringLastNotFirst = (strings, substring) => {\n  const filtered = filterBySubstring(strings, substring);\n  return filtered.length > 0? filtered[filtered.length - 1] : '';\n};\n\n/**\n * Filter an input list of strings only for one that contain given substring\n * and return the first one.\n * @param {Array} strings\n * @param {String", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = []\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == min) {\n      result.push(lst[i])\n    } else {\n      result.push(min)\n      min = lst[i]\n    }\n  }\n  return result\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (area > Math.max(Math.abs(a), Math.abs(b), Math.abs(c))) {\n    return area;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  const max = q.reduce((max, x) => Math.max(max, x), 0);\n  const sum = q.reduce((sum, x) => sum + x, 0);\n  return sum <= w && q.length === 1 && q[0] === max;\n};\n\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr.slice(0);\n    let temp2 = arr.slice(0);\n    let temp3 = arr.slice(0);\n    let temp4 = arr.slice(0);\n    let temp5 = arr.slice(0);\n    let temp6 = arr.slice(0);\n    let temp7 = arr.slice(0);\n    let temp8 = arr.slice(0);\n    let temp9 = arr.slice(0);\n    let temp10 = arr.slice(0);\n    let temp11 = arr.slice(0);\n    let temp12 = arr.slice(0);\n    let temp13 = arr.slice(0);\n    let temp14 = arr.slice(0);\n    let temp15 = arr.slice(0);\n    let temp16 = arr.slice(0);\n    let temp17 = arr.slice(0);\n    let temp18 = arr.slice(0);\n    let temp19 = arr.slice(0);\n    let temp20 = arr.slice(0);\n    let temp21 = arr.slice(0);\n    let temp22 = arr.slice(0);\n    let temp23 = arr.slice(0);\n    let temp24 = arr.slice(0);\n    let temp25 = arr.slice(0);\n    let temp26 = arr.slice(0);\n    let temp27 = arr.slice(0);\n    let temp28 = arr.slice(0);\n    let temp29 = arr.slice(0);\n    let temp30 = arr.slice(0);\n    let temp31 = arr.slice(0);\n    let temp32 = arr.slice(0);\n    let temp33 = arr.slice(0);\n    let temp34 = arr.slice(0);\n    let temp35 = arr.slice(0);\n    let temp36 = arr.slice(0);\n    let temp37 = arr.slice(0);\n    let temp38 = arr.slice(0);\n    let temp39 = arr.slice(0);\n    let temp40 = arr.slice(0);\n    let temp41 = arr.slice(0);\n    let temp42 = arr.slice(0);\n    let temp43 = arr.slice(0);\n    let temp44 = arr.slice(0);\n    let temp45 = arr.slice(0);\n    let temp46 = arr.slice(0);\n    let temp47 = arr.slice(0);\n    let temp48 = arr.slice(0);\n    let temp49 = arr.slice(0);\n    let temp50 = arr.slice(0);\n    let temp51 = arr.slice(0);\n    let temp52 = arr.slice(0);\n    let temp53 = arr.slice(0);\n    let temp54 = arr.slice(0);\n    let temp55 = arr.slice(0);\n    let temp56 = arr.slice(0);\n    let temp57 = arr.slice(0);\n    let temp58 = arr.slice(0);\n    let temp59 = arr.slice(0);\n    let temp60 = arr.slice(0);\n    let temp61 = arr.slice(0);\n    let temp62 = arr.slice(0);\n    let temp63 = arr.slice(0);\n    let temp64 = arr.slice(0);\n    let temp65 = arr.slice(0);\n    let temp66 = arr.slice(0);\n    let temp67 = arr.slice(0);\n    let temp68 = arr.slice(0);\n    let temp69 = arr.slice(0);\n    let temp70 = arr.slice(0);\n    let temp71 = arr.slice(0);\n    let temp72 = arr.slice(0);\n    let temp73 = arr.slice(0);\n    let temp74 = arr.slice(0);\n    let temp75 = arr.slice(0);\n    let temp76 = arr.slice(0);\n    let temp77 = arr.slice(0);\n    let temp78 = arr.slice(0);\n    let temp79 = arr.slice(0);\n    let temp80 = arr.slice(0);\n    let temp81 = arr.slice(0);\n    let temp82 = arr.slice(0);\n    let temp83 = arr.slice(0);\n    let temp84 = arr.slice(0);\n    let temp85 = arr.slice(0);\n    let temp86 = arr.slice(0);\n    let temp87 = arr.slice(0);\n    let temp88 = arr.slice(0);\n    let temp89 = arr.slice(0);\n    let temp90 = arr.slice(0);\n    let temp91 = arr.slice(0);\n    let temp92 = arr.slice(0);\n    let temp93 = arr.slice(0);\n    let temp94 = arr.slice(0);\n    let temp95 = arr.slice(0);\n    let temp96 = arr.slice(0);\n    let temp97 = arr.slice(0);\n    let temp98 = arr.slice(0);\n    let temp99 = arr.slice(0);\n    let temp100 = arr.slice(0);\n    let temp101 = arr.slice(0);\n    let temp102 = arr.slice(0);\n    let temp103 = arr.slice(0);\n    let temp104 = arr.slice(0);\n    let temp105 = arr.slice(0);\n    let temp106 = arr.slice(0);\n    let temp107 = arr.slice(0);\n    let temp108 = arr.slice(0);\n    let temp109 = arr.slice(0);\n    let temp110 = arr.slice(0);\n    let temp111 = arr.slice(0);\n    let temp112 = arr.slice(0);\n    let temp113 = arr.slice(0);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n  let res = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i].length === lst2[j].length) {\n        if (lst1[i].indexOf(lst2[j]) === -1) {\n          res.push(lst1[i]);\n        }\n      }\n    }\n  }\n  return res;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let numeral = a;\n  let numeralLength = numeral.length;\n  let numeralArray = numeral.split(\"\");\n  let numeralArrayLength = numeralArray.length;\n  let numeralArrayLengthMinusOne = numeralArrayLength - 1;\n  let numeralArrayLengthMinusTwo = numeralArrayLength - 2;\n  let numeralArrayLengthMinusThree = numeralArrayLength - 3;\n  let numeralArrayLengthMinusFour = numeralArrayLength - 4;\n  let numeralArrayLengthMinusFive = numeralArrayLength - 5;\n  let numeralArrayLengthMinusSix = numeralArrayLength - 6;\n  let numeralArrayLengthMinusSeven = numeralArrayLength - 7;\n  let numeralArrayLengthMinusEight = numeralArrayLength - 8;\n  let numeralArrayLengthMinusNine = numeralArrayLength - 9;\n  let numeralArrayLengthMinusTen = numeralArrayLength - 10;\n  let numeralArrayLengthMinusEleven = numeralArrayLength - 11;\n  let numeralArrayLengthMinusTwelve = numeralArrayLength - 12;\n  let numeralArrayLengthMinusThirteen = numeralArrayLength - 13;\n  let numeralArrayLengthMinusFourteen = numeralArrayLength - 14;\n  let numeralArrayLengthMinusFifteen = numeralArrayLength - 15;\n  let numeralArrayLengthMinusSixteen = numeralArrayLength - 16;\n  let numeralArrayLengthMinusSeventeen = numeralArrayLength - 17;\n  let numeralArrayLengthMinusEighteen = numeralArrayLength - 18;\n  let numeralArrayLengthMinusNineteen = numeralArrayLength - 19;\n  let numeralArrayLengthMinusTwenty = numeralArrayLength - 20;\n  let numeralArrayLengthMinusTwentyOne = numeralArrayLength - 21;\n  let numeralArrayLengthMinusTwentyTwo = numeralArrayLength - 22;\n  let numeralArrayLengthMinusTwentyThree = numeralArrayLength - 23;\n  let numeralArrayLengthMinusTwentyFour = numeralArrayLength - 24;\n  let numeralArrayLengthMinusTwentyFive = numeralArrayLength - 25;\n  let numeralArrayLengthMinusTwentySix = numeralArrayLength - 26;\n  let numeralArrayLengthMinusTwentySeven = numeralArrayLength - 27;\n  let numeralArrayLengthMinusTwentyEight = numeralArrayLength - 28;\n  let numeralArrayLengthMinusTwentyNine = numeralArrayLength - 29;\n  let numeralArrayLengthMinusThirty = numeralArrayLength - 30;\n  let numeralArrayLengthMinusThirtyOne = numeralArrayLength - 31;\n  let numeralArrayLengthMinusThirtyTwo = numeralArrayLength - 32;\n  let numeralArrayLengthMinusThirtyThree = numeralArrayLength - 33;\n  let numeralArrayLengthMinusThirtyFour = numeralArrayLength - 34;\n  let numeralArrayLengthMinusThirtyFive = numeralArrayLength - 35;\n  let numeralArrayLengthMinusThirtySix = numeralArrayLength - 36;\n  let numeralArrayLengthMinusThirtySeven = numeralArrayLength - 37;\n  let numeralArrayLengthMinusThirtyEight = numeralArrayLength - 38;\n  let numeralArrayLengthMinusThirtyNine = numeralArrayLength - 39;\n  let numeralArrayLengthMinusForty = numeralArrayLength - 40;\n  let numeralArrayLengthMinusFortyOne = numeralArrayLength - 41;\n  let numeralArrayLengthMinusFortyTwo = numeralArrayLength - 42;\n  let numeralArrayLengthMinusFortyThree = numeralArrayLength - 43;\n  let numeralArrayLengthMinusFortyFour = numeralArrayLength - 44;\n  let numeralArrayLengthMinusFortyFive = numeralArrayLength - 45;\n  let numeralArrayLengthMinusFortySix = numeralArrayLength - 46;\n  let numeralArrayLengthMinusFortySeven = numeralArrayLength - 47;\n  let numeralArrayLengthMinusFortyEight = numeralArrayLength - 48;\n  let numeralArrayLengthMinusFortyNine = numeralArrayLength - 49;\n  let numeralArrayLengthMinusFifty = numeralArrayLength - 50;\n  let numeralArrayLengthMinusFiftyOne = numeralArrayLength - 51;\n  let numeralArrayLengthMinusFiftyTwo = numeralArrayLength - 52;\n  let numeralArrayLengthMinusFiftyThree = numeralArrayLength - 53;\n  let numeralArrayLengthMinusFiftyFour = numeralArrayLength - 54;\n  let numeralArrayLengthMinusFiftyFive = numeralArrayLength - 55;\n  let numeralArrayLengthMinusFiftySix = numeralArrayLength - 56;\n  let numeralArrayLengthMinusFiftySeven = numeralArrayLength - 57;\n  let numeralArrayLengthMinusFiftyEight = numeralArrayLength - 58;\n  let numeralArrayLengthMinusFiftyNine = numeralArrayLength - 59;\n  let numeralArrayLengthMinusSixty = numeralArrayLength - 60;\n  let numeralArrayLengthMinusSixtyOne = numeralArrayLength - 61;\n  let numeralArrayLengthMinusSixtyTwo = numeralArrayLength - 62;\n  let numeralArrayLengthMinusSixtyThree = numeralArrayLength - 63;\n  let numeralArrayLengthMinusSixtyFour = numeralArrayLength - 64;\n  let numeralArrayLengthMinusSixtyFive = numeralArrayLength - 65;\n  let numeralArrayLengthMinusSixtySix = numeralArrayLength - 66;\n  let numeralArrayLengthMinusSixtySeven = numeralArrayLength - 67;\n  let numeralArrayLengthMinusSixtyEight = numeralArrayLength - 68;\n  let numeralArrayLengthMinusSixtyNine = numeralArrayLength - 69;\n  let numeralArrayLengthMinusSeventy = numeralArrayLength - 70;\n  let numeralArrayLengthMinusSeventyOne = numeralArrayLength - 71;\n  let numeralArrayLengthMinusSeventyTwo = numeralArrayLength - 72;\n  let numeralArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nmodule.exports = isSimplePower;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 10 === 0 && a % 100!== 0;\n}\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hex = num.toString(16);\n  let result = 0;\n  for (let i = 0; i < hex.length; i++) {\n    let digit = parseInt(hex[i], 16);\n    if (digit > 0 && digit < 10) {\n      result += digit;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid2 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid3 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid4 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid5 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid6 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid7 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid8 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid9 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid10 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid11 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid12 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid13 = (num) => {\n  let result = true;\n  let limit = Math.sqrt(num);\n  for (let i = 2; i < limit; i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isValid14", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = decimal.length;\n  let binaryIndex = 0;\n  let decimalIndex = 0;\n  let decimalChar = '';\n  let binaryChar = '';\n  while (decimalIndex < binaryLength) {\n    decimalChar = decimal.charAt(decimalIndex);\n    binaryChar = '';\n    while (binaryIndex < binaryLength) {\n      binaryChar = binaryChar + '0' + (decimalChar === '1');\n      binaryIndex++;\n    }\n    binary = binary + binaryChar;\n    decimalIndex++;\n  }\n  return binary;\n};\n\n// Test Cases\nconst testCases = [\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal: '1',\n    expected: 'db'\n  },\n  {\n    decimal: '0',\n    expected: 'db'\n  },\n  {\n    decimal", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let intersection = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    intersection += int[i]\n  }\n  return [sum, intersection]\n}\n\nmodule.exports = sumProduct\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let vowels = 'aeiou';\n  let vowelsCount = 0;\n  let vowelsCounts = [];\n  let vowelsCountsLength = vowels.length;\n  let vowelsCountsLength2 = vowelsCountsLength * 2;\n  let vowelsCountsLength3 = vowelsCountsLength * 3;\n  let vowelsCountsLength4 = vowelsCountsLength * 4;\n  let vowelsCountsLength5 = vowelsCountsLength * 5;\n  let vowelsCountsLength6 = vowelsCountsLength * 6;\n  let vowelsCountsLength7 = vowelsCountsLength * 7;\n  let vowelsCountsLength8 = vowelsCountsLength * 8;\n  let vowelsCountsLength9 = vowelsCountsLength * 9;\n  let vowelsCountsLength10 = vowelsCountsLength * 10;\n  let vowelsCountsLength11 = vowelsCountsLength * 11;\n  let vowelsCountsLength12 = vowelsCountsLength * 12;\n  let vowelsCountsLength13 = vowelsCountsLength * 13;\n  let vowelsCountsLength14 = vowelsCountsLength * 14;\n  let vowelsCountsLength15 = vowelsCountsLength * 15;\n  let vowelsCountsLength16 = vowelsCountsLength * 16;\n  let vowelsCountsLength17 = vowelsCountsLength * 17;\n  let vowelsCountsLength18 = vowelsCountsLength * 18;\n  let vowelsCountsLength19 = vowelsCountsLength * 19;\n  let vowelsCountsLength20 = vowelsCountsLength * 20;\n  let vowelsCountsLength21 = vowelsCountsLength * 21;\n  let vowelsCountsLength22 = vowelsCountsLength * 22;\n  let vowelsCountsLength23 = vowelsCountsLength * 23;\n  let vowelsCountsLength24 = vowelsCountsLength * 24;\n  let vowelsCountsLength25 = vowelsCountsLength * 25;\n  let vowelsCountsLength26 = vowelsCountsLength * 26;\n  let vowelsCountsLength27 = vowelsCountsLength * 27;\n  let vowelsCountsLength28 = vowelsCountsLength * 28;\n  let vowelsCountsLength29 = vowelsCountsLength * 29;\n  let vowelsCountsLength30 = vowelsCountsLength * 30;\n  let vowelsCountsLength31 = vowelsCountsLength * 31;\n  let vowelsCountsLength32 = vowelsCountsLength * 32;\n  let vowelsCountsLength33 = vowelsCountsLength * 33;\n  let vowelsCountsLength34 = vowelsCountsLength * 34;\n  let vowelsCountsLength35 = vowelsCountsLength * 35;\n  let vowelsCountsLength36 = vowelsCountsLength * 36;\n  let vowelsCountsLength37 = vowelsCountsLength * 37;\n  let vowelsCountsLength38 = vowelsCountsLength * 38;\n  let vowelsCountsLength39 = vowelsCountsLength * 39;\n  let vowelsCountsLength40 = vowelsCountsLength * 40;\n  let vowelsCountsLength41 = vowelsCountsLength * 41;\n  let vowelsCountsLength42 = vowelsCountsLength * 42;\n  let vowelsCountsLength43 = vowelsCountsLength * 43;\n  let vowelsCountsLength44 = vowelsCountsLength * 44;\n  let vowelsCountsLength45 = vowelsCountsLength * 45;\n  let vowelsCountsLength46 = vowelsCountsLength * 46;\n  let vowelsCountsLength47 = vowelsCountsLength * 47;\n  let vowelsCountsLength48 = vowelsCountsLength * 48;\n  let vowelsCountsLength49 = vowelsCountsLength * 49;\n  let vowelsCountsLength50 = vowelsCountsLength * 50;\n  let vowelsCountsLength51 = vowelsCountsLength * 51;\n  let vowelsCountsLength52 = vowelsCountsLength * 52;\n  let vowelsCountsLength53 = vowelsCountsLength * 53;\n  let vowelsCountsLength54 = vowelsCountsLength * 54;\n  let vowelsCountsLength55 = vowelsCountsLength * 55;\n  let vowelsCountsLength56 = vowelsCountsLength * 56;\n  let vowelsCountsLength57 = vowelsCountsLength * 57;\n  let vowelsCountsLength58 = vowelsCountsLength * 58;\n  let vowelsCountsLength59 = vowelsCountsLength * 59;\n  let vowelsCountsLength60 = vowelsCountsLength * 60;\n  let vowelsCountsLength61 = vowelsCountsLength * 61;\n  let vowelsCountsLength62 = vowelsCountsLength * 62;\n  let vowelsCountsLength63 = vowelsCountsLength * 63;\n  let vowelsCountsLength64 = vowelsCountsLength * 64;\n  let vowelsCountsLength65 = vowelsCountsLength * 65;\n  let vowelsCountsLength66 = vowelsCountsLength * 66;\n  let vowelsCountsLength67 = vowelsCountsLength * 67;\n  let vowelsCountsLength68 = vowelsCountsLength * 68;\n  let vowelsCountsLength69 = vowelsCountsLength * 69;\n  let vowelsCountsLength70 = vowelsCountsLength * 70;\n  let vowelsCountsLength71 = vowelsCountsLength * 71;\n  let vowelsCountsLength72 = vowelsCountsLength * 72;\n  let vowelsCountsLength73 = vowelsCountsLength * 73;\n  let vowelsCountsLength74 = vowelsCountsLength * 74;\n  let vowelsCountsLength75 = vowelsCountsLength * 75;\n  let vowelsCountsLength76 = vowelsCountsLength * 76;\n  let vowelsCountsLength77 = vowelsCountsLength * 77;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let grade = 0\n  let letterGrade = ''\n  let gradeList = []\n  let gradeListLength = 0\n  let gradeListLengthMax = 0\n  let gradeListLengthMin = 0\n  let gradeListLengthAverage = 0\n  let gradeListLengthAverageMax = 0\n  let gradeListLengthAverageMin = 0\n  let gradeListLengthAverageAverage = 0\n  let gradeListLengthAverageAverageMax = 0\n  let gradeListLengthAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  let i = 0;\n  while (i < length) {\n    if (string[i] === '0') {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n   if (n % i === 0) {\n    count++;\n    i++;\n   } else {\n    break;\n   }\n  }\n  return count;\n }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let index = lst.length - 1\n  let result = lst[index]\n  while (index > 0) {\n    if (lst[index - 1] % 2 === 0) {\n      result += lst[index - 1]\n    }\n    index -= 1\n  }\n  return result\n}\n\nmodule.exports = add\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow2 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow3 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow4 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow5 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow6 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow7 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n      j++;\n    }\n    i++;\n  }\n  return [rows, cols];\n};\n\nconst getRow8 = (lst, x) => {\n  const rows = [];\n  const cols = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(0);\n      cols.push(0);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length && lst[i][j] === x) {\n      rows.push(i);\n      cols.push(j);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  const sortedArrayIndex = 0;\n\n  while (sortedArrayIndex < sortedArrayLength) {\n    const sum = sortedArray[sortedArrayIndex] + sortedArray[sortedArrayIndex + 1];\n    if (sum % 2 === 0) {\n      sortedArray[sortedArrayIndex] = sum;\n      sortedArray[sortedArrayIndex + 1] = 0;\n      sortedArrayIndex += 2;\n    } else {\n      sortedArray[sortedArrayIndex] = 0;\n      sortedArray[sortedArrayIndex + 1] = sum;\n      sortedArrayIndex += 2;\n    }\n  }\n\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let chain = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n  let s166 = 0;\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = 0; i < maxIndex; i++) {\n    result.push(numbers[i]);\n  }\n  result.push(max);\n  for (let i = maxIndex + 1; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i = m + 1;\n    } else {\n      i = j + 1;\n    }\n  }\n  return lst[i];\n}\n\nconst nextSmallest = (lst) = > {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let m = (i + j) >> 1;\n    if (lst[m] < lst[j]) {\n      j = m;\n    } else if (lst[m] > lst[j]) {\n      i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let num = 0\n  let isBored = false\n  let isBoring = false\n  let isBoringSentence = false\n  let isBoringSentenceSentence = false\n  let isBoringSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence = false\n  let isBoringSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt2 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt3 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt4 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt5 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt6 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt7 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt8 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt9 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt10 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt11 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt12 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt13 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt14 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt15 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y > z) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt16 = (x, y, z) => {\n  if (x === y || x === z || y === z) {\n    return true;\n  }\n  if (x < y && y < z) {\n    return true;\n  }\n  if (x > y && y", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toLowerCase();\n  let vowels = 'aeiouy';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let consonant_vowel_pair = [];\n  let vowel_consonant_pair = [];\n  let vowel_consonant_pair_length = 0;\n  let vowel_consonant_pair_length_2 = 0;\n  let vowel_consonant_pair_length_3 = 0;\n  let vowel_consonant_pair_length_4 = 0;\n  let vowel_consonant_pair_length_5 = 0;\n  let vowel_consonant_pair_length_6 = 0;\n  let vowel_consonant_pair_length_7 = 0;\n  let vowel_consonant_pair_length_8 = 0;\n  let vowel_consonant_pair_length_9 = 0;\n  let vowel_consonant_pair_length_10 = 0;\n  let vowel_consonant_pair_length_11 = 0;\n  let vowel_consonant_pair_length_12 = 0;\n  let vowel_consonant_pair_length_13 = 0;\n  let vowel_consonant_pair_length_14 = 0;\n  let vowel_consonant_pair_length_15 = 0;\n  let vowel_consonant_pair_length_16 = 0;\n  let vowel_consonant_pair_length_17 = 0;\n  let vowel_consonant_pair_length_18 = 0;\n  let vowel_consonant_pair_length_19 = 0;\n  let vowel_consonant_pair_length_20 = 0;\n  let vowel_consonant_pair_length_21 = 0;\n  let vowel_consonant_pair_length_22 = 0;\n  let vowel_consonant_pair_length_23 = 0;\n  let vowel_consonant_pair_length_24 = 0;\n  let vowel_consonant_pair_length_25 = 0;\n  let vowel_consonant_pair_length_26 = 0;\n  let vowel_consonant_pair_length_27 = 0;\n  let vowel_consonant_pair_length_28 = 0;\n  let vowel_consonant_pair_length_29 = 0;\n  let vowel_consonant_pair_length_30 = 0;\n  let vowel_consonant_pair_length_31 = 0;\n  let vowel_consonant_pair_length_32 = 0;\n  let vowel_consonant_pair_length_33 = 0;\n  let vowel_consonant_pair_length_34 = 0;\n  let vowel_consonant_pair_length_35 = 0;\n  let vowel_consonant_pair_length_36 = 0;\n  let vowel_consonant_pair_length_37 = 0;\n  let vowel_consonant_pair_length_38 = 0;\n  let vowel_consonant_pair_length_39 = 0;\n  let vowel_consonant_pair_length_40 = 0;\n  let vowel_consonant_pair_length_41 = 0;\n  let vowel_consonant_pair_length_42 = 0;\n  let vowel_consonant_pair_length_43 = 0;\n  let vowel_consonant_pair_length_44 = 0;\n  let vowel_consonant_pair_length_45 = 0;\n  let vowel_consonant_pair_length_46 = 0;\n  let vowel_consonant_pair_length_47 = 0;\n  let vowel_consonant_pair_length_48 = 0;\n  let vowel_consonant_pair_length_49 = 0;\n  let vowel_consonant_pair_length_50 = 0;\n  let vowel_consonant_pair_length_51 = 0;\n  let vowel_consonant_pair_length_52 = 0;\n  let vowel_consonant_pair_length_53 = 0;\n  let vowel_consonant_pair_length_54 = 0;\n  let vowel_consonant_pair_length_55 = 0;\n  let vowel_consonant_pair_length_56 = 0;\n  let vowel_consonant_pair_length_57 = 0;\n  let vowel_consonant_pair_length_58 = 0;\n  let vowel_consonant_pair_length_59 = 0;\n  let vowel_consonant_pair_length_60 = 0;\n  let vowel_consonant_pair_length_61 = 0;\n  let vowel_consonant_pair_length_62 = 0;\n  let vowel_consonant_pair_length_63 = 0;\n  let vowel_consonant_pair_length_64 = 0;\n  let vowel_consonant_pair_length_65 = 0;\n  let vowel_consonant_pair_length_66 = 0;\n  let vowel_consonant_pair_length_67 = 0;\n  let vowel_consonant_pair_length_68 = 0;\n  let vowel_consonant_pair_length_69 = 0;\n  let vowel_consonant_pair_length_70 = 0;\n  let vowel_consonant_pair_length_71 = 0;\n  let vowel_consonant_pair_length_72 = 0;\n  let vowel_consonant_pair_length_73 = 0;\n  let vowel_consonant_pair_length_74 = 0;\n  let vowel_consonant_pair_length_75 = 0;\n  let vowel_consonant_pair_length_76 = 0;\n  let vowel_consonant_pair_length_77 = 0;\n  let vowel_consonant_pair_length_78 = 0;\n  let vowel_consonant_pair_length_79 = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const lstLength = lst.length;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lstLength; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  const maxDigit = lst[maxIndex];\n  const maxDigitIndex = lst.indexOf(maxDigit);\n  const maxDigitIndex2 = lst.indexOf(maxDigit, maxDigitIndex + 1);\n  const maxDigitIndex3 = lst.indexOf(maxDigit, maxDigitIndex2 + 1);\n  const maxDigitIndex4 = lst.indexOf(maxDigit, maxDigitIndex3 + 1);\n  const maxDigitIndex5 = lst.indexOf(maxDigit, maxDigitIndex4 + 1);\n  const maxDigitIndex6 = lst.indexOf(maxDigit, maxDigitIndex5 + 1);\n  const maxDigitIndex7 = lst.indexOf(maxDigit, maxDigitIndex6 + 1);\n  const maxDigitIndex8 = lst.indexOf(maxDigit, maxDigitIndex7 + 1);\n  const maxDigitIndex9 = lst.indexOf(maxDigit, maxDigitIndex8 + 1);\n  const maxDigitIndex10 = lst.indexOf(maxDigit, maxDigitIndex9 + 1);\n  const maxDigitIndex11 = lst.indexOf(maxDigit, maxDigitIndex10 + 1);\n  const maxDigitIndex12 = lst.indexOf(maxDigit, maxDigitIndex11 + 1);\n  const maxDigitIndex13 = lst.indexOf(maxDigit, maxDigitIndex12 + 1);\n  const maxDigitIndex14 = lst.indexOf(maxDigit, maxDigitIndex13 + 1);\n  const maxDigitIndex15 = lst.indexOf(maxDigit, maxDigitIndex14 + 1);\n  const maxDigitIndex16 = lst.indexOf(maxDigit, maxDigitIndex15 + 1);\n  const maxDigitIndex17 = lst.indexOf(maxDigit, maxDigitIndex16 + 1);\n  const maxDigitIndex18 = lst.indexOf(maxDigit, maxDigitIndex17 + 1);\n  const maxDigitIndex19 = lst.indexOf(maxDigit, maxDigitIndex18 + 1);\n  const maxDigitIndex20 = lst.indexOf(maxDigit, maxDigitIndex19 + 1);\n  const maxDigitIndex21 = lst.indexOf(maxDigit, maxDigitIndex20 + 1);\n  const maxDigitIndex22 = lst.indexOf(maxDigit, maxDigitIndex21 + 1);\n  const maxDigitIndex23 = lst.indexOf(maxDigit, maxDigitIndex22 + 1);\n  const maxDigitIndex24 = lst.indexOf(maxDigit, maxDigitIndex23 + 1);\n  const maxDigitIndex25 = lst.indexOf(maxDigit, maxDigitIndex24 + 1);\n  const maxDigitIndex26 = lst.indexOf(maxDigit, maxDigitIndex25 + 1);\n  const maxDigitIndex27 = lst.indexOf(maxDigit, maxDigitIndex26 + 1);\n  const maxDigitIndex28 = lst.indexOf(maxDigit, maxDigitIndex27 + 1);\n  const maxDigitIndex29 = lst.indexOf(maxDigit, maxDigitIndex28 + 1);\n  const maxDigitIndex30 = lst.indexOf(maxDigit, maxDigitIndex29 + 1);\n  const maxDigitIndex31 = lst.indexOf(maxDigit, maxDigitIndex30 + 1);\n  const maxDigitIndex32 = lst.indexOf(maxDigit, maxDigitIndex31 + 1);\n  const maxDigitIndex33 = lst.indexOf(maxDigit, maxDigitIndex32 + 1);\n  const maxDigitIndex34 = lst.indexOf(maxDigit, maxDigitIndex33 + 1);\n  const maxDigitIndex35 = lst.indexOf(maxDigit, maxDigitIndex34 + 1);\n  const maxDigitIndex36 = lst.indexOf(maxDigit, maxDigitIndex35 + 1);\n  const maxDigitIndex37 = lst.indexOf(maxDigit, maxDigitIndex36 + 1);\n  const maxDigitIndex38 = lst.indexOf(maxDigit, maxDigitIndex37 + 1);\n  const maxDigitIndex39 = lst.indexOf(maxDigit, maxDigitIndex38 + 1);\n  const maxDigitIndex40 = lst.indexOf(maxDigit, maxDigitIndex39 + 1);\n  const maxDigitIndex41 = lst.indexOf(maxDigit, maxDigitIndex40 + 1);\n  const maxDigitIndex42 = lst.indexOf(maxDigit, maxDigitIndex41 + 1);\n  const maxDigitIndex43 = lst.indexOf(maxDigit, maxDigitIndex42 + 1);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let isUpperCase = keys.map((key) => {\n    return key.toUpperCase();\n  });\n  return isUpperCase.every((key) => {\n    return dict[key] === key;\n  });\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(countUpTo(i + 1));\n    }\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let a_int = a % 10;\n  let b_int = b % 10;\n  while (a_int >= 0 && b_int >= 0) {\n    if (a_int < b_int) {\n      result += a_int;\n      a_int = a_int - b_int;\n    } else {\n      result += b_int;\n      b_int = b_int - a_int;\n    }\n  }\n  if (a_int > b_int) {\n    result += a_int;\n  } else {\n    result += b_int;\n  }\n  return result;\n};\n\nconst multiply_2 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_3 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_4 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_5 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_6 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_7 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_8 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_9 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a = a / 10;\n    }\n  }\n  while (b > 0) {\n    if (b % 10 == 0) {\n      result += b;\n      b = b / 10;\n    } else {\n      result += b % 10;\n      b = b / 10;\n    }\n  }\n  return result;\n};\n\nconst multiply_10 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 == 0) {\n      result += a;\n      a = a / 10;\n    } else {\n      result += a % 10;\n      a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let result = parseInt(value, 10);\n  if (isNaN(result)) {\n    return result;\n  }\n  let diff = Math.abs(result - Math.round(result));\n  if (diff < 0.5) {\n    return result;\n  }\n  return Math.round(result);\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
