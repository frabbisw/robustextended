{"task_id": "JavaScript/0", "prompt": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const isClose = (a, b) => {\n    return Math.abs(a - b) < threshold;\n  };\n\n  return numbers.some(a => numbers.some(b => isClose(a, b)));\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let open_paren_count_max = 0;\n  let open_paren_count_min = 0;\n  let open_paren_count_max_min = 0;\n  let open_paren_count_max_min_max = 0;\n  let open_paren_count_max_min_min = 0;\n  let open_paren_count_max_min_min_max = 0;\n  let open_paren_count_max_min_min_min = 0;\n  let open_paren_count_max_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0,\n      y = 0,\n      z = 0,\n      a = 0,\n      b = 0,\n      c = 0,\n      d = 0,\n      e = 0,\n      f = 0,\n      g = 0,\n      h = 0,\n      i = 0,\n      j = 0,\n      k = 0,\n      l = 0,\n      m = 0,\n      n = 0,\n      o = 0,\n      p = 0,\n      q = 0,\n      r = 0,\n      s = 0,\n      t = 0,\n      u = 0,\n      v = 0,\n      w = 0,\n      x = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s .\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [n];\n  let nextLevel = [n];\n  let nextLevelCount = 0;\n  let i = 0;\n  while (i < n) {\n    let nStone = pile.pop();\n    let nNextLevel = nextLevel.pop();\n    let nNextLevelCount = nextLevelCount;\n    if (nNextLevel % 2 === 0) {\n      nNextLevelCount += nStone;\n    } else {\n      nNextLevelCount += nStone + 1;\n    }\n    nextLevel.push(nNextLevelCount);\n    pile.push(nStone);\n    i++;\n  }\n  return nextLevel;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s+/);\n  return words;\n};\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  let i = 0\n  while (i < y - x + 1) {\n    i++\n  }\n  return i\n}\n\nmodule.exports = chooseNum\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum / m;\n};\n\nconst test = () => {\n  console.log(roundedAvg(1, 5));\n  console.log(roundedAvg(7, 5));\n  console.log(roundedAvg(10, 20));\n  console.log(roundedAvg(20, 33));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let lis = [];\n  let i = 0;\n  while (i < x.length) {\n    let n = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === n) {\n      j++;\n    }\n    if (j - i > 1) {\n      lis.push(n);\n    }\n    i = j;\n  }\n  return lis;\n};\n\nmodule.exports = uniqueDigits;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n\n  const reversed = sorted.reverse();\n\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    const digit = reversed[i];\n    result.push(digit);\n  }\n\n  return result;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f(i));\n    } else {\n      result = result.concat(f(i) + f(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f2(i));\n    } else {\n      result = result.concat(f2(i) + f2(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f3(i));\n    } else {\n      result = result.concat(f3(i) + f3(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f4(i));\n    } else {\n      result = result.concat(f4(i) + f4(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f5(i));\n    } else {\n      result = result.concat(f5(i) + f5(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f6(i));\n    } else {\n      result = result.concat(f6(i) + f6(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f7(i));\n    } else {\n      result = result.concat(f7(i) + f7(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f8(i));\n    } else {\n      result = result.concat(f8(i) + f8(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f9(i));\n    } else {\n      result = result.concat(f9(i) + f9(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f10(i));\n    } else {\n      result = result.concat(f10(i) + f10(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f11(i));\n    } else {\n      result = result.concat(f11(i) + f11(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f12(i));\n    } else {\n      result = result.concat(f12(i) + f12(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result = result.concat(f13(i));\n    } else {\n      result = result.concat(f13(i) + f13(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  let result = [];\n  for (let i = 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = () => {\n    const evens = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        evens.push(i);\n      }\n    }\n    return evens;\n  };\n  const odd = () => {\n    const odds = [];\n    for (let i = 1; i <= n; i++) {\n      if (i % 2!== 0) {\n        odds.push(i);\n      }\n    }\n    return odds;\n  };\n  return { even, odd };\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0 .\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e .g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have anarra y 'arr '  of Nintegersarr[1], arr[2], ...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We have anarra y 'arr' of Nintegersarr[1], arr[2],...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLength = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLength = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arrTempIndex103 = 0;\n  let arrTempIndex104 = 0;\n  let arrTempIndex105 = 0;\n  let arrTempIndex106 = 0;\n  let arrTempIndex107 = 0;\n  let arrTempIndex108 = 0;\n  let arrTempIndex109 = 0;\n  let arrTempIndex110 = 0;\n  let arrTempIndex111 = 0;\n  let arrTempIndex112 = 0;\n  let arrTempIndex113 = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor10 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor11 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor12 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor13 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst stringXor14 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        res += '1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this pro blem , youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this pro blem, youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let a1 = 0;\n  let b1 = 0;\n  let c1 = 0;\n  let d1 = 0;\n  let e1 = 0;\n  let f1 = 0;\n  let g1 = 0;\n  let h1 = 0;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let a2 = 0;\n  let b2 = 0;\n  let c2 = 0;\n  let d2 = 0;\n  let e2 = 0;\n  let f2 = 0;\n  let g2 = 0;\n  let h2 = 0;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let a3 = 0;\n  let b3 = 0;\n  let c3 = 0;\n  let d3 = 0;\n  let e3 = 0;\n  let f3 = 0;\n  let g3 = 0;\n  let h3 = 0;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let a4 = 0;\n  let b4 = 0;\n  let c4 = 0;\n  let d4 = 0;\n  let e4 = 0;\n  let f4 = 0;\n  let g4 = 0;\n  let h4 = 0;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let a5 = 0;\n  let b5 = 0;\n  let c5 = 0;\n  let d5 = 0;\n  let e5 = 0;\n  let f5 = 0;\n  let g5 = 0;\n  let h5 = 0;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q6 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(/\\s+/);\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let index = 0;\n  let indexCount = 0;\n  let indexCountIndex = 0;\n  let letter;\n  let letterCount;\n  let letterCountIndex;\n  let letterCountIndexCount = 0;\n  let letterCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCount = 0;\n  let letterCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCount = 0;\n  let letterCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCount = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let letterCountIndexCountIndexCountIndexCountIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  let resultIndex = 0;\n  let checkIndex = 0;\n  let resultLength = result.length;\n  let checkLength = check.length;\n  let resultChar = '';\n  let checkChar = '';\n  let resultCharIndex = 0;\n  let checkCharIndex = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultCharLength = 0;\n  let checkCharLength = 0;\n  let resultChar", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t .\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    str += lst[i];\n    if (str.length % 2 === 0) {\n      res.push(str);\n      str = '';\n    }\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > minSum) {\n      break;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity .  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity.  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push([i, j]);\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst main = async () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1],\n    [0, 1, 1, 1]\n  ];\n  const bucket_capacity = 2;\n  const expected = 6;\n  const actual = await maxFill(grid, bucket_capacity);\n  console.log(actual);\n  console.assert(actual === expected);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let temp = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      word += s[i];\n      i++;\n    } else {\n      if (word.length > 0) {\n        words.push(word);\n        word = '';\n      }\n      if (s[i].match(/[^a-zA-Z]/)) {\n        word += s[i];\n        i++;\n      }\n    }\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel2 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel3 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel4 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel5 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel6 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel7 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel8 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel9 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel10 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len) {\n    let ch = word[i];\n    if (vowels.indexOf(ch)!== -1) {\n      result = ch;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getClosestVowel11 = (word) => {\n  let result = '';\n  let i = 0;\n  let len = word.length;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  while (i < len", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only .\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only.\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let res = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        res = true;\n        break;\n      }\n      if (stack[stack.length - 1]!== '(') {\n        res = false;\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let lst = ['()(', ')', '()', ')', '()'];\n  console.log(matchParens(lst));\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let max = strings[0].length;\n  let longest = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max) {\n      max = strings[i].length;\n      longest = strings[i];\n    }\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => a > b? a : b, -Infinity);\n  const maxIndex = arr.indexOf(max);\n  return arr.slice(maxIndex - k, maxIndex + k);\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0);\n  const max = arr.reduce((a, b) => Math.max(a, b), 0);\n  const maxK = Math.max(max, k);\n  const maxK2 = maxK * 2;\n  const maxK3 = maxK * 3;\n  const maxK4 = maxK * 4;\n  const maxK5 = maxK * 5;\n  const maxK6 = maxK * 6;\n  const maxK7 = maxK * 7;\n  const maxK8 = maxK * 8;\n  const maxK9 = maxK * 9;\n  const maxK10 = maxK * 10;\n  const maxK11 = maxK * 11;\n  const maxK12 = maxK * 12;\n  const maxK13 = maxK * 13;\n  const maxK14 = maxK * 14;\n  const maxK15 = maxK * 15;\n  const maxK16 = maxK * 16;\n  const maxK17 = maxK * 17;\n  const maxK18 = maxK * 18;\n  const maxK19 = maxK * 19;\n  const maxK20 = maxK * 20;\n  const maxK21 = maxK * 21;\n  const maxK22 = maxK * 22;\n  const maxK23 = maxK * 23;\n  const maxK24 = maxK * 24;\n  const maxK25 = maxK * 25;\n  const maxK26 = maxK * 26;\n  const maxK27 = maxK * 27;\n  const maxK28 = maxK * 28;\n  const maxK29 = maxK * 29;\n  const maxK30 = maxK * 30;\n  const maxK31 = maxK * 31;\n  const maxK32 = maxK * 32;\n  const maxK33 = maxK * 33;\n  const maxK34 = maxK * 34;\n  const maxK35 = maxK * 35;\n  const maxK36 = maxK * 36;\n  const maxK37 = maxK * 37;\n  const maxK38 = maxK * 38;\n  const maxK39 = maxK * 39;\n  const maxK40 = maxK * 40;\n  const maxK41 = maxK * 41;\n  const maxK42 = maxK * 42;\n  const maxK43 = maxK * 43;\n  const maxK44 = maxK * 44;\n  const maxK45 = maxK * 45;\n  const maxK46 = maxK * 46;\n  const maxK47 = maxK * 47;\n  const maxK48 = maxK * 48;\n  const maxK49 = maxK * 49;\n  const maxK50 = maxK * 50;\n  const maxK51 = maxK * 51;\n  const maxK52 = maxK * 52;\n  const maxK53 = maxK * 53;\n  const maxK54 = maxK * 54;\n  const maxK55 = maxK * 55;\n  const maxK56 = maxK * 56;\n  const maxK57 = maxK * 57;\n  const maxK58 = maxK * 58;\n  const maxK59 = maxK * 59;\n  const maxK60 = maxK * 60;\n  const maxK61 = maxK * 61;\n  const maxK62 = maxK * 62;\n  const maxK63 = maxK * 63;\n  const maxK64 = maxK * 64;\n  const maxK65 = maxK * 65;\n  const maxK66 = maxK * 66;\n  const maxK67 = maxK * 67;\n  const maxK68 = maxK * 68;\n  const maxK69 = maxK * 69;\n  const maxK70 = maxK * 70;\n  const maxK71 = maxK * 71;\n  const maxK72 = maxK * 72;\n  const maxK73 = maxK * 73;\n  const maxK74 = maxK * 74;\n  const maxK75 = maxK * 75;\n  const maxK76 = maxK * 76;\n  const maxK77 = maxK * 77;\n  const maxK78 = maxK * 78;\n  const maxK79 = maxK * 79;\n  const maxK80 = maxK * 80;\n  const maxK81 = maxK * 81;\n  const maxK82 = maxK * 82;\n  const maxK83 = maxK * 83;\n  const maxK84 = maxK * 84;\n  const maxK85 = maxK * 85;\n  const maxK86 = maxK * 86;\n  const maxK87 = maxK * 87;\n  const maxK88 = maxK * 88;\n  const maxK89 = maxK * 89;\n  const maxK90 = maxK * 90;\n  const maxK91 = maxK * 91;\n  const maxK92 = maxK * 92;\n  const maxK93 = maxK * 93;\n  const maxK94 = maxK * 94;\n  const maxK95 = maxK * 95;\n  const maxK96 = maxK * 96;\n  const maxK97 = maxK * 97;\n  const maxK98 = maxK * 98;\n  const maxK99 = maxK * 99;\n  const maxK100 = maxK * 100;\n  const maxK101 = maxK * 101;\n  const maxK102 = maxK * 102;\n  const maxK103 = maxK * 103;\n  const maxK104 = maxK * 104;\n  const maxK105 = maxK * 105;\n  const maxK106 = maxK * 106;\n  const maxK107 = maxK * 107;\n  const maxK108 = maxK * 108;\n  const maxK109 = maxK * 109;\n  const maxK110 = maxK * 110;\n  const maxK111 = maxK * 111;\n  const maxK112 = maxK * 112;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n < 1) return [];\n  const l = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      l.push(i);\n    } else {\n      l.push(i / 2);\n      l.push(i);\n    }\n    i = i + 1;\n  }\n  return l;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = dateArray[1];\n  const day = dateArray[2];\n  const year = dateArray[0];\n  const days = new Date(year, month - 1, day);\n  const daysInMonth = days.getDate();\n  const daysInMonthMax = days.getDate();\n  const daysInMonthMin = daysInMonth - daysInMonthMax;\n  const daysInMonthMax2 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin2 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax3 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin3 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax4 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin4 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax5 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin5 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax6 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin6 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax7 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin7 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax8 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin8 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax9 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin9 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax10 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin10 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax11 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin11 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax12 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin12 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax13 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin13 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax14 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin14 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax15 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin15 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax16 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin16 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax17 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin17 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax18 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin18 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax19 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin19 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax20 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin20 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax21 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin21 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax22 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin22 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax23 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin23 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax24 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin24 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax25 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin25 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax26 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin26 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax27 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin27 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax28 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin28 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax29 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin29 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax30 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin30 = daysInMonthMin - daysInMonthMin;\n  const daysInMonthMax31 = daysInMonthMax + daysInMonthMax;\n  const daysInMonthMin31 = daysInMonthMin - daysInMonthMin;\n  const daysInMonth", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1, ... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    if (txt[i] ==='') {\n      if (word.length > 0) {\n        words.push(word);\n        word = '';\n      }\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  if (word.length > 0) {\n    words.push(word);\n  }\n  return words;\n};\n\nexport default splitWords;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    if (lst[i] > lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nconst test = () => {\n  const result = intersection((1, 2), (2, 3))\n  console.log(result)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const res = arr.reduce((a, b) => a * b, 1);\n  return res;\n};\n\nexport default prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k ,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const M = grid[0].length\n  const visited = new Array(N * N)\n  const path = new Array(k)\n  const min = new Array(k)\n  let i, j, kk\n  for (i = 0; i < N; i++) {\n    visited[i] = new Array(N)\n    for (j = 0; j < N; j++) {\n      visited[i][j] = -1\n    }\n  }\n  for (i = 0; i < N; i++) {\n    visited[i][i] = 0\n  }\n  for (kk = 0; kk < k; kk++) {\n    path[kk] = -1\n  }\n  for (i = 0; i < N; i++) {\n    for (j = 0; j < N; j++) {\n      if (visited[i][j] === -1) {\n        const curr = grid[i][j]\n        if (visited[i][j] === -1) {\n          visited[i][j] = curr\n          path[0] = i\n          path[1] = j\n          minPath(grid, k, visited, path, kk, curr)\n        }\n      }\n    }\n  }\n  return path\n}\n\nmodule.exports = minPath\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n\n  if (a === b) {\n    return a;\n  }\n\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  }\n\n  if (a === 1) {\n    return b;\n  }\n\n  if (b === 1) {\n    return a;\n  }\n\n  if (a === 2) {\n    return b;\n  }\n\n  if (b === 2) {\n    return a;\n  }\n\n  if (a === 3) {\n    return b;\n  }\n\n  if (b === 3) {\n    return a;\n  }\n\n  if (a === 5) {\n    return b;\n  }\n\n  if (b === 5) {\n    return a;\n  }\n\n  if (a === 7) {\n    return b;\n  }\n\n  if (b === 7) {\n    return a;\n  }\n\n  if (a === 9) {\n    return b;\n  }\n\n  if (b === 9) {\n    return a;\n  }\n\n  if (a === 11) {\n    return b;\n  }\n\n  if (b === 11) {\n    return a;\n  }\n\n  if (a === 13) {\n    return b;\n  }\n\n  if (b === 13) {\n    return a;\n  }\n\n  if (a === 17) {\n    return b;\n  }\n\n  if (b === 17) {\n    return a;\n  }\n\n  if (a === 19) {\n    return b;\n  }\n\n  if (b === 19) {\n    return a;\n  }\n\n  if (a === 23) {\n    return b;\n  }\n\n  if (b === 23) {\n    return a;\n  }\n\n  if (a === 29) {\n    return b;\n  }\n\n  if (b === 29) {\n    return a;\n  }\n\n  if (a === 31) {\n    return b;\n  }\n\n  if (b === 31) {\n    return a;\n  }\n\n  if (a === 37) {\n    return b;\n  }\n\n  if (b === 37) {\n    return a;\n  }\n\n  if (a === 41) {\n    return b;\n  }\n\n  if (b === 41) {\n    return a;\n  }\n\n  if (a === 43) {\n    return b;\n  }\n\n  if (b === 43) {\n    return a;\n  }\n\n  if (a === 47) {\n    return b;\n  }\n\n  if (b === 47) {\n    return a;\n  }\n\n  if (a === 53) {\n    return b;\n  }\n\n  if (b === 53) {\n    return a;\n  }\n\n  if (a === 59) {\n    return b;\n  }\n\n  if (b === 59) {\n    return a;\n  }\n\n  if (a === 61) {\n    return b;\n  }\n\n  if (b === 61) {\n    return a;\n  }\n\n  if (a === 67) {\n    return b;\n  }\n\n  if (b === 67) {\n    return a;\n  }\n\n  if (a === 71) {\n    return b;\n  }\n\n  if (b === 71) {\n    return a;\n  }\n\n  if (a === 73) {\n    return b;\n  }\n\n  if (b === 73) {\n    return a;\n  }\n\n  if (a === 79) {\n    return b;\n  }\n\n  if (b === 79) {\n    return a;\n  }\n\n  if (a === 83) {\n    return b;\n  }\n\n  if (b === 83) {\n    return a;\n  }\n\n  if (a === 89) {\n    return b;\n  }\n\n  if (b === 89) {\n    return a;\n  }\n\n  if (a === 97) {\n    return b;\n  }\n\n  if (b === 97) {\n    return a;\n  }\n\n  if (a === 101) {\n    return b;\n  }\n\n  if (b === 101) {\n    return a;\n  }\n\n  if (a === 103) {\n    return b;\n  }\n\n  if (b === 103) {\n    return a;\n  }\n\n  if (a === 107) {\n    return b;\n  }\n\n  if (b === 107) {\n    return a;\n  }\n\n  if (a === 109) {\n    return b;\n  }\n\n  if (b === 109) {\n    return a;\n  }\n\n  if (a === 113) {\n    return b;\n  }\n\n  if (b === 113) {\n    return a;\n  }\n\n  if (a === 127) {\n    return b;\n  }\n\n  if (b === 127) {\n    return a;\n  }\n\n  if (a === 131) {\n    return b;\n  }\n\n  if (b === 131) {\n    return a;\n  }\n\n  if (a === 137) {\n    return b;\n  }\n\n  if (b === 137) {\n    return a;\n  }\n\n  if (a === 139) {\n    return b;\n  }\n\n  if (b === 139) {\n    return a;\n  }\n\n  if (a === 143) {\n    return b;\n  }\n\n  if (b === 143) {\n    return a;\n  }\n\n  if (a === 151) {\n    return b;\n  }\n\n  if (b === 151) {\n    return a;\n  }\n\n  if (a === 157) {\n    return b;\n  }\n\n  if (b === 157) {\n    return a;\n  }\n\n  if (a === 163) {\n    return b;\n  }\n\n  if (b === 163) {\n    return a;\n  }\n\n  if (a === 167) {\n    return b;\n  }\n\n  if (b === 167) {\n    return a;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [];\n  for (let i = 1; i < n; i++) {\n    b.push(a[i] + a[i - 1] + a[i - 2] + a[i + 1]);\n  }\n  return b;\n};\n\nconst test = (n) => {\n  let res = tri(n);\n  console.log(res);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits2 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits3 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits4 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits5 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits6 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits7 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits8 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits9 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits10 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits11 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits12 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits13 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits14 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits15 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits16 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits17 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits18 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits19 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits20 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits21 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits22 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits23 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits24 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits25 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math.pow(10, i);\n  }\n  return res;\n};\n\nconst digits26 = (n) => {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    res += Math", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  let bracketCount = 0\n  let bracketIndex = 0\n  let bracketIndex2 = 0\n  let bracketIndex3 = 0\n  let bracketIndex4 = 0\n  let bracketIndex5 = 0\n  let bracketIndex6 = 0\n  let bracketIndex7 = 0\n  let bracketIndex8 = 0\n  let bracketIndex9 = 0\n  let bracketIndex10 = 0\n  let bracketIndex11 = 0\n  let bracketIndex12 = 0\n  let bracketIndex13 = 0\n  let bracketIndex14 = 0\n  let bracketIndex15 = 0\n  let bracketIndex16 = 0\n  let bracketIndex17 = 0\n  let bracketIndex18 = 0\n  let bracketIndex19 = 0\n  let bracketIndex20 = 0\n  let bracketIndex21 = 0\n  let bracketIndex22 = 0\n  let bracketIndex23 = 0\n  let bracketIndex24 = 0\n  let bracketIndex25 = 0\n  let bracketIndex26 = 0\n  let bracketIndex27 = 0\n  let bracketIndex28 = 0\n  let bracketIndex29 = 0\n  let bracketIndex30 = 0\n  let bracketIndex31 = 0\n  let bracketIndex32 = 0\n  let bracketIndex33 = 0\n  let bracketIndex34 = 0\n  let bracketIndex35 = 0\n  let bracketIndex36 = 0\n  let bracketIndex37 = 0\n  let bracketIndex38 = 0\n  let bracketIndex39 = 0\n  let bracketIndex40 = 0\n  let bracketIndex41 = 0\n  let bracketIndex42 = 0\n  let bracketIndex43 = 0\n  let bracketIndex44 = 0\n  let bracketIndex45 = 0\n  let bracketIndex46 = 0\n  let bracketIndex47 = 0\n  let bracketIndex48 = 0\n  let bracketIndex49 = 0\n  let bracketIndex50 = 0\n  let bracketIndex51 = 0\n  let bracketIndex52 = 0\n  let bracketIndex53 = 0\n  let bracketIndex54 = 0\n  let bracketIndex55 = 0\n  let bracketIndex56 = 0\n  let bracketIndex57 = 0\n  let bracketIndex58 = 0\n  let bracketIndex59 = 0\n  let bracketIndex60 = 0\n  let bracketIndex61 = 0\n  let bracketIndex62 = 0\n  let bracketIndex63 = 0\n  let bracketIndex64 = 0\n  let bracketIndex65 = 0\n  let bracketIndex66 = 0\n  let bracketIndex67 = 0\n  let bracketIndex68 = 0\n  let bracketIndex69 = 0\n  let bracketIndex70 = 0\n  let bracketIndex71 = 0\n  let bracketIndex72 = 0\n  let bracketIndex73 = 0\n  let bracketIndex74 = 0\n  let bracketIndex75 = 0\n  let bracketIndex76 = 0\n  let bracketIndex77 = 0\n  let bracketIndex78 = 0\n  let bracketIndex79 = 0\n  let bracketIndex80 = 0\n  let bracketIndex81 = 0\n  let bracketIndex82 = 0\n  let bracketIndex83 = 0\n  let bracketIndex84 = 0\n  let bracketIndex85 = 0\n  let bracketIndex86 = 0\n  let bracketIndex87 = 0\n  let bracketIndex88 = 0\n  let bracketIndex89 = 0\n  let bracketIndex90 = 0\n  let bracketIndex91 = 0\n  let bracketIndex92 = 0\n  let bracketIndex93 = 0\n  let bracketIndex94 = 0\n  let bracketIndex95 = 0\n  let bracketIndex96 = 0\n  let bracketIndex97 = 0\n  let bracketIndex98 = 0\n  let bracketIndex99 = 0\n  let bracketIndex100 = 0\n  let bracketIndex101 = 0\n  let bracketIndex102 = 0\n  let bracketIndex103 = 0\n  let bracketIndex104 = 0\n  let bracketIndex105 = 0\n  let bracketIndex106 = 0\n  let bracketIndex107 = 0\n  let bracketIndex108 = 0\n  let bracketIndex109 = 0\n  let bracketIndex110 = 0\n  let bracketIndex111 = 0\n  let bracketIndex112 = 0\n  let bracketIndex113 = 0\n  let bracketIndex114 = 0\n  let bracketIndex115 = 0\n  let bracketIndex116 = 0\n  let bracketIndex117 = 0\n  let bracketIndex118 = 0\n  let bracketIndex119 = 0\n  let bracketIndex120 = 0\n  let bracketIndex121 = 0\n  let bracketIndex122 = 0\n  let bracketIndex123 = 0\n  let bracketIndex124 = 0\n  let bracketIndex125 = 0\n  let bracketIndex126 = 0\n  let bracketIndex127 = 0\n  let bracketIndex128 = 0\n  let bracketIndex129 = 0\n  let bracketIndex130 = 0\n  let bracketIndex131 = 0\n  let bracketIndex132 = 0\n  let bracketIndex133 = 0\n  let bracketIndex134 = 0\n  let bracketIndex135 = 0\n  let bracketIndex136 = 0\n  let bracketIndex137 = 0\n  let bracketIndex138 = 0\n  let bracketIndex139 = 0\n  let bracketIndex140 = 0\n  let bracketIndex141 = 0\n  let bracketIndex142 = 0\n  let bracketIndex143 = 0\n  let bracketIndex144 = 0\n  let bracketIndex145 = 0\n  let bracketIndex146 = 0\n  let bracketIndex147 = 0\n  let bracketIndex148 = 0\n  let bracketIndex149 = 0\n  let bracketIndex150 = 0\n  let bracketIndex151 = 0\n  let bracketIndex152 = 0\n  let bracketIndex153 = 0\n  let bracketIndex154 = 0\n  let bracketIndex155 = 0\n  let bracketIndex156 = 0\n  let bracketIndex157 = 0\n  let bracketIndex158 = 0\n  let bracketIndex159 = 0\n  let bracketIndex160 = 0\n  let bracketIndex161 = 0\n  let bracketIndex162 = 0\n  let bracketIndex163 = 0\n  let bracketIndex164 = 0\n  let bracketIndex165 = 0\n  let bracketIndex166 = 0\n  let bracketIndex167 = 0\n  let bracketIndex168 = 0\n  let bracketIndex169 = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  const lastChar = txt[txt.length - 1];\n  return (\n    (lastChar >= 'a' && lastChar <= 'z') ||\n    (lastChar >= 'A' && lastChar <= 'Z') ||\n    (lastChar ==='')\n  );\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLen = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let result = 0;\n  while (i < arrLen) {\n    if (arr[i] < arr[i - 1]) {\n      temp = arr[i];\n      arr[i] = arr[i - 1];\n      arr[i - 1] = temp;\n      result = -1;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t .\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t.\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  const max = lst.reduce((max, num) => {\n    if (num > max) {\n      return num;\n    }\n    return max;\n  }, -Infinity);\n  const min = lst.reduce((min, num) => {\n    if (num < min) {\n      return num;\n    }\n    return min;\n  }, Infinity);\n  return [max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be . or ,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be. or,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n  if (a == null || b == null) {\n    return null;\n  }\n  if (a.length == 0 || b.length == 0) {\n    return null;\n  }\n  if (a.length!= b.length) {\n    return null;\n  }\n  if (a.length == 1) {\n    return a[0] == b[0]? a[0] : null;\n  }\n  if (a.length == 2) {\n    return a[0] == b[0] && a[1] == b[1]? a[0] : null;\n  }\n  if (a.length == 3) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2]? a[0] : null;\n  }\n  if (a.length == 4) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3]? a[0] : null;\n  }\n  if (a.length == 5) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4]? a[0] : null;\n  }\n  if (a.length == 6) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5]? a[0] : null;\n  }\n  if (a.length == 7) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6]? a[0] : null;\n  }\n  if (a.length == 8) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7]? a[0] : null;\n  }\n  if (a.length == 9) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8]? a[0] : null;\n  }\n  if (a.length == 10) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8] && a[9] == b[9]? a[0] : null;\n  }\n  if (a.length == 11) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8] && a[9] == b[9] && a[10] == b[10]? a[0] : null;\n  }\n  if (a.length == 12) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8] && a[9] == b[9] && a[10] == b[10] && a[11] == b[11]? a[0] : null;\n  }\n  if (a.length == 13) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8] && a[9] == b[9] && a[10] == b[10] && a[11] == b[11] && a[12] == b[12]? a[0] : null;\n  }\n  if (a.length == 14) {\n    return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 == 0) {\n    return n % 4 == 0;\n  }\n  return false;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! * ...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! *...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The function should receive a positive integer as input');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  }\n  return prefixes;\n};\n\n/**\n  * Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let i = 1;\n  while (i < string.length) {\n    prefixes = prefixes.concat(prefixes.map((p) => p + string.charAt(i)));\n    i++;\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (text.length < 2) {\n    return text;\n  }\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText2 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText3 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText4 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText5 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText6 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText7 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText8 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText9 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText10 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText11 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText12 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText13 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText14 = (text) => {\n  let newText = text.replace(/[^\\w\\s]/g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"_\");\n  if (newText2.length > newText.length) {\n    newText = newText2;\n  }\n  return newText;\n};\n\nconst getText15 = (text) => {\n  let newText = text.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a fu ncti on whi c h take s a strin g representing a file 's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on whi c h take s a strin g representing a file's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_arr = file_name.split(\".\");\n  let file_name_arr_length = file_name_arr.length;\n  let file_name_arr_substring = file_name_arr[file_name_arr_length - 1];\n  let file_name_arr_substring_length = file_name_arr_substring.length;\n  let file_name_arr_substring_letter = file_name_arr_substring.charAt(0);\n  let file_name_arr_substring_letter_lowercase = file_name_arr_substring_letter.toLowerCase();\n  let file_name_arr_substring_letter_uppercase = file_name_arr_substring_letter.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase = file_name_arr_substring_letter_uppercase.toLowerCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_uppercase_lowercase.toUpperCase();\n  let file_name_arr_substring_letter_uppercase_lowercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase_uppercase = file_name_arr_substring_letter_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n  if(x === n) return true;\n  if(x === \"0\") return false;\n  if(x.length === 0) return false;\n  if(n.length === 0) return false;\n  if(x.length!== n.length) return false;\n  if(x.length === 1) return simplify(x[0], n[0]);\n  if(x[0] === \"0\") return simplify(x[1], n[1]);\n  if(x[0] === \"1\") return simplify(x[1], n[1]);\n  if(x[0] === \"2\") return simplify(x[1], n[1]);\n  if(x[0] === \"3\") return simplify(x[1], n[1]);\n  if(x[0] === \"4\") return simplify(x[1], n[1]);\n  if(x[0] === \"5\") return simplify(x[1], n[1]);\n  if(x[0] === \"6\") return simplify(x[1], n[1]);\n  if(x[0] === \"7\") return simplify(x[1], n[1]);\n  if(x[0] === \"8\") return simplify(x[1], n[1]);\n  if(x[0] === \"9\") return simplify(x[1], n[1]);\n  if(x[0] === \"10\") return simplify(x[1], n[1]);\n  if(x[0] === \"11\") return simplify(x[1], n[1]);\n  if(x[0] === \"12\") return simplify(x[1], n[1]);\n  if(x[0] === \"13\") return simplify(x[1], n[1]);\n  if(x[0] === \"14\") return simplify(x[1], n[1]);\n  if(x[0] === \"15\") return simplify(x[1], n[1]);\n  if(x[0] === \"16\") return simplify(x[1], n[1]);\n  if(x[0] === \"17\") return simplify(x[1], n[1]);\n  if(x[0] === \"18\") return simplify(x[1], n[1]);\n  if(x[0] === \"19\") return simplify(x[1], n[1]);\n  if(x[0] === \"20\") return simplify(x[1], n[1]);\n  if(x[0] === \"21\") return simplify(x[1], n[1]);\n  if(x[0] === \"22\") return simplify(x[1], n[1]);\n  if(x[0] === \"23\") return simplify(x[1], n[1]);\n  if(x[0] === \"24\") return simplify(x[1], n[1]);\n  if(x[0] === \"25\") return simplify(x[1], n[1]);\n  if(x[0] === \"26\") return simplify(x[1], n[1]);\n  if(x[0] === \"27\") return simplify(x[1], n[1]);\n  if(x[0] === \"28\") return simplify(x[1], n[1]);\n  if(x[0] === \"29\") return simplify(x[1], n[1]);\n  if(x[0] === \"30\") return simplify(x[1], n[1]);\n  if(x[0] === \"31\") return simplify(x[1], n[1]);\n  if(x[0] === \"32\") return simplify(x[1], n[1]);\n  if(x[0] === \"33\") return simplify(x[1], n[1]);\n  if(x[0] === \"34\") return simplify(x[1], n[1]);\n  if(x[0] === \"35\") return simplify(x[1], n[1]);\n  if(x[0] === \"36\") return simplify(x[1], n[1]);\n  if(x[0] === \"37\") return simplify(x[1], n[1]);\n  if(x[0] === \"38\") return simplify(x[1], n[1]);\n  if(x[0] === \"39\") return simplify(x[1], n[1]);\n  if(x[0] === \"40\") return simplify(x[1], n[1]);\n  if(x[0] === \"41\") return simplify(x[1], n[1]);\n  if(x[0] === \"42\") return simplify(x[1], n[1]);\n  if(x[0] === \"43\") return simplify(x[1], n[1]);\n  if(x[0] === \"44\") return simplify(x[1], n[1]);\n  if(x[0] === \"45\") return simplify(x[1], n[1]);\n  if(x[0] === \"46\") return simplify(x[1], n[1]);\n  if(x[0] === \"47\") return simplify(x[1], n[1]);\n  if(x[0] === \"48\") return simplify(x[1], n[1]);\n  if(x[0] === \"49\") return simplify(x[1], n[1]);\n  if(x[0] === \"50\") return simplify(x[1], n[1]);\n  if(x[0] === \"51\") return simplify(x[1], n[1]);\n  if(x[0] === \"52\") return simplify(x[1], n[1]);\n  if(x[0] === \"53\") return simplify(x[1], n[1]);\n  if(x[0] === \"54\")", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits .\n  Note: if thereare sever al items w i th similar sum of their digi ts ,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0\n  let index = 0\n  let sorted = []\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum > 0) {\n      sorted.push(nums[i])\n      sum = sum % 10\n    }\n  }\n  return sorted\n}\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12]\n  console.log(orderByPoints(nums))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(i);\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        let sum = a[i] + a[j] + a[k];\n        if (sum % 3 === 0) {\n          max = Math.max(max, sum);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconst test = () => {\n  let n = 5;\n  console.log(getMaxTriples(n));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = []\n  let planet1Name = planet1.toLowerCase()\n  let planet2Name = planet2.toLowerCase()\n  let planet1Orbit = getOrbit(planet1Name)\n  let planet2Orbit = getOrbit(planet2Name)\n  let planet1OrbitDistance = getOrbitDistance(planet1Name)\n  let planet2OrbitDistance = getOrbitDistance(planet2Name)\n  let planet1OrbitDistanceBetween = getOrbitDistanceBetween(planet1Name)\n  let planet2OrbitDistanceBetween = getOrbitDistanceBetween(planet2Name)\n  let planet1OrbitDistanceBetweenSorted = getOrbitDistanceBetweenSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSorted = getOrbitDistanceBetweenSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSorted = getOrbitDistanceBetweenSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSorted = getOrbitDistanceBetweenSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet2Name)\n  let planet1OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted(planet1Name)\n  let planet2OrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = getOrbitDistanceBetweenSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedS", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = 0;\n  for (let i = 0; i < lst_sorted.length; i++) {\n    sum += lst_sorted[i].length;\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sum = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sort_sum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sum_sum = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sort_sum_sum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sort_sum_sum_sum = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sort_sum_sum_sum_sum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sort_sum_sum_sum_sum_sum = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sort_sum_sum_sum_sum_sum_sum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sort_sum_sum_sum_sum_sum_sum_sum = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sort_sum_sum_sum_sum_sum_sum_sum_sum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sort_sum_sum_sum_sum_sum_sum_sum_sum_sum = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\nconst list_sort_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = (lst) => {\n  const lst_sorted = lst.sort((a, b) => a.length - b.length);\n  return lst_sorted;\n};\n\nconst list_sort_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str.slice(0, -1)\n}\n\n/*\n  Return as trin g cont a iningspace-del", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  }\n  return x;\n};\n\nmodule.exports = xOrY;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd . Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd. Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference = (lst ) => {\n  let sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match . \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match. \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.map(score => score.score);\n  let guesses = game.map(guess => guess.guess);\n  let result = [];\n  let i = 0;\n  while (i < scores.length) {\n    let guess = guesses[i];\n    let score = scores[i];\n    let diff = Math.abs(guess - score);\n    if (guess === score) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions . \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions. \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let extension_name_lower = '';\n  let extension_name_upper = '';\n  let extension_name_lower_upper = '';\n  let extension_name_lower_upper_lower = '';\n  let extension_name_lower_upper_upper = '';\n  let extension_name_lower_upper_lower_upper = '';\n  let extension_name_lower_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_lower_upper_upper_upper_upper_upper_upper = '';\n  let extension_name_lower_upper_upper_upper_upper_upper_upper_upper_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are giv en 2  words .  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are giv en 2  words.  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = {\n  evenOddCount\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g ,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanpassed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle , false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle, false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const ab = a * b;\n  const ac = a * c;\n  const bc = b * c;\n  const s = (ab + ac + bc) / 2;\n  const t = (a2 + b2 + c2) / 2;\n  const u = (a2 + b2 + c2) / 2;\n  const v = (a2 + b2 + c2) / 2;\n  const w = (a2 + b2 + c2) / 2;\n  const x = (a2 + b2 + c2) / 2;\n  const y = (a2 + b2 + c2) / 2;\n  const z = (a2 + b2 + c2) / 2;\n  const area = (s * t - s * u - t * v + t * x + u * v - u * y - v * z + v * w + x * w - y * z + z * w) / 2;\n  return area > 0;\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\" ,\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\",\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax2 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax3 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax4 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax5 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax6 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax7 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax8 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax9 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax10 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax11 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax12 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax13 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax14 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax15 =  (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n}\n\nconst findMax16 =  (words) => {\n  let max = words[0];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) {\n    throw new Error('Number should be between 0 and 1000');\n  }\n  if (need < 0 || need > 1000) {\n    throw new Error('Need should be between 0 and 1000');\n  }\n  if (remaining < 0 || remaining > 1000) {\n    throw new Error('Remaining should be between 0 and 1000');\n  }\n\n  const result = [];\n  let left = number;\n  let total = 0;\n  while (left > 0) {\n    total += Math.min(left, need);\n    result.push(total);\n    left -= need;\n  }\n  result.push(total);\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a st ring , find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let countChar = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i + 1]) {\n      countChar++;\n    } else {\n      countChar = 1;\n    }\n    count++;\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    if (operator[i] === '+') {\n      result += operand[i];\n    } else if (operator[i] === '-') {\n      result -= operand[i];\n    } else if (operator[i] === '*') {\n      result *= operand[i];\n    } else if (operator[i] === '/') {\n      result /= operand[i];\n    } else if (operator[i] === '//') {\n      result = result // operand[i];\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = [\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n];\n\ntest.forEach(function (testCase) {\n  console.log(`${testCase[0]} ${doAlgebra(testCase[1], testCase[2])}`);\n});\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  let str = s.toLowerCase();\n  let strLen = str.length;\n  let i = 0;\n  while (i < strLen) {\n    let letter = str.charAt(i);\n    if (isLetter(letter)) {\n      result += reverseCase(letter);\n    } else {\n      result += letter;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isLetter = (letter) => {\n  return letter >= 'a' && letter <= 'z';\n};\n\nconst reverseCase = (letter) => {\n  if (letter >= 'a' && letter <= 'z') {\n    return letter.toUpperCase();\n  } else {\n    return letter;\n  }\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a st ring  'text ' , retu rn its md 5 hash equivalent str ing.\n  If 'text '  is an empty string , returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  'text ', retu rn its md 5 hash equivalent str ing.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music = music_string.split('').map((note) => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music;\n};\n\nmodule.exports = {\n  parseMusic\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g . Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g. Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  let len = string.length\n  while (index < len) {\n    if (string.substr(index, substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero ' to 'nine'.\n V alid choices are 'z ero', 'one', 'two', ' three', 'fou r ', 'five', 'six ', 'seven' ,  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split('').sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let num = number;\n  let decimals = 0;\n  while (num >= 1) {\n    num = num / 10;\n    decimals++;\n  }\n  return num;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const minIndex = numbers.indexOf(min);\n  const maxIndex = numbers.indexOf(max);\n  const minIndex2 = numbers.indexOf(min);\n  const maxIndex2 = numbers.indexOf(max);\n  const min2 = numbers[minIndex2];\n  const max2 = numbers[maxIndex2];\n  const min2Index = numbers.indexOf(min2);\n  const max2Index = numbers.indexOf(max2);\n  const min2Index2 = numbers.indexOf(min2);\n  const max2Index2 = numbers.indexOf(max2);\n  const min2Index3 = numbers.indexOf(min2);\n  const max2Index3 = numbers.indexOf(max2);\n  const min2Index4 = numbers.indexOf(min2);\n  const max2Index4 = numbers.indexOf(max2);\n  const min2Index5 = numbers.indexOf(min2);\n  const max2Index5 = numbers.indexOf(max2);\n  const min2Index6 = numbers.indexOf(min2);\n  const max2Index6 = numbers.indexOf(max2);\n  const min2Index7 = numbers.indexOf(min2);\n  const max2Index7 = numbers.indexOf(max2);\n  const min2Index8 = numbers.indexOf(min2);\n  const max2Index8 = numbers.indexOf(max2);\n  const min2Index9 = numbers.indexOf(min2);\n  const max2Index9 = numbers.indexOf(max2);\n  const min2Index10 = numbers.indexOf(min2);\n  const max2Index10 = numbers.indexOf(max2);\n  const min2Index11 = numbers.indexOf(min2);\n  const max2Index11 = numbers.indexOf(max2);\n  const min2Index12 = numbers.indexOf(min2);\n  const max2Index12 = numbers.indexOf(max2);\n  const min2Index13 = numbers.indexOf(min2);\n  const max2Index13 = numbers.indexOf(max2);\n  const min2Index14 = numbers.indexOf(min2);\n  const max2Index14 = numbers.indexOf(max2);\n  const min2Index15 = numbers.indexOf(min2);\n  const max2Index15 = numbers.indexOf(max2);\n  const min2Index16 = numbers.indexOf(min2);\n  const max2Index16 = numbers.indexOf(max2);\n  const min2Index17 = numbers.indexOf(min2);\n  const max2Index17 = numbers.indexOf(max2);\n  const min2Index18 = numbers.indexOf(min2);\n  const max2Index18 = numbers.indexOf(max2);\n  const min2Index19 = numbers.indexOf(min2);\n  const max2Index19 = numbers.indexOf(max2);\n  const min2Index20 = numbers.indexOf(min2);\n  const max2Index20 = numbers.indexOf(max2);\n  const min2Index21 = numbers.indexOf(min2);\n  const max2Index21 = numbers.indexOf(max2);\n  const min2Index22 = numbers.indexOf(min2);\n  const max2Index22 = numbers.indexOf(max2);\n  const min2Index23 = numbers.indexOf(min2);\n  const max2Index23 = numbers.indexOf(max2);\n  const min2Index24 = numbers.indexOf(min2);\n  const max2Index24 = numbers.indexOf(max2);\n  const min2Index25 = numbers.indexOf(min2);\n  const max2Index25 = numbers.indexOf(max2);\n  const min2Index26 = numbers.indexOf(min2);\n  const max2Index26 = numbers.indexOf(max2);\n  const min2Index27 = numbers.indexOf(min2);\n  const max2Index27 = numbers.indexOf(max2);\n  const min2Index28 = numbers.indexOf(min2);\n  const max2Index28 = numbers.indexOf(max2);\n  const min2Index29 = numbers.indexOf(min2);\n  const max2Index29 = numbers.indexOf(max2);\n  const min2Index30 = numbers.indexOf(min2);\n  const max2Index30 = numbers.indexOf(max2);\n  const min2Index31 = numbers.indexOf(min2);\n  const max2Index31 = numbers.indexOf(max2);\n  const min2Index32 = numbers.indexOf(min2);\n  const max2Index32 = numbers.indexOf(max2);\n  const min2Index33 = numbers.indexOf(min2);\n  const max2Index33 = numbers.indexOf(max2);\n  const min2Index34 = numbers.indexOf(min2);\n  const max2Index34 = numbers.indexOf(max2);\n  const min2Index35 = numbers.indexOf(min2);\n  const max2Index35 = numbers.indexOf(max2);\n  const min2Index36 = numbers.indexOf(min2);\n  const max2Index36 = numbers.indexOf(max2);\n  const min2Index37 = numbers.indexOf(min2);\n  const max2Index37 = numbers.indexOf(max2);\n  const min2Index38 = numbers.indexOf(min2);\n  const max2Index38 =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number * scale;\n  });\n};\n\nexport default rescaleToUnit;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for strings\n * @param {Array} values\n * @returns {Array}\n */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for booleans\n * @param {Array} values\n * @returns {Array}\n */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for objects\n * @param {Array} values\n * @returns {Array}\n */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for null\n * @param {Array} values\n * @returns {Array}\n */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null || value === null || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null || value === null || value === null || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value === null || value === null || value === null || value === null || value === null || value === null || value === null || value === null;\n  });\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for undefined\n * @param {Array} values\n * @returns {Array}\n */\nconst filterUndefinedOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNullOrNull = (values) => {\n  return values.filter((value) => {\n    return value === undefined || value === null || value", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen2 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen3 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen4 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen5 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen6 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen7 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen8 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen9 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen10 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen11 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen12 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen13 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen14 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen15 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen16 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen17 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen18 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen19 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen20 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen21 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.\n  @param {string} string\n  @return {number}\n  */\nconst strlen22 = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a string.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a give n nu mber n ,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a give n nu mber n,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor2 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor3 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor4 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor5 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor6 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor7 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor8 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor9 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor10 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor11 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor12 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor13 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor14 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor15 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor16 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma = i;\n    }\n    if (sma % i === 0) {\n      return sma;\n    }\n  }\n  return sma;\n};\n\nconst largestDivisor17 = (n) => {\n  let sma = 0;\n  for (let i = 1; i <= n; i++) {\n    if (sma < i) {\n      sma =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let lis = [];\n  let m = 2;\n  let c = 1;\n  while (m <= n) {\n    if (n % m === 0) {\n      lis.push(m);\n      n /= m;\n      c++;\n    }\n    m++;\n  }\n  return lis;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  if (string === null || string === undefined) {\n    return null;\n  }\n  const result = string.toLowerCase();\n  for (let i = 0; i < string.length; i++) {\n    const c = string[i];\n    if (c >= 'a' && c <= 'z') {\n      result = result.replace(c, (c - 32).toUpperCase());\n    }\n  }\n  return result;\n};\n\nexport default flipCase;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, s) => acc + s, '');\n};\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('Hello')\n  ['Hello']\n  >>> stringToWords('Hello, world')\n  ['Hello', 'world']\n  >>> stringToWords('Hello, world, how are you?')\n  ['Hello', 'world', 'how', 'are', 'you?']\n  */\nconst stringToWords = (str) => {\n  if (str === '') {\n    return [];\n  }\n  return str.split(/[,\\s]+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString = (words) => {\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString2 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString3 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString4 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString5 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString6 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString7 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString8 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString9 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString10 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString11 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString12 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString13 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString14 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString15 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString16 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world, how are you?'\n  */\nconst wordsToString17 = (words) => {\n  return words.join(' ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world', 'how', 'are', 'you?'])\n  'Hello, world,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefix) === 0? [strings[0]] : [];\n  }\n  const prefixLength = prefix.length;\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter aninpu t list of str ings only  for ones that startwith a given pr fix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        result.push(strings[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Filter aninpu t list of str ings only  for ones that startwith a given pr fix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithIndex = (strings, prefixes, index) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        result.push(strings[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Filter aninpu t list of str ings only  for ones that startwith a given pr fix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithIndexes = (strings, prefixes, indexes) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        result.push(strings[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Filter aninpu t list of str ings only  for ones that startwith a given pr fix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithIndexesAndLength = (strings, prefixes, indexes, length) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        result.push(strings[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Filter aninpu t list of str ings only  for ones that startwith a given pr fix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixesWithIndexesAndLengths = (strings, prefixes, indexes, lengths) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefixes[0]) === 0? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    for (let j = 0; j < prefixes.length; j++) {\n      if (strings[i].indexOf(prefixes[j]) === 0) {\n        result.push(strings[i]);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixes,\n  filterByPrefixesWithIndex,\n  filterByPrefixesWithIndexes,\n  filterByPrefixesWithIndexesAndLength,\n  filterByPrefixesWithIndexesAndLengths\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nconst zeroBalance = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\nconst isBalanced = (operations) => {\n  return aboveZero(operations) && belowZero(operations) && zeroBalance(operations);\n};\n\nmodule.exports = {\n  aboveZero,\n  belowZero,\n  isBalanced\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only  neg itiven umbers  in the l ist.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositive2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only  neg itiven umbers  in the l ist.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getPositive3 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Return only  neg itiven umbers  in the l ist.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative3 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getPositive2,\n  getNegative2,\n  getPositive3,\n  getNegative3\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/31", "prompt": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nmodule.exports = {\n  isPrime\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 + .... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = xs[0];\n  let xs = xs.slice(1);\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item * x;\n  });\n  let xs = xs.map((item) => {\n    return item", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return l4;\n};\n\nconst sortFourth = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return l4;\n};\n\nconst sortFifth = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return l4;\n};\n\nconst sortSixth = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return l4;\n};\n\nconst sortSeventh = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return l4;\n};\n\nconst sortEigth = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return l4;\n};\n\nconst sortNinth = (l) => {\n  let l2 = l.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l3 = l2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  let l4 = l3.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length && l[j] === l[i]) {\n        j++;\n      }\n      k = i;\n      while (k < j) {\n        l[k] = l[j];\n        k++;\n      }\n      i = j;\n    }\n  }\n  return lst;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement2 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement3 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement4 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement5 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement6 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement7 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement8 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement9 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement10 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement11 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement12 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement13 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement14 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement15 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement16 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxi = i;\n    }\n  }\n  return maxi;\n};\n\nconst maxElement17 = (l) => {\n  let max = l[0];\n  let maxi = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzz(i);\n    } else if (i % 3 === 0) {\n      buzz(i);\n    } else if (i % 5 === 0) {\n      fizz(i);\n    } else {\n      buzz(i);\n      fizz(i);\n    }\n    i++;\n  }\n};\n\nconsole.log(fizzBuzz(50));\nconsole.log(fizzBuzz(78));\nconsole.log(fizzBuzz(79));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      i++;\n    } else {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    }\n  }\n  return l;\n};\n\n/*\n  This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return l;\n};\n\n/*\n  This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return l;\n};\n\n/*\n  This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return l;\n};\n\n/*\n  This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return l;\n};\n\n/*\n  This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      l[i] = l[i] + 1;\n      l[j] = l[j] - 1;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return l;\n};\n\n/*\n  This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic2 = (s)=> {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic3 = (s)=> {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic4 = (s)=> {\n  var groups = [ ], groups2= [];\n  for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n  }\n  for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups2.push(group);\n  }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [ ], groups2= [];\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f(n);\n};\n\nconst primeFib17 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const f = (n) => {\n    if (n < 2) {\n      return n;\n    }\n    return f(n - 1) + f(n - 2);\n  };\n  return f", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_ = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_6 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_7 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_8 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_9 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_10 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_11 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_12 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_13 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_14 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_15 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_16 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_17 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_18 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_19 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_20 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_21 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nconst triplesSumToZero_22 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other .  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\nconst test = () => {\n  const l = [1, 2, 3];\n  console.log(incrList(l));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] === 0) {\n      sum += l[i + 1];\n      i += 2;\n    } else {\n      return false;\n    }\n  }\n  return sum === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < 0) {\n    return '-' + changeBase(-x, base);\n  }\n  let res = '';\n  while (x) {\n    res = base.charAt(x % base) + res;\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\nmodule.exports = changeBase;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle .\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea3 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea5 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea6 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea7 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea8 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea9 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea10 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea11 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea12 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea13 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea14 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea15 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea16 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea17 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea18 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea19 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea20 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea21 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea22 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea23 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea24 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea25 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea26 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea27 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea28 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea29 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea30 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea31 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea32 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea33 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea34 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea35 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea36 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea37 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea38 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea39 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea40 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea41 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea42 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea43 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea44 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea45 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea46 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea47 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea48 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea49 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea50 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea51 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea52 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea53 = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\nconst triangleArea54 = (a, h) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib4_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4_recursive(n - 1) + fib4_recursive(n - 2) + fib4_recursive(n - 3) + fib4_recursive(n - 4);\n};\n\nconst fib4_iterative = (n) => {\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\nconst fib4_iterative_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\nconsole.log(fib4(10));\nconsole.log(fib4_recursive(10));\nconsole.log(fib4_iterative(10));\nconsole.log(fib4_iterative_recursive(10));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('median requires at least one element');\n  }\n  let mid = l.length / 2;\n  let left = l.slice(0, mid);\n  let right = l.slice(mid);\n  let median = (left.length + right.length) / 2;\n  return left.length > right.length? left[median] : right[median];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (first!== last) {\n      if (first < last) {\n        first = text.charAt(i++);\n      } else {\n        last = text.charAt(j--);\n      }\n    } else {\n      if (first < last) {\n        first = text.charAt(i++);\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    throw new Error('n must be positive')\n  }\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return p\n  }\n  if (n === 2) {\n    return p % 2\n  }\n  if (n % 2 === 0) {\n    return modp(n - 1, p)\n  }\n  return modp(n - 1, p) * p % p\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse8 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse9 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse10 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += delimeter\n  }\n  return res\n}\n\n/*\n  Insert an umbe r 'del i meter'  between every two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse11 = (numbers, delimeter) => {\n  let i = 0\n  let res = []\n  while (i < numbers.length) {\n    res.push(numbers[i])\n    i += del", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode = (s) => {\n  return s.split(\"\").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_shift = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_shift_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/*\n  returns a string with the same length as input string but with the same characters\n  in the same order.\n  */\nconst d ecode_reverse_shift_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeSh(s).replace(/[", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      result += text[i];\n    } else {\n      result += text[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  removeVowels\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l < t;\n};\n\n/*Return true if all nu m bers i n the lis t l are above thresho ld t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l > t;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold2 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold3 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold4 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold5 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold6 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold7 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold8 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold9 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold10 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold11 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 150)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 150)\n  true\n  */\nconst betweenThreshold12 = (l, t, u) => {\n  return l >= t && l <= u;\n};\n\n/*Return true if all nu m bers i n the lis t l are between thresho ld t and thresho ud t.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two num bers  x and y\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars15 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th  Fib onacci number .\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*Return n-th  Fib onacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci2(n - 1) + fibonacci2(n - 2);\n};\n\nconst fibonacci3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci3(n - 1) + fibonacci3(n - 2);\n};\n\nconst fibonacci4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci4(n - 1) + fibonacci4(n - 2);\n};\n\nconst fibonacci5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci5(n - 1) + fibonacci5(n - 2);\n};\n\nconst fibonacci6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci6(n - 1) + fibonacci6(n - 2);\n};\n\nconst fibonacci7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci7(n - 1) + fibonacci7(n - 2);\n};\n\nconst fibonacci8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci8(n - 1) + fibonacci8(n - 2);\n};\n\nconst fibonacci9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci9(n - 1) + fibonacci9(n - 2);\n};\n\nconst fibonacci10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci10(n - 1) + fibonacci10(n - 2);\n};\n\nconst fibonacci11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci11(n - 1) + fibonacci11(n - 2);\n};\n\nconst fibonacci12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci12(n - 1) + fibonacci12(n - 2);\n};\n\nconst fibonacci13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci13(n - 1) + fibonacci13(n - 2);\n};\n\nconst fibonacci14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci14(n - 1) + fibonacci14(n - 2);\n};\n\nconst fibonacci15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci15(n - 1) + fibonacci15(n - 2);\n};\n\nconst fibonacci16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci16(n - 1) + fibonacci16(n - 2);\n};\n\nconst fibonacci17 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci17(n - 1) + fibonacci17(n - 2);\n};\n\nconst fibonacci18 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci18(n - 1) + fibonacci18(n - 2);\n};\n\nconst fibonacci19 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci19(n - 1) + fibonacci19(n - 2);\n};\n\nconst fibonacci20 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci20(n - 1) + fibonacci20(n - 2);\n};\n\nconst fibonacci21 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci21(n - 1) + fibonacci21(n - 2);\n};\n\nconst fibonacci22 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci22(n - 1) + fibonacci22(n - 2);\n};\n\nconst fibonacci23 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci23(n - 1) + fibonacci23(n - 2);\n};\n\nconst fibonacci24 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci24(n - 1) + fibonacci24(n - 2);\n};\n\nconst fibonacci25 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci25(n - 1) + fibonacci25(n - 2);\n};\n\nconst fibonacci26 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci26(n - 1) + fibonacci26(n - 2);\n};\n\nconst fibonacci27 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci27(n - 1) + fibonacci", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length < 2) {\n    return true;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) {\n    return [];\n  }\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1;\n  }\n  if (l === l2Len) {\n    return l2;\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (l === l1Len) {\n    return l1.slice(0, l);\n  }\n  if (l === l2Len) {\n    return l2.slice(0, l);\n  }\n  if (l === 0) {\n    return [];\n  }\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n /= i;\n      i = 2;\n    } else {\n      i++;\n    }\n  }\n  return i;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es .\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_array = paren_string.split(' ');\n  let paren_string_array_length = paren_string_array.length;\n  let paren_string_array_index = 0;\n  let paren_string_array_index_end = 0;\n  let paren_string_array_index_end_end = 0;\n  let paren_string_array_index_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 + ....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs_ = xs.slice(0);\n  const xs_1 = xs_.slice(0);\n  const xs_2 = xs_.slice(0);\n  const xs_3 = xs_.slice(0);\n  const xs_4 = xs_.slice(0);\n  const xs_5 = xs_.slice(0);\n  const xs_6 = xs_.slice(0);\n  const xs_7 = xs_.slice(0);\n  const xs_8 = xs_.slice(0);\n  const xs_9 = xs_.slice(0);\n  const xs_10 = xs_.slice(0);\n  const xs_11 = xs_.slice(0);\n  const xs_12 = xs_.slice(0);\n  const xs_13 = xs_.slice(0);\n  const xs_14 = xs_.slice(0);\n  const xs_15 = xs_.slice(0);\n  const xs_16 = xs_.slice(0);\n  const xs_17 = xs_.slice(0);\n  const xs_18 = xs_.slice(0);\n  const xs_19 = xs_.slice(0);\n  const xs_20 = xs_.slice(0);\n  const xs_21 = xs_.slice(0);\n  const xs_22 = xs_.slice(0);\n  const xs_23 = xs_.slice(0);\n  const xs_24 = xs_.slice(0);\n  const xs_25 = xs_.slice(0);\n  const xs_26 = xs_.slice(0);\n  const xs_27 = xs_.slice(0);\n  const xs_28 = xs_.slice(0);\n  const xs_29 = xs_.slice(0);\n  const xs_30 = xs_.slice(0);\n  const xs_31 = xs_.slice(0);\n  const xs_32 = xs_.slice(0);\n  const xs_33 = xs_.slice(0);\n  const xs_34 = xs_.slice(0);\n  const xs_35 = xs_.slice(0);\n  const xs_36 = xs_.slice(0);\n  const xs_37 = xs_.slice(0);\n  const xs_38 = xs_.slice(0);\n  const xs_39 = xs_.slice(0);\n  const xs_40 = xs_.slice(0);\n  const xs_41 = xs_.slice(0);\n  const xs_42 = xs_.slice(0);\n  const xs_43 = xs_.slice(0);\n  const xs_44 = xs_.slice(0);\n  const xs_45 = xs_.slice(0);\n  const xs_46 = xs_.slice(0);\n  const xs_47 = xs_.slice(0);\n  const xs_48 = xs_.slice(0);\n  const xs_49 = xs_.slice(0);\n  const xs_50 = xs_.slice(0);\n  const xs_51 = xs_.slice(0);\n  const xs_52 = xs_.slice(0);\n  const xs_53 = xs_.slice(0);\n  const xs_54 = xs_.slice(0);\n  const xs_55 = xs_.slice(0);\n  const xs_56 = xs_.slice(0);\n  const xs_57 = xs_.slice(0);\n  const xs_58 = xs_.slice(0);\n  const xs_59 = xs_.slice(0);\n  const xs_60 = xs_.slice(0);\n  const xs_61 = xs_.slice(0);\n  const xs_62 = xs_.slice(0);\n  const xs_63 = xs_.slice(0);\n  const xs_64 = xs_.slice(0);\n  const xs_65 = xs_.slice(0);\n  const xs_66 = xs_.slice(0);\n  const xs_67 = xs_.slice(0);\n  const xs_68 = xs_.slice(0);\n  const xs_69 = xs_.slice(0);\n  const xs_70 = xs_.slice(0);\n  const xs_71 = xs_.slice(0);\n  const xs_72 = xs_.slice(0);\n  const xs_73 = xs_.slice(0);\n  const xs_74 = xs_.slice(0);\n  const xs_75 = xs_.slice(0);\n  const xs_76 = xs_.slice(0);\n  const xs_77 = xs_.slice(0);\n  const xs_78 = xs_.slice(0);\n  const xs_79 = xs_.slice(0);\n  const xs_80 = xs_.slice(0);\n  const xs_81 = xs_.slice(0);\n  const xs_82 = xs_.slice(0);\n  const xs_83 = xs_.slice(0);\n  const xs_84 = xs_.slice(0);\n  const xs_85 = xs_.slice(0);\n  const xs_86 = xs_.slice(0);\n  const xs_87 = xs_.slice(0);\n  const xs_88 = xs_.slice(0);\n  const xs_89 = xs_.slice(0);\n  const xs_90 = xs_.slice(0);\n  const xs_91 = xs_.slice(0);\n  const xs_92 = xs_.slice(0);\n  const xs_93 = xs_.slice(0);\n  const x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3);\n};\n\nconst fibfib3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  return fibfib3(n - 1) + fibfib3(n - 2) + fibfib3(n - 3);\n};\n\nconst fibfib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibfib4(n - 1) + fibfib4(n - 2) + fibfib4(n - 3);\n};\n\nconst fibfib5 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  return fibfib5(n - 1) + fibfib5(n - 2) + fibfib5(n - 3);\n};\n\nconst fibfib6 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  return fibfib6(n - 1) + fibfib6(n - 2) + fibfib6(n - 3);\n};\n\nconst fibfib7 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  return fibfib7(n - 1) + fibfib7(n - 2) + fibfib7(n - 3);\n};\n\nconst fibfib8 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  if (n === 8) {\n    return 7;\n  }\n  return fibfib8(n - 1) + fibfib8(n - 2) + fibfib8(n - 3);\n};\n\nconst fibfib9 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  if (n === 8) {\n    return 7;\n  }\n  if (n === 9) {\n    return 8;\n  }\n  return fibfib9(n - 1) + fibfib9(n - 2) + fibfib9(n - 3);\n};\n\nconst fibfib10 = (n) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g .\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = \"aeiou\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits , return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits, return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const result = x;\n  if (shift < 0) {\n    result = x.reverse();\n    shift = -shift;\n  }\n  for (let i = 0; i < shift; i++) {\n    result = result.shiftRight(1);\n  }\n  return result.toString();\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomize = (min, max, step, randomize) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStep = (min, max, step, randomize, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStepAndRandomize = (min, max, step, randomize, step, randomize) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStepAndRandomizeWithStep = (min, max, step, randomize, step, randomize, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomize = (min, max, step, randomize, step, randomize, step, randomize) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomize = (min, max, step, randomize, step, randomize, step, randomize, step, randomize) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomize = (min, max, step, randomize, step, randomize, step, randomize, step, randomize, step, randomize) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAndRandomizeWithStepAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n// Task\n// Write a function that takes an array of strings and returns the sum of the numbers of the letters in each string\n// Examples:\n//      digitSum([\"\", \"abAB\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\"]) => 131\n//      digitSum([\"\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"helloE\"]) => 69\n//      digitSum([\"\", \"woArBld\"]) => 131\n//      digitSum([\"\", \"abcCd\"]) => 67\n//      digitSum([\"\", \"abcCd\", \"helloE\"]) => 67\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\"]) => 131\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\"]) => 153\n//      digitSum([\"\", \"abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaaXa\", \"aAaaa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\" ,120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\",120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const minIndex = arr.indexOf(min);\n  if (minIndex === -1) {\n    return res;\n  }\n  res.push(arr[minIndex]);\n  return res;\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list .\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list.\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let max_index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value ,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  if (minIndex < maxIndex) {\n    for (let i = minIndex; i < maxIndex; i++) {\n      result.push(lst[i]);\n    }\n    for (let i = minIndex; i < minIndex + 1; i++) {\n      result.push(lst[i]);\n    }\n    for (let i = maxIndex; i < maxIndex + 1; i++) {\n      result.push(lst[i]);\n    }\n  } else {\n    for (let i = minIndex; i < lst.length; i++) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  return area === 0? -1 : area;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  const max = q.reduce((a, b) => a + b, 0);\n  const sum = q.reduce((a, b) => a + b, 0);\n  if (sum > max) {\n    return false;\n  }\n  if (sum < max) {\n    return true;\n  }\n  return willItFly(q.slice(1), w);\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let change = arr[minIndex];\n  let nextChange = arr[minIndex];\n  while (nextChange!== change) {\n    change = nextChange;\n    nextChange = arr[minIndex];\n    for (let i = minIndex + 1; i < arr.length; i++) {\n      if (arr[i] < change) {\n        change = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let match = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      match++;\n      i++;\n      j++;\n    } else if (lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return match === len1 && match === len2? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases .\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases.\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 0) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===. ..\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase .\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===...\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexDigits = 0;\n  let decDigits = 0;\n  let decDigits2 = 0;\n  let decDigits3 = 0;\n  let decDigits4 = 0;\n  let decDigits5 = 0;\n  let decDigits6 = 0;\n  let decDigits7 = 0;\n  let decDigits8 = 0;\n  let decDigits9 = 0;\n  let decDigits10 = 0;\n  let decDigits11 = 0;\n  let decDigits12 = 0;\n  let decDigits13 = 0;\n  let decDigits14 = 0;\n  let decDigits15 = 0;\n  let decDigits16 = 0;\n  let decDigits17 = 0;\n  let decDigits18 = 0;\n  let decDigits19 = 0;\n  let decDigits20 = 0;\n  let decDigits21 = 0;\n  let decDigits22 = 0;\n  let decDigits23 = 0;\n  let decDigits24 = 0;\n  let decDigits25 = 0;\n  let decDigits26 = 0;\n  let decDigits27 = 0;\n  let decDigits28 = 0;\n  let decDigits29 = 0;\n  let decDigits30 = 0;\n  let decDigits31 = 0;\n  let decDigits32 = 0;\n  let decDigits33 = 0;\n  let decDigits34 = 0;\n  let decDigits35 = 0;\n  let decDigits36 = 0;\n  let decDigits37 = 0;\n  let decDigits38 = 0;\n  let decDigits39 = 0;\n  let decDigits40 = 0;\n  let decDigits41 = 0;\n  let decDigits42 = 0;\n  let decDigits43 = 0;\n  let decDigits44 = 0;\n  let decDigits45 = 0;\n  let decDigits46 = 0;\n  let decDigits47 = 0;\n  let decDigits48 = 0;\n  let decDigits49 = 0;\n  let decDigits50 = 0;\n  let decDigits51 = 0;\n  let decDigits52 = 0;\n  let decDigits53 = 0;\n  let decDigits54 = 0;\n  let decDigits55 = 0;\n  let decDigits56 = 0;\n  let decDigits57 = 0;\n  let decDigits58 = 0;\n  let decDigits59 = 0;\n  let decDigits60 = 0;\n  let decDigits61 = 0;\n  let decDigits62 = 0;\n  let decDigits63 = 0;\n  let decDigits64 = 0;\n  let decDigits65 = 0;\n  let decDigits66 = 0;\n  let decDigits67 = 0;\n  let decDigits68 = 0;\n  let decDigits69 = 0;\n  let decDigits70 = 0;\n  let decDigits71 = 0;\n  let decDigits72 = 0;\n  let decDigits73 = 0;\n  let decDigits74 = 0;\n  let decDigits75 = 0;\n  let decDigits76 = 0;\n  let decDigits77 = 0;\n  let decDigits78 = 0;\n  let decDigits79 = 0;\n  let decDigits80 = 0;\n  let decDigits81 = 0;\n  let decDigits82 = 0;\n  let decDigits83 = 0;\n  let decDigits84 = 0;\n  let decDigits85 = 0;\n  let decDigits86 = 0;\n  let decDigits87 = 0;\n  let decDigits88 = 0;\n  let decDigits89 = 0;\n  let decDigits90 = 0;\n  let decDigits91 = 0;\n  let decDigits92 = 0;\n  let decDigits93 = 0;\n  let decDigits94 = 0;\n  let decDigits95 = 0;\n  let decDigits96 = 0;\n  let decDigits97 = 0;\n  let decDigits98 = 0;\n  let decDigits99 = 0;\n  let decDigits100 = 0;\n  let decDigits101 = 0;\n  let decDigits102 = 0;\n  let decDigits103 = 0;\n  let decDigits104 = 0;\n  let decDigits105 = 0;\n  let decDigits106 = 0;\n  let decDigits107 = 0;\n  let decDigits108 = 0;\n  let decDigits109 = 0;\n  let decDigits110 = 0;\n  let decDigits111 = 0;\n  let decDigits112 = 0;\n  let decDigits113 = 0;\n  let decDigits114 = 0;\n  let decDigits115 = 0;\n  let decDigits116 = 0;\n  let decDigits117 = 0;\n  let decDigits118 = 0;\n  let decDigits119 = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number .Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db '  at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number.Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db' at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binary_string = \"\";\n  let binary_number = 0;\n  let binary_number_array = [];\n  let binary_number_array_length = 0;\n  let binary_number_array_length_max = 0;\n  let binary_number_array_length_min = 0;\n  let binary_number_array_length_max_minus_1 = 0;\n  let binary_number_array_length_min_minus_1 = 0;\n  let binary_number_array_length_max_minus_2 = 0;\n  let binary_number_array_length_min_minus_2 = 0;\n  let binary_number_array_length_max_minus_3 = 0;\n  let binary_number_array_length_min_minus_3 = 0;\n  let binary_number_array_length_max_minus_4 = 0;\n  let binary_number_array_length_min_minus_4 = 0;\n  let binary_number_array_length_max_minus_5 = 0;\n  let binary_number_array_length_min_minus_5 = 0;\n  let binary_number_array_length_max_minus_6 = 0;\n  let binary_number_array_length_min_minus_6 = 0;\n  let binary_number_array_length_max_minus_7 = 0;\n  let binary_number_array_length_min_minus_7 = 0;\n  let binary_number_array_length_max_minus_8 = 0;\n  let binary_number_array_length_min_minus_8 = 0;\n  let binary_number_array_length_max_minus_9 = 0;\n  let binary_number_array_length_min_minus_9 = 0;\n  let binary_number_array_length_max_minus_10 = 0;\n  let binary_number_array_length_min_minus_10 = 0;\n  let binary_number_array_length_max_minus_11 = 0;\n  let binary_number_array_length_min_minus_11 = 0;\n  let binary_number_array_length_max_minus_12 = 0;\n  let binary_number_array_length_min_minus_12 = 0;\n  let binary_number_array_length_max_minus_13 = 0;\n  let binary_number_array_length_min_minus_13 = 0;\n  let binary_number_array_length_max_minus_14 = 0;\n  let binary_number_array_length_min_minus_14 = 0;\n  let binary_number_array_length_max_minus_15 = 0;\n  let binary_number_array_length_min_minus_15 = 0;\n  let binary_number_array_length_max_minus_16 = 0;\n  let binary_number_array_length_min_minus_16 = 0;\n  let binary_number_array_length_max_minus_17 = 0;\n  let binary_number_array_length_min_minus_17 = 0;\n  let binary_number_array_length_max_minus_18 = 0;\n  let binary_number_array_length_min_minus_18 = 0;\n  let binary_number_array_length_max_minus_19 = 0;\n  let binary_number_array_length_min_minus_19 = 0;\n  let binary_number_array_length_max_minus_20 = 0;\n  let binary_number_array_length_min_minus_20 = 0;\n  let binary_number_array_length_max_minus_21 = 0;\n  let binary_number_array_length_min_minus_21 = 0;\n  let binary_number_array_length_max_minus_22 = 0;\n  let binary_number_array_length_min_minus_22 = 0;\n  let binary_number_array_length_max_minus_23 = 0;\n  let binary_number_array_length_min_minus_23 = 0;\n  let binary_number_array_length_max_minus_24 = 0;\n  let binary_number_array_length_min_minus_24 = 0;\n  let binary_number_array_length_max_minus_25 = 0;\n  let binary_number_array_length_min_minus_25 = 0;\n  let binary_number_array_length_max_minus_26 = 0;\n  let binary_number_array_length_min_minus_26 = 0;\n  let binary_number_array_length_max_minus_27 = 0;\n  let binary_number_array_length_min_minus_27 = 0;\n  let binary_number_array_length_max_minus_28 = 0;\n  let binary_number_array_length_min_minus_28 = 0;\n  let binary_number_array_length_max_minus_29 = 0;\n  let binary_number_array_length_min_minus_29 = 0;\n  let binary_number_array_length_max_minus_30 = 0;\n  let binary_number_array_length_min_minus_30 = 0;\n  let binary_number_array_length_max_minus_31 = 0;\n  let binary_number_array_length_min_minus_31 = 0;\n  let binary_number_array_length_max_minus_32 = 0;\n  let binary_number_array_length_min_minus_32 = 0;\n  let binary_number_array_length_max_minus_33 = 0;\n  let binary_number_array_length_min_minus_33 = 0;\n  let binary_number_array_length_max_minus_34 = 0;\n  let binary_number_array_length_min_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconsole.log(sumProduct([], 1))\nconsole.log(sumProduct2([], 1))\nconsole.log(sumProduct2([1, 2, 3, 4], 1))\nconsole.log(sumProduct2([1, 2, 3, 4], 2))\nconsole.log(sumProduct2([1, 2, 3, 4], 3))\nconsole.log(sumProduct2([1, 2, 3, 4], 4))\nconsole.log(sumProduct2([1, 2, 3, 4], 5))\nconsole.log(sumProduct2([1, 2, 3, 4], 6))\nconsole.log(sumProduct2([1, 2, 3, 4], 7))\nconsole.log(sumProduct2([1, 2, 3, 4], 8))\nconsole.log(sumProduct2([1, 2, 3, 4], 9))\nconsole.log(sumProduct2([1, 2, 3, 4], 10))\nconsole.log(sumProduct2([1, 2, 3, 4], 11))\nconsole.log(sumProduct2([1, 2, 3, 4], 12))\nconsole.log(sumProduct2([1, 2, 3, 4], 13))\nconsole.log(sumProduct2([1, 2, 3, 4], 14))\nconsole.log(sumProduct2([1, 2, 3, 4], 15))\nconsole.log(sumProduct2([1, 2, 3, 4], 16))\nconsole.log(sumProduct2([1, 2, 3, 4], 17))\nconsole.log(sumProduct2([1, 2, 3, 4], 18))\nconsole.log(sumProduct2([1, 2, 3, 4], 19))\nconsole.log(sumProduct2([1, 2, 3, 4], 20))\nconsole.log(sumProduct2([1, 2, 3, 4], 21))\nconsole.log(sumProduct2([1, 2, 3, 4], 22))\nconsole.log(sumProduct2([1, 2, 3, 4], 23))\nconsole.log(sumProduct2([1, 2, 3, 4], 24))\nconsole.log(sumProduct2([1, 2, 3, 4], 25))\nconsole.log(sumProduct2([1, 2, 3, 4], 26))\nconsole.log(sumProduct2([1, 2, 3, 4], 27))\nconsole.log(sumProduct2([1, 2, 3, 4], 28))\nconsole.log(sumProduct2([1, 2, 3, 4], 29))\nconsole.log(sumProduct2([1, 2, 3, 4], 30))\nconsole.log(sumProduct2([1, 2, 3, 4], 31))\nconsole.log(sumProduct2([1, 2, 3, 4], 32))\nconsole.log(sumProduct2([1, 2, 3, 4], 33))\nconsole.log(sumProduct2([1, 2, 3, 4], 34))\nconsole.log(sumProduct2([1, 2, 3, 4], 35))\nconsole.log(sumProduct2([1, 2, 3, 4], 36))\nconsole.log(sumProduct2([1, 2, 3, 4], 37))\nconsole.log(sumProduct2([1, 2, 3, 4], 38))\nconsole.log(sumProduct2([1, 2, 3, 4], 39))\nconsole.log(sumProduct2([1, 2, 3, 4], 40))\nconsole.log(sumProduct2([1, 2, 3, 4], 41))\nconsole.log(sumProduct2([1, 2, 3, 4], 42))\nconsole.log(sumProduct2([1, 2, 3, 4], 43))\nconsole.log(sumProduct2([1, 2, 3, 4], 44))\nconsole.log(sumProduct2([1, 2, 3, 4], 45))\nconsole.log(sumProduct2([1, 2, 3, 4], 46))\nconsole.log(sumProduct2([1, 2, 3, 4], 47))\nconsole.log(sumProduct2([1, 2, 3, 4], 48))\nconsole.log(sumProduct2([1, 2, 3, 4], 49))\nconsole.log(sumProduct2([1, 2, 3, 4], 50))\nconsole.log(sumProduct2([1, 2, 3, 4], 51))\nconsole.log(sumProduct2([1, 2, 3, 4], 52))\nconsole.log(sumProduct2([1, 2, 3, 4], 53))\nconsole.log(sumProduct2([1, 2, 3, 4], 54))\nconsole.log(sumProduct2([1, 2, 3, 4], 55))\nconsole.log(sumProduct2([1, 2, 3, 4], 56))\nconsole.log(sumProduct2([1, 2, 3, 4], 57))\nconsole.log(sumProduct2([1, 2, 3, 4], 58))\nconsole.log(sumProduct2([1, 2, 3, 4], 59))\nconsole.log(sumProduct2([1, 2, 3, 4], 60))\nconsole.log(sumProduct2([1, 2, 3, 4], 61))\nconsole.log(sumProduct2([1, 2, 3, 4], 62))\nconsole.log(sumProduct2([1, 2, 3, 4], 63))\nconsole.log(sumProduct2([1, 2, 3, 4], 64))\nconsole.log(sumProduct2([1, 2, 3, 4], 65))\nconsole.log(sumProduct2([1, 2, 3, 4], 66))\nconsole.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let prev = s[0];\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] === prev) {\n      count++;\n    } else {\n      count = 0;\n      prev = s[i];\n    }\n  }\n  return count >= 3 && s.split('').every((c) => c!== prev);\n};\n\nmodule.exports = isHappy;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = \"\";\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeSum = 0;\n  let gradeMax = 0;\n  let gradeMin = 0;\n  let gradeAverage = 0;\n  let gradeCountMax = 0;\n  let gradeCountMin = 0;\n  let gradeCountAverage = 0;\n  let gradeSumMax = 0;\n  let gradeSumMin = 0;\n  let gradeSumAverage = 0;\n  grades.forEach((grade) => {\n    gradeCount++;\n    gradeSum += grade;\n    if (grade > gradeMax) {\n      gradeMax = grade;\n    }\n    if (grade < gradeMin) {\n      gradeMin = grade;\n    }\n    if (gradeAverage < grade) {\n      gradeAverage = grade;\n    }\n    if (gradeCountMax < gradeCount) {\n      gradeCountMax = gradeCount;\n    }\n    if (gradeCountMin > gradeCount) {\n      gradeCountMin = gradeCount;\n    }\n    if (gradeSumMax < gradeSum) {\n      gradeSumMax = gradeSum;\n    }\n    if (gradeSumMin > gradeSum) {\n      gradeSumMin = gradeSum;\n    }\n    if (gradeSumAverage < gradeSum) {\n      gradeSumAverage = gradeSum;\n    }\n  });\n  let gradeAverageMax = gradeMax;\n  let gradeAverageMin = gradeMin;\n  let gradeAverageAverage = gradeAverage;\n  let gradeAverageMaxCount = gradeCountMax;\n  let gradeAverageMinCount = gradeCountMin;\n  let gradeAverageAverageCount = gradeCountAverage;\n  let gradeAverageMaxSum = gradeSumMax;\n  let gradeAverageMinSum = gradeSumMin;\n  let gradeAverageAverageSum = gradeSumAverage;\n  let gradeAverageMaxSumAverage = gradeSumAverage;\n  let gradeAverageMinSumAverage = gradeSumAverage;\n  let gradeAverageMaxCountAverage = gradeAverageMaxCount;\n  let gradeAverageMinCountAverage = gradeAverageMinCount;\n  let gradeAverageAverageCountAverage = gradeAverageAverageCount;\n  let gradeAverageMaxSumAverageAverage = gradeAverageMaxSumAverage;\n  let gradeAverageMinSumAverageAverage = gradeAverageMinSumAverage;\n  let gradeAverageMaxCountAverageAverage = gradeAverageMaxCountAverage;\n  let gradeAverageMinCountAverageAverage = gradeAverageMinCountAverage;\n  let gradeAverageMaxSumAverageAverageAverage = gradeAverageMaxSumAverageAverage;\n  let gradeAverageMinSumAverageAverageAverage = gradeAverageMinSumAverageAverage;\n  let letterGrade = \"\";\n  if (gradeAverageMax > 3.0) {\n    letterGrade = \"A+\";\n  } else if (gradeAverageMax > 2.7) {\n    letterGrade = \"A\";\n  } else if (gradeAverageMax > 2.3) {\n    letterGrade = \"A-\";\n  } else if (gradeAverageMax > 1.7) {\n    letterGrade = \"B+\";\n  } else if (gradeAverageMax > 1.3) {\n    letterGrade = \"B\";\n  } else if (gradeAverageMax > 0.7) {\n    letterGrade = \"B-\";\n  } else if (gradeAverageMax > 0.0) {\n    letterGrade = \"C+\";\n  } else if (gradeAverageMax > -0.7) {\n    letterGrade = \"C\";\n  } else if (gradeAverageMax > -1.3) {\n    letterGrade = \"C-\";\n  } else if (gradeAverageMax > -1.7) {\n    letterGrade = \"D+\";\n  } else if (gradeAverageMax > -2.3) {\n    letterGrade = \"D\";\n  } else if (gradeAverageMax > -2.7) {\n    letterGrade = \"D-\";\n  } else {\n    letterGrade = \"E\";\n  }\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(0, i) === string.substr(i, i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  0.\n  */\ncon s t startsZeroEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1 and 0.\n  */\ncon s t startsOneZeroEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1 && i % 100 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  0 and 1.\n  */\ncon s t startsZeroOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 0 && i % 100 == 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1 and 1.\n  */\ncon s t startsOneOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1 && i % 100 == 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  0 and 1.\n  */\ncon s t startsZeroOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 0 && i % 100 == 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1 and 0.\n  */\ncon s t startsOneZeroEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1 && i % 100 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  0 and 1.\n  */\ncon s t startsZeroZeroEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 0 && i % 100 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1 and 1.\n  */\ncon s t startsOneOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1 && i % 100 == 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  0 and 1.\n  */\ncon s t startsZeroOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 0 && i % 100 == 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1 and 0.\n  */\ncon s t startsOneZeroEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1 && i % 100 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  0 and 1.\n  */\ncon s t startsZeroZeroEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 0 && i % 100 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1 and 1.\n  */\ncon s t startsOneOneEnds  = (n) =>{ \n  let count = 0;\n  for (let i = 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString();\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t .\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t.\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split('');\n  let arrLen = arr.length;\n  let arrLen2 = arr.length;\n  let arrLen3 = arr.length;\n  let arrLen4 = arr.length;\n  let arrLen5 = arr.length;\n  let arrLen6 = arr.length;\n  let arrLen7 = arr.length;\n  let arrLen8 = arr.length;\n  let arrLen9 = arr.length;\n  let arrLen10 = arr.length;\n  let arrLen11 = arr.length;\n  let arrLen12 = arr.length;\n  let arrLen13 = arr.length;\n  let arrLen14 = arr.length;\n  let arrLen15 = arr.length;\n  let arrLen16 = arr.length;\n  let arrLen17 = arr.length;\n  let arrLen18 = arr.length;\n  let arrLen19 = arr.length;\n  let arrLen20 = arr.length;\n  let arrLen21 = arr.length;\n  let arrLen22 = arr.length;\n  let arrLen23 = arr.length;\n  let arrLen24 = arr.length;\n  let arrLen25 = arr.length;\n  let arrLen26 = arr.length;\n  let arrLen27 = arr.length;\n  let arrLen28 = arr.length;\n  let arrLen29 = arr.length;\n  let arrLen30 = arr.length;\n  let arrLen31 = arr.length;\n  let arrLen32 = arr.length;\n  let arrLen33 = arr.length;\n  let arrLen34 = arr.length;\n  let arrLen35 = arr.length;\n  let arrLen36 = arr.length;\n  let arrLen37 = arr.length;\n  let arrLen38 = arr.length;\n  let arrLen39 = arr.length;\n  let arrLen40 = arr.length;\n  let arrLen41 = arr.length;\n  let arrLen42 = arr.length;\n  let arrLen43 = arr.length;\n  let arrLen44 = arr.length;\n  let arrLen45 = arr.length;\n  let arrLen46 = arr.length;\n  let arrLen47 = arr.length;\n  let arrLen48 = arr.length;\n  let arrLen49 = arr.length;\n  let arrLen50 = arr.length;\n  let arrLen51 = arr.length;\n  let arrLen52 = arr.length;\n  let arrLen53 = arr.length;\n  let arrLen54 = arr.length;\n  let arrLen55 = arr.length;\n  let arrLen56 = arr.length;\n  let arrLen57 = arr.length;\n  let arrLen58 = arr.length;\n  let arrLen59 = arr.length;\n  let arrLen60 = arr.length;\n  let arrLen61 = arr.length;\n  let arrLen62 = arr.length;\n  let arrLen63 = arr.length;\n  let arrLen64 = arr.length;\n  let arrLen65 = arr.length;\n  let arrLen66 = arr.length;\n  let arrLen67 = arr.length;\n  let arrLen68 = arr.length;\n  let arrLen69 = arr.length;\n  let arrLen70 = arr.length;\n  let arrLen71 = arr.length;\n  let arrLen72 = arr.length;\n  let arrLen73 = arr.length;\n  let arrLen74 = arr.length;\n  let arrLen75 = arr.length;\n  let arrLen76 = arr.length;\n  let arrLen77 = arr.length;\n  let arrLen78 = arr.length;\n  let arrLen79 = arr.length;\n  let arrLen80 = arr.length;\n  let arrLen81 = arr.length;\n  let arrLen82 = arr.length;\n  let arrLen83 = arr.length;\n  let arrLen84 = arr.length;\n  let arrLen85 = arr.length;\n  let arrLen86 = arr.length;\n  let arrLen87 = arr.length;\n  let arrLen88 = arr.length;\n  let arrLen89 = arr.length;\n  let arrLen90 = arr.length;\n  let arrLen91 = arr.length;\n  let arrLen92 = arr.length;\n  let arrLen93 = arr.length;\n  let arrLen94 = arr.length;\n  let arrLen95 = arr.length;\n  let arrLen96 = arr.length;\n  let arrLen97 = arr.length;\n  let arrLen98 = arr.length;\n  let arrLen99 = arr.length;\n  let arrLen100 = arr.length;\n  let arrLen101 = arr.length;\n  let arrLen102 = arr.length;\n  let arrLen103 = arr.length;\n  let arrLen104 = arr.length;\n  let arrLen105 = arr.length;\n  let arrLen106 = arr.length;\n  let arrLen107 = arr.length;\n  let arrLen108 = arr.length;\n  let arrLen109 = arr.length;\n  let arrLen110 = arr.length;\n  let arrLen111 = arr.length;\n  let arrLen112 = arr.length;\n  let arrLen113 = arr.length;\n  let arrLen114 = arr.length;\n  let arrLen115 = arr.length;\n  let arrLen116 = arr.length;\n  let arrLen117 = arr.length;\n  let arrLen118 = arr.length;\n  let arrLen119 = arr.length;\n  let arrLen120 = arr.length;\n  let arrLen121 = arr.length;\n  let arrLen122 = arr.length;\n  let arrLen", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however , unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2) ...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order .\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however, unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2)...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order.\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow7 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow8 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow9 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow10 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    const rowLen = row.length;\n    for (let j = 0; j < rowLen; j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n};\n\nconst getRow11 = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  let i = 0;\n  while (i < str.length) {\n    let c = str[i];\n    let r = str[i];\n    let c2 = str[i];\n    let r2 = str[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      r = r.toUpperCase();\n    }\n    if (c2 === 'a' || c2 === 'e' || c2 === 'i' || c2 === 'o' || c2 === 'u') {\n      r2 = r2.toUpperCase();\n    }\n    result += r + r2;\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = encrypt;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax10 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax11 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax12 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax13 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax14 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax15 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax16 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax17 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax18 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax19 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\nconst rollingMax20 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1 , 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n  if(lst.length === 0) return null;\n  const head = lst[0];\n  const tail = lst.slice(1);\n  if(tail.length === 0) return head;\n  return tail[0] < head? tail[0] : head;\n}\n\nmodule.exports = nextSmallest;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0;\n  let s = S.split(/[\\.!?]/);\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"I\") {\n      n++;\n    }\n  }\n  return n;\n};\n\n// test\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two , and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 2.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors = (x) => {\n  return x % 2 === 0? x / 2 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 3.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors3 = (x) => {\n  return x % 3 === 0? x / 3 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 5.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors5 = (x) => {\n  return x % 5 === 0? x / 5 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 7.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors7 = (x) => {\n  return x % 7 === 0? x / 7 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 11.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors11 = (x) => {\n  return x % 11 === 0? x / 11 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 13.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors13 = (x) => {\n  return x % 13 === 0? x / 13 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 17.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors17 = (x) => {\n  return x % 17 === 0? x / 17 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 19.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors19 = (x) => {\n  return x % 19 === 0? x / 19 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 23.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors23 = (x) => {\n  return x % 23 === 0? x / 23 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 29.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors29 = (x) => {\n  return x % 29 === 0? x / 29 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 31.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors31 = (x) => {\n  return x % 31 === 0? x / 31 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 37.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */\nconst divisors37 = (x) => {\n  return x % 37 === 0? x / 37 : x;\n};\n\n/*\n  Create a function that takes a number and returns the number of times it is divisible by 41.\n  Examples\n  divisors(5) ➞ 2\n  divisors(10) ➞ 3\n  divisors(100) ➞ 5\n  divisors(1000) ➞ 10\n  */", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      let vowel = 'aeiou';\n      let letter2 = vowel.indexOf(letter);\n      if (letter2 > -1) {\n        letter = vowel[letter2];\n      }\n    }\n    encoded += letter;\n    i++;\n  }\n  return encoded;\n};\n\nmodule.exports = encode;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  let l = sum;\n  let u = sum;\n  let j = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > u) {\n      j = lst[i];\n      u = lst[i];\n    }\n  }\n  return j;\n};\n\nmodule.exports = skjkasdkd;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let lowerCase = keys.map((key) => key.toLowerCase());\n  let upperCase = keys.map((key) => key.toUpperCase());\n  return lowerCase.every((lower) => upperCase.includes(lower));\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) return [];\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits .\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a % 10;\n  let b_int = b % 10;\n  let a_int_sum = a_int * b_int;\n  let a_int_sum_str = a_int_sum.toString();\n  let a_int_sum_str_len = a_int_sum_str.length;\n  let a_int_sum_str_len_minus_1 = a_int_sum_str_len - 1;\n  let a_int_sum_str_minus_1 = a_int_sum_str.substring(0, a_int_sum_str_len_minus_1);\n  let a_int_sum_str_minus_1_plus_b_int = a_int_sum_str_minus_1 + b_int;\n  let a_int_sum_str_minus_1_plus_b_int_str = a_int_sum_str_minus_1_plus_b_int.toString();\n  let a_int_sum_str_minus_1_plus_b_int_str_len = a_int_sum_str_minus_1_plus_b_int_str.length;\n  let a_int_sum_str_minus_1_plus_b_int_str_len_minus_1 = a_int_sum_str_minus_1_plus_b_int_str_len - 1;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1 = a_int_sum_str_minus_1_plus_b_int_str.substring(0, a_int_sum_str_minus_1_plus_b_int_str_len_minus_1);\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int = a_int_sum_str_minus_1_plus_b_int_str_minus_1 + a_int;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int.toString();\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_len = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_len;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_len_minus_1 = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_len - 1;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1 = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1.toString();\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int.toString();\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len_minus_1 = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len - 1;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len_minus_1 = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_len - 1;\n  let a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int_str_minus_1_plus_a_int = a_int_sum_str_minus_1_plus_b_int_str_minus_1_plus_a_int_str_minus_1_plus", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5] && s[i] === s[i + 6]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5] && s[i] === s[i + 6] && s[i] === s[i + 7]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5] && s[i] === s[i + 6] && s[i] === s[i + 7] && s[i] === s[i + 8]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5] && s[i] === s[i + 6] && s[i] === s[i + 7] && s[i] === s[i + 8] && s[i] === s[i + 9]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper10 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5] && s[i] === s[i + 6] && s[i] === s[i + 7] && s[i] === s[i + 8] && s[i] === s[i + 9] && s[i] === s[i + 10]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper11 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2] && s[i] === s[i + 3] && s[i] === s[i + 4] && s[i] === s[i + 5] && s[i] === s[i + 6] && s[i] === s[i + 7] && s[i] === s[i + 8] && s[i] === s[i + 9] && s[i] === s[i + 10] && s[i] === s[i + 11]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpper12 = (s) => {\n  let count = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro .\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let number = parseFloat(value);\n  let rounded = Math.round(number);\n  let diff = Math.abs(number - rounded);\n  if (diff < 0.5) {\n    return rounded;\n  }\n  return rounded + 1;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
